window['cb_其他']({"outline":{"children":[{"level":1,"name":"easy-mock 接口使用","children":[{"level":2,"name":"webpack 代理 devServer.proxy 无法使用 easy-mock 问题解决","children":[]}]},{"level":1,"name":"glob 路径匹配","children":[{"level":2,"name":"glob 介绍","children":[]},{"level":2,"name":"监听所有目录，所有文件","children":[]}]},{"level":1,"name":"gzip ，服务端可配置压缩","children":[]},{"level":1,"name":"浏览器 url 打开桌面应用 - win系统","children":[]},{"level":1,"name":"浏览器缓存","children":[]},{"level":1,"name":"浏览器跨域解决","children":[{"level":2,"name":"jsonp","children":[]},{"level":2,"name":"domain","children":[]},{"level":2,"name":"h5 ajax 跨域，白名单机制","children":[{"level":3,"name":"服务端设置例子","children":[]},{"level":3,"name":"多个域名需特殊处理","children":[]},{"level":3,"name":".net","children":[]}]},{"level":2,"name":"postMessage","children":[]}]},{"level":1,"name":"移动端兼容问题解决","children":[{"level":2,"name":"ios 移动端 click 300ms 延迟解决","children":[]},{"level":2,"name":"ios 移动端 css 伪类 :active 无效","children":[]},{"level":2,"name":"android webview 初始body 为0 问题","children":[]},{"level":2,"name":"android webview 界面残留，界面闪烁","children":[]},{"level":2,"name":"打电话","children":[]},{"level":2,"name":"qq 7.2 内置浏览器，focus 不弹键盘(模拟click)","children":[]},{"level":2,"name":"部分 Android 机 window.innerWidth 延迟","children":[]}]}],"name":"其他"},"content":"<section><h1 id='[\"easy-mock 接口使用\"]' data-index=0>easy-mock 接口使用</h1><section><h2 id='[\"easy-mock 接口使用\",\"webpack 代理 devServer.proxy 无法使用 easy-mock 问题解决\"]' data-index=1>webpack 代理 devServer.proxy 无法使用 easy-mock 问题解决</h2><p>手动增加可访问的 cookie、host 请求头信息</p><pre><code class=language-js>devServer: {\n  <span class=hljs-attr>contentBase</span>: path.resolve(__dirname, <span class=hljs-string>'dist'</span>),\n  <span class=hljs-attr>host</span>: <span class=hljs-string>'192.168.1.222'</span>,\n  <span class=hljs-attr>port</span>: <span class=hljs-number>3001</span>,\n  <span class=hljs-attr>inline</span>: <span class=hljs-literal>true</span>,\n  <span class=hljs-attr>hot</span>: <span class=hljs-literal>true</span>,\n  <span class=hljs-attr>hotOnly</span>: <span class=hljs-literal>false</span>,\n  <span class=hljs-attr>proxy</span>: {\n    <span class=hljs-string>\"/Publisher\"</span>: {\n      <span class=hljs-attr>target</span>: <span class=hljs-string>\"http://www.easy-mock.com/mock/59c46dbfe0dc663341b4084a/example\"</span>,\n\n      <span class=hljs-attr>onProxyRes</span>: <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>proxyRes, req, res</span>)</span>{\n      },\n      <span class=hljs-attr>onProxyReq</span>: <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>proxyReq, req, res</span>)</span>{\n        proxyReq.setHeader(<span class=hljs-string>'Cookie'</span>,<span class=hljs-string>'Cookie:easy-mock_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1OWM0NmRiZmUwZGM2NjMzNDFiNDA4NTIiLCJleHAiOjE1MDcyNTQ5NzUsImlkIjoiNTljNDZkYmZlMGRjNjYzMzQxYjQwODQ5IiwiaWF0IjoxNTA2MDQ1Mzc1fQ.45-Ow-W-lcq1oxIn-japLDd95lSAZMnnBuaCDhTZULA'</span>)\n        proxyReq.setHeader(<span class=hljs-string>'Host'</span>,<span class=hljs-string>'www.easy-mock.com'</span>)\n      }\n    }\n  }\n}</code></pre></section></section><section><h1 id='[\"glob 路径匹配\"]' data-index=2>glob 路径匹配</h1><section><h2 id='[\"glob 路径匹配\",\"glob 介绍\"]' data-index=3>glob 介绍</h2><p><a href=https://github.com/isaacs/node-glob>英文</a></p><p><a href=http://www.jianshu.com/p/ce7cf53274bb>中文</a></p></section><section><h2 id='[\"glob 路径匹配\",\"监听所有目录，所有文件\"]' data-index=4>监听所有目录，所有文件</h2><p>&#39;./src/**&#39;</p></section></section><section><h1 id='[\"gzip ，服务端可配置压缩\"]' data-index=5>gzip ，服务端可配置压缩</h1><p><a href=https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/ >https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/</a></p><p>浏览器会自动解压缩</p><p>js，css 一般被压缩。html 文件不压缩</p></section><section><h1 id='[\"浏览器 url 打开桌面应用 - win系统\"]' data-index=6>浏览器 url 打开桌面应用 - win系统</h1><p>注册表文件 - 教学易.reg</p><pre><code><span class=hljs-selector-tag>Windows</span> <span class=hljs-selector-tag>Registry</span> <span class=hljs-selector-tag>Editor</span> <span class=hljs-selector-tag>Version</span> 5<span class=hljs-selector-class>.00</span> \n<span class=hljs-selector-attr>[HKEY_CLASSES_ROOT\\eclassedu]</span>\n@=\"\"\n<span class=hljs-string>\"URL Protocol\"</span>=<span class=hljs-string>\"\"</span>\n\n[HKEY_CLASSES_ROOT\\eclassedu\\DefaultIcon]\n@=<span class=hljs-string>\"\"</span>\n\n[HKEY_CLASSES_ROOT\\eclassedu\\Shell]\n\n[HKEY_CLASSES_ROOT\\eclassedu\\Shell\\open]\n\n[HKEY_CLASSES_ROOT\\eclassedu\\Shell\\open\\command]\n@=<span class=hljs-string>\"\\\"D:\\\\Program Files (x86)\\\\教学易\\\\Eclassedu.exe\\\"\"</span></code></pre></section><section><h1 id='[\"浏览器缓存\"]' data-index=7>浏览器缓存</h1><p>Js css文件即使更改，也将优先使用缓存。</p><p>发现Html文件每次请求都没使用缓存</p></section><section><h1 id='[\"浏览器跨域解决\"]' data-index=8>浏览器跨域解决</h1><section><h2 id='[\"浏览器跨域解决\",\"jsonp\"]' data-index=9>jsonp</h2><p>原理：通过 scrpt 标签执行js</p></section><section><h2 id='[\"浏览器跨域解决\",\"domain\"]' data-index=10>domain</h2><p>仅限于同一主域名情况</p><p>比如 one.web.com、two.web.com，互相交互的页面设置为：<code>document.domain = &#39;web.com&#39;。</code> 便能跨域通讯，包括 ajax、iframe之间</p></section><section><h2 id='[\"浏览器跨域解决\",\"h5 ajax 跨域，白名单机制\"]' data-index=11>h5 ajax 跨域，白名单机制</h2><section><h3 id='[\"浏览器跨域解决\",\"h5 ajax 跨域，白名单机制\",\"服务端设置例子\"]' data-index=12>服务端设置例子</h3><p>PHP</p><pre><code class=language-php>&lt;?php header(<span class=hljs-string>\"Access-Control-Allow-Origin:*\"</span>); <span class=hljs-comment>// 所有</span>\n\n&lt;?php header(<span class=hljs-string>\"Access-Control-Allow-Origin:https://www.google.com\"</span>); <span class=hljs-comment>// 单个</span></code></pre></section><section><h3 id='[\"浏览器跨域解决\",\"h5 ajax 跨域，白名单机制\",\"多个域名需特殊处理\"]' data-index=13>多个域名需特殊处理</h3><p>语法不支持多个，所以需特殊处理</p><pre><code>app.all(<span class=hljs-string>'*'</span>, <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>req, res, next</span>) </span>{\n    <span class=hljs-keyword>if</span>( req.headers.origin == <span class=hljs-string>'https://www.google.com'</span> || req.headers.origin == <span class=hljs-string>'https://www.baidu.com'</span> ){\n        res.header(<span class=hljs-string>\"Access-Control-Allow-Origin\"</span>, req.headers.origin);\n        res.header(<span class=hljs-string>'Access-Control-Allow-Methods'</span>, <span class=hljs-string>'POST, GET'</span>);\n        res.header(<span class=hljs-string>'Access-Control-Allow-Headers'</span>, <span class=hljs-string>'X-Requested-With'</span>);\n        res.header(<span class=hljs-string>'Access-Control-Allow-Headers'</span>, <span class=hljs-string>'Content-Type'</span>);\n    }\n    next();\n});\n</code></pre></section><section><h3 id='[\"浏览器跨域解决\",\"h5 ajax 跨域，白名单机制\",\".net\"]' data-index=14>.net</h3><p>1、直接在iis中的HTTP响应标头中增加</p><p>2、或者web.config中，见下</p><pre><code class=language-xml><span class=hljs-tag>&lt;<span class=hljs-name>system.webServer</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>httpProtocol</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>customHeaders</span>&gt;</span>\n            <span class=hljs-tag>&lt;<span class=hljs-name>add</span> <span class=hljs-attr>name</span>=<span class=hljs-string>\"Access-Control-Allow-Origin\"</span> <span class=hljs-attr>value</span>=<span class=hljs-string>\"*\"</span> /&gt;</span>\n        <span class=hljs-tag>&lt;/<span class=hljs-name>customHeaders</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>httpProtocol</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>system.webServer</span>&gt;</span></code></pre><p>3 、</p><pre><code><span class=hljs-selector-tag>HttpContext</span><span class=hljs-selector-class>.Current</span><span class=hljs-selector-class>.Response</span><span class=hljs-selector-class>.AddHeader</span>(\"<span class=hljs-selector-tag>Access-Control-Allow-Origin</span>\", \"*\");</code></pre></section></section><section><h2 id='[\"浏览器跨域解决\",\"postMessage\"]' data-index=15>postMessage</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage>https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p><p>ie8+ 支持<br>ie67 使用Flash LocalConnection<br>ie8、ie9 需使用 XDomainRequest 创建ajax对象才能使用 postMessage</p></section></section><section><h1 id='[\"移动端兼容问题解决\"]' data-index=16>移动端兼容问题解决</h1><section><h2 id='[\"移动端兼容问题解决\",\"ios 移动端 click 300ms 延迟解决\"]' data-index=17>ios 移动端 click 300ms 延迟解决</h2><p>文本框点击获焦也会出现延迟</p><p><strong>解决：</strong></p><p>head 中添加如下代码即可</p><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>name</span>=<span class=hljs-string>\"viewport\"</span> <span class=hljs-attr>content</span>=<span class=hljs-string>\"width=device-width,initial-scale=1,user-scalable=no\"</span>/&gt;</span></code></pre><p>强调，必须带有<code>width=device-width</code><br>此方式也会禁止双击放大。是双击，非双指</p><p>当前测试系统为ios10，由于条件问题，其他低版本系统未测</p><p>qq 浏览器依旧有延迟，微信浏览器没问题</p></section><section><h2 id='[\"移动端兼容问题解决\",\"ios 移动端 css 伪类 :active 无效\"]' data-index=18>ios 移动端 css 伪类 :active 无效</h2><p>解决：</p><pre><code class=language-js><span class=hljs-keyword>if</span>(isMobileIOS){\n  <span class=hljs-built_in>document</span>.body.ontouchstart=<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{ };\n}</code></pre></section><section><h2 id='[\"移动端兼容问题解决\",\"android webview 初始body 为0 问题\"]' data-index=19>android webview 初始body 为0 问题</h2></section><section><h2 id='[\"移动端兼容问题解决\",\"android webview 界面残留，界面闪烁\"]' data-index=20>android webview 界面残留，界面闪烁</h2><p>关闭硬件加速</p></section><section><h2 id='[\"移动端兼容问题解决\",\"打电话\"]' data-index=21>打电话</h2><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>a</span> <span class=hljs-attr>href</span>=<span class=hljs-string>\"tel:13670026449\"</span>&gt;</span>客服热线<span class=hljs-tag>&lt;/<span class=hljs-name>a</span>&gt;</span></code></pre><p>android 支持。ios 微信网页也支持，其他未测</p><p><a href=http://www.cnblogs.com/softwarelanguagebs/p/5490837.html>Android网页中tel等协议参考</a></p><p><a href=http://lucaslz.com/2016/08/24/tips/callphone-sendmessage-composeemail/ >ios 参考</a></p></section><section><h2 id='[\"移动端兼容问题解决\",\"qq 7.2 内置浏览器，focus 不弹键盘(模拟click)\"]' data-index=22>qq 7.2 内置浏览器，focus 不弹键盘(模拟click)</h2><p>使用内置 click，没有此问题，但会延迟 300ms</p><p>qq 浏览器，初始执行 focus 获焦情况(此时不会弹键盘，移动端都不会)，再次通过点击事件(非输入框)然后执行 focus，依然不会弹键盘，其他浏览器没有问题。</p><p>解决：先 blur 失焦，后获 focus 焦点。终极解决办法，自己写键盘</p></section><section><h2 id='[\"移动端兼容问题解决\",\"部分 Android 机 window.innerWidth 延迟\"]' data-index=23>部分 Android 机 window.innerWidth 延迟</h2><p><strong>问题：</strong><br>实现 rem 适配，初始需获取 window.innerWidth 宽度偏大。猜测是 meta name=&quot;viewport&quot; 延迟生效了</p><p><strong>解决：</strong> 使用 <code>window.screen.width</code> 屏幕宽度代替</p></section></section>"})
window['cb_nodejs']({"outline":{"children":[{"index":0,"level":1,"name":"require 模块","children":[{"index":1,"level":2,"name":"<strong>模块定义\\导出</strong>","children":[]},{"index":2,"level":2,"name":"require自动寻找特性","children":[]}]},{"index":3,"level":1,"name":"获取本机 IP","children":[]},{"index":4,"level":1,"name":"node 实用开源模块","children":[{"index":5,"level":2,"name":"node-portfinder 自动获取可用端口","children":[]},{"index":6,"level":2,"name":"node-ip 可获取本机ip地址","children":[]},{"index":7,"level":2,"name":"cli 参数获取","children":[]},{"index":8,"level":2,"name":"终端相关","children":[{"index":9,"level":3,"name":"加载指示图标动画","children":[]},{"index":10,"level":3,"name":"输出文本样式颜色控制","children":[]}]},{"index":11,"level":2,"name":"node-notifier","children":[]},{"index":12,"level":2,"name":"opn 打开其他程序","children":[]}]},{"index":13,"level":1,"name":"path","children":[{"index":14,"level":2,"name":"路径信息","children":[]}]},{"index":15,"level":1,"name":"文件系统 - fs","children":[{"index":16,"level":2,"name":"文件列表(包括文件夹)","children":[{"index":17,"level":3,"name":"原生 readdir：只能当前目录，不寻找下级","children":[]},{"index":18,"level":3,"name":"读取指定目录下的所有文件，支持过滤","children":[]}]},{"index":19,"level":2,"name":"是不是目录","children":[]},{"index":20,"level":2,"name":"读取文件 fs.readFile","children":[]},{"index":21,"level":2,"name":"判断[文件/目录]是否存在","children":[]},{"index":22,"level":2,"name":"改名(文件名，目录名)","children":[]},{"index":23,"level":2,"name":"删除","children":[{"index":24,"level":3,"name":"标准删","children":[]},{"index":25,"level":3,"name":"递归删：第三方扩展","children":[]}]},{"index":26,"level":2,"name":"创建目录","children":[]},{"index":27,"level":2,"name":"写文件","children":[]},{"index":28,"level":2,"name":"copy","children":[]}]}],"name":"nodejs"},"content":"<section><h1 id=\"require 模块\" data-index=0>require 模块</h1><section><h2 id=模块定义\\导出 data-index=1><strong>模块定义\\导出</strong></h2><p>导出1：直接导出模块</p><pre><code class=language-js><span class=hljs-comment>// math.js</span>\n<span class=hljs-keyword>var</span> math={\n  <span class=hljs-attr>add</span>:<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{\n    <span class=hljs-keyword>var</span> sum = <span class=hljs-number>0</span>,\n      i = <span class=hljs-number>0</span>,\n      args = <span class=hljs-built_in>arguments</span>,\n      l = args.length;\n    <span class=hljs-keyword>while</span> (i &lt; l) {\n      sum += args[i++];\n    }\n    <span class=hljs-keyword>return</span> sum;\n  }\n};\n<span class=hljs-built_in>module</span>.exports=math;</code></pre><p>导出2：自定义导出</p><pre><code class=language-js><span class=hljs-comment>// math.js</span>\nexports.add = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>var</span> sum = <span class=hljs-number>0</span>,\n    i = <span class=hljs-number>0</span>,\n    args = <span class=hljs-built_in>arguments</span>,\n    l = args.length;\n  <span class=hljs-keyword>while</span> (i &lt; l) {\n    sum += args[i++];\n  }\n  <span class=hljs-keyword>return</span> sum;\n};</code></pre><p><strong>使用：</strong></p><p>上面两个例子的效果一致</p><pre><code class=language-js><span class=hljs-comment>// program.js</span>\n<span class=hljs-keyword>var</span> math = <span class=hljs-built_in>require</span>(<span class=hljs-string>'math'</span>);\nmath.add(val, <span class=hljs-number>1</span>);</code></pre></section><section><h2 id=require自动寻找特性 data-index=2>require自动寻找特性</h2><p>不指明路径的直接模块调用，比如 require(&#39;gulp&#39;)，将自动在 node_modules中寻找。</p><p>目录级别不影响。即可以是node_modules同级，也可以是某子级</p></section></section><section><h1 id=\"获取本机 IP\" data-index=3>获取本机 IP</h1><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getIPAdress</span>(<span class=hljs-params></span>)</span>{  \n  <span class=hljs-keyword>var</span> interfaces = <span class=hljs-built_in>require</span>(<span class=hljs-string>'os'</span>).networkInterfaces();  \n  <span class=hljs-keyword>for</span>(<span class=hljs-keyword>var</span> devName <span class=hljs-keyword>in</span> interfaces){  \n    <span class=hljs-keyword>var</span> iface = interfaces[devName];  \n    <span class=hljs-keyword>for</span>(<span class=hljs-keyword>var</span> i=<span class=hljs-number>0</span>;i&lt;iface.length;i++){  \n      <span class=hljs-keyword>var</span> alias = iface[i];  \n      <span class=hljs-keyword>if</span>(alias.family === <span class=hljs-string>'IPv4'</span> &amp;&amp; alias.address !== <span class=hljs-string>'127.0.0.1'</span> &amp;&amp; !alias.internal){  \n        <span class=hljs-keyword>return</span> alias.address;  \n      }  \n    }  \n  }  \n}</code></pre></section><section><h1 id=\"node 实用开源模块\" data-index=4>node 实用开源模块</h1><section><h2 id=\"node-portfinder 自动获取可用端口\" data-index=5>node-portfinder 自动获取可用端口</h2><p><a href=https://github.com/indexzero/node-portfinder>node-portfinder</a></p></section><section><h2 id=\"node-ip 可获取本机ip地址\" data-index=6>node-ip 可获取本机ip地址</h2><p><a href=https://github.com/indutny/node-ip>https://github.com/indutny/node-ip</a></p><pre><code class=language-js>ip.address() <span class=hljs-comment>// 可局域网访问的本机ip</span></code></pre></section><section><h2 id=\"cli 参数获取\" data-index=7>cli 参数获取</h2><p><a href=https://github.com/yargs/yargs>yargs</a></p></section><section><h2 id=终端相关 data-index=8>终端相关</h2><section><h3 id=加载指示图标动画 data-index=9>加载指示图标动画</h3><p><a href=https://github.com/sindresorhus/ora>https://github.com/sindresorhus/ora</a></p></section><section><h3 id=输出文本样式颜色控制 data-index=10>输出文本样式颜色控制</h3><p><a href=https://github.com/chalk/chalk>https://github.com/chalk/chalk</a></p></section></section><section><h2 id=node-notifier data-index=11>node-notifier</h2><p>似乎可以控制 vscode 弹消息框</p></section><section><h2 id=\"opn 打开其他程序\" data-index=12>opn 打开其他程序</h2><pre><code class=language-js><span class=hljs-keyword>const</span> opn = <span class=hljs-built_in>require</span>(<span class=hljs-string>'opn'</span>)\nopn(<span class=hljs-string>`http://<span class=hljs-subst>${host}</span>:<span class=hljs-subst>${port}</span>`</span>, {<span class=hljs-attr>app</span>: [<span class=hljs-string>'chrome'</span>]})</code></pre></section></section><section><h1 id=path data-index=13>path</h1><section><h2 id=路径信息 data-index=14>路径信息</h2><pre><code class=language-js><span class=hljs-keyword>let</span> info = path.parse(<span class=hljs-string>'./dir/index.js'</span>)\n\ninfo.ext <span class=hljs-comment>// 扩展名，如果是目录，则为空字符串</span>\n</code></pre></section></section><section><h1 id=\"文件系统 - fs\" data-index=15>文件系统 - fs</h1><section><h2 id=文件列表(包括文件夹) data-index=16>文件列表(包括文件夹)</h2><section><h3 id=\"原生 readdir：只能当前目录，不寻找下级\" data-index=17>原生 readdir：只能当前目录，不寻找下级</h3><pre><code class=language-js><span class=hljs-keyword>let</span> dirList = fs.readdirSync(<span class=hljs-string>'./dir'</span>)\n<span class=hljs-comment>// 返回值示例：</span>\n<span class=hljs-comment>// [\".DS_Store\",\"Update.exe\",\"version\",\"views_resources_200_percent.pak\",\"xinput1_3.dll\"]</span></code></pre></section><section><h3 id=读取指定目录下的所有文件，支持过滤 data-index=18>读取指定目录下的所有文件，支持过滤</h3><p>使用 <a href=https://github.com/jergason/recursive-readdir>recursive-readdir</a>，但不会列出文件夹</p><p>需列出文件夹使用：<a href=https://github.com/bigstickcarpet/readdir-enhanced>readdir-enhanced</a></p></section></section><section><h2 id=是不是目录 data-index=19>是不是目录</h2><p>fs.statSync(path).isDirectory()</p></section><section><h2 id=\"读取文件 fs.readFile\" data-index=20>读取文件 fs.readFile</h2><p>读取不存在文件会报错</p><pre><code class=language-js>fs.readFile(file[, options], callback)\nfs.readFileSync(file[, options])\n\n<span class=hljs-comment>// 默认获取二进制数据。参数设置为utf8将获取文本数据</span>\nfs.readFile(<span class=hljs-string>'note_data/index.html'</span>, <span class=hljs-string>'utf8'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err, data</span>) </span>{\n    <span class=hljs-keyword>if</span> (err) {\n      <span class=hljs-built_in>console</span>.log(err)\n      <span class=hljs-keyword>return</span>\n    }\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>arguments</span>);\n});\n</code></pre></section><section><h2 id=判断[文件/目录]是否存在 data-index=21>判断[文件/目录]是否存在</h2><p><code>fs.exists(path)</code> <strong>nodejs 9.0弃用</strong></p><p>对应的同步方法 <code>fs.existsSync(path)</code> ，这个还可以用</p></section><section><h2 id=改名(文件名，目录名) data-index=22>改名(文件名，目录名)</h2><pre><code class=language-js><span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.rename</span>(<span class=hljs-selector-tag>oldPath</span>, <span class=hljs-selector-tag>newPath</span>, <span class=hljs-selector-tag>callback</span>)\n<span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.renameSync</span>(<span class=hljs-selector-tag>oldPath</span>, <span class=hljs-selector-tag>newPath</span>)</code></pre><p>oldPath, newPath必须相同级数，可以完全一样，只能修改末级</p></section><section><h2 id=删除 data-index=23>删除</h2><section><h3 id=标准删 data-index=24>标准删</h3><p>只能删除文件</p><pre><code class=language-js><span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.unlink</span>(<span class=hljs-selector-tag>path</span>, <span class=hljs-selector-tag>callback</span>)\n<span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.unlinkSync</span>(<span class=hljs-selector-tag>path</span>)</code></pre><pre><code class=language-js>fs.unlink(<span class=hljs-string>'/tmp/hello.txt'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n    <span class=hljs-keyword>if</span> (err) <span class=hljs-keyword>throw</span> err;\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'successfully deleted /tmp/hello'</span>);\n});\n</code></pre><p>只能删除空目录</p><pre><code><span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.rmdir</span>(<span class=hljs-selector-tag>path</span>, <span class=hljs-selector-tag>callback</span>)</code></pre></section><section><h3 id=递归删：第三方扩展 data-index=25>递归删：第三方扩展</h3><p>删除指定目录下的所有文件和目录</p><p>使用 <a href=https://github.com/jprichardson/node-fs-extra>fs-extra</a> ，或者使用 <a href=https://github.com/isaacs/rimraf>rimraf</a></p><p>fs-extra 的 <a href=https://github.com/jprichardson/node-fs-extra/blob/master/docs/remove-sync.md>remove-sync</a> 示例</p><pre><code class=language-js><span class=hljs-keyword>const</span> fs = <span class=hljs-built_in>require</span>(<span class=hljs-string>'fs-extra'</span>)\n\n<span class=hljs-comment>// remove file</span>\nfs.removeSync(<span class=hljs-string>'/tmp/myfile'</span>)\n\nfs.removeSync(<span class=hljs-string>'/home/jprichardson'</span>) <span class=hljs-comment>// I just deleted my entire HOME directory.</span></code></pre></section></section><section><h2 id=创建目录 data-index=26>创建目录</h2><p>fs.mkdir(path[, mode], callback)<br>fs.mkdirSync(path[, mode])</p><p>只能在已存在的目录下创建，越级创建将报错</p></section><section><h2 id=写文件 data-index=27>写文件</h2><ul><li>将内容写入文件。</li><li>有文件将直接替换现有内容，没有将创建新的并写入。</li><li>路径不存在将无法写入</li></ul><p>语法</p><pre><code class=language-js><span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.writeFile</span>(<span class=hljs-selector-tag>file</span>, <span class=hljs-selector-tag>data</span><span class=hljs-selector-attr>[, options]</span>, <span class=hljs-selector-tag>callback</span>)\n<span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.writeFileSync</span>(<span class=hljs-selector-tag>file</span>, <span class=hljs-selector-tag>data</span><span class=hljs-selector-attr>[, options]</span>)</code></pre><p>例子</p><pre><code class=language-js>fs.writeFile(<span class=hljs-string>'note_data/hello.txt'</span>, <span class=hljs-string>'hello'</span>,<span class=hljs-string>'utf8'</span>, <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-keyword>if</span>(err) <span class=hljs-keyword>throw</span> err;\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'File write completed'</span>);\n});</code></pre><p>或直接使用 fs-extra 的 <a href=hhttps://github.com/jprichardson/node-fs-extra/blob/master/docs/outputFile-sync.md>outputFileSync</a>、<a href=https://github.com/jprichardson/node-fs-extra/blob/master/docs/outputJson-sync.md>outputJsonSync</a>，路径不存在也能进行写入</p><pre><code class=language-js>fs.outputJsonSync(path.resolve(outputPath, <span class=hljs-string>'data-demo-list.json'</span>), worksList)</code></pre></section><section><h2 id=copy data-index=28>copy</h2><p>使用 <a href=https://github.com/jprichardson/node-fs-extra>fs-extra</a></p><p><a href=https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md>copy 文档</a></p><p><a href=https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy-sync.md>copySync 文档</a></p><p>copySync 示例</p><pre><code class=language-js><span class=hljs-keyword>const</span> fs = <span class=hljs-built_in>require</span>(<span class=hljs-string>'fs-extra'</span>)\n\n<span class=hljs-comment>// copy file</span>\nfs.copySync(<span class=hljs-string>'/tmp/myfile'</span>, <span class=hljs-string>'/tmp/mynewfile'</span>)\n\n<span class=hljs-comment>// copy directory, even if it has subdirectories or files</span>\nfs.copySync(<span class=hljs-string>'/tmp/mydir'</span>, <span class=hljs-string>'/tmp/mynewdir'</span>)\n\n<span class=hljs-comment>// 支持过滤</span>\n<span class=hljs-keyword>const</span> filterFunc = <span class=hljs-function>(<span class=hljs-params>src, dest</span>) =&gt;</span> {\n  <span class=hljs-comment>// your logic here</span>\n  <span class=hljs-comment>// it will be copied if return true</span>\n}\nfs.copySync(<span class=hljs-string>'/tmp/mydir'</span>, <span class=hljs-string>'/tmp/mynewdir'</span>, { <span class=hljs-attr>filter</span>: filterFunc })</code></pre></section></section>"})
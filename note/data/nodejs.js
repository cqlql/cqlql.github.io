window['cb_nodejs']({"outline":[{"id":"1801979875","level":1,"name":"express","children":[{"id":"2991593665","level":2,"name":"站点","children":[]},{"id":"1295217858","level":2,"name":"安装","children":[]},{"id":"816219233","level":2,"name":"静态资源","children":[]},{"id":"2576554864","level":2,"name":"get","children":[]},{"id":"3301539435","level":2,"name":"post","children":[]},{"id":"1817573536","level":2,"name":"文件上传","children":[]},{"id":"2971666723","level":2,"name":"路由 post 参数获取","children":[]},{"id":"2525900772","level":2,"name":"运行","children":[]}]},{"id":"1206553309","level":1,"name":"http","children":[{"id":"4112047441","level":2,"name":"读取文本","children":[]},{"id":"3295582176","level":2,"name":"下载文件","children":[]}]},{"id":"3722397227","level":1,"name":"mysql","children":[{"id":"567842911","level":2,"name":"mysql 包","children":[]},{"id":"2957468624","level":2,"name":"使用","children":[]}]},{"id":"1889493904","level":1,"name":"node 实用模块","children":[{"id":"610741175","level":2,"name":"node-portfinder 自动获取可用端口","children":[]},{"id":"3876782076","level":2,"name":"获取本机 ip 地址","children":[{"id":"404555819","level":3,"name":"1. node-ip","children":[]},{"id":"2681764827","level":3,"name":"2. address","children":[]},{"id":"3622104768","level":3,"name":"3. 自己实现","children":[]}]},{"id":"2857945847","level":2,"name":"cli 参数获取","children":[]},{"id":"3644789084","level":2,"name":"终端相关","children":[{"id":"3344554238","level":3,"name":"加载指示图标动画","children":[]},{"id":"3540066454","level":3,"name":"输出文本样式颜色控制","children":[]}]},{"id":"2369951459","level":2,"name":"node-notifier","children":[]},{"id":"3611846647","level":2,"name":"opn 打开其他程序","children":[]},{"id":"812696142","level":2,"name":"chokidar","children":[]}]},{"id":"1496255637","level":1,"name":"path","children":[{"id":"1374665287","level":2,"name":"路径信息","children":[]}]},{"id":"1816412500","level":1,"name":"require 模块","children":[{"id":"1422471004","level":2,"name":"模块定义\\导出","children":[]},{"id":"2338591324","level":2,"name":"require 自动寻找特性","children":[]}]},{"id":"1311247670","level":1,"name":"window 后台运行","children":[]},{"id":"177651550","level":1,"name":"包管理器 npm","children":[{"id":"3143296376","level":2,"name":"常用命令","children":[{"id":"1133885073","level":3,"name":"更新 npm","children":[]},{"id":"3967076939","level":3,"name":"更新包","children":[]},{"id":"1174797471","level":3,"name":"删除包","children":[]},{"id":"3069727892","level":3,"name":"查看过时本地包","children":[]},{"id":"2427446814","level":3,"name":"查看本地包列表","children":[]}]},{"id":"2423391880","level":2,"name":"npm 项目路径最好不要包含$符号","children":[]},{"id":"1378642205","level":2,"name":"通过 npm 执行 package.json 准备的命令","children":[]},{"id":"3318785279","level":2,"name":"下载加速","children":[{"id":"3778372682","level":3,"name":"使用 mirror-config-china [推荐]","children":[]},{"id":"3235156808","level":3,"name":"切换仓库","children":[]},{"id":"792444157","level":3,"name":"或者安装 cnpm 命令","children":[]}]},{"id":"4167782706","level":2,"name":"发布包","children":[{"id":"3336238822","level":3,"name":"更新发布包","children":[]}]},{"id":"2232686576","level":2,"name":"package.json","children":[{"id":"406682522","level":3,"name":"命令创建 package.json 文件","children":[]},{"id":"548923993","level":3,"name":"main 字段","children":[]},{"id":"4194497221","level":3,"name":"scripts 字段：脚本执行","children":[]}]},{"id":"3272867641","level":2,"name":"私有仓库部署","children":[]}]},{"id":"4147773594","level":1,"name":"包管理器 yarn","children":[{"id":"2466181453","level":2,"name":"更新所有包","children":[]}]},{"id":"4064624804","level":1,"name":"文件系统 - fs","children":[{"id":"1989007335","level":2,"name":"文件列表(包括文件夹)","children":[{"id":"1196630839","level":3,"name":"原生 readdir：只能当前目录，不寻找下级","children":[]},{"id":"2447853764","level":3,"name":"读取指定目录下的所有文件，支持过滤","children":[]}]},{"id":"3825832485","level":2,"name":"判断是不是[文件/目录]","children":[]},{"id":"1369100078","level":2,"name":"判断[文件/目录]是否存在 - fs.access(path[, mode], callback)","children":[]},{"id":"4249150673","level":2,"name":"判断[文件/目录]是否存在 - fs.exists(弃用)","children":[]},{"id":"770175285","level":2,"name":"读取文件 fs.readFile","children":[]},{"id":"1794910194","level":2,"name":"改名(文件名，目录名)","children":[]},{"id":"2972818997","level":2,"name":"删除","children":[{"id":"3809456202","level":3,"name":"标准删","children":[]},{"id":"557323442","level":3,"name":"递归删：第三方扩展","children":[]}]},{"id":"1049069443","level":2,"name":"创建目录","children":[]},{"id":"470009886","level":2,"name":"写/创建 文件","children":[]},{"id":"3017918594","level":2,"name":"copy","children":[]},{"id":"3255735694","level":2,"name":"应用","children":[{"id":"3923899051","level":3,"name":"创建一个空白的二进制文件","children":[]}]}]},{"id":"488639577","level":1,"name":"服务端部署","children":[{"id":"4075384772","level":2,"name":"node 服务启动框架","children":[{"id":"3962105857","level":3,"name":"<a href=\"https://github.com/Unitech/pm2\">pm2 进程管理工具</a> - 生产环境","children":[{"id":"1920237406","level":4,"name":"使用配置文件启动","children":[]}]},{"id":"2337010935","level":3,"name":"nodemon - 开发环境","children":[]},{"id":"1427617828","level":3,"name":"其他启动框架","children":[]}]}]}],"content":"<section><h1 id=\"1801979875\">express</h1><section><h2 id=\"2991593665\">站点</h2><p><a href=\"https://github.com/expressjs/expressjs.com\">github 仓库</a></p>\n</section><section><h2 id=\"1295217858\">安装</h2><pre><code><span class=\"hljs-attribute\">npm</span> install express</code></pre></section><section><h2 id=\"816219233\">静态资源</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)\n<span class=\"hljs-keyword\">var</span> app = express()\napp.use(<span class=\"hljs-string\">'/Content'</span>, express.static(path.resolve(__dirname, <span class=\"hljs-string\">'public'</span>)) <span class=\"hljs-comment\">// 静态资源</span></code></pre>\n</section><section><h2 id=\"2576554864\">get</h2><pre><code class=\"language-js\">app.get(<span class=\"hljs-string\">'/get'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n  res.send({\n    <span class=\"hljs-attr\">data</span>: {},\n    <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">1</span>,\n  })\n})</code></pre>\n</section><section><h2 id=\"3301539435\">post</h2><pre><code class=\"language-js\"></code></pre>\n</section><section><h2 id=\"1817573536\">文件上传</h2><p><a href=\"https://www.npmjs.com/package/multer\">multer 文档</a></p>\n<p>此处为单文件上传，一次性多次文件待探索</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)\n<span class=\"hljs-keyword\">var</span> router = express.Router()\n<span class=\"hljs-keyword\">var</span> multer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'multer'</span>)\n<span class=\"hljs-keyword\">var</span> upload = multer({ <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">'e:/uploads/'</span> })\n\n<span class=\"hljs-comment\">// upload.single('avatar') 这个 avatar 对应 input 的 name 值，如：&lt;input name=\"avatar\" type=\"file\"/&gt;。否则报错</span>\nrouter.post(<span class=\"hljs-string\">'/file'</span>, upload.single(<span class=\"hljs-string\">'file'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n  res.send({\n    <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">200</span>,\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'ok'</span>,\n    <span class=\"hljs-attr\">result</span>: {},\n  })\n})\n\n<span class=\"hljs-built_in\">module</span>.exports = router</code></pre>\n</section><section><h2 id=\"2971666723\">路由 post 参数获取</h2><p><a href=\"http://www.expressjs.com.cn/4x/api.html#req.body\">req.body 说明 - express4 api 中文手册</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)()\n<span class=\"hljs-keyword\">var</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'body-parser'</span>)\n<span class=\"hljs-keyword\">var</span> multer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'multer'</span>)\n\napp.use(bodyParser.json()) <span class=\"hljs-comment\">// for parsing application/json</span>\napp.use(bodyParser.urlencoded({ <span class=\"hljs-attr\">extended</span>: <span class=\"hljs-literal\">true</span> })) <span class=\"hljs-comment\">// for parsing application/x-www-form-urlencoded</span>\napp.use(multer()) <span class=\"hljs-comment\">// for parsing multipart/form-data</span>\n\napp.post(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(req.body) <span class=\"hljs-comment\">// 获取</span>\n  res.json(req.body)\n})</code></pre>\n</section><section><h2 id=\"2525900772\">运行</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)\n<span class=\"hljs-keyword\">var</span> app = express()\n<span class=\"hljs-keyword\">var</span> server = app.listen(<span class=\"hljs-number\">3003</span>, <span class=\"hljs-string\">'0.0.0.0'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> host = server.address().address\n  <span class=\"hljs-keyword\">var</span> port = server.address().port\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Example app listening at http://%s:%s'</span>, host, port)\n})</code></pre>\n</section></section><section><h1 id=\"1206553309\">http</h1><section><h2 id=\"4112047441\">读取文本</h2><pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getApiData</span>(<span class=\"hljs-params\">cb</span>) </span>{\n  http.get(\n    {\n      port: <span class=\"hljs-number\">80</span>,\n      hostname: <span class=\"hljs-string\">'uc.lwk.com'</span>,\n      method: <span class=\"hljs-string\">'GET'</span>,\n      path: <span class=\"hljs-string\">'/apidoc/api_data.js'</span>,\n    },\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">var</span> content = <span class=\"hljs-string\">''</span>\n      res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {\n        content += data\n      })\n      res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        cb(content)\n      })\n    },\n  )\n}</code></pre>\n</section><section><h2 id=\"3295582176\">下载文件</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>)\n<span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n\n<span class=\"hljs-keyword\">var</span> download = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">url, dest, cb</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> file = fs.createWriteStream(dest)\n  <span class=\"hljs-keyword\">var</span> request = http\n    .get(url, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>{\n      response.pipe(file)\n      file.on(<span class=\"hljs-string\">'finish'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        file.close(cb) <span class=\"hljs-comment\">// close() is async, call cb after close completes.</span>\n      })\n    })\n    .on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n      <span class=\"hljs-comment\">// Handle errors</span>\n      fs.unlink(dest) <span class=\"hljs-comment\">// Delete the file async. (But we don't check the result)</span>\n      <span class=\"hljs-keyword\">if</span> (cb) cb(err.message)\n    })\n}</code></pre>\n</section></section><section><h1 id=\"3722397227\">mysql</h1><section><h2 id=\"567842911\">mysql 包</h2><p><a href=\"https://github.com/mysqljs/mysql\">github</a></p>\n<p>安装</p>\n<pre><code><span class=\"hljs-attribute\">npm</span> install mysql</code></pre></section><section><h2 id=\"2957468624\">使用</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> mysql = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mysql'</span>)\n<span class=\"hljs-keyword\">var</span> connection = mysql.createConnection({\n  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'localhost'</span>,\n  <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">'me'</span>,\n  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">'secret'</span>,\n  <span class=\"hljs-attr\">database</span>: <span class=\"hljs-string\">'my_db'</span>,\n})\n\nconnection.connect()\n\nconnection.query(<span class=\"hljs-string\">'SELECT 1 + 1 AS solution'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, results, fields</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (error) <span class=\"hljs-keyword\">throw</span> error\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'The solution is: '</span>, results[<span class=\"hljs-number\">0</span>].solution)\n})\n\nconnection.end()</code></pre>\n</section></section><section><h1 id=\"1889493904\">node 实用模块</h1><section><h2 id=\"610741175\">node-portfinder 自动获取可用端口</h2><p><a href=\"https://github.com/indexzero/node-portfinder\">node-portfinder</a></p>\n</section><section><h2 id=\"3876782076\">获取本机 ip 地址</h2><p>找到两个模块</p>\n<section><h3 id=\"404555819\">1. node-ip</h3><p>webpack-dev-server 在用</p>\n<p><a href=\"https://github.com/indutny/node-ip\">https://github.com/indutny/node-ip</a></p>\n<p>安装</p>\n<pre><code><span class=\"hljs-attribute\">npm</span> install ip</code></pre><p>使用</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'ip'</span>).address() <span class=\"hljs-comment\">// 可局域网访问的本机ip</span></code></pre>\n</section><section><h3 id=\"2681764827\">2. address</h3><p>vue cli 环境在用</p>\n<p><a href=\"https://github.com/node-modules/address\">https://github.com/node-modules/address</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> address = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'address'</span>)\n<span class=\"hljs-built_in\">console</span>.log(address.ip())</code></pre>\n</section><section><h3 id=\"3622104768\">3. 自己实现</h3><pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getIPAdress</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> interfaces = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'os'</span>).networkInterfaces()\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> devName <span class=\"hljs-keyword\">in</span> interfaces) {\n    <span class=\"hljs-keyword\">var</span> iface = interfaces[devName]\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; iface.length; i++) {\n      <span class=\"hljs-keyword\">var</span> alias = iface[i]\n      <span class=\"hljs-keyword\">if</span> (alias.family === <span class=\"hljs-string\">'IPv4'</span> &amp;&amp; alias.address !== <span class=\"hljs-string\">'127.0.0.1'</span> &amp;&amp; !alias.internal) {\n        <span class=\"hljs-keyword\">return</span> alias.address\n      }\n    }\n  }\n}</code></pre>\n</section></section><section><h2 id=\"2857945847\">cli 参数获取</h2><p><a href=\"https://github.com/yargs/yargs\">yargs 文档</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> argv = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yargs'</span>).argv\n<span class=\"hljs-keyword\">const</span> isTest = argv[<span class=\"hljs-string\">'test'</span>] === <span class=\"hljs-literal\">true</span></code></pre>\n</section><section><h2 id=\"3644789084\">终端相关</h2><section><h3 id=\"3344554238\">加载指示图标动画</h3><p><a href=\"https://github.com/sindresorhus/ora\">https://github.com/sindresorhus/ora</a></p>\n</section><section><h3 id=\"3540066454\">输出文本样式颜色控制</h3><p><a href=\"https://github.com/chalk/chalk\">https://github.com/chalk/chalk</a></p>\n</section></section><section><h2 id=\"2369951459\">node-notifier</h2><p>似乎可以控制 vscode 弹消息框</p>\n</section><section><h2 id=\"3611846647\">opn 打开其他程序</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> opn = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'opn'</span>)\nopn(<span class=\"hljs-string\">`http://<span class=\"hljs-subst\">${host}</span>:<span class=\"hljs-subst\">${port}</span>`</span>, { <span class=\"hljs-attr\">app</span>: [<span class=\"hljs-string\">'chrome'</span>] })</code></pre>\n</section><section><h2 id=\"812696142\">chokidar</h2><p><a href=\"https://github.com/paulmillr/chokidar\">https://github.com/paulmillr/chokidar</a></p>\n<p>基于 node.JS 的监听文件夹改变模块</p>\n<p>一般前端环境框架直接有依赖安装</p>\n</section></section><section><h1 id=\"1496255637\">path</h1><section><h2 id=\"1374665287\">路径信息</h2><pre><code class=\"language-js\"><span class=\"hljs-attribute\">let</span> <span class=\"hljs-literal\">info</span> = path.parse(<span class=\"hljs-string\">'./dir/index.js'</span>)\n\n<span class=\"hljs-literal\">info</span>.ext // 扩展名，如果是目录，则为空字符串\n</code></pre>\n</section></section><section><h1 id=\"1816412500\">require 模块</h1><section><h2 id=\"1422471004\">模块定义\\导出</h2><p>导出 1：直接导出模块</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// math.js</span>\n<span class=\"hljs-keyword\">var</span> math = {\n  <span class=\"hljs-attr\">add</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>,\n      i = <span class=\"hljs-number\">0</span>,\n      args = <span class=\"hljs-built_in\">arguments</span>,\n      l = args.length\n    <span class=\"hljs-keyword\">while</span> (i &lt; l) {\n      sum += args[i++]\n    }\n    <span class=\"hljs-keyword\">return</span> sum\n  },\n}\n<span class=\"hljs-built_in\">module</span>.exports = math</code></pre>\n<p>导出 2：自定义导出，可以导出多个</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// math.js</span>\nexports.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>,\n    i = <span class=\"hljs-number\">0</span>,\n    args = <span class=\"hljs-built_in\">arguments</span>,\n    l = args.length\n  <span class=\"hljs-keyword\">while</span> (i &lt; l) {\n    sum += args[i++]\n  }\n  <span class=\"hljs-keyword\">return</span> sum\n}\n\nexports.sub = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}\n\n<span class=\"hljs-comment\">// app.js 可以这样使用</span>\n<span class=\"hljs-keyword\">const</span> { add } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./math'</span>)</code></pre>\n<p><strong>使用：</strong></p>\n<p>上面两个例子的效果一致</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// program.js</span>\n<span class=\"hljs-keyword\">var</span> math = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'math'</span>)\nmath.add(val, <span class=\"hljs-number\">1</span>)</code></pre>\n</section><section><h2 id=\"2338591324\">require 自动寻找特性</h2><p>不指明路径的直接模块调用，比如 require(&#39;gulp&#39;)，将自动在 node_modules 中寻找。</p>\n<p>目录级别不影响。即可以是 node_modules 同级，也可以是某子级</p>\n</section></section><section><h1 id=\"1311247670\">window 后台运行</h1><pre><code class=\"language-cmd\"><span class=\"hljs-attribute\">start</span> pwsh -c <span class=\"hljs-string\">\"Start-Process -WindowStyle Hidden -FilePath node ./app.js -PassThru -RedirectStandardOutput out.log|out-file -filepath ./process.log\"</span></code></pre>\n<p><code>start pwsh -c</code> 为 cmd 打开 powershell</p>\n</section><section><h1 id=\"177651550\">包管理器 npm</h1><section><h2 id=\"3143296376\">常用命令</h2><section><h3 id=\"1133885073\">更新 npm</h3><p>npm install npm@latest -g</p>\n</section><section><h3 id=\"3967076939\">更新包</h3><pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 先更新 package.json 版本</span>\n<span class=\"hljs-attribute\">npm</span> update local <span class=\"hljs-comment\"># 更新所有本地包</span>\nnpm update global <span class=\"hljs-comment\"># 全局包</span></code></pre>\n</section><section><h3 id=\"1174797471\">删除包</h3><pre><code class=\"language-sh\">npm uninstall -g <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">package</span>&gt;</span>\nnpm uninstall <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">package</span>&gt;</span>\n\n# 可简写\nnpm uni <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">package</span>&gt;</span></code></pre>\n</section><section><h3 id=\"3069727892\">查看过时本地包</h3><p>npm outdated</p>\n</section><section><h3 id=\"2427446814\">查看本地包列表</h3><p>npm ls</p>\n</section></section><section><h2 id=\"2423391880\">npm 项目路径最好不要包含$符号</h2><p>即文件夹最好不用$命名，因为$为命令关键字</p>\n</section><section><h2 id=\"1378642205\">通过 npm 执行 package.json 准备的命令</h2><p>scripts 字段</p>\n<pre><code class=\"language-cmd\"><span class=\"hljs-attribute\">npm</span> run dev</code></pre>\n<p>部分命令无需加 run，比如 start，可直接</p>\n<pre><code class=\"language-cmd\"><span class=\"hljs-attribute\">npm</span> start</code></pre>\n</section><section><h2 id=\"3318785279\">下载加速</h2><section><h3 id=\"3778372682\">使用 mirror-config-china [推荐]</h3><pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 安装</span>\n<span class=\"hljs-attribute\">npm</span> i -g mirror-config-china --registry=https://registry.npm.taobao.org\n<span class=\"hljs-comment\"># 检查是否安装成功</span>\nnpm config list</code></pre>\n<p><a href=\"https://www.npmjs.com/package/mirror-config-china\">mirror-config-china 文档</a></p>\n</section><section><h3 id=\"3235156808\">切换仓库</h3><p><a href=\"https://www.jianshu.com/p/c5609434cd60\">NPM 切换仓库</a></p>\n<pre><code class=\"language-sh\"><span class=\"hljs-attribute\">npm</span> config ls\n\n<span class=\"hljs-comment\"># https://registry.npmjs.org 原仓库</span>\n<span class=\"hljs-comment\"># https://registry.npm.taobao.org 淘宝</span>\n\nnpm config get registry <span class=\"hljs-comment\"># 查看创库地址</span>\nnpm config set registry https://registry.npm.taobao.org <span class=\"hljs-comment\"># 设置淘宝仓库</span></code></pre>\n</section><section><h3 id=\"792444157\">或者安装 cnpm 命令</h3><pre><code class=\"language-cmd\">npm install -g cnpm --registry=https:<span class=\"hljs-comment\">//registry.npm.taobao.org</span></code></pre>\n</section></section><section><h2 id=\"4167782706\">发布包</h2><p><strong>首先关联账号</strong></p>\n<pre><code><span class=\"hljs-attribute\">npm</span> adduser</code></pre><p><strong>指定要发布的文件</strong></p>\n<p>通过 pageage.json files 指定。<a href=\"https://docs.npmjs.com/files/package.json#files\">查看官方文档</a></p>\n<pre><code>{\n    <span class=\"hljs-string\">\"files\"</span>: [\n      <span class=\"hljs-string\">\"dist\"</span>,\n      <span class=\"hljs-string\">\"src\"</span>,\n      <span class=\"hljs-string\">\"lib/*\"</span>\n    ],\n}</code></pre><p><strong>发布</strong></p>\n<ul>\n<li>当前所在文件夹</li>\n<li>不加点也行</li>\n</ul>\n<pre><code><span class=\"hljs-attribute\">npm</span> publish .</code></pre><section><h3 id=\"3336238822\">更新发布包</h3><p>跟<a href=\"#%E5%8F%91%E5%B8%83%E5%8C%85\">发布包</a>一样，也是通过<code>npm publish</code>命令，只是要修改版本</p>\n</section></section><section><h2 id=\"2232686576\">package.json</h2><section><h3 id=\"406682522\">命令创建 package.json 文件</h3><p>将在命令运行目录创建</p>\n<pre><code><span class=\"hljs-attribute\">npm</span> init</code></pre></section><section><h3 id=\"548923993\">main 字段</h3><p>nodejs 在 require 模块时，将以此字段指向的 js 文件作为入口</p>\n<pre><code class=\"language-json\">{\n  <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"./lib/app.js\"</span>\n}</code></pre>\n</section><section><h3 id=\"4194497221\">scripts 字段：脚本执行</h3><p>可直接运行非全局的模块命令。<br>因为默认会在<code>./node_modules/.bin</code>中寻找命令。但也只限于与<code>package.json</code>同级的<code>node_modules</code>中寻找。</p>\n<p>假如是某其他文件夹的<code>package.json</code>，需指定命令的绝对路径：</p>\n<pre><code class=\"language-json\">{\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"E:/_work/node_modules/.bin/react-scripts start\"</span>\n  }\n}</code></pre>\n</section></section><section><h2 id=\"3272867641\">私有仓库部署</h2><p>使用 <a href=\"https://verdaccio.org/\">verdaccio</a> 部署</p>\n<p><a href=\"https://blog.csdn.net/weixin_33757911/article/details/91447376\">超简单的 npm 私有库搭建——verdaccio</a></p>\n</section></section><section><h1 id=\"4147773594\">包管理器 yarn</h1><section><h2 id=\"2466181453\">更新所有包</h2><p>yarn upgrade --latest</p>\n</section></section><section><h1 id=\"4064624804\">文件系统 - fs</h1><section><h2 id=\"1989007335\">文件列表(包括文件夹)</h2><section><h3 id=\"1196630839\">原生 readdir：只能当前目录，不寻找下级</h3><pre><code class=\"language-js\"><span class=\"hljs-built_in\">let</span> dirList = fs.readdirSync(<span class=\"hljs-string\">\"./dir\"</span>);\n// 返回值示例：\n// [<span class=\"hljs-string\">\".DS_Store\"</span>,<span class=\"hljs-string\">\"Update.exe\"</span>,<span class=\"hljs-string\">\"version\"</span>,<span class=\"hljs-string\">\"views_resources_200_percent.pak\"</span>,<span class=\"hljs-string\">\"xinput1_3.dll\"</span>]</code></pre>\n</section><section><h3 id=\"2447853764\">读取指定目录下的所有文件，支持过滤</h3><p>使用 <a href=\"https://github.com/jergason/recursive-readdir\">recursive-readdir</a>，但不会列出文件夹</p>\n<p>需列出文件夹使用：<a href=\"https://github.com/bigstickcarpet/readdir-enhanced\">readdir-enhanced</a></p>\n</section></section><section><h2 id=\"3825832485\">判断是不是[文件/目录]</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">fs</span>.statSync(<span class=\"hljs-built_in\">path</span>).isDirectory(); // 是不是目录，即路径最终指向的是文件夹\n<span class=\"hljs-built_in\">fs</span>.statSync(<span class=\"hljs-built_in\">path</span>).isFile(); // 是不是文件</code></pre>\n<p>当然，也可用来判断文件目录是否存在，但不推荐。<strong>判断是否存在，推荐用 <code>fs.access</code></strong></p>\n<p>fs.stat 用来获取文件状态</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);\n<span class=\"hljs-comment\">/*\n    读取文件的状态；\n    fs.stat(path,callback);\n    callback有两个参数；err，stats；stats是一个fs.Stats对象；\n    如果发生错误err.code是常见错误之一；\n 不建议在调用 fs.open() 、fs.readFile() 或 fs.writeFile() 之前使用 fs.stat() 检查一个文件是否存在。 作为替代，用户代码应该直接打开/读取/写入文件，当文件无效时再处理错误。\n 如果要检查一个文件是否存在且不操作它，推荐使用 fs.access()。\n */</span>\nfs.stat(<span class=\"hljs-string\">\"./wenjian.txt\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, stats</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(err);\n  <span class=\"hljs-built_in\">console</span>.log(stats);\n  <span class=\"hljs-comment\">//    获取文件的大小；</span>\n  <span class=\"hljs-built_in\">console</span>.log(stats.size);\n  <span class=\"hljs-comment\">//    获取文件最后一次访问的时间；</span>\n  <span class=\"hljs-built_in\">console</span>.log(stats.atime.toLocaleString());\n  <span class=\"hljs-comment\">//    文件创建的时间；</span>\n  <span class=\"hljs-built_in\">console</span>.log(stats.birthtime.toLocaleString());\n  <span class=\"hljs-comment\">//    文件最后一次修改时间；</span>\n  <span class=\"hljs-built_in\">console</span>.log(stats.mtime.toLocaleString());\n  <span class=\"hljs-comment\">//    状态发生变化的时间；</span>\n  <span class=\"hljs-built_in\">console</span>.log(stats.ctime.toLocaleString());\n  <span class=\"hljs-comment\">//判断是否是目录；是返回true；不是返回false；</span>\n  <span class=\"hljs-built_in\">console</span>.log(stats.isFile());\n  <span class=\"hljs-comment\">//    判断是否是文件；是返回true、不是返回false；</span>\n  <span class=\"hljs-built_in\">console</span>.log(stats.isDirectory());\n});\n<span class=\"hljs-comment\">// ---------------------</span>\n<span class=\"hljs-comment\">// 作者：sunlizhen</span>\n<span class=\"hljs-comment\">// 来源：CSDN</span>\n<span class=\"hljs-comment\">// 原文：https://blog.csdn.net/sunlizhen/article/details/78016202</span>\n<span class=\"hljs-comment\">// 版权声明：本文为博主原创文章，转载请附上博文链接！</span></code></pre>\n</section><section><h2 id=\"1369100078\">判断[文件/目录]是否存在 - fs.access(path[, mode], callback)</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);\n<span class=\"hljs-comment\">/*\n-----判断文件和目录是否存在；\nfs.access(path[, mode], callback);\npath:判断的文件名；\ncallback：回调函数；\n */</span>\nfs.access(<span class=\"hljs-string\">\"./wenjian.txt\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-comment\">//    文件和目录不存在的情况下；</span>\n  <span class=\"hljs-keyword\">if</span> (err.code == <span class=\"hljs-string\">\"ENOENT\"</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"文件和目录不存在\"</span>);\n  }\n});\n<span class=\"hljs-comment\">/*\n 不建议在调用 fs.open() 、 fs.readFile() 或 fs.writeFile() 之前使用 fs.access() 检查一个文件的可访问性\n */</span>\n<span class=\"hljs-comment\">//不建议使用：</span>\nfs.access(<span class=\"hljs-string\">\"./wenjian.txt\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!err) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"文件已经存在\"</span>);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  fs.open(<span class=\"hljs-string\">\"./wenjian.txt\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(err);\n  });\n});\n<span class=\"hljs-comment\">//推荐使用；</span>\nfs.open(<span class=\"hljs-string\">\"./wenjian.txt\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, fd</span>) </span>{\n  cnsole.log(err);\n});\n<span class=\"hljs-comment\">// ---------------------</span>\n<span class=\"hljs-comment\">// 作者：sunlizhen</span>\n<span class=\"hljs-comment\">// 来源：CSDN</span>\n<span class=\"hljs-comment\">// 原文：https://blog.csdn.net/sunlizhen/article/details/78016157</span>\n<span class=\"hljs-comment\">// 版权声明：本文为博主原创文章，转载请附上博文链接！</span></code></pre>\n</section><section><h2 id=\"4249150673\">判断[文件/目录]是否存在 - fs.exists(弃用)</h2><p><code>fs.exists(path)</code> <strong>nodejs 9.0 弃用</strong></p>\n<p>对应的同步方法 <code>fs.existsSync(path)</code> ，这个还可以用</p>\n</section><section><h2 id=\"770175285\">读取文件 fs.readFile</h2><p>读取不存在文件会报错</p>\n<pre><code class=\"language-js\">const <span class=\"hljs-built_in\">fs</span> = require('<span class=\"hljs-built_in\">fs</span>')\n<span class=\"hljs-built_in\">fs</span>.readFile(file[, options], callback)\n<span class=\"hljs-built_in\">fs</span>.readFileSync(file[, options])</code></pre>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);\n<span class=\"hljs-comment\">// 默认获取二进制数据。参数设置为utf8将获取文本数据</span>\nfs.readFile(<span class=\"hljs-string\">\"note_data/index.html\"</span>, <span class=\"hljs-string\">\"utf8\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) {\n    <span class=\"hljs-built_in\">console</span>.log(err);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);\n});\n\n<span class=\"hljs-comment\">// 同步</span>\n<span class=\"hljs-keyword\">let</span> data = fs.readFileSync(<span class=\"hljs-string\">\"note_data/index.html\"</span>, <span class=\"hljs-string\">\"utf8\"</span>);</code></pre>\n</section><section><h2 id=\"1794910194\">改名(文件名，目录名)</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">fs</span>.<span class=\"hljs-built_in\">rename</span>(oldPath, newPath, callback);\n<span class=\"hljs-built_in\">fs</span>.renameSync(oldPath, newPath);</code></pre>\n<p>oldPath, newPath 必须相同级数，可以完全一样，只能修改末级</p>\n</section><section><h2 id=\"2972818997\">删除</h2><section><h3 id=\"3809456202\">标准删</h3><p>只能删除文件</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">fs</span>.unlink(<span class=\"hljs-built_in\">path</span>, callback);\n<span class=\"hljs-built_in\">fs</span>.unlinkSync(<span class=\"hljs-built_in\">path</span>);</code></pre>\n<pre><code class=\"language-js\">fs.unlink(<span class=\"hljs-string\">\"/tmp/hello.txt\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"successfully deleted /tmp/hello\"</span>);\n});</code></pre>\n<p>只能删除空目录</p>\n<pre><code><span class=\"hljs-built_in\">fs</span>.<span class=\"hljs-built_in\">rmdir</span>(<span class=\"hljs-built_in\">path</span>, callback)</code></pre></section><section><h3 id=\"557323442\">递归删：第三方扩展</h3><p>删除指定目录下的所有文件和目录</p>\n<p>使用 <a href=\"https://github.com/jprichardson/node-fs-extra\">fs-extra</a> ，或者使用 <a href=\"https://github.com/isaacs/rimraf\">rimraf</a></p>\n<p>fs-extra 的 <a href=\"https://github.com/jprichardson/node-fs-extra/blob/master/docs/remove-sync.md\">remove-sync</a> 示例</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs-extra\"</span>);\n\n<span class=\"hljs-comment\">// remove file</span>\nfs.removeSync(<span class=\"hljs-string\">\"/tmp/myfile\"</span>);\n\nfs.removeSync(<span class=\"hljs-string\">\"/home/jprichardson\"</span>); <span class=\"hljs-comment\">// I just deleted my entire HOME directory.</span></code></pre>\n</section></section><section><h2 id=\"1049069443\">创建目录</h2><p>fs.mkdir(path[, mode], callback)<br>fs.mkdirSync(path[, mode])</p>\n<p>只能在已存在的目录下创建，越级创建将报错</p>\n</section><section><h2 id=\"470009886\">写/创建 文件</h2><ul>\n<li>将内容写入文件。</li>\n<li>有文件将直接替换现有内容，没有将创建新的并写入。</li>\n<li>路径不存在将无法写入</li>\n</ul>\n<p>语法</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">fs</span><span class=\"hljs-selector-class\">.writeFile</span>(<span class=\"hljs-selector-tag\">file</span>, <span class=\"hljs-selector-tag\">data</span><span class=\"hljs-selector-attr\">[, options]</span>, <span class=\"hljs-selector-tag\">callback</span>)\n<span class=\"hljs-selector-tag\">fs</span><span class=\"hljs-selector-class\">.writeFileSync</span>(<span class=\"hljs-selector-tag\">file</span>, <span class=\"hljs-selector-tag\">data</span><span class=\"hljs-selector-attr\">[, options]</span>)</code></pre>\n<p>例子</p>\n<pre><code class=\"language-js\">fs.writeFile(<span class=\"hljs-string\">\"note_data/hello.txt\"</span>, <span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-string\">\"utf8\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"File write completed\"</span>);\n});\n\nfs.writeFileSync(<span class=\"hljs-string\">\"note_data/hello.txt\"</span>, <span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-string\">\"utf8\"</span>);</code></pre>\n<p>或直接使用 fs-extra 的 <a href=\"hhttps://github.com/jprichardson/node-fs-extra/blob/master/docs/outputFile-sync.md\">outputFileSync</a>、<a href=\"https://github.com/jprichardson/node-fs-extra/blob/master/docs/outputJson-sync.md\">outputJsonSync</a>，路径不存在也能进行写入</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">fs</span><span class=\"hljs-selector-class\">.outputJsonSync</span>(<span class=\"hljs-selector-tag\">path</span><span class=\"hljs-selector-class\">.resolve</span>(<span class=\"hljs-selector-tag\">outputPath</span>, \"<span class=\"hljs-selector-tag\">data-demo-list</span><span class=\"hljs-selector-class\">.json</span>\"), <span class=\"hljs-selector-tag\">worksList</span>);</code></pre>\n</section><section><h2 id=\"3017918594\">copy</h2><p>使用 <a href=\"https://github.com/jprichardson/node-fs-extra\">fs-extra</a></p>\n<p><a href=\"https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md\">copy 文档</a></p>\n<p><a href=\"https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy-sync.md\">copySync 文档</a></p>\n<p>copySync 示例</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs-extra\"</span>);\n\n<span class=\"hljs-comment\">// copy file</span>\nfs.copySync(<span class=\"hljs-string\">\"/tmp/myfile\"</span>, <span class=\"hljs-string\">\"/tmp/mynewfile\"</span>);\n\n<span class=\"hljs-comment\">// copy directory, even if it has subdirectories or files</span>\nfs.copySync(<span class=\"hljs-string\">\"/tmp/mydir\"</span>, <span class=\"hljs-string\">\"/tmp/mynewdir\"</span>);\n\n<span class=\"hljs-comment\">// 支持过滤</span>\n<span class=\"hljs-keyword\">const</span> filterFunc = <span class=\"hljs-function\">(<span class=\"hljs-params\">src, dest</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// your logic here</span>\n  <span class=\"hljs-comment\">// it will be copied if return true</span>\n};\nfs.copySync(<span class=\"hljs-string\">\"/tmp/mydir\"</span>, <span class=\"hljs-string\">\"/tmp/mynewdir\"</span>, { <span class=\"hljs-attr\">filter</span>: filterFunc });</code></pre>\n</section><section><h2 id=\"3255735694\">应用</h2><section><h3 id=\"3923899051\">创建一个空白的二进制文件</h3><blockquote>\n<p>由于当时没有备注， 已经不记得具体用在什么场景了</p>\n</blockquote>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs-extra\"</span>);\nfs.outputFileSync(<span class=\"hljs-string\">\"d:/blank-file\"</span>, Buffer.alloc(<span class=\"hljs-number\">0</span>));</code></pre>\n</section></section></section><section><h1 id=\"488639577\">服务端部署</h1><section><h2 id=\"4075384772\">node 服务启动框架</h2><p><a href=\"https://blog.csdn.net/maquealone/article/details/79550120\">https://blog.csdn.net/maquealone/article/details/79550120</a></p>\n<p><a href=\"https://www.cnblogs.com/zhoujie/p/nodejs4.html\">https://www.cnblogs.com/zhoujie/p/nodejs4.html</a></p>\n<p><a href=\"https://www.cnblogs.com/chris-oil/p/6239097.html\">https://www.cnblogs.com/chris-oil/p/6239097.html</a></p>\n<section><h3 id=\"3962105857\"><a href=\"https://github.com/Unitech/pm2\">pm2 进程管理工具</a> - 生产环境</h3><p>适用于网站访问量比较大,需要完整的监控界面</p>\n<p>支持异常自动重启</p>\n<p>运行管理多个进程程序</p>\n<p>除了nodejs，还<a href=\"https://pm2.io/doc/en/runtime/guide/process-management/?utm_source=github#manage-any-application-type\">支持其他语言程序</a> </p>\n<pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 运行js</span>\n<span class=\"hljs-attribute\">pm2</span> start app.js\n<span class=\"hljs-comment\"># 支持命令</span>\npm2 start http-server -- /usr/website</code></pre>\n<section><h4 id=\"1920237406\">使用配置文件启动</h4><p><a href=\"https://www.cnblogs.com/chyingp/p/pm2-documentation.html\">参考文档</a></p>\n<p>pm2.config.json</p>\n<pre><code class=\"language-json\">{\n  <span class=\"hljs-string\">\"name\"</span>        : <span class=\"hljs-string\">\"nginx\"</span>, <span class=\"hljs-comment\">// 应用名称</span>\n  <span class=\"hljs-string\">\"script\"</span>      : <span class=\"hljs-string\">\"./nginx.exe\"</span>, <span class=\"hljs-comment\">// 实际启动脚本</span>\n  <span class=\"hljs-string\">\"cwd\"</span>         : <span class=\"hljs-string\">\"./\"</span>, <span class=\"hljs-comment\">// 当前工作路径</span>\n  <span class=\"hljs-string\">\"watch\"</span>: [ <span class=\"hljs-comment\">// 监控变化的目录，一旦变化，自动重启</span>\n    <span class=\"hljs-string\">\"conf\"</span>\n  ],\n  <span class=\"hljs-string\">\"ignore_watch\"</span> : [ <span class=\"hljs-comment\">// 从监控目录中排除</span>\n    <span class=\"hljs-string\">\"node_modules\"</span>, \n    <span class=\"hljs-string\">\"logs\"</span>,\n    <span class=\"hljs-string\">\"public\"</span>\n  ],\n  <span class=\"hljs-string\">\"watch_options\"</span>: {\n    <span class=\"hljs-string\">\"followSymlinks\"</span>: <span class=\"hljs-literal\">false</span>\n  },\n  <span class=\"hljs-string\">\"error_file\"</span> : <span class=\"hljs-string\">\"./logs/app-err.log\"</span>, <span class=\"hljs-comment\">// 错误日志路径</span>\n  <span class=\"hljs-string\">\"out_file\"</span>   : <span class=\"hljs-string\">\"./logs/app-out.log\"</span>, <span class=\"hljs-comment\">// 普通日志路径</span>\n  <span class=\"hljs-string\">\"env\"</span>: {\n      <span class=\"hljs-string\">\"NODE_ENV\"</span>: <span class=\"hljs-string\">\"production\"</span> <span class=\"hljs-comment\">// 环境参数，当前指定为生产环境</span>\n  }\n}</code></pre>\n</section></section><section><h3 id=\"2337010935\">nodemon - 开发环境</h3><p>支持修改自动重启</p>\n</section><section><h3 id=\"1427617828\">其他启动框架</h3><ol>\n<li>supervisor 是开发环境用。Python(2.4+) 开发的</li>\n<li>forever 管理多个站点，每个站点访问量不大，不需要监控。</li>\n<li>node-dev</li>\n</ol>\n"})
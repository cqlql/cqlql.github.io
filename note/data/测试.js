window['cb_测试']({"outline":[{"id":"4263918279","level":1,"name":"jasmine","children":[{"id":"2718587556","level":2,"name":"beforeEach、beforeAll","children":[]},{"id":"1754042261","level":2,"name":"只执行指定的 describe、it","children":[]}]},{"id":"3123823580","level":1,"name":"jest","children":[{"id":"2819951489","level":2,"name":"nodejs 测试问题","children":[{"id":"1859946266","level":3,"name":"会根据 <code>.babelrc</code> 文件进行 babel 转化","children":[]}]},{"id":"247344450","level":2,"name":"--watch 模式","children":[]},{"id":"110639511","level":2,"name":"使用指定的 babel.config","children":[]},{"id":"3508517563","level":2,"name":"开始测试","children":[{"id":"677559408","level":3,"name":"异步 mock funciton","children":[]},{"id":"765965941","level":3,"name":"函数的调用次数","children":[]}]},{"id":"2676066524","level":2,"name":"一些问题","children":[{"id":"2447008150","level":3,"name":"与 webpack","children":[]},{"id":"358926869","level":3,"name":"运行很慢","children":[]}]}]},{"id":"2800950093","level":1,"name":"mocha API 使用","children":[{"id":"2102687249","level":2,"name":"异步测试","children":[]},{"id":"3427146480","level":2,"name":"only","children":[]}]},{"id":"620686166","level":1,"name":"mock 依赖注入","children":[]},{"id":"1396001249","level":1,"name":"karma 中使用 Chrome Headless","children":[]},{"id":"3892659583","level":1,"name":"相关工具列表","children":[]},{"id":"2807152370","level":1,"name":"参考学习","children":[]}],"content":"<section><h1 id=\"4263918279\">jasmine</h1><section><h2 id=\"2718587556\">beforeEach、beforeAll</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;\ndescribe(<span class=\"hljs-string\">\"test-foo\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// 每次 it 都会执行</span>\n  <span class=\"hljs-comment\">// 只限于当前 describe</span>\n  beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"beforeEach\"</span>, i++);\n  });\n\n  <span class=\"hljs-comment\">// 只执行一次</span>\n  beforeAll(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"beforeAll\"</span>);\n  });\n\n  it(<span class=\"hljs-string\">\"it1\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});\n\n  it(<span class=\"hljs-string\">\"it2\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});\n});\n\ndescribe(<span class=\"hljs-string\">\"test-bar\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  it(<span class=\"hljs-string\">\"it3\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});\n});</code></pre>\n</section><section><h2 id=\"1754042261\">只执行指定的 describe、it</h2><p>前面加 f 即可：<code>fdescribe</code>、<code>fit</code></p>\n</section></section><section><h1 id=\"3123823580\">jest</h1><section><h2 id=\"2819951489\">nodejs 测试问题</h2><section><h3 id=\"1859946266\">会根据 <code>.babelrc</code> 文件进行 babel 转化</h3><p><a href=\"https://facebook.github.io/jest/docs/zh-Hans/getting-started.html#%E4%BD%BF%E7%94%A8-babel\">使用 babel - 官方解释</a></p>\n<p><strong>解决</strong></p>\n<ol>\n<li>更改 pageage.json</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// package.json</span>\n{\n  <span class=\"hljs-string\">\"jest\"</span>: {\n    <span class=\"hljs-string\">\"transform\"</span>: {}\n  }\n}</code></pre>\n<ol start=\"2\">\n<li>使用配置文件</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// jest.config</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"my-project\"</span>,\n  <span class=\"hljs-attr\">transform</span>: {},\n  <span class=\"hljs-attr\">testEnvironment</span>: <span class=\"hljs-string\">\"node\"</span>,\n};</code></pre>\n</section></section><section><h2 id=\"247344450\">--watch 模式</h2><p>很聪明，只会测试更改的文件</p>\n<p>当然，<code>--watchAll</code> 就会测试所有了</p>\n</section><section><h2 id=\"110639511\">使用指定的 babel.config</h2><p>jest-js-transformer.js</p>\n<pre><code class=\"language-js\">const babelOptions = {\n  presets: [\n    [\n      <span class=\"hljs-string\">\"@babel/preset-env\"</span>,\n      {\n        // <span class=\"hljs-string\">\"modules\"</span>: <span class=\"hljs-string\">'auto'</span>,\n        // <span class=\"hljs-string\">\"useBuiltIns\"</span>: <span class=\"hljs-string\">\"usage\"</span>,\n        // <span class=\"hljs-string\">\"targets\"</span>: {\n        //   <span class=\"hljs-string\">\"browsers\"</span>: [<span class=\"hljs-string\">\"&gt; 1%\"</span>, <span class=\"hljs-string\">\"last 2 versions\"</span>, <span class=\"hljs-string\">\"not ie &lt;= 8\"</span>]\n        // }\n      },\n    ],\n  ],\n  plugins: [\n    <span class=\"hljs-string\">\"@babel/plugin-transform-runtime\"</span>,\n    <span class=\"hljs-string\">\"@babel/plugin-syntax-dynamic-import\"</span>,\n    // <span class=\"hljs-string\">\"transform-vue-jsx\"</span>\n  ],\n};\n\nmodule.exports = require(<span class=\"hljs-string\">\"babel-jest\"</span>).createTransformer(babelOptions);</code></pre>\n<p>jest.config.js</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">verbose</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">rootDir</span>: <span class=\"hljs-string\">\"../\"</span>,\n  <span class=\"hljs-attr\">testMatch</span>: [<span class=\"hljs-string\">\"&lt;rootDir&gt;/test/**/*.test.js\"</span>],\n  <span class=\"hljs-comment\">// 'testRegex': [</span>\n  <span class=\"hljs-comment\">//   '/test/unit/.+(test|spec)\\\\.[jt]sx?$'</span>\n  <span class=\"hljs-comment\">// ],</span>\n  testPathIgnorePatterns: [<span class=\"hljs-string\">\"/src/\"</span>, <span class=\"hljs-string\">\"node_modules\"</span>],\n  <span class=\"hljs-attr\">moduleNameMapper</span>: {\n    <span class=\"hljs-comment\">// 同步 webpack 别名</span>\n    <span class=\"hljs-string\">\"@/(.*)$\"</span>: <span class=\"hljs-string\">\"&lt;rootDir&gt;/src/$1\"</span>,\n  },\n\n  <span class=\"hljs-attr\">transform</span>: { <span class=\"hljs-string\">\"^.+\\\\.js$\"</span>: <span class=\"hljs-string\">\"&lt;rootDir&gt;/test/jest-preprocess.js\"</span> },\n};</code></pre>\n</section><section><h2 id=\"3508517563\">开始测试</h2><section><h3 id=\"677559408\">异步 mock funciton</h3><pre><code class=\"language-js\">test(<span class=\"hljs-string\">\"只执行一次\"</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> asyncMock = jest.fn().mockResolvedValue();\n  <span class=\"hljs-keyword\">await</span> asyncMock();\n  expect(asyncMock).toHaveBeenCalledTimes(<span class=\"hljs-number\">1</span>);\n});</code></pre>\n</section><section><h3 id=\"765965941\">函数的调用次数</h3><pre><code class=\"language-js\">test(<span class=\"hljs-string\">\"只执行一次\"</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> drink = jest.fn();\n  drink();\n  expect(drink).toHaveBeenCalledTimes(<span class=\"hljs-number\">1</span>);\n});</code></pre>\n</section></section><section><h2 id=\"2676066524\">一些问题</h2><section><h3 id=\"2447008150\">与 webpack</h3></section><section><h3 id=\"358926869\">运行很慢</h3><p>即使只有一个简单的测试文件</p>\n<p>cli 加 <code>-i</code></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attribute\">jest</span> -i</code></pre>\n</section></section></section><section><h1 id=\"2800950093\">mocha API 使用</h1><section><h2 id=\"2102687249\">异步测试</h2><p><strong>可利用此方式查看输出到测试浏览器中的对象：</strong> 测试执行完后，测试浏览器输出的对象被销毁，无法查看，可通过此方式暂停运行，查看输出的对象</p>\n<p>默认超时时间为2s，超时后自动执行done。超时时间可设置</p>\n<pre><code class=\"language-js\">describe(<span class=\"hljs-string\">'加法函数的测试'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  it(<span class=\"hljs-string\">'测试应该5000毫秒后结束'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">5000</span>);<span class=\"hljs-comment\">//设置超时时间为5s</span>\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      x = <span class=\"hljs-literal\">false</span>;\n      expect(x).to.be.not.ok;\n      done(); <span class=\"hljs-comment\">// 通知Mocha测试结束</span>\n    };\n    setTimeout(f, <span class=\"hljs-number\">4000</span>);\n  });\n});</code></pre>\n</section><section><h2 id=\"3427146480\">only</h2><pre><code class=\"language-js\">describe(<span class=\"hljs-string\">'Array'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  describe.only(<span class=\"hljs-string\">'#indexOf()'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    it.only(<span class=\"hljs-string\">'should return -1 unless present'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    });\n  });\n});</code></pre>\n</section></section><section><h1 id=\"620686166\">mock 依赖注入</h1><p>webpack 使用 inject-loader</p>\n<p>需求场景：我要测试的文件，包含对其它功能的引用，而这个功能也需要去 mock。这时 webopack 的 inject-loader 就有了作用。比如要测试的文件中我引用了一个 ajax 库，我无法也不可能保证服务端环境也能随时且方便供我测试，这时，我就要对这个 ajax 库进行注入覆盖模拟</p>\n</section><section><h1 id=\"1396001249\">karma 中使用 Chrome Headless</h1><p>需安装 <code>karma-chrome-launcher</code> 插件，之前一直有装，只是使用的是有头版。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">config</span>) </span>{\n  config.set({\n    <span class=\"hljs-comment\">// browsers: ['Chrome'], // 有头</span>\n    browsers: [<span class=\"hljs-string\">'ChromeHeadless'</span>] <span class=\"hljs-comment\">// 无头</span>\n  })\n}</code></pre>\n</section><section><h1 id=\"3892659583\">相关工具列表</h1><ul>\n<li>自动化测试<ul>\n<li><a href=\"https://playwright.dev/\">Playwright</a> - 推荐</li>\n<li><a href=\"https://pptr.dev/\">Puppeteer</a></li>\n</ul>\n</li>\n<li>测试管理工具：<a href=\"http://karma-runner.github.io/1.0/index.html\">Karma</a></li>\n<li>测试框架：<a href=\"https://mochajs.org/\">Mocha</a></li>\n<li>断言库：Jasmine、<a href=\"http://chaijs.com/guide/\">chai.js</a></li>\n<li><a href=\"https://jestjs.io/\">jest</a>：开箱即用，几乎零配置的测试框架</li>\n<li>端到端 e2e 测试 <a href=\"http://nightwatchjs.org/\">Nightwatch.js</a></li>\n</ul>\n<p>可以这么组合: Karma + Jasmine | karma + Mocha + chai.js</p>\n</section><section><h1 id=\"2807152370\">参考学习</h1><p><a href=\"https://www.douban.com/note/334051223/\">为什么要做测试？karma的使用</a></p>\n<p><a href=\"https://github.com/tmallfe/tmallfe.github.io/issues/37\">https://github.com/tmallfe/tmallfe.github.io/issues/37</a></p>\n<p><a href=\"http://www.jianshu.com/p/6726c0410650\">http://www.jianshu.com/p/6726c0410650</a></p>\n<p><a href=\"http://taobaofed.org/blog/2016/01/08/karma-origin/\">http://taobaofed.org/blog/2016/01/08/karma-origin/</a></p>\n<p><a href=\"https://www.cnblogs.com/wangmeijian/p/9080188.html\">像素级对比、快照 测试</a></p>\n"})
window['cb_vue-router']({"outline":[{"id":"3947850112","level":1,"name":"vue-router","children":[]},{"id":"2304688112","level":1,"name":"简单示例","children":[]},{"id":"546175220","level":1,"name":"微信浏览器浏览历史支持带井号链接","children":[]},{"id":"2248172071","level":1,"name":"导航守卫","children":[{"id":"455763878","level":2,"name":"跳转权限控制 - 实现未登录","children":[]},{"id":"2555113296","level":2,"name":"beforeRouteUpdate 使用注意，状态更新","children":[]}]},{"id":"1308202286","level":1,"name":"编程式导航","children":[{"id":"1503327822","level":2,"name":"介绍","children":[]},{"id":"1781575815","level":2,"name":"使用","children":[]},{"id":"2882326698","level":2,"name":"问题解决","children":[]}]},{"id":"2319009093","level":1,"name":"设置 title","children":[]},{"id":"1536699737","level":1,"name":"路由传参","children":[{"id":"17591623","level":2,"name":"通过 params","children":[]},{"id":"4018628535","level":2,"name":"接收获取","children":[]},{"id":"1619710987","level":2,"name":"可表现在路由上，也就是所谓的动态路由","children":[]}]},{"id":"2551277654","level":1,"name":"路由对象，信息对象","children":[]},{"id":"894594698","level":1,"name":"路由跳转后会销毁组件实例","children":[]},{"id":"1794741243","level":1,"name":"问题","children":[{"id":"3415776458","level":2,"name":"路由参数改变不发生跳转","children":[]},{"id":"3977788516","level":2,"name":"vue-router 重定向操作注意","children":[]}]}],"content":"<section><h1 id=\"3947850112\">vue-router</h1><p><a href=\"https://router.vuejs.org/zh-cn/\">官方文档</a></p>\n</section><section><h1 id=\"2304688112\">简单示例</h1><pre><code class=\"language-js\">import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n// 很久没用 router 写代码是，总是忘记这一步。。。\nVue.use(VueRouter)\n\nconst Foo = { template: '<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>foo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>' }\nconst Bar = { template: '<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>bar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>' }\n\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  // 根实例用可实现替换绑定的元素\n  template: `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello App!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-comment\">&lt;!-- 使用 router-link 组件来导航. --&gt;</span>\n      <span class=\"hljs-comment\">&lt;!-- 通过传入 \\`to\\` 属性指定链接. --&gt;</span>\n      <span class=\"hljs-comment\">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 \\`&lt;a&gt;\\` 标签 --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/foo\"</span>&gt;</span>Go to Foo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/bar\"</span>&gt;</span>Go to Bar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 路由出口 --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n`\n})</code></pre>\n</section><section><h1 id=\"546175220\">微信浏览器浏览历史支持带井号链接</h1><p>左上角的返回箭头也支持浏览井号历史</p>\n<p>所以能很好支持 vue-router</p>\n</section><section><h1 id=\"2248172071\">导航守卫</h1><section><h2 id=\"455763878\">跳转权限控制 - 实现未登录</h2><pre><code class=\"language-js\">\n<span class=\"hljs-built_in\">window</span>.GLOBAL_PARAMS = {\n  <span class=\"hljs-attr\">isLogged</span>: <span class=\"hljs-number\">1</span>\n}\n\nrouter.beforeEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">to, <span class=\"hljs-keyword\">from</span>, next</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (to.name !== <span class=\"hljs-string\">'Login'</span> &amp;&amp; !<span class=\"hljs-built_in\">window</span>.GLOBAL_PARAMS.isLogged) {\n    next({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Login'</span>}) <span class=\"hljs-comment\">// 实现中断，不会在触发后面的钩子，重新从 beforeEach 开始</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    preloaderFull.show({<span class=\"hljs-attr\">time</span>: <span class=\"hljs-number\">200</span>})\n    <span class=\"hljs-built_in\">document</span>.title = to.meta.title\n    next()\n  }\n})</code></pre>\n</section><section><h2 id=\"2555113296\">beforeRouteUpdate 使用注意，状态更新</h2><pre><code class=\"language-js\">beforeRouteUpdate (to, <span class=\"hljs-keyword\">from</span>, next) {\n  next()\n  <span class=\"hljs-comment\">// 此时部分状态可能未更新，比如路由的 params 转 props</span>\n  <span class=\"hljs-comment\">// ...</span>\n\n  <span class=\"hljs-keyword\">this</span>.$nextTick(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 状态已更新：路由的 params 成功转成 props</span>\n  })\n}</code></pre>\n</section></section><section><h1 id=\"1308202286\">编程式导航</h1><section><h2 id=\"1503327822\">介绍</h2><p>通过 js 主动进行路由跳转。通过参数指定路由，url 会发生改变，并发生相关组件的切换</p>\n</section><section><h2 id=\"1781575815\">使用</h2><p>参数与路由定义有关</p>\n<p><strong>通过 path 选择路由</strong></p>\n<pre><code class=\"language-js\">router.push({ <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'home'</span> })\n<span class=\"hljs-comment\">// 可简写为</span>\nrouter.push(<span class=\"hljs-string\">'home'</span>)</code></pre>\n<p><strong>通过 name 选择路由</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">router</span><span class=\"hljs-selector-class\">.push</span>({ <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'user'</span>})\n</code></pre>\n<p><strong>带参</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 动态路由形式带参。详见[动态路由]</span>\nrouter.push({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'user'</span>, <span class=\"hljs-attr\">params</span>: { <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-number\">123</span> }})\n\n<span class=\"hljs-comment\">// 带查询参数，变成 /register?plan=private</span>\nrouter.push({ <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'register'</span>, <span class=\"hljs-attr\">query</span>: { <span class=\"hljs-attr\">plan</span>: <span class=\"hljs-string\">'private'</span> }})</code></pre>\n</section><section><h2 id=\"2882326698\">问题解决</h2></section></section><section><h1 id=\"2319009093\">设置 title</h1><p>vue router 设置 title</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 路由全局钩子</span>\nrouter.beforeEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">to, <span class=\"hljs-keyword\">from</span>, next</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">document</span>.title = to.meta.title\n  next()\n})\n\n\n<span class=\"hljs-comment\">// 路由定义</span>\n{\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">''</span>,\n    <span class=\"hljs-attr\">component</span>: Home,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'home'</span>,\n    <span class=\"hljs-attr\">meta</span>: {<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Home'</span>}\n}</code></pre>\n</section><section><h1 id=\"1536699737\">路由传参</h1><section><h2 id=\"17591623\">通过 params</h2><pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"{name:'Agent', params: { phone: item.phone }}\"</span>&gt;</span>go<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span></code></pre>\n</section><section><h2 id=\"4018628535\">接收获取</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(vm.$route.params.phone)</code></pre>\n</section><section><h2 id=\"1619710987\">可表现在路由上，也就是所谓的动态路由</h2><p>当然，也可不表现，或只表现指定参数。<br>另外，使用 <code>query</code> 传参必定会表现在路由上</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'Agent'</span>,\n  path: <span class=\"hljs-string\">'/publisher/agent/:phone'</span>,\n  meta: {title: <span class=\"hljs-string\">'代理商'</span>},\n  <span class=\"hljs-selector-tag\">component</span>: <span class=\"hljs-selector-tag\">Agent</span>\n}</code></pre>\n</section></section><section><h1 id=\"2551277654\">路由对象，信息对象</h1><p>可通过实例获取</p>\n<p><code>vm.$router</code>  </p>\n<p><code>vm.$route</code></p>\n</section><section><h1 id=\"894594698\">路由跳转后会销毁组件实例</h1></section><section><h1 id=\"1794741243\">问题</h1><section><h2 id=\"3415776458\">路由参数改变不发生跳转</h2><p>当路由只有参数改变情况不发生跳转，包括直接修改地址栏。</p>\n<p>需借助实例的 beforeRouteUpdate 钩子</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  data () {\n    <span class=\"hljs-keyword\">return</span> { }\n  },\n  mounted () {\n    <span class=\"hljs-keyword\">this</span>.loadData()\n  },\n  switchBook (e) {\n    <span class=\"hljs-keyword\">let</span> {target} = e\n    <span class=\"hljs-keyword\">if</span> (target.classList.contains(<span class=\"hljs-string\">'next'</span>)) {\n      <span class=\"hljs-keyword\">let</span> {index, $router} = <span class=\"hljs-keyword\">this</span>\n      index++\n      $router.push(<span class=\"hljs-string\">'/user/booksinfo/index/'</span> + index)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">let</span> {index, $router} = <span class=\"hljs-keyword\">this</span>\n      index--\n      $router.push(<span class=\"hljs-string\">'/user/booksinfo/index/'</span> + index)\n    }\n  },\n  <span class=\"hljs-attr\">methods</span>: {\n    loadData () {\n      <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-keyword\">this</span>.index = <span class=\"hljs-keyword\">this</span>.$route.params.index * <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-comment\">// 某 ajax 逻辑</span>\n    }\n  },\n  beforeRouteUpdate (to, <span class=\"hljs-keyword\">from</span>, next) {\n    <span class=\"hljs-comment\">// 在当前路由改变，但是该组件被复用时调用</span>\n    <span class=\"hljs-comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>\n    <span class=\"hljs-comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>\n    <span class=\"hljs-comment\">// 可以访问组件实例 `this`</span>\n    next()\n    <span class=\"hljs-keyword\">this</span>.loadData()\n  }\n}</code></pre>\n</section><section><h2 id=\"3977788516\">vue-router 重定向操作注意</h2><p>重定向操作尽量不在路由守卫中控制，会有bug，可能不会触发 <code>router.afterEach</code> 事件</p>\n<p>通过配置 routes 实现。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> [\n  {\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/edit-lectures'</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'EditLectures'</span>,\n    <span class=\"hljs-attr\">meta</span>: {<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'开课编辑'</span>, <span class=\"hljs-attr\">zIndex</span>: <span class=\"hljs-number\">1</span>},\n    <span class=\"hljs-attr\">component</span>: CreateLectures,\n    <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">to</span> =&gt;</span> {\n      <span class=\"hljs-comment\">// 没数据情况进行重定向</span>\n      <span class=\"hljs-keyword\">if</span> (to.name === <span class=\"hljs-string\">'EditLectures'</span>) { <span class=\"hljs-comment\">// 编辑情况</span>\n        <span class=\"hljs-keyword\">if</span> (to.params.id === <span class=\"hljs-literal\">undefined</span>) {\n          <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'LecturesManage'</span>}\n        }\n      }\n    }\n  }\n]\n</code></pre>\n"})
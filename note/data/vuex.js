window['cb_vuex']({"outline":[{"id":"1765445527","level":1,"name":"vuex 简单总结","children":[{"id":"3671266845","level":2,"name":"获取状态","children":[]},{"id":"3493951851","level":2,"name":"修改状态","children":[]},{"id":"3290576082","level":2,"name":"新加状态","children":[]},{"id":"3861357426","level":2,"name":"State","children":[]},{"id":"554654915","level":2,"name":"Getter","children":[]},{"id":"627352511","level":2,"name":"Mutation","children":[]},{"id":"405068004","level":2,"name":"Action","children":[]},{"id":"511859201","level":2,"name":"Module","children":[]},{"id":"2022819248","level":2,"name":"都有对应的辅助函数","children":[]}]}],"content":"<section><h1 id=\"1765445527\">vuex 简单总结</h1><section><h2 id=\"3671266845\">获取状态</h2><p>组件中的计算属性，通过辅助函数 mapState mapGetters  更方便</p>\n</section><section><h2 id=\"3493951851\">修改状态</h2><p>首先通过 Mutation、Action 选项定义修改的事件函数，然后组件中调用执行，比如 <code>store.commit(&#39;increment&#39;)</code> 、<code>store.dispatch(&#39;increment&#39;)</code></p>\n<p>可通过辅助函数 mapMutations、mapActions 快捷绑定成组件方法</p>\n</section><section><h2 id=\"3290576082\">新加状态</h2><p>后期添加可响应的状态，遵守 Vue 的响应规则</p>\n<p>依然在 Mutation、Action 中进行</p>\n<ul>\n<li><p>使用 Vue.set(obj, &#39;newProp&#39;, 123), 或者</p>\n</li>\n<li><p>以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：</p>\n<pre><code>  state.obj = { ...state.obj, newProp: 123 }</code></pre></li>\n</ul>\n</section><section><h2 id=\"3861357426\">State</h2><p>相对于 data</p>\n</section><section><h2 id=\"554654915\">Getter</h2><p>其实就是 State 的计算属性或者方法函数</p>\n</section><section><h2 id=\"627352511\">Mutation</h2><p>相当于事件声明，同步修改 State。为什么必须同步，为了状态可跟踪</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store({\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">1</span>\n  },\n  <span class=\"hljs-attr\">mutations</span>: {\n    <span class=\"hljs-comment\">// 参数1 固定为 state，参数2 为传过来的参数(如果有)</span>\n    increment (state, n) {\n      <span class=\"hljs-comment\">// 变更状态</span>\n      state.count += n\n    }\n  }\n})</code></pre>\n<p><strong>组件中触发</strong>  </p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">this</span>.$store.commit(<span class=\"hljs-string\">'increment'</span>)\n<span class=\"hljs-keyword\">this</span>.$store.commit(<span class=\"hljs-string\">'increment'</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-comment\">// 带参</span></code></pre>\n<p>或使用 mapMutations</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">import</span> { mapMutations } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuex'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-comment\">// ...</span>\n  methods: {\n    ...mapMutations([\n      <span class=\"hljs-string\">'increment'</span>, <span class=\"hljs-comment\">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span>\n\n      <span class=\"hljs-comment\">// `mapMutations` 也支持带参：</span>\n      <span class=\"hljs-string\">'incrementBy'</span> <span class=\"hljs-comment\">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span>\n    ]),\n    ...mapMutations({\n      <span class=\"hljs-attr\">add</span>: <span class=\"hljs-string\">'increment'</span> <span class=\"hljs-comment\">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span>\n    })\n  }\n}</code></pre>\n</section><section><h2 id=\"405068004\">Action</h2><p>Mutation 扩展，实现异步</p>\n<p>组件中触发 <code>this.$store.dispatch(&#39;increment&#39;)</code></p>\n</section><section><h2 id=\"511859201\">Module</h2><p>命名空间，模块嵌套</p>\n</section><section><h2 id=\"2022819248\">都有对应的辅助函数</h2><p>方便在组件中使用</p>\n"})
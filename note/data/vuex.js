window['cb_vuex']({"outline":[{"id":"784353653","level":1,"name":"vuex 简单总结","children":[{"id":"645696609","level":2,"name":"获取状态","children":[]},{"id":"1125181705","level":2,"name":"修改状态","children":[]},{"id":"304720983","level":2,"name":"新加状态","children":[]},{"id":"2486883308","level":2,"name":"State","children":[]},{"id":"3044137233","level":2,"name":"Getter","children":[]},{"id":"3209708931","level":2,"name":"Mutation","children":[]},{"id":"757906615","level":2,"name":"Action","children":[]},{"id":"757162707","level":2,"name":"Module","children":[]},{"id":"290243084","level":2,"name":"都有对应的辅助函数","children":[]}]}],"content":"<section><h1 id=\"784353653\">vuex 简单总结</h1><section><h2 id=\"645696609\">获取状态</h2><p>组件中的计算属性，通过辅助函数 mapState mapGetters  更方便</p>\n</section><section><h2 id=\"1125181705\">修改状态</h2><p>首先通过 Mutation、Action 选项定义修改的事件函数，然后组件中调用执行，比如 <code>store.commit(&#39;increment&#39;)</code> 、<code>store.dispatch(&#39;increment&#39;)</code></p>\n<p>可通过辅助函数 mapMutations、mapActions 快捷绑定成组件方法</p>\n</section><section><h2 id=\"304720983\">新加状态</h2><p>后期添加可响应的状态，遵守 Vue 的响应规则</p>\n<p>依然在 Mutation、Action 中进行</p>\n<ul>\n<li><p>使用 Vue.set(obj, &#39;newProp&#39;, 123), 或者</p>\n</li>\n<li><p>以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：</p>\n<pre><code>  state.obj = { ...state.obj, newProp: 123 }</code></pre></li>\n</ul>\n</section><section><h2 id=\"2486883308\">State</h2><p>相对于 data</p>\n</section><section><h2 id=\"3044137233\">Getter</h2><p>其实就是 State 的计算属性或者方法函数</p>\n</section><section><h2 id=\"3209708931\">Mutation</h2><p>相当于事件声明，同步修改 State。为什么必须同步，为了状态可跟踪</p>\n<p>组件中触发 <code>store.commit(&#39;increment&#39;)</code></p>\n</section><section><h2 id=\"757906615\">Action</h2><p>Mutation 扩展，实现异步</p>\n<p>组件中触发 <code>store.dispatch(&#39;increment&#39;)</code></p>\n</section><section><h2 id=\"757162707\">Module</h2><p>命名空间，模块嵌套</p>\n</section><section><h2 id=\"290243084\">都有对应的辅助函数</h2><p>方便在组件中使用</p>\n"})
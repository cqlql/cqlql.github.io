window['cb_js-dom-webapis']({"outline":{"children":[{"level":1,"name":"html 转图片","children":[]},{"level":1,"name":"btoa 字符串转 base64","children":[]},{"level":1,"name":"web 图片数据形式种类","children":[]},{"level":1,"name":"弹窗","children":[]},{"level":1,"name":"页面地址-url","children":[{"level":2,"name":"location.search 读取","children":[]},{"level":2,"name":"location.search 设置","children":[]},{"level":2,"name":"href 跳转执行后，后面的 js 还会执行吗？","children":[]}]},{"level":1,"name":"浏览器跳转","children":[]},{"level":1,"name":"设备像素比 window.devicePixelRatio","children":[]},{"level":1,"name":"安卓浏览器兼容性判断","children":[]},{"level":1,"name":"ajax","children":[{"level":2,"name":"问题","children":[{"level":3,"name":"xhr.responseType","children":[]}]}]},{"level":1,"name":"cookie","children":[{"level":2,"name":"新增/修改 操作","children":[]},{"level":2,"name":"参数 path","children":[]},{"level":2,"name":"删","children":[]},{"level":2,"name":"查","children":[]}]},{"level":1,"name":"dataset 标签数据","children":[{"level":2,"name":"兼容性","children":[]},{"level":2,"name":"js 设置","children":[]},{"level":2,"name":"js 获取","children":[]},{"level":2,"name":"关于大小写问题","children":[]}]},{"level":1,"name":"document 对象","children":[{"level":2,"name":"直接操作 title 标签值","children":[]},{"level":2,"name":"页面加载状态 document.readyState","children":[]}]},{"level":1,"name":"FormData","children":[]},{"level":1,"name":"h5 文件上传","children":[]},{"level":1,"name":"h5 文件系统 FileSystem API","children":[{"level":2,"name":"文件读取","children":[]},{"level":2,"name":"base64","children":[]},{"level":2,"name":"blob 获取","children":[{"level":3,"name":"atob + Uint8Array 方式","children":[]},{"level":3,"name":"canvas.toBlob 方式","children":[]}]},{"level":2,"name":"blob 转 file","children":[]},{"level":2,"name":"浏览器直接打开 blob","children":[]}]},{"level":1,"name":"h5 无刷新改变 url","children":[]},{"level":1,"name":"h5 本地存储","children":[{"level":2,"name":"localStorage/sessionStorage","children":[]}]},{"level":1,"name":"h5 页面状态 Page Visibility","children":[]},{"level":1,"name":"h5全屏","children":[{"level":2,"name":"执行全屏","children":[]},{"level":2,"name":"取消全屏","children":[]},{"level":2,"name":"全屏改变事件","children":[]},{"level":2,"name":"判断是否全屏","children":[]}]},{"level":1,"name":"h5拖放","children":[{"level":2,"name":"元素可拖放设置","children":[]},{"level":2,"name":"相关事件：","children":[]}]},{"level":1,"name":"IE 专属","children":[{"level":2,"name":"WScript 实现全屏","children":[]},{"level":2,"name":"执行[注释]","children":[]}]},{"level":1,"name":"js 操作 css","children":[{"level":2,"name":"元素对象的 style 属性","children":[{"level":3,"name":"传统方式操作 style","children":[{"level":4,"name":"兼容性","children":[]},{"level":4,"name":"设置","children":[]},{"level":4,"name":"获取","children":[]},{"level":4,"name":"猜想：是否可以直接赋对象？","children":[]},{"level":4,"name":"前缀问题","children":[]}]},{"level":3,"name":"新方式操作 style","children":[{"level":4,"name":"设置 - setProperty","children":[]},{"level":4,"name":"获取 – getPropertyValue","children":[]},{"level":4,"name":"删除 - removeProperty","children":[]},{"level":4,"name":"判断是否使用 important 优先级 - getPropertyPriority","children":[]},{"level":4,"name":"内联css个数 – length","children":[]},{"level":4,"name":"可操作索引","children":[]},{"level":4,"name":"兼容性","children":[]}]},{"level":3,"name":"ie专属，ie6 ~ ie11","children":[]}]},{"level":2,"name":"style 元素","children":[{"level":3,"name":"操作","children":[{"level":4,"name":"innerHTML 方式","children":[]},{"level":4,"name":"textContent方式","children":[]},{"level":4,"name":"styleElem.styleSheet.cssText IE独有方式","children":[]},{"level":4,"name":"兼容所有示例","children":[]}]},{"level":3,"name":"动态创建注意","children":[{"level":4,"name":"位置","children":[]},{"level":4,"name":"生效","children":[]}]},{"level":3,"name":"关于 jq 的 html 方法","children":[]}]},{"level":2,"name":"全能取css值","children":[{"level":3,"name":"高级 - getComputedStyle","children":[{"level":4,"name":"兼容性：ie9+，chrome，firefox","children":[]}]},{"level":3,"name":"ie6 ~ 9","children":[{"level":4,"name":"取操作","children":[]},{"level":4,"name":"写操作 尝试","children":[]}]}]},{"level":2,"name":"className 操作","children":[{"level":3,"name":"直接操作 className 属性","children":[{"level":4,"name":"增删改查","children":[]}]},{"level":3,"name":"关于className中包含多个空格 影响","children":[{"level":4,"name":"className 属性的影响","children":[]},{"level":4,"name":"对getElementsByClassName的没有影响","children":[]}]},{"level":3,"name":"操作 className 新方式 - classList","children":[]}]}]},{"level":1,"name":"URL 解析","children":[]},{"level":1,"name":"事件","children":[{"level":2,"name":"dispatchEvent 手动触发事件","children":[]},{"level":2,"name":"阻止冒泡","children":[]},{"level":2,"name":"阻止默认动作","children":[]},{"level":2,"name":"键盘输入事件","children":[{"level":3,"name":"常用的几个 keyCode","children":[]},{"level":3,"name":"keypress 字符键触发","children":[]},{"level":3,"name":"input 有字符输入则触发","children":[]}]},{"level":2,"name":"触摸事件","children":[{"level":3,"name":"特性","children":[]},{"level":3,"name":"e.touches 与 e.targetTouches 区别","children":[]}]},{"level":2,"name":"鼠标事件","children":[{"level":3,"name":"点下、松开","children":[]},{"level":3,"name":"右键菜单","children":[]},{"level":3,"name":"双击","children":[]},{"level":3,"name":"移入事件","children":[]},{"level":3,"name":"滚轮事件","children":[]}]},{"level":2,"name":"滚动条事件","children":[{"level":3,"name":"新版 chrome 窗口滚动条默认无法阻止解决","children":[]}]},{"level":2,"name":"设备旋转事件","children":[]},{"level":2,"name":"resize 窗口变化事件","children":[]},{"level":2,"name":"阻止失焦","children":[]},{"level":2,"name":"问题","children":[{"level":3,"name":"移动端(android) touchend 中 focus() 获焦失败","children":[]},{"level":3,"name":"移动端 chrome touchmove 卡顿现象","children":[]},{"level":3,"name":"ios document click 无效问题","children":[]}]}]},{"level":1,"name":"元素 clone","children":[{"level":2,"name":"使用 document.importNode","children":[]},{"level":2,"name":"其实还可使用 innerHTML、outerHTML 进行 clone","children":[]}]},{"level":1,"name":"元素、节点","children":[{"level":2,"name":"元素对象创建","children":[]},{"level":2,"name":"节点替换(适用元素)","children":[{"level":3,"name":"子节点替换","children":[{"level":4,"name":"语法","children":[]},{"level":4,"name":"例子","children":[]},{"level":4,"name":"兼容性","children":[]}]}]},{"level":2,"name":"节点增加","children":[{"level":3,"name":"末尾追加子节点(适用元素)","children":[]},{"level":3,"name":"元素内部增加 insertBefore","children":[]}]},{"level":2,"name":"元素增加","children":[{"level":3,"name":"增加 html 文本 - insertAdjacentHTML","children":[]},{"level":3,"name":"增加元素 - insertAdjacentElement","children":[]}]},{"level":2,"name":"节点克隆/复制(适用元素)","children":[]},{"level":2,"name":"节点替换(适用元素)","children":[]},{"level":2,"name":"识别文档中不存在元素","children":[]},{"level":2,"name":"元素标签文本操作","children":[{"level":3,"name":"innerText","children":[]},{"level":3,"name":"textContent","children":[]},{"level":3,"name":"innerHTML","children":[]},{"level":3,"name":"outerHTML","children":[]},{"level":3,"name":"textContent 与 innerText 区别","children":[]},{"level":3,"name":"总结","children":[]}]},{"level":2,"name":"元素标签属性操作","children":[{"level":3,"name":"通用全能操作","children":[]},{"level":3,"name":"部分直接 js 操作","children":[{"level":4,"name":"name 标签属性 -- 表单元素独有","children":[]},{"level":4,"name":"class 标签属性 -- 通过 className 读写","children":[]},{"level":4,"name":"id 标签属性","children":[]}]}]},{"level":2,"name":"多个节点增加效率写法-文档碎片","children":[]},{"level":2,"name":"文本节点相关","children":[]},{"level":2,"name":"节点类型 node.nodeType","children":[]},{"level":2,"name":"节点名称 node.nodeName","children":[]},{"level":2,"name":"节点值 node.nodeValue","children":[]},{"level":2,"name":"对象形式操作 元素属性","children":[]}]},{"level":1,"name":"元素、节点删除","children":[{"level":2,"name":"remove","children":[]},{"level":2,"name":"removeChild","children":[]}]},{"level":1,"name":"元素、节点获取","children":[{"level":2,"name":"简单汇总","children":[]},{"level":2,"name":"根据 id 取","children":[]},{"level":2,"name":"子元素集合 children","children":[]},{"level":2,"name":"紧邻元素获取","children":[]},{"level":2,"name":"第一个子元素","children":[]},{"level":2,"name":"事件元素","children":[{"level":3,"name":"事件根元素","children":[]},{"level":3,"name":"当前事件元素","children":[]}]},{"level":2,"name":"后代元素获取","children":[{"level":3,"name":"指定标签名的后代元素","children":[]},{"level":3,"name":"所有后代","children":[]},{"level":3,"name":"根据 name - getElementsByName","children":[]},{"level":3,"name":"根据 class - getElementsByClassName","children":[]}]},{"level":2,"name":"根据元素取 document 对象","children":[]},{"level":2,"name":"一些疑虑","children":[{"level":3,"name":"display:none 元素的获取","children":[]},{"level":3,"name":"取元素集合，元素顺序问题","children":[]}]},{"level":2,"name":"父节点、父元素","children":[]}]},{"level":1,"name":"元素尺寸","children":[{"level":2,"name":"高宽 - 精确","children":[]},{"level":2,"name":"高宽 - 无法精确到小数","children":[{"level":3,"name":"汇总","children":[]},{"level":3,"name":"clientHeight、clientWidth属性——不包括边框 和 滚动条","children":[{"level":4,"name":"inline 元素也将得到 0","children":[]},{"level":4,"name":"描述","children":[]},{"level":4,"name":"返回值：Number类型","children":[]},{"level":4,"name":"兼容性：","children":[]}]},{"level":3,"name":"offsetHeight、offsetWidth属性——包括边框","children":[]},{"level":3,"name":"scrollHeight、scrollWidth属性——内容高宽，不包括边框","children":[]}]},{"level":2,"name":"边框宽度","children":[]}]},{"level":1,"name":"元素集合 HTMLCollection","children":[{"level":2,"name":"实时改变特性","children":[]},{"level":2,"name":"判断某集合是否是HTMLCollection类派生","children":[]},{"level":2,"name":"根据name标签属性检索元素","children":[]},{"level":2,"name":"根据标签名检索 - ie独有","children":[]}]},{"level":1,"name":"光标操作","children":[{"level":2,"name":"textarea input[type=text]","children":[{"level":3,"name":"ie10+","children":[]},{"level":3,"name":"ie6/7/8/9","children":[]}]},{"level":2,"name":"ie 678 selection、range","children":[]},{"level":2,"name":"富文本光标操作","children":[{"level":3,"name":"将光标设置到末尾","children":[]}]},{"level":2,"name":"实用代码块","children":[{"level":3,"name":"表情增加","children":[]},{"level":3,"name":"取消选择","children":[]}]}]},{"level":1,"name":"坐标","children":[{"level":2,"name":"元素坐标","children":[{"level":3,"name":"相对定位元素","children":[]}]}]},{"level":1,"name":"复制剪切粘帖","children":[{"level":2,"name":"复制事件 copy","children":[{"level":3,"name":"ie所有(包括edge)：","children":[]},{"level":3,"name":"chrome、firefox:","children":[]}]},{"level":2,"name":"粘帖事件 paste","children":[{"level":3,"name":"ie所有(包括edge)：","children":[]},{"level":3,"name":"firefox：","children":[]},{"level":3,"name":"chrome：","children":[]},{"level":3,"name":"jq如何绑定：","children":[]}]},{"level":2,"name":"剪切事件 cut","children":[]},{"level":2,"name":"取剪切板内容","children":[{"level":3,"name":"ie6~11：","children":[]},{"level":3,"name":"高级，包括edge：","children":[]}]},{"level":2,"name":"设置剪切板","children":[{"level":3,"name":"随时操作剪切板的方式，复制实现","children":[]},{"level":3,"name":"只能在 复制粘贴剪切事件 操作剪切板的方式","children":[]}]},{"level":2,"name":"关于事件绑定注意","children":[]},{"level":2,"name":"ie可能需开启权限","children":[]}]},{"level":1,"name":"打印机","children":[]},{"level":1,"name":"浏览器","children":[{"level":2,"name":"手动刷新","children":[]},{"level":2,"name":"浏览器判断","children":[]}]},{"level":1,"name":"浏览器窗口","children":[{"level":2,"name":"尺寸-显示窗口","children":[{"level":3,"name":"方式1：直接通过window获取，这应该是<strong><em>*被认可的方式</em></strong>","children":[]},{"level":3,"name":"方式2：通过<code>&lt;html&gt;</code>元素的client，<strong><em>*兼容性最好</em></strong>","children":[]},{"level":3,"name":"方式3：通过<code>&lt;html&gt;</code>元素的offset，次方案不可取","children":[]}]},{"level":2,"name":"给显示窗口设置背景","children":[]},{"level":2,"name":"ie67 需通过 <code>&lt;html&gt;</code> 控制","children":[]},{"level":2,"name":"尺寸-内容窗口WH","children":[]}]},{"level":1,"name":"滚动条","children":[{"level":2,"name":"滚动条控制","children":[{"level":3,"name":"浏览器窗口","children":[{"level":4,"name":"scrollTo","children":[]},{"level":4,"name":"scrollBy","children":[]}]},{"level":3,"name":"元素","children":[]}]},{"level":2,"name":"获取 - 滚动条隐藏距离","children":[{"level":3,"name":"元素","children":[]},{"level":3,"name":"浏览器窗口","children":[{"level":4,"name":"1. 直接获取，此为推荐方式","children":[]},{"level":4,"name":"2. 通过元素方式，不推荐","children":[]}]}]},{"level":2,"name":"滚动事件","children":[]}]}],"name":"js-dom-webapis"},"content":"<section><h1 id='[\"html 转图片\"]' data-index=0>html 转图片</h1><p>借助 svg</p><pre><code class=language-js><span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>elm, cvs, img</span>) </span>{\n  <span class=hljs-keyword>let</span> div = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'div'</span>)\n  div.innerHTML = <span class=hljs-string>`&lt;svg ref=\"svg\" viewBox=\"0 0 2016 1428\"&gt;\n    &lt;foreignObject width=\"2016\" height=\"1428\"&gt;<span class=hljs-subst>${elm.outerHTML}</span>&lt;/foreignObject&gt;\n  &lt;/svg&gt;`</span>\n  <span class=hljs-keyword>let</span> svg = div.children[<span class=hljs-number>0</span>]\n\n  <span class=hljs-comment>// let img = new Image()</span>\n  <span class=hljs-comment>// img.style.position = 'relative'</span>\n  <span class=hljs-comment>// document.body.appendChild(img)</span>\n  svg.children[<span class=hljs-number>0</span>].innerHTML = elm.outerHTML\n  <span class=hljs-keyword>let</span> ctx = cvs.getContext(<span class=hljs-string>'2d'</span>)\n  <span class=hljs-keyword>let</span> d = (<span class=hljs-keyword>new</span> XMLSerializer()).serializeToString(svg)\n  <span class=hljs-comment>// 数据流，字符串形式</span>\n  img.src = <span class=hljs-string>'data:image/svg+xml;charset=utf-8,'</span> + d\n  img.width = <span class=hljs-number>2016</span>\n  <span class=hljs-comment>// img.width = 1008</span>\n  img.height = <span class=hljs-number>1428</span>\n\n  img.onload = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    cvs.width = img.width\n    cvs.height = img.height\n    ctx.drawImage(img, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>)\n  }\n}\n</code></pre></section><section><h1 id='[\"btoa 字符串转 base64\"]' data-index=1>btoa 字符串转 base64</h1><pre><code class=language-js><span class=hljs-keyword>let</span> d = (<span class=hljs-keyword>new</span> XMLSerializer()).serializeToString(svg)\nd = btoa(d)\nimg.src = <span class=hljs-string>'data:image/svg+xml;base64,'</span> + d</code></pre></section><section><h1 id='[\"web 图片数据形式种类\"]' data-index=2>web 图片数据形式种类</h1><pre><code class=language-js><span class=hljs-comment>// 数据流，字符串形式</span>\nimg.src = <span class=hljs-string>'data:image/svg+xml;charset=utf-8,'</span> + d\n<span class=hljs-comment>// base 64</span>\nimg.src = <span class=hljs-string>'data:image/svg+xml;base64,'</span> + d\n<span class=hljs-comment>// 其他几种图片类型</span>\n<span class=hljs-comment>// data:image/jpeg;base64,</span>\n<span class=hljs-comment>// data:image/png;base64,</span>\n<span class=hljs-comment>// data:image/gif;base64,</span></code></pre></section><section><h1 id='[\"弹窗\"]' data-index=3>弹窗</h1><pre><code class=language-js><span class=hljs-comment>// 确认窗，将挂起，点确认或者取消才会执行</span>\n<span class=hljs-keyword>if</span> (confirm(<span class=hljs-string>\"确实要删除吗\"</span>)) { }</code></pre></section><section><h1 id='[\"页面地址-url\"]' data-index=4>页面地址-url</h1><p>浏览器地址栏中的地址操作</p><section><h2 id='[\"页面地址-url\",\"location.search 读取\"]' data-index=5>location.search 读取</h2><p>没有情况(只有一个<code>?</code>也视为没有)：空字符串</p><p>有：将包括?</p></section><section><h2 id='[\"页面地址-url\",\"location.search 设置\"]' data-index=6>location.search 设置</h2><p>可以不加 <code>?</code></p></section><section><h2 id='[\"页面地址-url\",\"href 跳转执行后，后面的 js 还会执行吗？\"]' data-index=7>href 跳转执行后，后面的 js 还会执行吗？</h2><p>会执行。所有js 执行完成后 再href跳转</p><p>js 报错影响是否影响 href 跳转？正常机制：</p><ul><li>href 之上，不会跳转</li><li>href 之下，会跳转</li></ul></section></section><section><h1 id='[\"浏览器跳转\"]' data-index=8>浏览器跳转</h1><pre><code class=language-js><span class=hljs-comment>// 直接替换当前页面</span>\nlocation.href = <span class=hljs-string>'//baidu.com'</span></code></pre></section><section><h1 id='[\"设备像素比 window.devicePixelRatio\"]' data-index=9>设备像素比 window.devicePixelRatio</h1><p>如果是2，则是 1个像素点放了1/2像素的内容。 即 2个物理分辨率 = 1个逻辑分辨率</p><p>canvas 画图模糊情况使用</p></section><section><h1 id='[\"安卓浏览器兼容性判断\"]' data-index=10>安卓浏览器兼容性判断</h1><p>不应判断android系统版本，跟系统版本无关，跟内置浏览器版本有关</p></section><section><h1 id='[\"ajax\"]' data-index=11>ajax</h1><section><h2 id='[\"ajax\",\"问题\"]' data-index=12>问题</h2><section><h3 id='[\"ajax\",\"问题\",\"xhr.responseType\"]' data-index=13>xhr.responseType</h3></section></section></section><section><h1 id='[\"cookie\"]' data-index=14>cookie</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie>Document.cookie - Web API 接口 | MDN</a></p><p>与当前网址关联</p><section><h2 id='[\"cookie\",\"新增/修改 操作\"]' data-index=15>新增/修改 操作</h2><p>一次只能操作一个键值</p><pre><code class=language-js><span class=hljs-comment>// 新增/修改</span>\n<span class=hljs-built_in>document</span>.cookie = <span class=hljs-string>\"succmsg=helloword;expires=Mon, 16 Jan 2012 20:30:11 UTC;path=/;domain=b.com\"</span>;\n<span class=hljs-comment>// 新增/修改-动态过期时间</span>\n<span class=hljs-built_in>document</span>.cookie = <span class=hljs-string>\"succmsg=helloword;expires=\"</span>+(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>()).toUTCString()+<span class=hljs-string>\";path=/;domain=b.com\"</span>;\n\n<span class=hljs-comment>// 值设置为空字符串</span>\n<span class=hljs-built_in>document</span>.cookie = <span class=hljs-string>'succmsg='</span>; \n<span class=hljs-comment>// ie6视这种cookie是没有key情况</span>\n\n<span class=hljs-comment>// 设置没有 key 的 cookie</span>\n<span class=hljs-built_in>document</span>.cookie = <span class=hljs-string>'bar'</span>;\n<span class=hljs-comment>// 加上之前设置的，console.log(document.cookie) 将返回：</span>\n<span class=hljs-comment>// \"bar; succmsg=helloword;\"</span></code></pre><p><strong>中文字符值注意事项：</strong></p><p>避免中文字符无效情况，使用encodeURIComponent 转码，转码后不管什么字符都不会错： 转码例子：</p><pre><code class=language-js><span class=hljs-built_in>document</span>.cookie=<span class=hljs-string>'test='</span>+<span class=hljs-built_in>encodeURIComponent</span>(<span class=hljs-string>'值'</span>)+<span class=hljs-string>';path=/enterprise/company'</span></code></pre></section><section><h2 id='[\"cookie\",\"参数 path\"]' data-index=16>参数 path</h2><p>设置后，只有访问相应地址才能取到值</p><p>默认 <code>;path=/</code> 当前网站的任何子地址都可访问</p></section><section><h2 id='[\"cookie\",\"删\"]' data-index=17>删</h2><p>不管是会话还是持久cookie，只要将expires设置为过期，都将被删除</p><pre><code class=language-js><span class=hljs-built_in>document</span>.cookie = <span class=hljs-string>\"test=1;path=/\"</span>;\n<span class=hljs-keyword>var</span> d = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>();\nd.setDate(d.getDate()<span class=hljs-number>-1</span>);\n<span class=hljs-built_in>document</span>.cookie = <span class=hljs-string>\"test=(随便，最好不为空);expires=\"</span>+d+<span class=hljs-string>\";path=/\"</span>;<span class=hljs-comment>//执行删除</span></code></pre><p>删除必须的是相同的path。不管上级下级关系，反正只删除path值完全相等情况。<br>目前还不清楚跟domain什么关系，待测</p></section><section><h2 id='[\"cookie\",\"查\"]' data-index=18>查</h2><p>将返回所有 cookie，键值对，分号+空格隔开</p><p>没有任何 cookie 将值将返回<strong>空字符串</strong></p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.cookie)\n<span class=hljs-comment>// FG=1; PSTM=1529373406; BD_CK_SAM=1; PSINO=6</span></code></pre><p>简单封装，取指定key 的 cookie</p><pre><code class=language-js><span class=hljs-comment>// 没有值情况 返回null</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getCookie</span>(<span class=hljs-params>name</span>) </span>{\n    <span class=hljs-keyword>var</span> reg = <span class=hljs-keyword>new</span> <span class=hljs-built_in>RegExp</span>(name + <span class=hljs-string>'=([^;]*)'</span>),\n        v = reg.exec(<span class=hljs-built_in>document</span>.cookie);\n    <span class=hljs-keyword>return</span> v ? v[<span class=hljs-number>1</span>] : v;\n}</code></pre></section></section><section><h1 id='[\"dataset 标签数据\"]' data-index=19>dataset 标签数据</h1><section><h2 id='[\"dataset 标签数据\",\"兼容性\"]' data-index=20>兼容性</h2><p>ie 11 才开始支持，这种情况使用 <code>element.getAttribute(name)</code> 代替</p></section><section><h2 id='[\"dataset 标签数据\",\"js 设置\"]' data-index=21>js 设置</h2><p>js 设置操作将直接同步到标签上。可直接通过调试工具在标签上看到</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"item\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"1\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=\"undefined\">\n    item.dataset.index=2;\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span></code></pre></section><section><h2 id='[\"dataset 标签数据\",\"js 获取\"]' data-index=22>js 获取</h2><pre><code class=language-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>item</span><span class=hljs-selector-class>.dataset</span><span class=hljs-selector-class>.index</span>)</code></pre></section><section><h2 id='[\"dataset 标签数据\",\"关于大小写问题\"]' data-index=23>关于大小写问题</h2><p>只能小写获取。也就是说，标签属性名尽量小写。</p><pre><code class=language-js>document.body = `<span class=hljs-tag>&lt;<span class=hljs-name>a</span> <span class=hljs-attr>href</span>=<span class=hljs-string>\"javascript:;\"</span>  <span class=hljs-attr>data-qNo</span>=<span class=hljs-string>\"' + qNo + '\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"' + i + '\"</span>&gt;</span>' + qNo + '1<span class=hljs-tag>&lt;/<span class=hljs-name>a</span>&gt;</span>`\n\nconsole.log(btn.dataset.qno)</code></pre></section></section><section><h1 id='[\"document 对象\"]' data-index=24>document 对象</h1><section><h2 id='[\"document 对象\",\"直接操作 title 标签值\"]' data-index=25>直接操作 title 标签值</h2><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.title) <span class=hljs-comment>// 读。String 类型</span>\n\n<span class=hljs-built_in>document</span>.title = <span class=hljs-string>\"*\"</span> + <span class=hljs-built_in>document</span>.title; <span class=hljs-comment>// 设置</span>\n</code></pre><p><strong>兼容性：</strong> ie9及以上。ie6~8估计得直接取到title标签进行操作了</p></section><section><h2 id='[\"document 对象\",\"页面加载状态 document.readyState\"]' data-index=26>页面加载状态 document.readyState</h2><p>只读属性</p><p>返回值：字符串。</p><ol><li>&quot;loading&quot;：页面加载进行中</li><li>&quot;interactive&quot;：DOM对象可以操作了，此时图片视频未加载</li><li>&quot;complete&quot;：页面已完全加载（此时图片视频都已加载完毕）</li></ol><p>兼容性：<br>opera没有interactive状态。只有loading、complete状态<br>ie6\\7\\8\\9只有 点 刷新按钮 才有loading状态。通过URL重新加载页面 直接进入假的interactive状态(不可以操作DOM), 所以只有在 点 刷新按钮 才能 实现DOMContentLoaded事件<br>chrome\\fox没问题</p></section></section><section><h1 id='[\"FormData\"]' data-index=27>FormData</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/FormData>https://developer.mozilla.org/zh-CN/docs/Web/API/FormData</a></p><p>创建与使用</p><pre><code class=language-js>\n<span class=hljs-comment>// 创建方案1：创建一个空的FormData对象</span>\n<span class=hljs-keyword>var</span> formdata = <span class=hljs-keyword>new</span> FormData()\n<span class=hljs-comment>// 用 append 方法增加数据</span>\nformdata.append(<span class=hljs-string>\"name\"</span>, <span class=hljs-string>\"诸葛亮\"</span>)\nformdata.append(<span class=hljs-string>\"blog\"</span>, <span class=hljs-string>\"http://www.cnblogs.com\"</span>)\nformdata.append(<span class=hljs-string>\"file\"</span>, <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'fileToUpload'</span>).files[<span class=hljs-number>0</span>]) <span class=hljs-comment>// 文件</span>\n\n<span class=hljs-comment>// 创建方案2：通过 form 元素初始创建</span>\n<span class=hljs-keyword>var</span> formobj =  <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"form\"</span>)\n<span class=hljs-keyword>var</span> formdata = <span class=hljs-keyword>new</span> FormData(formobj)\n<span class=hljs-comment>// 同样可用 append 方法</span>\nformdata.append(<span class=hljs-string>\"name\"</span>, <span class=hljs-string>\"司马懿\"</span>)\n\n<span class=hljs-comment>// ajax 使用</span>\n<span class=hljs-keyword>var</span> xhr = <span class=hljs-keyword>new</span> XMLHttpRequest()\nxhr.open(<span class=hljs-string>'post'</span>, <span class=hljs-string>'/file'</span>)\nxhr.send(formdata)</code></pre><p>参数1 相同，多次 append 依然有效</p></section><section><h1 id='[\"h5 文件上传\"]' data-index=28>h5 文件上传</h1><p>兼容性：ie10+</p><pre><code class=language-js>\n<span class=hljs-comment>// 通过 input file 获取文件</span>\n<span class=hljs-comment>// input file 可以选多个，所以返回 files</span>\n<span class=hljs-keyword>var</span> file = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'file1'</span>).files[<span class=hljs-number>0</span>];\n\n<span class=hljs-comment>// FormData 模拟表单数据</span>\n<span class=hljs-comment>// https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects</span>\nfd = <span class=hljs-keyword>new</span> FormData();\nfd.append(<span class=hljs-string>\"file\"</span>, file);\n\n<span class=hljs-comment>// 文件大小</span>\n<span class=hljs-comment>// file.size</span>\n\n<span class=hljs-comment>// 文件名</span>\n<span class=hljs-comment>// oFile.name // \"Fiddler2.7z\"</span>\n\n<span class=hljs-comment>// 文件类型</span>\n<span class=hljs-comment>// file.type</span>\n<span class=hljs-comment>// 类型过滤</span>\n<span class=hljs-keyword>var</span> fileFilter = <span class=hljs-regexp>/^(image\\/bmp|image\\/gif|image\\/jpeg|image\\/png|image\\/tiff)$/i</span>\n<span class=hljs-keyword>if</span> (!fileFilter.test(file.type)) { }\n\n<span class=hljs-comment>// ajax</span>\n<span class=hljs-keyword>var</span> xhr = <span class=hljs-keyword>new</span> XMLHttpRequest();\n<span class=hljs-comment>// 进度条</span>\nxhr.upload.addEventListener(<span class=hljs-string>'progress'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    <span class=hljs-comment>// 是否可以取到 进度数据</span>\n    <span class=hljs-keyword>if</span> (e.lengthComputable) {\n        <span class=hljs-built_in>console</span>.log(e.loaded / e.total)\n    }\n})\n<span class=hljs-comment>// 完成后触发</span>\nxhr.addEventListener(<span class=hljs-string>'load'</span>, uploadFinish)\n<span class=hljs-comment>// 错误触发</span>\nxhr.addEventListener(<span class=hljs-string>'error'</span>, uploadError)\n<span class=hljs-comment>// 终止触发</span>\nxhr.addEventListener(<span class=hljs-string>'abort'</span>, uploadAbort)\n\n<span class=hljs-comment>// 上传</span>\nxhr.open(<span class=hljs-string>'post'</span>, <span class=hljs-string>'/file'</span>)\nxhr.send(fd)\n\n</code></pre></section><section><h1 id='[\"h5 文件系统 FileSystem API\"]' data-index=29>h5 文件系统 FileSystem API</h1><p>window.webkitRequestFileSystem 这个方法目前只有chrome支持</p><section><h2 id='[\"h5 文件系统 FileSystem API\",\"文件读取\"]' data-index=30>文件读取</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader>https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader</a></p><p>图片预览示例</p><pre><code class=language-js>\n<span class=hljs-keyword>var</span> fileReader = <span class=hljs-keyword>new</span> FileReader();\n<span class=hljs-comment>// 文件读取 完后触发</span>\nfileReader.onload = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    img.src = e.target.result;\n}\n<span class=hljs-comment>// 文件读取为 DataURL，base64</span>\nfileReader.readAsDataURL(<span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'file'</span>).files[<span class=hljs-number>0</span>]);\n</code></pre></section><section><h2 id='[\"h5 文件系统 FileSystem API\",\"base64\"]' data-index=31>base64</h2><ol><li>通过 FileReader 读取文件得到</li></ol><pre><code class=language-js><span class=hljs-keyword>var</span> myfile = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"myfile\"</span>).files[<span class=hljs-number>0</span>];\n<span class=hljs-keyword>var</span> fileRead = <span class=hljs-keyword>new</span> FileReader();\nfileRead.readAsDataURL(myfile);\nfileRead.onload = <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>e</span>)</span>{\n        <span class=hljs-built_in>console</span>.log(e);\n        <span class=hljs-keyword>var</span> base64 = e.target.result;\n        <span class=hljs-built_in>console</span>.log(base64);\n        <span class=hljs-keyword>var</span> img = <span class=hljs-keyword>new</span> Image();\n        img.src = base64;\n        <span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>\"body\"</span>)[<span class=hljs-number>0</span>].appendChild(img);\n    }</code></pre><ol start=2><li>通过 canvas.toDataURL</li></ol></section><section><h2 id='[\"h5 文件系统 FileSystem API\",\"blob 获取\"]' data-index=32>blob 获取</h2><p><strong>blob 可直接进行 ajax 文件上传，无需转 file</strong></p><section><h3 id='[\"h5 文件系统 FileSystem API\",\"blob 获取\",\"atob + Uint8Array 方式\"]' data-index=33>atob + Uint8Array 方式</h3><p>参考网址: <a href=https://blog.csdn.net/Tinker12345/article/details/78570456>DataURL, Blob, File, Image之间的关系与转换 - CSDN博客</a></p><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>dataURLToBlob</span>(<span class=hljs-params>dataurl</span>)</span>{\n  <span class=hljs-keyword>var</span> arr = dataurl.split(<span class=hljs-string>','</span>);\n  <span class=hljs-keyword>var</span> mime = arr[<span class=hljs-number>0</span>].match(<span class=hljs-regexp>/:(.*?);/</span>)[<span class=hljs-number>1</span>];\n  <span class=hljs-keyword>var</span> bstr = atob(arr[<span class=hljs-number>1</span>]);\n  <span class=hljs-keyword>var</span> n = bstr.length;\n  <span class=hljs-keyword>var</span> u8arr = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Uint8Array</span>(n);\n  <span class=hljs-keyword>while</span>(n--){\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> Blob([u8arr], {<span class=hljs-attr>type</span>:mime});\n}</code></pre></section><section><h3 id='[\"h5 文件系统 FileSystem API\",\"blob 获取\",\"canvas.toBlob 方式\"]' data-index=34>canvas.toBlob 方式</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement>HTMLCanvasElement - Web API 接口 | MDN</a></p><pre><code class=language-js><span class=hljs-keyword>var</span> canvas = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'canvas'</span>)\n<span class=hljs-built_in>document</span>.body.appendChild(canvas)\n<span class=hljs-keyword>var</span> ctx = canvas.getContext(<span class=hljs-string>'2d'</span>);\n<span class=hljs-keyword>var</span> img = <span class=hljs-keyword>new</span> Image();\nimg.onload = <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{\n  ctx.drawImage(img,<span class=hljs-number>0</span>,<span class=hljs-number>0</span>);\n  canvas.toBlob(<span class=hljs-function><span class=hljs-params>blob</span> =&gt;</span> {\n    <span class=hljs-built_in>console</span>.log(blob)\n  })\n}\nimg.src = <span class=hljs-string>'/img/bd_logo1.png'</span>;</code></pre></section></section><section><h2 id='[\"h5 文件系统 FileSystem API\",\"blob 转 file\"]' data-index=35>blob 转 file</h2><p>必须带中括号</p><pre><code class=language-js><span class=hljs-keyword>var</span> file = <span class=hljs-keyword>new</span> File([blob], <span class=hljs-string>'test.png'</span>, {<span class=hljs-keyword>type</span>: blob.type})</code></pre></section><section><h2 id='[\"h5 文件系统 FileSystem API\",\"浏览器直接打开 blob\"]' data-index=36>浏览器直接打开 blob</h2><pre><code class=language-js><span class=hljs-selector-tag>window</span><span class=hljs-selector-class>.open</span>(<span class=hljs-selector-tag>URL</span><span class=hljs-selector-class>.createObjectURL</span>(<span class=hljs-selector-tag>blob</span>))</code></pre></section></section><section><h1 id='[\"h5 无刷新改变 url\"]' data-index=37>h5 无刷新改变 url</h1><pre><code class=language-js><span class=hljs-comment>// 历史记录情况触发</span>\n<span class=hljs-built_in>window</span>.addEventListener(<span class=hljs-string>'popstate'</span>, <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>e</span>)</span>{\n  <span class=hljs-keyword>var</span> state = e.state; <span class=hljs-comment>// 参数1</span>\n  <span class=hljs-built_in>document</span>.title = e.title; <span class=hljs-comment>// 参数2</span>\n}, <span class=hljs-literal>false</span>);\n\nhistory.pushState({<span class=hljs-attr>page</span>: <span class=hljs-number>1</span>}, <span class=hljs-string>\"title 1\"</span>, <span class=hljs-string>\"?page=1\"</span>);\nhistory.pushState({<span class=hljs-attr>page</span>: <span class=hljs-number>2</span>}, <span class=hljs-string>\"title 2\"</span>, <span class=hljs-string>\"?page=2\"</span>);\nhistory.replaceState({<span class=hljs-attr>page</span>: <span class=hljs-number>3</span>}, <span class=hljs-string>\"title 3\"</span>, <span class=hljs-string>\"?page=3\"</span>);\n\n<span class=hljs-comment>// 触发 popstate 事件</span>\nhistory.back();\nhistory.back();\nhistory.go(<span class=hljs-number>2</span>);\n</code></pre></section><section><h1 id='[\"h5 本地存储\"]' data-index=38>h5 本地存储</h1><section><h2 id='[\"h5 本地存储\",\"localStorage/sessionStorage\"]' data-index=39>localStorage/sessionStorage</h2><ul><li>localStorage 为永久存储</li><li>sessionStorage 为临时存储，浏览器关闭则清除</li></ul><p>跟cookies类似，只针对某域名存储，只是容量变大了，每个域名有5M。 只能存储字符串。</p><p>两种方式操作相同，所以只举例 localStorage 用法：</p><pre><code class=language-js><span class=hljs-comment>// 设置</span>\nlocalStorage.setItem(<span class=hljs-string>\"foo\"</span>, <span class=hljs-string>\"isaac\"</span>)\n\n<span class=hljs-comment>// 取，如果没有返回 null</span>\n<span class=hljs-built_in>console</span>.log(localStorage.getItem(<span class=hljs-string>\"foo\"</span>))\n\n<span class=hljs-comment>// 键值对 总个数</span>\nlocalStorage.length\n\n<span class=hljs-comment>// 取key，根据索引，在不知道key情况使用</span>\nlocalStorage.key(i)\n</code></pre><p>兼容性： ie6不支持，ie8好像支持，待测</p></section></section><section><h1 id='[\"h5 页面状态 Page Visibility\"]' data-index=40>h5 页面状态 Page Visibility</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Page_Visibility_API>MDN 文档</a></p><p>可针对<strong>网页是否可见</strong>做必要的优化处理。</p><p>比如，从视频播放页切换到其它选项卡，或者浏览器被最小化，或者被锁屏，停止播放。</p></section><section><h1 id='[\"h5全屏\"]' data-index=41>h5全屏</h1><p><a href=https://developer.mozilla.org/zh-TW/docs/Web/API/Fullscreen_API>MDN 文档 - Fullscreen API</a></p><section><h2 id='[\"h5全屏\",\"执行全屏\"]' data-index=42>执行全屏</h2><pre><code class=language-js><span class=hljs-keyword>var</span> div1 = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'div1'</span>);\ndiv1.webkitRequestFullScreen();</code></pre></section><section><h2 id='[\"h5全屏\",\"取消全屏\"]' data-index=43>取消全屏</h2><pre><code class=language-js><span class=hljs-selector-tag>document</span><span class=hljs-selector-class>.webkitCancelFullScreen</span>();</code></pre></section><section><h2 id='[\"h5全屏\",\"全屏改变事件\"]' data-index=44>全屏改变事件</h2><pre><code class=language-js>\ndiv1.addEventListener(<span class=hljs-string>'webkitfullscreenchange'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    div2.innerHTML = <span class=hljs-built_in>document</span>.webkitIsFullScreen;\n}, <span class=hljs-literal>true</span>);</code></pre></section><section><h2 id='[\"h5全屏\",\"判断是否全屏\"]' data-index=45>判断是否全屏</h2><pre><code class=language-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>document</span><span class=hljs-selector-class>.webkitIsFullScreen</span>)</code></pre><p>返回：布尔值</p></section></section><section><h1 id='[\"h5拖放\"]' data-index=46>h5拖放</h1><p>此处为临时摘抄，未整理验证完善</p><p><a href=https://developer.mozilla.org/en-US/docs/Web/Events/drag>MDN文档参考</a></p><section><h2 id='[\"h5拖放\",\"元素可拖放设置\"]' data-index=47>元素可拖放设置</h2><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>li</span> <span class=hljs-attr>draggable</span>=<span class=hljs-string>\"true\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>img</span> <span class=hljs-attr>src</span>=<span class=hljs-string>\"1.png\"</span> <span class=hljs-attr>alt</span>=<span class=hljs-string>\"\"</span> <span class=hljs-attr>draggable</span>=<span class=hljs-string>\"false\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>小5<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span></code></pre></section><section><h2 id='[\"h5拖放\",\"相关事件：\"]' data-index=48>相关事件：</h2><p>dragenter:拖进目标<br>dragleave:拖离目标<br>dragover:<br>目标上拖动<br>只要不离开目标都将反复触发，如果拖动，将触发更快<br>drop:目标上放下</p><p>dragstart：开始拖放 dragend：拖放结束</p><p><strong>event：</strong></p><pre><code class=language-js><span class=hljs-comment>//设置当前拖放元素的数据参数</span>\ne.dataTransfer.setData(<span class=hljs-string>'text'</span>, <span class=hljs-keyword>this</span>.innerHTML);\n\n<span class=hljs-comment>//获取当前被拖放元素的存放数据参数</span>\n <span class=hljs-keyword>var</span> text = e.dataTransfer.getData(<span class=hljs-string>'text'</span>); \n<span class=hljs-comment>//设置鼠标样式</span>\n e.dataTransfer.dropEffect = <span class=hljs-string>'move'</span>;</code></pre></section></section><section><h1 id='[\"IE 专属\"]' data-index=49>IE 专属</h1><section><h2 id='[\"IE 专属\",\"WScript 实现全屏\"]' data-index=50>WScript 实现全屏</h2><p>通过js触发按键命令</p><pre><code class=language-js><span class=hljs-comment>// 触发F11键，实现全屏</span>\n(<span class=hljs-keyword>new</span> activexobject(<span class=hljs-string>\"WScript.Shell\"</span>)).sendKeys(<span class=hljs-string>\"{F11}\"</span>); \n</code></pre></section><section><h2 id='[\"IE 专属\",\"执行[注释]\"]' data-index=51>执行[注释]</h2><pre><code class=language-js><span class=hljs-comment>/*@cc_on alert(123)@*/</span>\n\n<span class=hljs-comment>/*@cc_on 此处写点什么@*/</span></code></pre></section></section><section><h1 id='[\"js 操作 css\"]' data-index=52>js 操作 css</h1><section><h2 id='[\"js 操作 css\",\"元素对象的 style 属性\"]' data-index=53>元素对象的 style 属性</h2><section><h3 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\"]' data-index=54>传统方式操作 style</h3><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"兼容性\"]' data-index=55>兼容性</h4><p>包括 ie6 的所有</p></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"设置\"]' data-index=56>设置</h4><pre><code class=language-js><span class=hljs-comment>// 比较直接的方式</span>\n<span class=hljs-comment>// 需处理减号风格。使用驼峰</span>\n<span class=hljs-comment>// 1</span>\nelem.style.color = <span class=hljs-string>'red'</span>;\n<span class=hljs-comment>// 2</span>\n<span class=hljs-keyword>var</span> style = elem.style;\nstyle.backgroundColor = <span class=hljs-string>'red'</span>;\n\n<span class=hljs-comment>// 使用 cssText</span>\n<span class=hljs-comment>// 无需处理减号</span>\n<span class=hljs-comment>// 会覆盖之前的，可使用加等</span>\nelem.style.cssText += <span class=hljs-string>'font-size:16px;'</span>;\n</code></pre></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"获取\"]' data-index=57>获取</h4><p>直接css属性、cssText</p><p>如果没有设置返回 空字符串。 设置了获取，将直接返回设置时的字符串</p></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"猜想：是否可以直接赋对象？\"]' data-index=58>猜想：是否可以直接赋对象？</h4><p>答案是不行</p><pre><code class=language-js><span class=hljs-comment>// 错误例子</span>\nelem.style = {\n    <span class=hljs-attr>color</span>: <span class=hljs-string>'red'</span>,\n    <span class=hljs-attr>backgroundColor</span>: <span class=hljs-string>'red'</span>\n}</code></pre></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"前缀问题\"]' data-index=59>前缀问题</h4><pre><code><span class=hljs-selector-tag>style</span><span class=hljs-selector-class>.webkitAnimation</span>\n<span class=hljs-selector-tag>style</span><span class=hljs-selector-class>.MozAnimation</span>\n<span class=hljs-selector-tag>style</span><span class=hljs-selector-class>.msAnimation</span>\n上例中\n<span class=hljs-selector-tag>Webkit</span> 首字母大小写均可\n<span class=hljs-selector-tag>Moz</span> 首字母必须大写\n<span class=hljs-selector-tag>ms</span> 首字母必须小写\n提醒：<span class=hljs-selector-tag>css</span>语法中的属性名称是不区分大小写的，如<span class=hljs-selector-tag>-MOz-columns</span>: 3 200<span class=hljs-selector-tag>px</span>;</code></pre></section></section><section><h3 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\"]' data-index=60>新方式操作 style</h3><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"设置 - setProperty\"]' data-index=61>设置 - setProperty</h4><p>无需处理减号风格</p><p>示例</p><pre><code class=language-js>elem.style.setProperty(<span class=hljs-string>\"color\"</span>, <span class=hljs-string>\"red\"</span>, <span class=hljs-string>\"important\"</span>);\nelem.style.setProperty(<span class=hljs-string>'background-color'</span>, <span class=hljs-string>'red'</span>);</code></pre></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"获取 – getPropertyValue\"]' data-index=62>获取 – getPropertyValue</h4><p>只能获取内联css，即 style 标签属性内的 css</p><p>没有返回 空字符串</p><pre><code class=language-js>elem.style.getPropertyValue(<span class=hljs-string>'background-color'</span>) <span class=hljs-comment>// 'rgb(51, 51, 51)'</span></code></pre></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"删除 - removeProperty\"]' data-index=63>删除 - removeProperty</h4><p>有返回值，返回删除的值</p><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>style</span>=<span class=hljs-string>\"width:10px\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"elem\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-built_in>console</span>.log(elem.style.removeProperty(<span class=hljs-string>'width'</span>)) <span class=hljs-comment>// '10px'</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"判断是否使用 important 优先级 - getPropertyPriority\"]' data-index=64>判断是否使用 important 优先级 - getPropertyPriority</h4><p>返回值：string<br>有，返回 <code>important</code> 字符串; 没有，返回空字符串</p><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>style</span>=<span class=hljs-string>\"width:10px!important;height:20px\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"elem\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-built_in>console</span>.log(elem.style.getPropertyPriority(<span class=hljs-string>'width'</span>)) <span class=hljs-comment>// 'important'</span>\n  <span class=hljs-built_in>console</span>.log(elem.style.getPropertyPriority(<span class=hljs-string>'height'</span>)) <span class=hljs-comment>// ''</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span></code></pre></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"内联css个数 – length\"]' data-index=65>内联css个数 – length</h4><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>style</span>=<span class=hljs-string>\"width:10px;height:20px\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"elem\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-built_in>console</span>.log(elem.style.length) <span class=hljs-comment>// 2</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span></code></pre></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"可操作索引\"]' data-index=66>可操作索引</h4><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>style</span>=<span class=hljs-string>\"width:10px;height:20px\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"elem\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-built_in>console</span>.log(elem.style[<span class=hljs-number>0</span>]) <span class=hljs-comment>// 'width'</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span></code></pre></section><section><h4 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"兼容性\"]' data-index=67>兼容性</h4><p>ie9+、chrome、firefox<br>ie9极不稳定。iphone ios8 似乎不支持，慎用</p></section></section><section><h3 id='[\"js 操作 css\",\"元素对象的 style 属性\",\"ie专属，ie6 ~ ie11\"]' data-index=68>ie专属，ie6 ~ ie11</h3><p>需处理减号分隔符</p><pre><code class=language-js>el.style.setAttribute(<span class=hljs-string>'backgroundColor'</span>, <span class=hljs-string>'red'</span>);</code></pre><p>兼容性： 所有ie。包括ie11</p></section></section><section><h2 id='[\"js 操作 css\",\"style 元素\"]' data-index=69>style 元素</h2><section><h3 id='[\"js 操作 css\",\"style 元素\",\"操作\"]' data-index=70>操作</h3><section><h4 id='[\"js 操作 css\",\"style 元素\",\"操作\",\"innerHTML 方式\"]' data-index=71>innerHTML 方式</h4><p>支持的浏览器：ie9+、Firefox、Safari、Chrome、Opera</p><p>设置读取操作都行。</p><p>直接操作style元素的innerHTML即可。且不需要设置type特性。 当然，动态创建情况，需把style元素增加到文档中才会生效。</p><p>ie678只支持读取，设置操作将报错</p></section><section><h4 id='[\"js 操作 css\",\"style 元素\",\"操作\",\"textContent方式\"]' data-index=72>textContent方式</h4><p>支持的浏览器：ie9+、Firefox、Safari、Chrome、Opera</p><p>跟innerHTML一样，设置读取都行</p><p>ie678压根没这个属性</p></section><section><h4 id='[\"js 操作 css\",\"style 元素\",\"操作\",\"styleElem.styleSheet.cssText IE独有方式\"]' data-index=73>styleElem.styleSheet.cssText IE独有方式</h4><p>解决 ie6~8 兼容问题</p><p><strong>设置</strong></p><pre><code class=language-js>eStyle.styleSheet.cssText = <span class=hljs-string>'div{color:red}'</span>;</code></pre><p><strong>可读取</strong></p><p>可获取任意style标签的值</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'style'</span>)[<span class=hljs-number>0</span>].styleSheet.cssText);</code></pre><p><strong>必须设置 type属性，否则不生效</strong><br>而且 eStyle.styleSheet 将获取到 null 值</p><pre><code class=language-js>eStyle.setAttribute(<span class=hljs-string>\"type\"</span>, <span class=hljs-string>\"text/css\"</span>);<span class=hljs-comment>//此属性不设也生效</span></code></pre><p><strong>兼容性</strong>：<br>ie6~8专用，ie9~10也支持，ie11不支持</p><p><strong>例子：</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> eStyle = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'style'</span>);\neStyle.setAttribute(<span class=hljs-string>\"type\"</span>, <span class=hljs-string>\"text/css\"</span>);<span class=hljs-comment>// 必须设置</span>\neStyle.styleSheet.cssText = <span class=hljs-string>'#test{color:red;}'</span>;\n<span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'head'</span>)[<span class=hljs-number>0</span>].appendChild(eStyle);</code></pre></section><section><h4 id='[\"js 操作 css\",\"style 元素\",\"操作\",\"兼容所有示例\"]' data-index=74>兼容所有示例</h4><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>addCssText</span> (<span class=hljs-params>txt</span>) </span>{\n  <span class=hljs-keyword>let</span> eStyle = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'style'</span>)\n\n  <span class=hljs-keyword>if</span> (<span class=hljs-string>'textContent'</span> <span class=hljs-keyword>in</span> eStyle) {\n    eStyle.textContent = txt\n    <span class=hljs-built_in>document</span>.head.appendChild(eStyle)\n  } <span class=hljs-keyword>else</span> {\n    <span class=hljs-comment>// ie678</span>\n    eStyle.setAttribute(<span class=hljs-string>'type'</span>, <span class=hljs-string>'text/css'</span>)\n    eStyle.styleSheet.cssText = txt\n    <span class=hljs-built_in>document</span>.body.appendChild(eStyle)\n  }\n}</code></pre></section></section><section><h3 id='[\"js 操作 css\",\"style 元素\",\"动态创建注意\"]' data-index=75>动态创建注意</h3><section><h4 id='[\"js 操作 css\",\"style 元素\",\"动态创建注意\",\"位置\"]' data-index=76>位置</h4><p>js创建的style元素可增加到任意位置，body，head 等都将生效，建议增加到head标签</p><p>所有浏览器都如此</p></section><section><h4 id='[\"js 操作 css\",\"style 元素\",\"动态创建注意\",\"生效\"]' data-index=77>生效</h4><p>需增加到文档中 所有浏览器都如此</p></section></section><section><h3 id='[\"js 操作 css\",\"style 元素\",\"关于 jq 的 html 方法\"]' data-index=78>关于 jq 的 html 方法</h3><p>并非简单的 innerHTML。对 style 有特别处理，使其生效。(会将style元素插入head中的)</p></section></section><section><h2 id='[\"js 操作 css\",\"全能取css值\"]' data-index=79>全能取css值</h2><section><h3 id='[\"js 操作 css\",\"全能取css值\",\"高级 - getComputedStyle\"]' data-index=80>高级 - getComputedStyle</h3><p>外部样式表、内部样式表、内联样式，transition 过程中，都能被获取到</p><p>只能取，不能设置</p><pre><code class=language-js><span class=hljs-keyword>var</span> s = <span class=hljs-built_in>window</span>.getComputedStyle(el)\n<span class=hljs-comment>// 伪类元素</span>\n<span class=hljs-keyword>var</span> s = <span class=hljs-built_in>window</span>.getComputedStyle(el, <span class=hljs-string>'::after'</span>)\n\n<span class=hljs-comment>// 取值的三种方式</span>\n<span class=hljs-built_in>console</span>.log(\n  s[<span class=hljs-string>'background-color'</span>]\n  s.getPropertyValue(<span class=hljs-string>'background-color'</span>),\n  s.backgroundColor,\n)\n\n<span class=hljs-comment>// 常用写法</span>\n<span class=hljs-built_in>window</span>.getComputedStyle(el)[<span class=hljs-string>'background-color'</span>]</code></pre><section><h4 id='[\"js 操作 css\",\"全能取css值\",\"高级 - getComputedStyle\",\"兼容性：ie9+，chrome，firefox\"]' data-index=81>兼容性：ie9+，chrome，firefox</h4></section></section><section><h3 id='[\"js 操作 css\",\"全能取css值\",\"ie6 ~ 9\"]' data-index=82>ie6 ~ 9</h3><section><h4 id='[\"js 操作 css\",\"全能取css值\",\"ie6 ~ 9\",\"取操作\"]' data-index=83>取操作</h4><pre><code class=language-js><span class=hljs-keyword>var</span> ieStyle = eTest1.currentStyle;\n<span class=hljs-built_in>console</span>.log(ieStyle.backgroundColor); <span class=hljs-comment>// ie6 ~ 8</span>\n<span class=hljs-built_in>console</span>.log(ieStyle.getPropertyValue(<span class=hljs-string>'background-color'</span>)); <span class=hljs-comment>// 只有ie9</span></code></pre></section><section><h4 id='[\"js 操作 css\",\"全能取css值\",\"ie6 ~ 9\",\"写操作 尝试\"]' data-index=84>写操作 尝试</h4><pre><code class=language-js><span class=hljs-comment>// 同样也报不允许错误</span>\nieStyle.backgroundColor = <span class=hljs-string>'red'</span>;\nieStyle.setProperty(<span class=hljs-string>'background-color'</span>,<span class=hljs-string>'red'</span>);</code></pre></section></section></section><section><h2 id='[\"js 操作 css\",\"className 操作\"]' data-index=85>className 操作</h2><section><h3 id='[\"js 操作 css\",\"className 操作\",\"直接操作 className 属性\"]' data-index=86>直接操作 className 属性</h3><section><h4 id='[\"js 操作 css\",\"className 操作\",\"直接操作 className 属性\",\"增删改查\"]' data-index=87>增删改查</h4><pre><code class=language-js><span class=hljs-built_in>console</span>.log(eB.className); <span class=hljs-comment>// 直接通过元素操作</span></code></pre></section></section><section><h3 id='[\"js 操作 css\",\"className 操作\",\"关于className中包含多个空格 影响\"]' data-index=88>关于className中包含多个空格 影响</h3><section><h4 id='[\"js 操作 css\",\"className 操作\",\"关于className中包含多个空格 影响\",\"className 属性的影响\"]' data-index=89>className 属性的影响</h4><p>取值影响: 不管类名中包含多少空格，取值时也会如实取过来</p><pre><code class=language-html>&lt;div <span class=hljs-class><span class=hljs-keyword>class</span></span>=<span class=hljs-string>\"   banner-show    test   \"</span> id=<span class=hljs-string>\"fadeDemo\"</span>&gt;\n\ninfo.innerHTML = fadeDemo.className.match(<span class=hljs-regexp>/ /g</span>).length; <span class=hljs-comment>// 10</span>\n</code></pre><p>兼容性：所有</p></section><section><h4 id='[\"js 操作 css\",\"className 操作\",\"关于className中包含多个空格 影响\",\"对getElementsByClassName的没有影响\"]' data-index=90>对getElementsByClassName的没有影响</h4><p>不管是</p><pre><code class=language-html>&lt;div <span class=hljs-class><span class=hljs-keyword>class</span></span>=<span class=hljs-string>\"   banner-show    test   \"</span>&gt;</code></pre><p>还是</p><pre><code class=language-js><span class=hljs-built_in>document</span>.getElementsByClassName(<span class=hljs-string>'                    banner-show'</span>)</code></pre><p>getElementsByClassName 都会忽略掉多余的空格，视为正常的书写，也就是程序最终视为这样：</p><pre><code class=language-html>&lt;div <span class=hljs-class><span class=hljs-keyword>class</span></span>=<span class=hljs-string>\"banner-show test\"</span>&gt; </code></pre><pre><code class=language-js><span class=hljs-built_in>document</span>.getElementsByClassName(<span class=hljs-string>'banner-show'</span>)</code></pre><p>兼容性：支持getElementsByClassName的浏览器都是如此</p></section></section><section><h3 id='[\"js 操作 css\",\"className 操作\",\"操作 className 新方式 - classList\"]' data-index=91>操作 className 新方式 - classList</h3><p>兼容性：ie10+</p><p>判断是否包含某类名<br>一次只能判断一个类名，貌似jq的hasClass也是如此</p><pre><code class=language-js><span class=hljs-keyword>var</span> isActive = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"mySwitch\"</span>).classList.contains(<span class=hljs-string>\"mui-active\"</span>);</code></pre><p>增加class</p><pre><code class=language-js><span class=hljs-comment>//添加mui-active类，打开开关</span>\nele.classList.add(<span class=hljs-string>'mui-active'</span>);</code></pre><p>删除class</p><pre><code class=language-js><span class=hljs-comment>//删除mui-active类，关闭开关</span>\nele.classList.remove(<span class=hljs-string>'mui-active'</span>);</code></pre><p>自动增删class</p><pre><code class=language-js><span class=hljs-comment>//也可以直接使用toggle方法自动处理打开或关闭</span>\nele.classList.toggle(<span class=hljs-string>'mui-active'</span>);</code></pre></section></section></section><section><h1 id='[\"URL 解析\"]' data-index=92>URL 解析</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Window/URL>https://developer.mozilla.org/zh-CN/docs/Web/API/Window/URL</a></p><pre><code class=language-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>window</span>.URL(<span class=hljs-string>'http://baidu.com'</span>) <span class=hljs-comment>// 返回一个与 location 差不多对象</span>\n</code></pre></section><section><h1 id='[\"事件\"]' data-index=93>事件</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/Events>事件类型一览表</a></p><section><h2 id='[\"事件\",\"dispatchEvent 手动触发事件\"]' data-index=94>dispatchEvent 手动触发事件</h2><p>至今才知道。。。再一次证明，书看的少多可怕</p></section><section><h2 id='[\"事件\",\"阻止冒泡\"]' data-index=95>阻止冒泡</h2><pre><code class=language-js><span class=hljs-selector-tag>e</span><span class=hljs-selector-class>.stopPropagation</span>()</code></pre></section><section><h2 id='[\"事件\",\"阻止默认动作\"]' data-index=96>阻止默认动作</h2><pre><code class=language-js><span class=hljs-keyword>if</span> (e.cancelable) e.preventDefault() <span class=hljs-comment>//cancelable、preventDefault结合使用</span></code></pre></section><section><h2 id='[\"事件\",\"键盘输入事件\"]' data-index=97>键盘输入事件</h2><section><h3 id='[\"事件\",\"键盘输入事件\",\"常用的几个 keyCode\"]' data-index=98>常用的几个 keyCode</h3><ul><li>回车键：13</li><li>shift：16</li><li>ctrl：17</li></ul></section><section><h3 id='[\"事件\",\"键盘输入事件\",\"keypress 字符键触发\"]' data-index=99>keypress 字符键触发</h3><ul><li>先触发后输入</li><li>可以阻止输入触发</li></ul><p>问题：</p><ul><li>删除键，这种能改变字符串的不触发</li><li>使用中文输入法输入时也不触发</li></ul><p>是否是先触发后输入？ 兼容性如何？</p><p>不建议当做input事件触发前的监听事件：</p></section><section><h3 id='[\"事件\",\"键盘输入事件\",\"input 有字符输入则触发\"]' data-index=100>input 有字符输入则触发</h3><p>实现输入字符 后触发 改变后触发，即输入发生后触发</p><p><strong>1.Firefox、Safari、Chrome</strong> 除了input、textarea，还适用于div文本框。所有符号键 （包括删除键）</p><p>div文本框 添加元素居然不触发，手动添加文本是否也不会触发呢</p><pre><code class=language-js>Text1.oninput = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};</code></pre><p><strong>2.IE</strong> 只适用于固有的input、textarea 输入框</p><p>ie6 ie7 ie8 ie10 值变动就会触发</p><p>ie9字符键触发，删除键不会触发</p><pre><code class=language-js>Text1.onpropertychange = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};</code></pre><p><strong>3.Opera</strong> 没有</p></section></section><section><h2 id='[\"事件\",\"触摸事件\"]' data-index=101>触摸事件</h2><p><code>touchcancel</code>：没有可能再触发触摸事件时触发。比如，触发默认的页面滚动后，将停止监听，即触发此事件</p><section><h3 id='[\"事件\",\"触摸事件\",\"特性\"]' data-index=102>特性</h3><p><strong>多点 touch，元素外的点也会增加 TouchList：</strong> touch 事件元素外增加触摸点，不会触发touch事件，但是原事件的TouchList 会多一个。</p></section><section><h3 id='[\"事件\",\"触摸事件\",\"e.touches 与 e.targetTouches 区别\"]' data-index=103>e.touches 与 e.targetTouches 区别</h3><p>touches 是所有在屏幕上的点，targetTouches是当前事件元素上的点</p></section></section><section><h2 id='[\"事件\",\"鼠标事件\"]' data-index=104>鼠标事件</h2><section><h3 id='[\"事件\",\"鼠标事件\",\"点下、松开\"]' data-index=105>点下、松开</h3><p>mousedown、mouseup</p><p>鼠标左右键都将触发</p><p><strong>ie678，点击失效问题(点击过快情况)</strong></p><pre><code class=language-js>$(<span class=hljs-string>'#div_test'</span>).mousedown(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'-----------------点下'</span>);\n}).mouseup(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'松开'</span>); \n});\n<span class=hljs-comment>// 出现如下日志：</span>\n<span class=hljs-comment>// 日志: -----------------点下 </span>\n<span class=hljs-comment>// 日志: 松开 </span>\n<span class=hljs-comment>// 日志: 松开</span>\n\n<span class=hljs-comment>// 也就是执行了两次 松开事件了，</span>\n<span class=hljs-comment>// 如下写法可以解决：</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>eUp</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'松开'</span>);\n  $(<span class=hljs-string>'#div_test'</span>).unbind(<span class=hljs-string>'mouseup'</span>, eUp);\n}\n$(<span class=hljs-string>'#div_test'</span>).mousedown(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'-----------------点下'</span>);\n  $(<span class=hljs-string>'#div_test'</span>).mouseup(eUp);\n});\n</code></pre></section><section><h3 id='[\"事件\",\"鼠标事件\",\"右键菜单\"]' data-index=106>右键菜单</h3><pre><code class=language-js>el.oncontextmenu = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  e.preventDefault() <span class=hljs-comment>// 阻止默认菜单弹出</span>\n}</code></pre></section><section><h3 id='[\"事件\",\"鼠标事件\",\"双击\"]' data-index=107>双击</h3><pre><code class=language-js><span class=hljs-comment>// 兼容性：所有浏览器</span>\nel.ondblclick = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{}\nel.addEventListener(<span class=hljs-string>'dblclick'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{})</code></pre></section><section><h3 id='[\"事件\",\"鼠标事件\",\"移入事件\"]' data-index=108>移入事件</h3><pre><code class=language-js><span class=hljs-comment>//1、正常的 移入移出 事件：onmouseover移入、onmouseout移出】</span>\n<span class=hljs-comment>//兼容性：all浏览器</span>\n\n<span class=hljs-comment>/* ----------------------------------------------\n * 事件中特有属性——relatedTarget属性\n *\n *获取 触发事件 后 鼠标\n* 之前所处 元素对象——onmouseover移入事件\n *当前所处 元素对象——onmouseout移出事件\n *\n * event对象的属性，只对这两个事件有效：onmouseout移出事件、onmouseover移入事件\n*\n * 兼容性： 所有ie中 只有ie9支持。非ie浏览器没问题\n */</span>\nalert(e.relatedTarget.className);\n\n<span class=hljs-comment>/***********************************************************/</span>\n<span class=hljs-comment>//2、特殊的 移入移出 事件</span>\n<span class=hljs-comment>//【onmouseenter移入、onmouseleave移出】</span>\n<span class=hljs-comment>//事件 根元素 及其后代 看成一个整体 来触发此事件</span>\n<span class=hljs-comment>//兼容性：所有ie，Opera支持。fox、Chrome现在已经支持了</span>\n</code></pre></section><section><h3 id='[\"事件\",\"鼠标事件\",\"滚轮事件\"]' data-index=109>滚轮事件</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/Events/wheel#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7>滚轮事件#浏览器兼容性 - MDN</a></p><p>目前标准 <code>wheel</code>：</p><pre><code class=language-js>elem.addEventListener(<span class=hljs-string>'wheel'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n  e.preventDefault()\n  <span class=hljs-built_in>console</span>.log(e.deltaY &gt; <span class=hljs-number>0</span>)\n})</code></pre></section></section><section><h2 id='[\"事件\",\"滚动条事件\"]' data-index=110>滚动条事件</h2><p>scroll</p><pre><code class=language-js><span class=hljs-comment>// 给元素绑定</span>\nel.onscroll = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{}\n<span class=hljs-comment>// 给浏览器窗口绑定</span>\n<span class=hljs-built_in>window</span>.onscroll = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{}</code></pre><section><h3 id='[\"事件\",\"滚动条事件\",\"新版 chrome 窗口滚动条默认无法阻止解决\"]' data-index=111>新版 chrome 窗口滚动条默认无法阻止解决</h3><p><a href=https://segmentfault.com/a/1190000007913386>https://segmentfault.com/a/1190000007913386</a></p><p>即给 document、document.body 绑定的 touchstart、touchmove 默认无法通过 preventDefault 阻止浏览器窗口滚动条滚动</p><p>注：给其他元素绑定可阻止浏览器窗口滚动条</p><p>需通过如下方式</p><pre><code class=language-js><span class=hljs-built_in>document</span>.addEventListener(<span class=hljs-string>'touchmove'</span>, touchmove, { <span class=hljs-attr>passive</span>: <span class=hljs-literal>false</span> })</code></pre><blockquote><p>passive 支持检测。引自 <a href=https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener>addEventListener | MDN</a></p></blockquote><pre><code class=language-js><span class=hljs-keyword>var</span> passiveSupported = <span class=hljs-literal>false</span>;\n\n<span class=hljs-keyword>try</span> {\n  <span class=hljs-keyword>var</span> options = <span class=hljs-built_in>Object</span>.defineProperty({}, <span class=hljs-string>\"passive\"</span>, {\n    <span class=hljs-attr>get</span>: <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>) </span>{\n      passiveSupported = <span class=hljs-literal>true</span>;\n    }\n  });\n\n  <span class=hljs-built_in>window</span>.addEventListener(<span class=hljs-string>\"test\"</span>, <span class=hljs-literal>null</span>, options);\n} <span class=hljs-keyword>catch</span>(err) {}</code></pre><p>但旧版浏览器不支持此种参数</p></section></section><section><h2 id='[\"事件\",\"设备旋转事件\"]' data-index=112>设备旋转事件</h2><p>chrome 模拟的是旋转前触发</p><p>android 机未测</p><p>ios 11 旋转后触发，可获取真实的浏览器宽度</p><pre><code class=language-js><span class=hljs-built_in>window</span>.addEventListener(<span class=hljs-string>\"orientationchange\"</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-comment>// screen.orientation ios 11 不支持</span>\n  <span class=hljs-built_in>document</span>.body.innerHTML = (screen.orientation.angle + <span class=hljs-string>'--'</span> + <span class=hljs-built_in>window</span>.innerWidth);\n})</code></pre></section><section><h2 id='[\"事件\",\"resize 窗口变化事件\"]' data-index=113>resize 窗口变化事件</h2><p>ios 旋转有动画，resize是否能获取真实浏览器宽？</p><p>ios 11 可以，也就是说旋转后触发。动画前触发。动画不影响宽度获取，估计动画是假象，动画前就已经渲染完成</p><p>印象中之前某次测试的是旋转前，难道是修复了？？</p></section><section><h2 id='[\"事件\",\"阻止失焦\"]' data-index=114>阻止失焦</h2><p>鼠标情况在 <code>mousedown</code> 中阻止</p></section><section><h2 id='[\"事件\",\"问题\"]' data-index=115>问题</h2><section><h3 id='[\"事件\",\"问题\",\"移动端(android) touchend 中 focus() 获焦失败\"]' data-index=116>移动端(android) touchend 中 focus() 获焦失败</h3><pre><code class=language-js>el.addEventListener(<span class=hljs-string>\"touchend\"</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n  e.stopPropagation() <span class=hljs-comment>// 要让获焦成功，android 必须加这个</span>\n  ipt.focus()\n})</code></pre><p>android 在 touchend 后有默认动作触发，如果在 touchend 中通过 focus 使某文本框获焦，会立马失焦。ios 没此问题</p></section><section><h3 id='[\"事件\",\"问题\",\"移动端 chrome touchmove 卡顿现象\"]' data-index=117>移动端 chrome touchmove 卡顿现象</h3><p>chrome 在触发默认滚动条时，move 事件卡顿，触发频率很低</p></section><section><h3 id='[\"事件\",\"问题\",\"ios document click 无效问题\"]' data-index=118>ios document click 无效问题</h3><p><a href=https://stackoverflow.com/questions/3705937/document-click-not-working-correctly-on-iphone-jquery>https://stackoverflow.com/questions/3705937/document-click-not-working-correctly-on-iphone-jquery</a></p><pre><code class=language-css><span class=hljs-selector-tag>html</span> {\n  <span class=hljs-attribute>cursor</span>: pointer;\n}</code></pre></section></section></section><section><h1 id='[\"元素 clone\"]' data-index=119>元素 clone</h1><section><h2 id='[\"元素 clone\",\"使用 document.importNode\"]' data-index=120>使用 document.importNode</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Document/importNode>document.importNode - Web API 接口 | MDN</a></p><pre><code><span class=hljs-keyword>var</span> node = <span class=hljs-built_in>document</span>.importNode(externalNode, deep);</code></pre><p><strong>疑问？</strong></p><p>事件绑定是否也被 clone</p><p><strong>兼容性：</strong></p><p>ie9+</p><p>并且，参数<code>deep</code>(深度克隆) ie都不支持</p></section><section><h2 id='[\"元素 clone\",\"其实还可使用 innerHTML、outerHTML 进行 clone\"]' data-index=121>其实还可使用 innerHTML、outerHTML 进行 clone</h2></section></section><section><h1 id='[\"元素、节点\"]' data-index=122>元素、节点</h1><section><h2 id='[\"元素、节点\",\"元素对象创建\"]' data-index=123>元素对象创建</h2><pre><code class=language-js><span class=hljs-comment>// 通用</span>\n<span class=hljs-keyword>var</span> div1 = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>\"div\"</span>);\n\n<span class=hljs-comment>// 部分元素独有</span>\n<span class=hljs-keyword>var</span> img = <span class=hljs-keyword>new</span> Image() <span class=hljs-comment>// img 元素</span>\n</code></pre></section><section><h2 id='[\"元素、节点\",\"节点替换(适用元素)\"]' data-index=124>节点替换(适用元素)</h2><section><h3 id='[\"元素、节点\",\"节点替换(适用元素)\",\"子节点替换\"]' data-index=125>子节点替换</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Node/replaceChild>replaceChild 文档</a></p><section><h4 id='[\"元素、节点\",\"节点替换(适用元素)\",\"子节点替换\",\"语法\"]' data-index=126>语法</h4><p>replacedNode = parentNode.replaceChild(newChild, oldChild);</p><p>replacedNode 和oldChild相等。</p></section><section><h4 id='[\"元素、节点\",\"节点替换(适用元素)\",\"子节点替换\",\"例子\"]' data-index=127>例子</h4><pre><code class=language-js><span class=hljs-selector-tag>elemCont</span><span class=hljs-selector-class>.replaceChild</span>(<span class=hljs-selector-tag>elzBox</span>, <span class=hljs-selector-tag>elemCont</span><span class=hljs-selector-class>.firstElementChild</span>)</code></pre></section><section><h4 id='[\"元素、节点\",\"节点替换(适用元素)\",\"子节点替换\",\"兼容性\"]' data-index=128>兼容性</h4><p>ie6+</p></section></section></section><section><h2 id='[\"元素、节点\",\"节点增加\"]' data-index=129>节点增加</h2><section><h3 id='[\"元素、节点\",\"节点增加\",\"末尾追加子节点(适用元素)\"]' data-index=130>末尾追加子节点(适用元素)</h3><pre><code class=language-js><span class=hljs-selector-tag>elem</span><span class=hljs-selector-class>.appendChild</span>(<span class=hljs-selector-tag>elem2</span>);</code></pre><p>兼容性：包括ie6的所有</p></section><section><h3 id='[\"元素、节点\",\"节点增加\",\"元素内部增加 insertBefore\"]' data-index=131>元素内部增加 insertBefore</h3><p>目标节点内部，目标节点的后代节点前面</p><p>参数</p><ul><li>参数1 要添加节点/元素</li><li>参数2 后代节点/元素</li></ul><p>兼容性：包括ie6的所有</p><pre><code class=language-js><span class=hljs-selector-tag>el</span><span class=hljs-selector-class>.insertBefore</span>(<span class=hljs-selector-tag>newElem</span>, <span class=hljs-selector-tag>childElem</span>);</code></pre></section></section><section><h2 id='[\"元素、节点\",\"元素增加\"]' data-index=132>元素增加</h2><section><h3 id='[\"元素、节点\",\"元素增加\",\"增加 html 文本 - insertAdjacentHTML\"]' data-index=133>增加 html 文本 - insertAdjacentHTML</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML>文档很详细</a></p><p>element.insertAdjacentHTML(position, text);</p><pre><code class=language-html><span class=hljs-comment>&lt;!-- beforebegin --&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>\n<span class=hljs-comment>&lt;!-- afterbegin --&gt;</span>\nfoo\n<span class=hljs-comment>&lt;!-- beforeend --&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n<span class=hljs-comment>&lt;!-- afterend --&gt;</span></code></pre></section><section><h3 id='[\"元素、节点\",\"元素增加\",\"增加元素 - insertAdjacentElement\"]' data-index=134>增加元素 - insertAdjacentElement</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentElement>文档很详细</a></p><p>element.insertAdjacentElement(position, element);</p><pre><code class=language-html><span class=hljs-comment>&lt;!-- beforebegin --&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>\n<span class=hljs-comment>&lt;!-- afterbegin --&gt;</span>\nfoo\n<span class=hljs-comment>&lt;!-- beforeend --&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n<span class=hljs-comment>&lt;!-- afterend --&gt;</span></code></pre></section></section><section><h2 id='[\"元素、节点\",\"节点克隆/复制(适用元素)\"]' data-index=135>节点克隆/复制(适用元素)</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode>MDN 文档，很详细</a></p><p><strong>语法</strong>： <code>var dupNode = node.cloneNode(deep);</code></p><p><strong>参数</strong>：</p><ul><li><strong>deep</strong> 是否采用深度克隆,如果为true,则该节点的所有后代节点也都会被克隆,如果为false,则只克隆该节点本身.</li></ul><p><strong>兼容性</strong>：ie5+，其他高级</p><pre><code class=language-js><span class=hljs-keyword>var</span> eUl = <span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>\"ul\"</span>)[<span class=hljs-number>0</span>]\n<span class=hljs-keyword>var</span> dupNode = eUl.cloneNode(<span class=hljs-literal>true</span>); <span class=hljs-comment>// 进行深度克隆</span>\n<span class=hljs-built_in>document</span>.body.insertBefore(dupNode, eUl);\n</code></pre></section><section><h2 id='[\"元素、节点\",\"节点替换(适用元素)\"]' data-index=136>节点替换(适用元素)</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Node/replaceChild>MDN 文档，很详细</a></p><p><code>replacedNode = parentNode.replaceChild(newChild, oldChild);</code></p><p><strong>参数</strong></p><ul><li><strong>newChild</strong> 替换oldChild的元素，可以是新建的，也可以是文档中现有的</li><li><strong>oldChild</strong></li></ul><p><strong>兼容性</strong>：ie5+，其他高级</p></section><section><h2 id='[\"元素、节点\",\"识别文档中不存在元素\"]' data-index=137>识别文档中不存在元素</h2><p>即：通过innerHTML删除的元素。或者，createElement 创建后还未加入页面中的元素</p><pre><code class=language-js><span class=hljs-comment>// baseURI 为当前页面url</span>\n<span class=hljs-comment>// offsetParent 为定位参照元素</span>\n\n<span class=hljs-comment>// 如果不存在</span>\n\n<span class=hljs-comment>// baseURI 为空字符串</span>\nelem.baseURI <span class=hljs-comment>// ''</span>\n\n<span class=hljs-comment>// offsetParent 为 null</span>\nelem.offsetParent <span class=hljs-comment>// null</span></code></pre></section><section><h2 id='[\"元素、节点\",\"元素标签文本操作\"]' data-index=138>元素标签文本操作</h2><section><h3 id='[\"元素、节点\",\"元素标签文本操作\",\"innerText\"]' data-index=139>innerText</h3><pre><code>描述：\n取解析后的文本格式，即最终被显示的文本格式\n\n兼容性：\nie(包括edge)，chrome：\n会转换元素，但不会保留文本换行，单个或连续的多个 换行、空格都将会转为单个空格。\n就如描述说的那样，页面实际显示成什么样子，取到的文本格式就是什么样子\n（关于转换元素：比如p元素会转为换行）\nfirefox：\n42版也不支持\n</code></pre></section><section><h3 id='[\"元素、节点\",\"元素标签文本操作\",\"textContent\"]' data-index=140>textContent</h3><p>不会转换元素，但会保留文本换行，多个连续换行\\空格都会被保留 相当于去标签版的innerHTML</p><p>兼容性：ie678不支持</p></section><section><h3 id='[\"元素、节点\",\"元素标签文本操作\",\"innerHTML\"]' data-index=141>innerHTML</h3><p>描述： 按当时书写原始格式原封不动的输出来</p><p>ie678 特殊性： 不保留原始格式，保留带标签的解析后的文本格式。也就是本质还是innerText，只是这次保留了标签</p><p>ie6/7/8/9 bug： 设置祖先的innerHTML属性时，会将设置前缓存的后代元素innerHTML属性设置为空字符串</p></section><section><h3 id='[\"元素、节点\",\"元素标签文本操作\",\"outerHTML\"]' data-index=142>outerHTML</h3><p>包含当前元素本身的html文本，格式与innerHTML一样。也具有ie678 innerHTML属性的特殊性 兼容性：包括ie6的所有</p></section><section><h3 id='[\"元素、节点\",\"元素标签文本操作\",\"textContent 与 innerText 区别\"]' data-index=143>textContent 与 innerText 区别</h3><p><strong>换行符 (\\n)</strong></p><pre><code class=language-js><span class=hljs-built_in>document</span>.body.textContent= <span class=hljs-string>'hello \\n word!'</span>\n<span class=hljs-comment>// \\n 依然是空格</span>\n\n<span class=hljs-built_in>document</span>.body.innerText= <span class=hljs-string>'hello \\n word!'</span>;\n <span class=hljs-comment>// \\n 能够转成 &lt;br/&gt;</span></code></pre><p><strong>textContent 居然只能单向</strong> 也就是说，获取操作可以从html 转成 text，设置操作不能将text转成html html 转成 text指的是：块元素或者br等转成 \\r\\n text无法转成html指的是：\\r\\n 无法被转成 块元素了</p><p><strong>innerText 可以双向</strong>，兼容：ie方面，包括ie6的所有。chrome。firefox目前也已经支持</p></section><section><h3 id='[\"元素、节点\",\"元素标签文本操作\",\"总结\"]' data-index=144>总结</h3><p>不管是innerText或innerHTML， ie678 只会返回解析后的文本。所以，无法做到与textContent 等同， 甚至没法做到与高级浏览器innerHTML等同</p></section></section><section><h2 id='[\"元素、节点\",\"元素标签属性操作\"]' data-index=145>元素标签属性操作</h2><section><h3 id='[\"元素、节点\",\"元素标签属性操作\",\"通用全能操作\"]' data-index=146>通用全能操作</h3><p>获取</p><pre><code class=language-js><span class=hljs-comment>/*\n 属性值读取方式1\n\n 根据 指定属性名 获取——getAttribute方法\n 这里讲的获取方式是：通过 [元素节点]对象的getAttribute方法 获取\n 没有此属性情况 返回null\n 兼容性：ie6部分属性依然无法获取，像class属性，即使有设置，获取的竟然是null。其他浏览器正常\n */</span>\n<span class=hljs-comment>//没有此属性情况 返回null</span>\n<span class=hljs-keyword>var</span> attrValue = div2.getAttribute(<span class=hljs-string>\"class\"</span>);\n\n<span class=hljs-comment>/*\n属性值读取方式2：通过属性的对象形式，nodeValue\n此方式还可直接进行设置\n兼容性：所有浏览器兼容\n*/</span></code></pre><p>设置</p><pre><code class=language-js>script.setAttribute(<span class=hljs-string>'class'</span>, <span class=hljs-string>''</span>);\n<span class=hljs-comment>// ie6+ 支持</span>\n<span class=hljs-comment>// ie67 不支持这样设置css， elem.setAttribute('style','background:#333'); </span></code></pre><p>删除</p><pre><code class=language-js><span class=hljs-selector-tag>div2</span><span class=hljs-selector-class>.removeAttribute</span>(\"<span class=hljs-selector-tag>class</span>\");</code></pre></section><section><h3 id='[\"元素、节点\",\"元素标签属性操作\",\"部分直接 js 操作\"]' data-index=147>部分直接 js 操作</h3><section><h4 id='[\"元素、节点\",\"元素标签属性操作\",\"部分直接 js 操作\",\"name 标签属性 -- 表单元素独有\"]' data-index=148>name 标签属性 -- 表单元素独有</h4><p>可读写</p><pre><code class=language-js><span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"pwd\"</span>).name = <span class=hljs-string>\"password\"</span>;</code></pre><p><strong>真正拥有name属性的元素：</strong> 目前知道的有 所有的input元素、img元素。即使你不为这些元素的name属性给值，通过js获取的是 空字符串。</p><p><strong>没有name属性的元素却强制给了name属性：</strong> 通过对象的name属性 将获取到undefined。但ie6可以获取成功</p></section><section><h4 id='[\"元素、节点\",\"元素标签属性操作\",\"部分直接 js 操作\",\"class 标签属性 -- 通过 className 读写\"]' data-index=149>class 标签属性 -- 通过 className 读写</h4><pre><code class=language-js>el.className = <span class=hljs-string>'main'</span></code></pre></section><section><h4 id='[\"元素、节点\",\"元素标签属性操作\",\"部分直接 js 操作\",\"id 标签属性\"]' data-index=150>id 标签属性</h4><pre><code class=language-js>el.id = <span class=hljs-string>'jj'</span></code></pre></section></section></section><section><h2 id='[\"元素、节点\",\"多个节点增加效率写法-文档碎片\"]' data-index=151>多个节点增加效率写法-文档碎片</h2><p>可以理解为一个临时顶级元素，被加入文档时只有其中的成员才会被加入</p><p>举例 非文档碎片的 <strong>低效率写法</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> arrText=[<span class=hljs-string>\"1\"</span>,<span class=hljs-string>\"2\"</span>,<span class=hljs-string>\"3\"</span>,<span class=hljs-string>\"4\"</span>,<span class=hljs-string>\"5\"</span>,<span class=hljs-string>\"6\"</span>,<span class=hljs-string>\"7\"</span>,<span class=hljs-string>\"8\"</span>,<span class=hljs-string>\"9\"</span>,<span class=hljs-string>\"10\"</span>];\n <span class=hljs-keyword>for</span>(<span class=hljs-keyword>var</span> i=<span class=hljs-number>0</span>;i&lt;arrText.length;i++)\n {\n    <span class=hljs-keyword>var</span> op=<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>\"P\"</span>);\n    <span class=hljs-keyword>var</span> oText=<span class=hljs-built_in>document</span>.createTextNode(arrText[i]);\n    op.appendChild(oText);\n    <span class=hljs-built_in>document</span>.body.appendChild(op);\n }</code></pre><p>这段代码运行良好，但问题是它调用了十次document.body.appendChild(),每次要产生一次页面刷新</p><p><strong>文档碎片写法</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> arrText=[<span class=hljs-string>\"1\"</span>,<span class=hljs-string>\"2\"</span>,<span class=hljs-string>\"3\"</span>,<span class=hljs-string>\"4\"</span>,<span class=hljs-string>\"5\"</span>,<span class=hljs-string>\"6\"</span>,<span class=hljs-string>\"7\"</span>,<span class=hljs-string>\"8\"</span>,<span class=hljs-string>\"9\"</span>,<span class=hljs-string>\"10\"</span>];\n<span class=hljs-keyword>var</span> oFrag=<span class=hljs-built_in>document</span>.createDocumentFragment();\n\n<span class=hljs-keyword>for</span>(<span class=hljs-keyword>var</span> i=<span class=hljs-number>0</span>;i&lt;arrText.length;i++)\n{\n    <span class=hljs-keyword>var</span> op=<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>\"P\"</span>);\n    <span class=hljs-keyword>var</span> oText=<span class=hljs-built_in>document</span>.createTextNode(arrText[i]);\n    op.appendChild(oText);\n    oFrag.appendChild(op);\n\n}\n<span class=hljs-built_in>document</span>.body.appendChild(oFrag);</code></pre><p><code>document.body.appendChild()</code> 仅调用了一次，这意味首只需要进行一次屏幕的刷新。 这里指的刷新：页面的本质发生改变，显示并没任何改变，只有在执行完代码后，显示才会有改变</p></section><section><h2 id='[\"元素、节点\",\"文本节点相关\"]' data-index=152>文本节点相关</h2><pre><code>inserData(offset,<span class=hljs-built_in>string</span>) 指定位置插入\nappendData(<span class=hljs-built_in>string</span>) 追加\ndeleteData(off,count,<span class=hljs-built_in>string</span>)  删除指定字符\nsplitData(offset) 拆分成两个节点\nsubstring(offset,count)</code></pre></section><section><h2 id='[\"元素、节点\",\"节点类型 node.nodeType\"]' data-index=153>节点类型 node.nodeType</h2><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td>元素节点(HTMLElement)</td><td>1</td></tr><tr><td>文本节点(Text)</td><td>3</td></tr><tr><td>注释节点(Comment)</td><td>8</td></tr><tr><td>属性节点(Attr)</td><td>2</td></tr><tr><td>文档节点(document 对象)</td><td>9</td></tr><tr><td>碎片文档节点(DocumentFragment对象)</td><td>11</td></tr></tbody></table><p>兼容性：所有浏览器</p></section><section><h2 id='[\"元素、节点\",\"节点名称 node.nodeName\"]' data-index=154>节点名称 node.nodeName</h2><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td>元素节点(HTMLElement)</td><td>就是 标签名，但是大写</td></tr><tr><td>文本节点(Text)</td><td>#text</td></tr><tr><td>注释节点(Comment)</td><td>#comment</td></tr><tr><td>属性节点(Attr)</td><td>属性名</td></tr><tr><td>文档节点(document对象)</td><td>#document</td></tr><tr><td>碎片文档节点(DocumentFragment对象)</td><td>#document-fragment</td></tr></tbody></table></section><section><h2 id='[\"元素、节点\",\"节点值 node.nodeValue\"]' data-index=155>节点值 node.nodeValue</h2><p>兼容性：所有浏览器</p><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td>元素节点、文档节点</td><td>永远返回 null</td></tr><tr><td>文本节点、注释节点</td><td>节点之间的文本值，且将去掉两头的 空格符、换行符</td></tr><tr><td>属性节点</td><td>就是属性值。同样，也将去掉两头的 空格符、换行符。而且中间的连续空格符只会保留一个，且不保留换行符号</td></tr></tbody></table></section><section><h2 id='[\"元素、节点\",\"对象形式操作 元素属性\"]' data-index=156>对象形式操作 元素属性</h2><p>当对象 获取到后，就可通过 nodeType、nodeName、nodeValue属性进行操作了</p><ol><li>nodeType：将返回一个Number类型，表明此对象是属性节点。只读</li><li>nodeName：属性名。只读</li><li>nodeValue：属性值。可读写。获取的值特点：将去掉两头的 空格符、换行符。且中间的连续空格符只保留一个，不保留换行符</li></ol><p>兼容性：所有</p><pre><code class=language-js><span class=hljs-comment>// 创建 class 属性</span>\n<span class=hljs-keyword>var</span> classAttr = <span class=hljs-built_in>document</span>.createAttribute(<span class=hljs-string>\"class\"</span>);\n\n\n\n<span class=hljs-comment>// 设置到元素上</span>\nelem.setAttributeNode(classAttr);\n\n<span class=hljs-comment>// 获取</span>\n<span class=hljs-built_in>console</span>.log(elem.getAttributeNode(<span class=hljs-string>\"class\"</span>) === classAttr)\n\n<span class=hljs-comment>// 获取所有</span>\n<span class=hljs-comment>// ie6 获取到的不只有标签属性 ，还有 元素的js属性</span>\n<span class=hljs-keyword>var</span> attrs = elem.attributes;\n\n<span class=hljs-comment>// 删除</span>\n<span class=hljs-comment>// 兼容性：ie6 删除src时，有问题。没有 removeAttribute 好</span>\nelem.removeAttributeNode(classAttr);</code></pre></section></section><section><h1 id='[\"元素、节点删除\"]' data-index=157>元素、节点删除</h1><section><h2 id='[\"元素、节点删除\",\"remove\"]' data-index=158>remove</h2><pre><code class=language-js><span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'input'</span>)[<span class=hljs-number>0</span>].remove();</code></pre><p>包括ie11的所有ie、Safari 不支持。<br>chrome、firefox支持<br>低版本安卓 4.3以下webview不支持。</p></section><section><h2 id='[\"元素、节点删除\",\"removeChild\"]' data-index=159>removeChild</h2><p>完美兼容方式。兼容ie6</p><pre><code class=language-js><span class=hljs-keyword>var</span> elem = <span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'input'</span>)[<span class=hljs-number>0</span>];\nelem.parentNode.removeChild(elem);</code></pre><p>以上两种都是Node的方法。也可用于Element</p></section></section><section><h1 id='[\"元素、节点获取\"]' data-index=160>元素、节点获取</h1><section><h2 id='[\"元素、节点获取\",\"简单汇总\"]' data-index=161>简单汇总</h2><pre>\ngetElementById,\ngetElementsByName,\ngetElementsByTagName\ngetElementsByClassName\nquerySelector\nquerySelectorAll\n\n其中\nquerySelector\nquerySelectorAll\n实现模拟 css选择器。ie8(含)以上 及其他高级\n可以document直接调用，也可元素调用，元素调用则在所有后代中赛选\n获取不到情况也将返回空的 NodeList []，并非 null 等可隐式转换 false 的值，所以无需担心循环报错问题\n\n\nhttp://www.cnblogs.com/kissdodog/archive/2012/12/25/2833213.html\n\n1、firstElementChild        第一个子元素节点\n2、lastElementChild        最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点 ie9+\n4、previousElementSibling    前一个兄弟元素节点ie9+\n5、childElementCount        子元素节点个数量\n\n</pre></section><section><h2 id='[\"元素、节点获取\",\"根据 id 取\"]' data-index=162>根据 id 取</h2><p>取不到情况返回 null</p><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"test2\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-comment>// 兼容性：all浏览器</span>\n\n<span class=hljs-comment>// 直接取。即直接通过id名获取</span>\ntest2.innerHTML = <span class=hljs-string>'hello word'</span>;\n\n<span class=hljs-comment>// 通过 document.getElementById(idname)</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"test2\"</span>) === test2) <span class=hljs-comment>// true</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span></code></pre></section><section><h2 id='[\"元素、节点获取\",\"子元素集合 children\"]' data-index=163>子元素集合 children</h2><p>兼容性：所有浏览器都支持。只是ie6注释节点也被获取到了</p><p><strong>返回 HTMLCollection 对象。拥有实时特性</strong> 元素被移走后，children值会实时改变，并不区分是否在文档中。ie6也支持此特性</p><pre><code class=language-js><span class=hljs-comment>// 1在页面文档中的例子:</span>\n<span class=hljs-keyword>var</span> chils = <span class=hljs-built_in>document</span>.body.children;\n<span class=hljs-built_in>document</span>.body.appendChild(<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'s'</span>));<span class=hljs-comment>// 先更改</span>\ninfo.innerHTML = chils.length;<span class=hljs-comment>// 后取。依然最新</span>\n\n<span class=hljs-comment>// 2不在页面文档中的例子:</span>\n<span class=hljs-keyword>var</span> el = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'div'</span>),\n    chils = el.children;\nchils = el.children;\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> i = <span class=hljs-number>0</span>; i &lt; <span class=hljs-number>5</span>; i++) {\n    el.appendChild(<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'div'</span>));\n}\n<span class=hljs-built_in>console</span>.log(chils.length) <span class=hljs-comment>// 依然最新</span>\n</code></pre></section><section><h2 id='[\"元素、节点获取\",\"紧邻元素获取\"]' data-index=164>紧邻元素获取</h2><p>其他关键字：相邻元素</p><p>上一个</p><pre><code class=language-js>elem.previousElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.previousSibling <span class=hljs-comment>// 节点 ie6+</span></code></pre><p>下一个</p><pre><code class=language-js>elem.nextElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.nextSibling <span class=hljs-comment>// 节点 ie6+</span></code></pre><p>chrome、firefox 也是支持的</p></section><section><h2 id='[\"元素、节点获取\",\"第一个子元素\"]' data-index=165>第一个子元素</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode/firstElementChild>firstElementChild 文档</a></p><p>语法 var element = node.firstElementChild;</p><p>例子</p><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"foo\"</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>First  (1)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>Second (2)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>Third  (3)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-keyword>var</span> foo = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'foo'</span>);\n<span class=hljs-comment>// yields: First  (1)</span>\n<span class=hljs-built_in>console</span>.log(foo.firstElementChild.textContent);\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span></code></pre><p>兼容性：ie9+</p></section><section><h2 id='[\"元素、节点获取\",\"事件元素\"]' data-index=166>事件元素</h2><section><h3 id='[\"元素、节点获取\",\"事件元素\",\"事件根元素\"]' data-index=167>事件根元素</h3><p>即正真拥有此事件的 对象。通过 <strong>this</strong> 获取。 如果要讲的更贴切一点，this获取的是执行此事件的对象</p></section><section><h3 id='[\"元素、节点获取\",\"事件元素\",\"当前事件元素\"]' data-index=168>当前事件元素</h3><p>1、event.target 属性 兼容性：ie中 只有ie9支持，其他浏览器没问题</p><p>2、event.srcElement 属性 兼容性：fox 不支持。其他没问题</p></section></section><section><h2 id='[\"元素、节点获取\",\"后代元素获取\"]' data-index=169>后代元素获取</h2><section><h3 id='[\"元素、节点获取\",\"后代元素获取\",\"指定标签名的后代元素\"]' data-index=170>指定标签名的后代元素</h3><pre><code class=language-js><span class=hljs-keyword>var</span> objs = div2.getElementsByTagName(<span class=hljs-string>\"div\"</span>);</code></pre><p>返回值：HTMLCollection 集合对象</p><p>没获取任何后代情况：返回的依然是 集合对象，只是length属性为0</p></section><section><h3 id='[\"元素、节点获取\",\"后代元素获取\",\"所有后代\"]' data-index=171>所有后代</h3><pre><code class=language-js><span class=hljs-comment>// 1 getElementsByTagName(\"*\")</span>\n<span class=hljs-comment>// 兼容性：IE6中[注释节点]也被获取到了。其他浏览器正常</span>\n<span class=hljs-keyword>var</span> objs = elem.getElementsByTagName(<span class=hljs-string>\"*\"</span>); <span class=hljs-comment>// elem 下的后代</span>\n<span class=hljs-keyword>var</span> objs = <span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>\"*\"</span>); <span class=hljs-comment>// 所有</span>\n\n<span class=hljs-comment>// 2 querySelectorAll('*')</span>\n<span class=hljs-keyword>let</span> all = eBox.querySelectorAll(<span class=hljs-string>'*'</span>);\n\n<span class=hljs-comment>// 3</span>\n<span class=hljs-comment>// 兼容性：~ie11。其他不支持，包括edge也不支持</span>\n<span class=hljs-keyword>var</span> elems = <span class=hljs-built_in>document</span>.all <span class=hljs-comment>//  等同 document.getElementsByTagName(\"*\")</span></code></pre></section><section><h3 id='[\"元素、节点获取\",\"后代元素获取\",\"根据 name - getElementsByName\"]' data-index=172>根据 name - getElementsByName</h3><pre><code class=language-js><span class=hljs-keyword>var</span> elems = elem.getElementsByName(<span class=hljs-string>\"name1\"</span>);\n<span class=hljs-keyword>var</span> elems2 = <span class=hljs-built_in>document</span>.getElementsByName(<span class=hljs-string>\"name2\"</span>); <span class=hljs-comment>// 全范围查找</span>\n</code></pre><p>兼容性：ie6 - ie9 只有表单元素 才有 name 属性？</p></section><section><h3 id='[\"元素、节点获取\",\"后代元素获取\",\"根据 class - getElementsByClassName\"]' data-index=173>根据 class - getElementsByClassName</h3><pre><code class=language-js><span class=hljs-comment>// 兼容性：ie9+</span>\n<span class=hljs-keyword>var</span> elems = elem.getElementsByClassName(<span class=hljs-string>'box'</span>);  <span class=hljs-comment>// 全范围查找</span>\n<span class=hljs-keyword>var</span> elems2 = <span class=hljs-built_in>document</span>.getElementsByClassName(<span class=hljs-string>'box'</span>);  <span class=hljs-comment>// 全范围查找</span>\n</code></pre><p><strong>返回值：HTMLCollection</strong> 没获取任何后代情况，返回的依然是集合对象，只是length属性为0</p><p>兼容性：IE6中[注释节点]也能获取到，标签名为!字符。其他浏览器正常</p></section></section><section><h2 id='[\"元素、节点获取\",\"根据元素取 document 对象\"]' data-index=174>根据元素取 document 对象</h2><p>兼容：包括ie6的 所有</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.body.ownerDocument === <span class=hljs-built_in>document</span>) <span class=hljs-comment>// true</span>\n\n<span class=hljs-comment>// document 自身也有ownerDocument，不过返回null</span>\n<span class=hljs-built_in>document</span>.ownerDocument <span class=hljs-comment>// null</span></code></pre></section><section><h2 id='[\"元素、节点获取\",\"一些疑虑\"]' data-index=175>一些疑虑</h2><section><h3 id='[\"元素、节点获取\",\"一些疑虑\",\"display:none 元素的获取\"]' data-index=176>display:none 元素的获取</h3><p>纯属多虑，没区别，所有浏览器都是如此</p></section><section><h3 id='[\"元素、节点获取\",\"一些疑虑\",\"取元素集合，元素顺序问题\"]' data-index=177>取元素集合，元素顺序问题</h3><p>顺序根据文档从上到下，与元素层级关系无关</p><p>测试例子</p><pre><code class=language-html><span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"u1\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>1<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>3<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>2<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>1<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"u2\"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>1<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>4<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>3<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>1<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'li'</span>));\n<span class=hljs-built_in>console</span>.log($(<span class=hljs-string>'.u1 li'</span>).add($(<span class=hljs-string>'.u2 li'</span>)));\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section></section><section><h2 id='[\"元素、节点获取\",\"父节点、父元素\"]' data-index=178>父节点、父元素</h2><p>一般来说，元素的父节点肯定是元素。所以 parentNode 一般通用</p><pre><code class=language-js><span class=hljs-keyword>var</span> node = el.parentNode\n<span class=hljs-keyword>var</span> parent = el2.parentElement</code></pre></section></section><section><h1 id='[\"元素尺寸\"]' data-index=179>元素尺寸</h1><section><h2 id='[\"元素尺寸\",\"高宽 - 精确\"]' data-index=180>高宽 - 精确</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect>let rectObject = Element.<strong>getBoundingClientRect</strong>()</a> - 元素尺寸坐标</p><p>--- 或者 ---</p><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle>let style = window.<strong>getComputedStyle</strong>(element, [pseudoElt]);</a> - 计算元素 css 值</p><blockquote><p>getComputedStyle 还能获取动画(transition、animation)过程中的css值(animation 未实际测试，待测)</p></blockquote></section><section><h2 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\"]' data-index=181>高宽 - 无法精确到小数</h2><p>获取的是四舍五入的整数</p><section><h3 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"汇总\"]' data-index=182>汇总</h3><pre><code>1、元素窗口高宽：一般能对应 css(非auto情况) height、width 值\n不包括边框 和 滚动条\nclientHeight\nclientWidth\n包括边框\noffsetHeight\noffsetWidth\n2、内容高宽：不包括边框 和 滚动条\nscrollHeight\nscrollWidth </code></pre><p><strong>都是只读属性</strong></p><p><strong>有几种情况将取不到值(即值为0)：</strong></p><ol><li>样式 display 属性值 为none</li><li>对象 被动态 创建后 并没有插入html中</li><li>操作的是内联元素</li></ol></section><section><h3 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\"]' data-index=183>clientHeight、clientWidth属性——不包括边框 和 滚动条</h3><p>以下 clientWH 简写指 clientHeight、clientWidth</p><section><h4 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\",\"inline 元素也将得到 0\"]' data-index=184>inline 元素也将得到 0</h4><p>使用 inline-block 解决</p><p>offsetWidth、offsetHeight 没有这个问题</p><p>兼容情况待测</p></section><section><h4 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\",\"描述\"]' data-index=185>描述</h4><p>不包括边框、滚动条 包括padding ，也就是从padding开始</p></section><section><h4 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\",\"返回值：Number类型\"]' data-index=186>返回值：Number类型</h4></section><section><h4 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\",\"兼容性：\"]' data-index=187>兼容性：</h4><p><strong>ie6\\7有问题：</strong>ie6\\7中，如果元素的css高宽为auto时，获取到的是0。html、body元素没问题</p><p><strong>ie6\\7问题解决办法：</strong><br>需要获取元素高宽时，都是为了获取 与css高宽等价的值。可以通过下面的offset属性获取。<br>如，offsetWidth(元素实质宽)-clientLeft*2(边框一般有左右宽，所以乘2) 即可获取 css宽度，且兼容所有浏览器</p><p><strong>与 css width 关系</strong><br>一般情况下等同css 的width，以下列出两种例外</p><ol><li>设置了 box-sizing: border-box 后，此种情况下，css width 包括了 边框，js clientWH 依然不包括边框</li><li>display: none 情况，js clientWH 将固定取都0</li></ol></section></section><section><h3 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"offsetHeight、offsetWidth属性——包括边框\"]' data-index=188>offsetHeight、offsetWidth属性——包括边框</h3><p>不包括margin，也就是从边框外边起始</p><p>返回值：Number类型</p><p>兼容性：所有浏览器。强调，ie6\\7没有上述client属性的问题</p></section><section><h3 id='[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"scrollHeight、scrollWidth属性——内容高宽，不包括边框\"]' data-index=189>scrollHeight、scrollWidth属性——内容高宽，不包括边框</h3><p>包括padding，即从边框内边起始</p><p>元素内容高度：元素显示高度+元素最大滚动高度(即被隐藏的高度)</p><p>overflow: hidden/auto 情况下用来获取元素内容高宽 这种情况client、offset都只能取到显示高宽</p><p>ie6不建议使用：<br>ie6虽然支持，但是很怪异，似乎跟字体大小行高都有关系。 而且如果直接在body下面执行scrollHeight，即同步文档执行，取到的值几乎等同容器高度。异步延后执行又对了，估计同步情况页面都没渲染出来吧，所以取不到</p></section></section><section><h2 id='[\"元素尺寸\",\"边框宽度\"]' data-index=190>边框宽度</h2><p>或者说是从padding到margin的距离。。。<br><strong>只能获取 左上 两边边框宽度</strong><br>clientLeft左、clientTop上</p><p><strong>只读属性</strong></p><p>有几种情况将取不到值(即值为0)：</p><ol><li>样式 display 属性值 为none</li><li>对象 被动态 创建后 并没有插入html中</li><li>操作的是内联元素</li></ol><p><strong>兼容性：</strong> 包括ie6的所有</p><p><strong>ie6\\7特殊情况：</strong><br>目标元素css高宽造成 获取的clientLeft、clientTop值有误 当目标元素的css高宽值 都为auto时，获取到的是0。 解决办法，在ie6\\7中，最好给元素的高宽设置具体值</p></section></section><section><h1 id='[\"元素集合 HTMLCollection\"]' data-index=191>元素集合 HTMLCollection</h1><section><h2 id='[\"元素集合 HTMLCollection\",\"实时改变特性\"]' data-index=192>实时改变特性</h2><p><strong>原生获取的 HTMLCollection 集合对象都具有实时改变特性</strong>。<br>即转移或者删除某元素，其存在的HTMLCollection集合对象会实时改变。children 属性获取的就是 HTMLCollection 。</p><p>兼容性：包括ie6的所有</p><pre><code class=language-js><span class=hljs-keyword>var</span> eDiv = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'test'</span>).getElementsByTagName(<span class=hljs-string>'div'</span>);\n\n<span class=hljs-built_in>console</span>.log(eDiv.length); <span class=hljs-comment>// 2</span>\n\n<span class=hljs-built_in>document</span>.body.appendChild(eDiv[<span class=hljs-number>0</span>]);\n\n<span class=hljs-built_in>console</span>.log(eDiv.length); <span class=hljs-comment>// 1</span></code></pre></section><section><h2 id='[\"元素集合 HTMLCollection\",\"判断某集合是否是HTMLCollection类派生\"]' data-index=193>判断某集合是否是HTMLCollection类派生</h2><pre><code class=language-js><span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'div'</span>) <span class=hljs-keyword>instanceof</span> HTMLCollection;<span class=hljs-comment>// true</span></code></pre></section><section><h2 id='[\"元素集合 HTMLCollection\",\"根据name标签属性检索元素\"]' data-index=194>根据name标签属性检索元素</h2><p>从集合中检索</p><p>HTMLCollection.prototype.namedItem(name)</p><pre><code class=language-js><span class=hljs-keyword>var</span> elem = <span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'div'</span>).namedItem(<span class=hljs-string>'name1'</span>)</code></pre><p>兼容性：<br>ie全系列，包括edge，只支持表单内元素。也许是因为name属性本身就是为表单元素而生 其他高级浏览器div都支持</p></section><section><h2 id='[\"元素集合 HTMLCollection\",\"根据标签名检索 - ie独有\"]' data-index=195>根据标签名检索 - ie独有</h2><p>返回：HTMLCollection集合</p><p>HTMLCollection.prototype.tags(tagName)</p><pre><code class=language-js><span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'*'</span>).tags(<span class=hljs-string>'input'</span>);</code></pre><p>兼容性：全系列ie支持，包括edge。其他高级均不支持</p></section></section><section><h1 id='[\"光标操作\"]' data-index=196>光标操作</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Range>Range - Web API 接口 | MDN</a></p><section><h2 id='[\"光标操作\",\"textarea input[type=text]\"]' data-index=197>textarea input[type=text]</h2><section><h3 id='[\"光标操作\",\"textarea input[type=text]\",\"ie10+\"]' data-index=198>ie10+</h3><p>属性 selectionStart、selectionEnd。可读写。通过此属性实现移动和选择</p><p>还有属性 setSelectionRange？？待测</p><p>方法 select 实现全选</p><pre><code class=language-js>\n<span class=hljs-comment>//// 光标到文本最后 ////</span>\n\nelInput.selectionStart = elInput.selectionEnd = elInput.value.length;\n\n<span class=hljs-comment>//// 选择指定 ？   ////</span>\n\nelInput.setSelectionRange(<span class=hljs-number>0</span>, <span class=hljs-number>0</span>);\n\n<span class=hljs-comment>//// 实现全选      ////</span>\n\n<span class=hljs-comment>// 1 直接使用 select</span>\nelInput.select()\n\n<span class=hljs-comment>// 2 变相实现。推荐方式1...</span>\nelInput.selectionStart = <span class=hljs-number>0</span>;\nelInput.selectionEnd = elInput.value.length;</code></pre></section><section><h3 id='[\"光标操作\",\"textarea input[type=text]\",\"ie6/7/8/9\"]' data-index=199>ie6/7/8/9</h3><p>通过操作 selection range 实现</p><p><strong>撤销当前选中</strong><code>document.selection.empty()</code></p><p><strong>创建活动区域的Range对象</strong><code>document.selection.createRange()</code></p><p><strong>对指定的 range 执行选中</strong><code>range.select()</code></p></section></section><section><h2 id='[\"光标操作\",\"ie 678 selection、range\"]' data-index=200>ie 678 selection、range</h2><pre><code class=language-js><span class=hljs-keyword>var</span> sel= <span class=hljs-built_in>document</span>.selection;\n<span class=hljs-keyword>var</span> r = sel.createRange();\n\nr.moveEnd(<span class=hljs-string>\"character\"</span>,<span class=hljs-number>3</span>);<span class=hljs-comment>//从当前位置 起，往右选择3个字符</span>\nr.select();<span class=hljs-comment>//执行选择</span>\n\nr.moveStart(<span class=hljs-string>\"character\"</span>,<span class=hljs-number>-3</span>);<span class=hljs-comment>// 从当前位置 起，往左选择3个字符</span>\nr.select();<span class=hljs-comment>//执行选择</span>\n\n<span class=hljs-comment>// 获取 选中文字</span>\n<span class=hljs-built_in>console</span>.log(r.text);\n\n<span class=hljs-comment>// 光标前 插入 html文本</span>\nr.pasteHTML(<span class=hljs-string>'&lt;img src=\"http://ctc.qzonestyle.gtimg.cn/qzone/em/e122.gif\"&gt;'</span>);\n\n<span class=hljs-comment>// 还要通过 focus 才能出现光标，待测</span>\nel.focus();</code></pre></section><section><h2 id='[\"光标操作\",\"富文本光标操作\"]' data-index=201>富文本光标操作</h2><section><h3 id='[\"光标操作\",\"富文本光标操作\",\"将光标设置到末尾\"]' data-index=202>将光标设置到末尾</h3><pre><code class=language-js><span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection()\n<span class=hljs-keyword>let</span> range = <span class=hljs-built_in>document</span>.createRange()\nrange.selectNodeContents(elem)\nrange.collapse()\nselection.removeAllRanges()\nselection.addRange(range)</code></pre><p><strong>Microsoft Edge <code>selection.addRange</code> 必须再最后</strong><br>如下代码所示将无发获焦，其他浏览器没问题</p><pre><code class=language-js><span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection()\n<span class=hljs-keyword>let</span> range = <span class=hljs-built_in>document</span>.createRange()\nselection.removeAllRanges()\nselection.addRange(range)\nrange.selectNodeContents(elem)\nrange.collapse()</code></pre></section></section><section><h2 id='[\"光标操作\",\"实用代码块\"]' data-index=203>实用代码块</h2><section><h3 id='[\"光标操作\",\"实用代码块\",\"表情增加\"]' data-index=204>表情增加</h3><pre><code class=language-js><span class=hljs-keyword>var</span> imgTxt = <span class=hljs-string>'&lt;img src=\"http://ctc.qzonestyle.gtimg.cn/qzone/em/e122.gif\"&gt;'</span>;\n<span class=hljs-keyword>var</span> sel, range;\n<span class=hljs-keyword>if</span> (<span class=hljs-built_in>window</span>.getSelection) {\n    <span class=hljs-keyword>var</span> imgDom = $(imgTxt);\n\n    <span class=hljs-comment>//光标选区对象</span>\n    sel = <span class=hljs-built_in>window</span>.getSelection();\n\n    <span class=hljs-comment>//选区 操作对象</span>\n    range = sel.getRangeAt(<span class=hljs-number>0</span>);\n\n    <span class=hljs-comment>//删除选中文字</span>\n    range.deleteContents();\n\n    <span class=hljs-comment>//插入 :光标处 插入 元素</span>\n    range.insertNode(imgDom[<span class=hljs-number>0</span>]);\n\n    <span class=hljs-comment>//移动光标</span>\n    range = range.cloneRange();\n    range.setStartAfter(imgDom[<span class=hljs-number>0</span>]);<span class=hljs-comment>//移动到指定 元素 后面</span>\n    range.collapse(<span class=hljs-literal>true</span>);    \n    sel.removeAllRanges();\n    sel.addRange(range);\n} <span class=hljs-keyword>else</span> { <span class=hljs-comment>// ie678</span>\n    <span class=hljs-built_in>document</span>.selection.createRange().pasteHTML(imgTxt);\n}\n</code></pre></section><section><h3 id='[\"光标操作\",\"实用代码块\",\"取消选择\"]' data-index=205>取消选择</h3><pre><code class=language-js><span class=hljs-selector-tag>if</span> (<span class=hljs-selector-tag>window</span><span class=hljs-selector-class>.getSelection</span>) <span class=hljs-selector-tag>window</span><span class=hljs-selector-class>.getSelection</span>()<span class=hljs-selector-class>.removeAllRanges</span>();\n<span class=hljs-selector-tag>else</span> <span class=hljs-selector-tag>document</span><span class=hljs-selector-class>.selection</span><span class=hljs-selector-class>.empty</span>();</code></pre></section></section></section><section><h1 id='[\"坐标\"]' data-index=206>坐标</h1><section><h2 id='[\"坐标\",\"元素坐标\"]' data-index=207>元素坐标</h2><section><h3 id='[\"坐标\",\"元素坐标\",\"相对定位元素\"]' data-index=208>相对定位元素</h3><p>offsetLeft offsetTop</p><p>取 相对于 定位父元素</p><p>td tr 等特殊元素 可能会是参照物</p></section></section></section><section><h1 id='[\"复制剪切粘帖\"]' data-index=209>复制剪切粘帖</h1><section><h2 id='[\"复制剪切粘帖\",\"复制事件 copy\"]' data-index=210>复制事件 copy</h2><section><h3 id='[\"复制剪切粘帖\",\"复制事件 copy\",\"ie所有(包括edge)：\"]' data-index=211>ie所有(包括edge)：</h3><ol><li>只能给页面元素绑定，比如 <code>document.documentElement.oncopy(html)</code>、<code>document.body.oncopy(body)</code>，错误方式 <code>document.oncopy</code></li><li>假如不选中文本，不会发生复制，也不会一直触发事件，大概触发一次两次的样子</li></ol></section><section><h3 id='[\"复制剪切粘帖\",\"复制事件 copy\",\"chrome、firefox:\"]' data-index=212>chrome、firefox:</h3><ol><li>包括document.oncopy的所有方式</li><li>假如不选中文本，不会发生复制，但会一直触发事件</li></ol></section></section><section><h2 id='[\"复制剪切粘帖\",\"粘帖事件 paste\"]' data-index=213>粘帖事件 paste</h2><p>粘贴操作时触发，粘贴效果前触发。可 <code>event.preventDefault()</code> 阻止默认粘贴发生</p><section><h3 id='[\"复制剪切粘帖\",\"粘帖事件 paste\",\"ie所有(包括edge)：\"]' data-index=214>ie所有(包括edge)：</h3><p>剪切板为空情况，不会触发 paste 事件。也就是说，只有真正发生粘帖后才会触发。</p><p>除 document 外，其它任意元素都能绑定，可继承</p></section><section><h3 id='[\"复制剪切粘帖\",\"粘帖事件 paste\",\"firefox：\"]' data-index=215>firefox：</h3><p>即使即使剪切板为空，只要在输入元素中，都会发生</p><p>包括 document 的所有元素，可继承</p></section><section><h3 id='[\"复制剪切粘帖\",\"粘帖事件 paste\",\"chrome：\"]' data-index=216>chrome：</h3><p>任何元素，包括 document。剪切板为空都行，ctrl+v 都会触发</p></section><section><h3 id='[\"复制剪切粘帖\",\"粘帖事件 paste\",\"jq如何绑定：\"]' data-index=217>jq如何绑定：</h3><p>不能直接点出 paste，但可通过on，如 <code>jIn.on(&#39;paste&#39;, function () {alert(&#39;&#39;);});</code></p></section></section><section><h2 id='[\"复制剪切粘帖\",\"剪切事件 cut\"]' data-index=218>剪切事件 cut</h2></section><section><h2 id='[\"复制剪切粘帖\",\"取剪切板内容\"]' data-index=219>取剪切板内容</h2><section><h3 id='[\"复制剪切粘帖\",\"取剪切板内容\",\"ie6~11：\"]' data-index=220>ie6~11：</h3><p><code>window.clipboardData.getData(&#39;text&#39;)</code> 任意事件，任意地方，任意取</p></section><section><h3 id='[\"复制剪切粘帖\",\"取剪切板内容\",\"高级，包括edge：\"]' data-index=221>高级，包括edge：</h3><p>只能在粘帖事件中取</p><pre><code class=language-js>event.clipboardData.getData(<span class=hljs-string>'text/plain'</span>)\n\n<span class=hljs-comment>// firefox、edge不支持复制过来的html，默认会清掉格式。。。所以只支持取直接通过setData('text/html')的</span>\n<span class=hljs-comment>// 只有chrome完美支持，只要是有格式的，哪里的文本都行</span>\nevent.clipboardData.getData(<span class=hljs-string>'text/html'</span>) \n</code></pre></section></section><section><h2 id='[\"复制剪切粘帖\",\"设置剪切板\"]' data-index=222>设置剪切板</h2><section><h3 id='[\"复制剪切粘帖\",\"设置剪切板\",\"随时操作剪切板的方式，复制实现\"]' data-index=223>随时操作剪切板的方式，复制实现</h3><p>通过 <code>document.execCommand(&#39;copy&#39;)</code> 命令</p><pre><code class=language-js>aBtn.addEventListener(<span class=hljs-string>'click'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    getSelection().selectAllChildren(<span class=hljs-keyword>this</span>.previousSibling);\n    <span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'copy'</span>);\n});\n</code></pre></section><section><h3 id='[\"复制剪切粘帖\",\"设置剪切板\",\"只能在 复制粘贴剪切事件 操作剪切板的方式\"]' data-index=224>只能在 复制粘贴剪切事件 操作剪切板的方式</h3><p>高级，包括edge：</p><p>需结合e.preventDefault()使用，否则剪切板不会被替换，依然是之前的内容。</p><p>只能在copy事件中设置，由于这点限制，一般使用flash实现</p><pre><code class=language-js>event.clipboardData.setData(<span class=hljs-string>'text/plain'</span>,<span class=hljs-string>'剪切板内容'</span>);\nevent.clipboardData.setData(<span class=hljs-string>'text/html'</span>,<span class=hljs-string>'&lt;b style=\"color:red\"&gt;剪切板内容&lt;/b&gt;'</span>);\n\n<span class=hljs-built_in>document</span>.body.oncopy = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    <span class=hljs-comment>//e.clipboardData.setData('text/html', '&lt;b style=\"color:red\"&gt;xxx&lt;/b&gt;');</span>\n    <span class=hljs-comment>//e.clipboardData.setData('text/plain', '&lt;b style=\"color:red\"&gt;xxx&lt;/b&gt;');</span>\n    e.clipboardData.setData(<span class=hljs-string>'text/plain'</span>, <span class=hljs-string>''</span>);\n\n    e.preventDefault();<span class=hljs-comment>// 需禁用默认copy事件</span>\n};</code></pre></section></section><section><h2 id='[\"复制剪切粘帖\",\"关于事件绑定注意\"]' data-index=225>关于事件绑定注意</h2><p>在给整个页面绑定事件时，由于所有ie浏览器不支持直接document方式，推荐document.body或document.documentElement</p></section><section><h2 id='[\"复制剪切粘帖\",\"ie可能需开启权限\"]' data-index=226>ie可能需开启权限</h2><p>internet 选项 –&gt; 安全 -&gt; 自定义级别</p></section></section><section><h1 id='[\"打印机\"]' data-index=227>打印机</h1><p>调用打印 window.print()</p></section><section><h1 id='[\"浏览器\"]' data-index=228>浏览器</h1><section><h2 id='[\"浏览器\",\"手动刷新\"]' data-index=229>手动刷新</h2><p>之前都是 <code>location.href=&quot;&quot;</code>，其实有直接的方法</p><pre><code class=language-js><span class=hljs-selector-tag>location</span><span class=hljs-selector-class>.reload</span>()\n</code></pre><p>其它方式</p><pre><code class=language-js>history.go(<span class=hljs-number>0</span>)\nlocation=location\nlocation.assign(location)\n<span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'Refresh'</span>)\n<span class=hljs-built_in>window</span>.navigate(location)\nlocation.replace(location)\n<span class=hljs-built_in>document</span>.URL=location.href\n</code></pre></section><section><h2 id='[\"浏览器\",\"浏览器判断\"]' data-index=230>浏览器判断</h2><p>ie专属判断 兼容性：ie6 和其它浏览器不支持</p><pre><code>isie6789 = <span class=hljs-built_in>document</span>.documentMode &amp;&amp; <span class=hljs-built_in>document</span>.documentMode &lt; <span class=hljs-number>10</span>\n\nalert(!-[<span class=hljs-number>1</span>,]) <span class=hljs-comment>// 判断是不是 ie678</span>\nalert(<span class=hljs-comment>/*@cc_on !@*/</span><span class=hljs-literal>false</span>);<span class=hljs-comment>//判断是不是ie</span></code></pre><p>所有浏览器支持方式</p><pre><code><span class=hljs-selector-tag>window</span><span class=hljs-selector-class>.navigator</span><span class=hljs-selector-class>.userAgent</span>\n<span class=hljs-selector-tag>window</span><span class=hljs-selector-class>.navigator</span><span class=hljs-selector-class>.appVersion</span></code></pre></section></section><section><h1 id='[\"浏览器窗口\"]' data-index=231>浏览器窗口</h1><section><h2 id='[\"浏览器窗口\",\"尺寸-显示窗口\"]' data-index=232>尺寸-显示窗口</h2><section><h3 id='[\"浏览器窗口\",\"尺寸-显示窗口\",\"方式1：直接通过window获取，这应该是<strong><em>*被认可的方式</em></strong>\"]' data-index=233>方式1：直接通过window获取，这应该是<strong><em>*被认可的方式</em></strong></h3><p>innerHeight、innerWidth</p><pre><code class=language-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>window</span><span class=hljs-selector-class>.innerHeight</span>);</code></pre><p>兼容：ie9+、其他高级浏览器</p></section><section><h3 id='[\"浏览器窗口\",\"尺寸-显示窗口\",\"方式2：通过<code>&lt;html&gt;</code>元素的client，<strong><em>*兼容性最好</em></strong>\"]' data-index=234>方式2：通过<code>&lt;html&gt;</code>元素的client，<strong><em>*兼容性最好</em></strong></h3><p>clientHeight、clientWidth</p><pre><code class=language-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>document</span><span class=hljs-selector-class>.documentElement</span><span class=hljs-selector-class>.clientHeight</span>);</code></pre><p>兼容：包括ie6的所有</p><p>其他疑虑(<strong>此疑虑可忽略</strong>，因为结果是clientWH绝对可正确获取 显示窗口高宽的):<br>首先，clientHeight取得尺寸值是不包括padding，border的，也就是从padding内边起始的<br>假如给html 设置padding，border，html的clientHeight值是否会受影响？<br>答案是，只有ie6受html border宽度，padding大小影响。其他浏览器不受影响，依然是完整的显示窗口高宽。但谁又会去设置html的border，padding呢，而且ie似乎已经淡出视野了，所以这个担心可忽略。当然，还是不要去控制html的border padding</p><p>经过细测，上述说的只有ie6受影响不完全正确，ie8也有影响，不过是一种固定的黑边(仔细看浏览器就会发现)，无法通过css去除，所以得到的值是真实的显示<code>窗口高宽 - 黑边4px</code>。<br>ie6也有这种黑边，严格来说，ie6中 是 得到的值 是 <code>窗口高宽 - (黑边4px + border + padding)</code><br>ie7居然没有黑边...<br>然而，定位元素是以这种黑边内边起始的，所以此问题依然忽略...</p></section><section><h3 id='[\"浏览器窗口\",\"尺寸-显示窗口\",\"方式3：通过<code>&lt;html&gt;</code>元素的offset，次方案不可取\"]' data-index=235>方式3：通过<code>&lt;html&gt;</code>元素的offset，次方案不可取</h3><p>offsetHeight、offsetWidth<br>兼容性：ie6~10 正确，而且ie6、8得到的高宽值终于包括了黑边，看似正确，反而造成了问题，因为上面说过，元素定位是以黑边内边起始。。。<br>ie11、其他高级，取得是内容窗口高宽...</p></section></section><section><h2 id='[\"浏览器窗口\",\"给显示窗口设置背景\"]' data-index=236>给显示窗口设置背景</h2><p>包括背景色，背景图片等等。<br>通过body实现。<br>兼容包括ie6的所有。<br>此内容属于css范畴...<br>窗口滚动条控制<br>还是属于css范畴，但还是提一下</p></section><section><h2 id='[\"浏览器窗口\",\"ie67 需通过 <code>&lt;html&gt;</code> 控制\"]' data-index=237>ie67 需通过 <code>&lt;html&gt;</code> 控制</h2><p>其他 可同过 <code>&lt;html&gt;</code>，也可通过<code>&lt;body&gt;</code>，截止今天2016.7，最新版chrome也是如此<br>看来</p><html>控制窗口滚动条兼容性最好啊，发现自己以前都是通过 <code>&lt;body&gt;</code>控制的...<br>那么以后通过html控制？？<p></p></html></section><section><h2 id='[\"浏览器窗口\",\"尺寸-内容窗口WH\"]' data-index=238>尺寸-内容窗口WH</h2><p>通过body获取即可，使用元素的获取方式:<strong>一般使用下面的方式1即可</strong></p><p>1、元素窗口高宽：一般能对应 css(非auto情况) height、width 值<br>不包括边框 和 滚动条<br>document.body.clientHeight<br>document.body.clientWidth<br>包括边框<br>document.body.offsetHeight<br>document.body.offsetWidth</p><p>不控制body高度情况，可得到准确的内容高度，否则只是body元素窗口高度。所以尽量不控制body高度，不过一般也不会控制。</p><p>兼容性：所有</p><p>2、元素内容高宽：不包括边框 和 滚动条<br>document.body.scrollHeight<br>document.body.scrollWidth</p><p>这种方式在内容少，即视窗高大于内容高的时候，可以得到视窗高度。<br>而且在控制body高度的情况也能准确获取内容高</p><p>兼容性：ie67不适用</p></section></section><section><h1 id='[\"滚动条\"]' data-index=239>滚动条</h1><section><h2 id='[\"滚动条\",\"滚动条控制\"]' data-index=240>滚动条控制</h2><section><h3 id='[\"滚动条\",\"滚动条控制\",\"浏览器窗口\"]' data-index=241>浏览器窗口</h3><section><h4 id='[\"滚动条\",\"滚动条控制\",\"浏览器窗口\",\"scrollTo\"]' data-index=242>scrollTo</h4><p>滚动条隐藏指定页面高度</p><pre><code class=language-js><span class=hljs-comment>// 参数依次是 x y</span>\n<span class=hljs-comment>// 兼容所有浏览器</span>\n<span class=hljs-built_in>window</span>.scrollTo(<span class=hljs-number>0</span>, elem.offsetTop)<span class=hljs-comment>// 滚动到某元素位置</span></code></pre></section><section><h4 id='[\"滚动条\",\"滚动条控制\",\"浏览器窗口\",\"scrollBy\"]' data-index=243>scrollBy</h4><p>以当前位置为基础追加</p><p>与scrollTo区别：</p><ul><li>scrollTo 直接到指定的页面位置</li><li>scrollBy 当前页面位置为基础，追加</li></ul><pre><code class=language-js><span class=hljs-comment>// 参数依次是 x y</span>\n<span class=hljs-comment>// 兼容所有浏览器</span>\n<span class=hljs-built_in>window</span>.scrollBy(<span class=hljs-number>10</span>, <span class=hljs-number>200</span>)</code></pre></section></section><section><h3 id='[\"滚动条\",\"滚动条控制\",\"元素\"]' data-index=244>元素</h3><p>理解：滚动条隐藏指定距离</p><p>元素边框内边起始</p><p>兼容性：all浏览器</p><pre><code class=language-js><span class=hljs-comment>// 滚动到底部</span>\nel.scrollTop = el.scrollHeight</code></pre></section></section><section><h2 id='[\"滚动条\",\"获取 - 滚动条隐藏距离\"]' data-index=245>获取 - 滚动条隐藏距离</h2><section><h3 id='[\"滚动条\",\"获取 - 滚动条隐藏距离\",\"元素\"]' data-index=246>元素</h3><p>scrollTop、scrollLeft</p><p>只读</p><p>兼容性：所有浏览器支持<br>ie7 能取到负数<br>其他浏览器 只能是 正数(在小于0的情况，返回0)</p><pre><code class=language-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>el</span><span class=hljs-selector-class>.scrollTop</span>);</code></pre></section><section><h3 id='[\"滚动条\",\"获取 - 滚动条隐藏距离\",\"浏览器窗口\"]' data-index=247>浏览器窗口</h3><section><h4 id='[\"滚动条\",\"获取 - 滚动条隐藏距离\",\"浏览器窗口\",\"1. 直接获取，此为推荐方式\"]' data-index=248>1. 直接获取，此为推荐方式</h4><p>window.pageYOffset、window.pageXOffset</p><p>兼容性：只有ie678不支持</p><pre><code class=language-js><span class=hljs-comment>// 兼容性封装，包括ie6的所有浏览器</span>\n<span class=hljs-keyword>var</span> getWindowScrollTop = <span class=hljs-string>'pageYOffset'</span> <span class=hljs-keyword>in</span> <span class=hljs-built_in>window</span> ? <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    <span class=hljs-keyword>return</span> pageYOffset;\n} : <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    <span class=hljs-keyword>return</span> <span class=hljs-built_in>document</span>.documentElement.scrollTop;\n};\n</code></pre></section><section><h4 id='[\"滚动条\",\"获取 - 滚动条隐藏距离\",\"浏览器窗口\",\"2. 通过元素方式，不推荐\"]' data-index=249>2. 通过元素方式，不推荐</h4><p>兼容性：</p><ol><li>Chrome、Safari、Edge(新版ie)<ul><li>只能使用body对象，使用html对象将取到0</li></ul></li><li>ie6~11<ul><li>只能使用html对象，使用body对象将取到0</li></ul></li></ol><pre><code class=language-js><span class=hljs-comment>// 兼容性封装</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getWindowScrollTop</span>(<span class=hljs-params></span>)</span>{\n    <span class=hljs-keyword>return</span> isIe6_11 ? <span class=hljs-built_in>document</span>.documentElement.scrollTop : <span class=hljs-built_in>document</span>.body.scrollTop;\n}</code></pre></section></section></section><section><h2 id='[\"滚动条\",\"滚动事件\"]' data-index=250>滚动事件</h2><p><strong>当 由于 内容 的变化，造成 滚动条的变化时</strong><br>ie全系列、opera 不会触发 滚动条事件<br>其他会触发</p></section></section>"})
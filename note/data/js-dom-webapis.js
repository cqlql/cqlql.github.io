window['cb_js-dom-webapis']({"outline":[{"id":"1802413526","level":1,"name":"html 转图片","children":[]},{"id":"2163630122","level":1,"name":"btoa 字符串转 base64","children":[]},{"id":"134954462","level":1,"name":"web 图片数据形式种类","children":[]},{"id":"4084891746","level":1,"name":"弹窗","children":[]},{"id":"1516054025","level":1,"name":"页面地址-url","children":[{"id":"688939871","level":2,"name":"location.search 读取","children":[]},{"id":"196952574","level":2,"name":"location.search 设置","children":[]},{"id":"3240937770","level":2,"name":"href 跳转执行后，后面的 js 还会执行吗？","children":[]}]},{"id":"862804977","level":1,"name":"浏览器跳转","children":[]},{"id":"1629685636","level":1,"name":"设备像素比 window.devicePixelRatio","children":[]},{"id":"2733547024","level":1,"name":"安卓浏览器兼容性判断","children":[]},{"id":"2459793948","level":1,"name":"ajax","children":[{"id":"3410471998","level":2,"name":"问题","children":[{"id":"2482721014","level":3,"name":"xhr.responseType","children":[]}]}]},{"id":"2084921260","level":1,"name":"cookie","children":[{"id":"3712232302","level":2,"name":"新增/修改 操作","children":[]},{"id":"2303298791","level":2,"name":"参数 path","children":[]},{"id":"1300789174","level":2,"name":"删","children":[]},{"id":"495055656","level":2,"name":"查","children":[]}]},{"id":"3218237203","level":1,"name":"dataset 标签数据","children":[{"id":"1296701493","level":2,"name":"兼容性","children":[]},{"id":"2353812677","level":2,"name":"js 设置","children":[]},{"id":"1781487754","level":2,"name":"js 获取","children":[]},{"id":"3321275307","level":2,"name":"关于大小写问题","children":[]}]},{"id":"1604334458","level":1,"name":"document 对象","children":[{"id":"2163995916","level":2,"name":"直接操作 title 标签值","children":[]},{"id":"2072402547","level":2,"name":"页面加载状态 document.readyState","children":[]}]},{"id":"2365920071","level":1,"name":"FormData","children":[]},{"id":"138148815","level":1,"name":"h5 文件上传","children":[]},{"id":"4168336262","level":1,"name":"h5 文件系统 FileSystem API","children":[{"id":"362986148","level":2,"name":"文件读取","children":[]},{"id":"2057100079","level":2,"name":"base64","children":[]},{"id":"3886228565","level":2,"name":"blob 获取","children":[{"id":"1261040296","level":3,"name":"atob + Uint8Array 方式 (base64 转 blob)","children":[]},{"id":"2355933663","level":3,"name":"canvas.toBlob 方式","children":[]}]},{"id":"2401870561","level":2,"name":"blob 转 file","children":[]},{"id":"660441486","level":2,"name":"浏览器直接打开 blob (也可实现下载)","children":[]}]},{"id":"3422879351","level":1,"name":"h5 无刷新改变 url","children":[]},{"id":"2921257294","level":1,"name":"h5 本地存储","children":[{"id":"625928606","level":2,"name":"localStorage/sessionStorage","children":[]}]},{"id":"1857742047","level":1,"name":"h5 页面状态 Page Visibility","children":[]},{"id":"658270668","level":1,"name":"h5全屏","children":[{"id":"1385029849","level":2,"name":"执行全屏","children":[]},{"id":"882044559","level":2,"name":"退出全屏","children":[]},{"id":"193083576","level":2,"name":"全屏改变事件","children":[]},{"id":"1461339334","level":2,"name":"判断是否全屏","children":[]}]},{"id":"378925398","level":1,"name":"h5拖放","children":[{"id":"4143912720","level":2,"name":"元素可拖放设置","children":[]},{"id":"2159587031","level":2,"name":"相关事件：","children":[]}]},{"id":"2644969683","level":1,"name":"IE 专属","children":[{"id":"3237945699","level":2,"name":"WScript 实现全屏","children":[]},{"id":"1309015604","level":2,"name":"执行[注释]","children":[]}]},{"id":"571950951","level":1,"name":"js 操作 css","children":[{"id":"3773209595","level":2,"name":"元素对象的 style 属性","children":[{"id":"2172125353","level":3,"name":"传统方式操作 style","children":[{"id":"1440429756","level":4,"name":"兼容性","children":[]},{"id":"2551324501","level":4,"name":"设置","children":[]},{"id":"2262855949","level":4,"name":"获取","children":[]},{"id":"1459108995","level":4,"name":"猜想：是否可以直接赋对象？","children":[]},{"id":"2669645360","level":4,"name":"前缀问题","children":[]}]},{"id":"1768161724","level":3,"name":"新方式操作 style","children":[{"id":"1303694146","level":4,"name":"设置 - setProperty","children":[]},{"id":"1136955867","level":4,"name":"获取 – getPropertyValue","children":[]},{"id":"3947005540","level":4,"name":"删除 - removeProperty","children":[]},{"id":"2339332425","level":4,"name":"判断是否使用 important 优先级 - getPropertyPriority","children":[]},{"id":"3637581065","level":4,"name":"内联css个数 – length","children":[]},{"id":"1490693836","level":4,"name":"可操作索引","children":[]},{"id":"577434246","level":4,"name":"兼容性","children":[]}]},{"id":"1110373599","level":3,"name":"ie专属，ie6 ~ ie11","children":[]}]},{"id":"2512594924","level":2,"name":"style 元素","children":[{"id":"178068669","level":3,"name":"操作","children":[{"id":"3366717488","level":4,"name":"innerHTML 方式","children":[]},{"id":"2677758639","level":4,"name":"textContent方式","children":[]},{"id":"3421388291","level":4,"name":"styleElem.styleSheet.cssText IE独有方式","children":[]},{"id":"328246710","level":4,"name":"兼容所有示例","children":[]}]},{"id":"2962436663","level":3,"name":"动态创建注意","children":[{"id":"799325975","level":4,"name":"位置","children":[]},{"id":"2719908282","level":4,"name":"生效","children":[]}]},{"id":"979848628","level":3,"name":"关于 jq 的 html 方法","children":[]}]},{"id":"3687277859","level":2,"name":"全能取css值","children":[{"id":"459531511","level":3,"name":"高级 - getComputedStyle","children":[{"id":"1320085164","level":4,"name":"兼容性：ie9+，chrome，firefox","children":[]}]},{"id":"670616703","level":3,"name":"ie6 ~ 9","children":[{"id":"3829278220","level":4,"name":"取操作","children":[]},{"id":"1594203113","level":4,"name":"写操作 尝试","children":[]}]}]},{"id":"3106555916","level":2,"name":"className 操作","children":[{"id":"3410522275","level":3,"name":"直接操作 className 属性","children":[{"id":"2782563179","level":4,"name":"增删改查","children":[]}]},{"id":"2469102697","level":3,"name":"关于className中包含多个空格 影响","children":[{"id":"4200803648","level":4,"name":"className 属性的影响","children":[]},{"id":"1372092716","level":4,"name":"对getElementsByClassName的没有影响","children":[]}]},{"id":"1903107250","level":3,"name":"操作 className 新方式 - classList","children":[]}]}]},{"id":"2577617645","level":1,"name":"URL 解析","children":[]},{"id":"3008002491","level":1,"name":"事件","children":[{"id":"1427704213","level":2,"name":"事件类型一览表","children":[]},{"id":"4105913464","level":2,"name":"事件注册、删除","children":[{"id":"4061146258","level":3,"name":"方式1，通过元素属性","children":[]},{"id":"2415540675","level":3,"name":"方式2，标准方法","children":[]}]},{"id":"4078345507","level":2,"name":"多个事件触发顺序、冒泡原理","children":[]},{"id":"3943111243","level":2,"name":"dispatchEvent 手动触发事件","children":[]},{"id":"2624513577","level":2,"name":"阻止冒泡","children":[]},{"id":"3198224664","level":2,"name":"阻止默认动作","children":[]},{"id":"3352444482","level":2,"name":"键盘输入事件","children":[{"id":"3878097473","level":3,"name":"常用的几个 keyCode","children":[]},{"id":"974908199","level":3,"name":"keypress 字符键触发","children":[]},{"id":"3910306500","level":3,"name":"input 有字符输入则触发","children":[]}]},{"id":"171718762","level":2,"name":"触摸事件","children":[{"id":"1955176462","level":3,"name":"特性","children":[]},{"id":"4166904423","level":3,"name":"e.touches 与 e.targetTouches 区别","children":[]}]},{"id":"686390588","level":2,"name":"鼠标事件","children":[{"id":"1580893052","level":3,"name":"点下、松开","children":[]},{"id":"3319562423","level":3,"name":"右键菜单","children":[]},{"id":"2955344799","level":3,"name":"双击","children":[]},{"id":"1313378330","level":3,"name":"移入事件","children":[]},{"id":"2610568403","level":3,"name":"滚轮事件","children":[]}]},{"id":"2603044725","level":2,"name":"滚动条事件","children":[{"id":"2467352993","level":3,"name":"新版 chrome 窗口滚动条默认无法阻止解决","children":[]}]},{"id":"4181958572","level":2,"name":"设备旋转事件","children":[]},{"id":"3803333168","level":2,"name":"resize 窗口变化事件","children":[]},{"id":"2621930356","level":2,"name":"阻止失焦","children":[]},{"id":"216132586","level":2,"name":"问题","children":[{"id":"1706639416","level":3,"name":"移动端(android) touchend 中 focus() 获焦失败","children":[]},{"id":"1459965971","level":3,"name":"移动端 chrome touchmove 卡顿现象","children":[]},{"id":"4237432648","level":3,"name":"ios document click 无效问题","children":[]}]}]},{"id":"419508510","level":1,"name":"元素 clone","children":[{"id":"1219005805","level":2,"name":"使用 document.importNode","children":[]},{"id":"1272656410","level":2,"name":"其实还可使用 innerHTML、outerHTML 进行 clone","children":[]}]},{"id":"4013338251","level":1,"name":"元素、节点","children":[{"id":"2478185641","level":2,"name":"元素对象创建","children":[]},{"id":"2269785115","level":2,"name":"节点替换(适用元素)","children":[{"id":"4184924124","level":3,"name":"子节点替换","children":[{"id":"2783909579","level":4,"name":"语法","children":[]},{"id":"234366387","level":4,"name":"例子","children":[]},{"id":"400048638","level":4,"name":"兼容性","children":[]}]}]},{"id":"2018526052","level":2,"name":"节点增加","children":[{"id":"1350694802","level":3,"name":"末尾追加子节点(适用元素)","children":[]},{"id":"3108011756","level":3,"name":"元素内部增加 insertBefore","children":[]}]},{"id":"2617611724","level":2,"name":"元素增加","children":[{"id":"2784297168","level":3,"name":"增加 html 文本 - insertAdjacentHTML","children":[]},{"id":"2868209738","level":3,"name":"增加元素 - insertAdjacentElement","children":[]}]},{"id":"894646666","level":2,"name":"节点克隆/复制(适用元素)","children":[]},{"id":"1847524604","level":2,"name":"识别文档中不存在元素","children":[]},{"id":"818182405","level":2,"name":"元素标签文本操作","children":[{"id":"132263404","level":3,"name":"innerText","children":[]},{"id":"2251304369","level":3,"name":"textContent","children":[]},{"id":"1128054757","level":3,"name":"innerHTML","children":[]},{"id":"3657723935","level":3,"name":"outerHTML","children":[]},{"id":"4228217143","level":3,"name":"textContent 与 innerText 区别","children":[]},{"id":"1082081173","level":3,"name":"总结","children":[]}]},{"id":"1662527672","level":2,"name":"元素标签属性操作","children":[{"id":"3458683957","level":3,"name":"通用全能操作","children":[]},{"id":"956406354","level":3,"name":"部分直接 js 操作","children":[{"id":"2557761756","level":4,"name":"name 标签属性 -- 表单元素独有","children":[]},{"id":"451964985","level":4,"name":"class 标签属性 -- 通过 className 读写","children":[]},{"id":"2895993404","level":4,"name":"id 标签属性","children":[]}]}]},{"id":"2022542267","level":2,"name":"多个节点增加效率写法-文档碎片","children":[]},{"id":"2652051468","level":2,"name":"文本节点相关","children":[]},{"id":"3280263448","level":2,"name":"节点类型 node.nodeType","children":[]},{"id":"4192021880","level":2,"name":"节点名称 node.nodeName","children":[]},{"id":"167568070","level":2,"name":"节点值 node.nodeValue","children":[]},{"id":"1464599712","level":2,"name":"对象形式操作 元素属性","children":[]}]},{"id":"499406943","level":1,"name":"元素、节点删除","children":[{"id":"2432015744","level":2,"name":"remove","children":[]},{"id":"2234178404","level":2,"name":"removeChild","children":[]}]},{"id":"1072596367","level":1,"name":"元素、节点获取","children":[{"id":"3310007783","level":2,"name":"简单汇总","children":[]},{"id":"216965745","level":2,"name":"根据 id 取","children":[]},{"id":"2123470865","level":2,"name":"子元素集合 children","children":[]},{"id":"3407738935","level":2,"name":"紧邻元素获取","children":[]},{"id":"728851034","level":2,"name":"第一个子元素","children":[]},{"id":"3529259605","level":2,"name":"事件元素","children":[{"id":"2862979273","level":3,"name":"事件根元素","children":[]},{"id":"1660142823","level":3,"name":"当前事件元素","children":[]}]},{"id":"3308106261","level":2,"name":"后代元素获取","children":[{"id":"2160762847","level":3,"name":"指定标签名的后代元素","children":[]},{"id":"541251458","level":3,"name":"所有后代","children":[]},{"id":"92234323","level":3,"name":"根据 name - getElementsByName","children":[]},{"id":"3835865320","level":3,"name":"根据 class - getElementsByClassName","children":[]}]},{"id":"3281857630","level":2,"name":"根据元素取 document 对象","children":[]},{"id":"179806075","level":2,"name":"一些疑虑","children":[{"id":"1101882065","level":3,"name":"display:none 元素的获取","children":[]},{"id":"3472824765","level":3,"name":"取元素集合，元素顺序问题","children":[]}]},{"id":"1791347227","level":2,"name":"父节点、父元素","children":[]}]},{"id":"2236386526","level":1,"name":"元素尺寸","children":[{"id":"1200042511","level":2,"name":"高宽 - 精确","children":[]},{"id":"1232234443","level":2,"name":"高宽 - 无法精确到小数","children":[{"id":"2607873410","level":3,"name":"汇总","children":[]},{"id":"1461854581","level":3,"name":"clientHeight、clientWidth属性——不包括边框 和 滚动条","children":[{"id":"3242670145","level":4,"name":"inline 元素也将得到 0","children":[]},{"id":"3741971762","level":4,"name":"描述","children":[]},{"id":"316383947","level":4,"name":"返回值：Number类型","children":[]},{"id":"1661088537","level":4,"name":"兼容性：","children":[]}]},{"id":"2083922026","level":3,"name":"offsetHeight、offsetWidth属性——包括边框","children":[]},{"id":"19606876","level":3,"name":"scrollHeight、scrollWidth属性——内容高宽，不包括边框","children":[]}]},{"id":"860158061","level":2,"name":"边框宽度","children":[]}]},{"id":"1902255510","level":1,"name":"元素集合 HTMLCollection","children":[{"id":"2754801478","level":2,"name":"实时改变特性","children":[]},{"id":"1313060110","level":2,"name":"判断某集合是否是HTMLCollection类派生","children":[]},{"id":"825910866","level":2,"name":"根据name标签属性检索元素","children":[]},{"id":"2043468818","level":2,"name":"根据标签名检索 - ie独有","children":[]}]},{"id":"579953887","level":1,"name":"光标操作","children":[{"id":"3878516610","level":2,"name":"textarea input[type=text]","children":[{"id":"2994780874","level":3,"name":"ie10+","children":[]},{"id":"272115081","level":3,"name":"ie6/7/8/9","children":[]}]},{"id":"1826000980","level":2,"name":"ie 678 selection、range","children":[]},{"id":"753009244","level":2,"name":"富文本光标操作","children":[{"id":"4258238071","level":3,"name":"将光标设置到末尾","children":[]}]},{"id":"2738810390","level":2,"name":"实用代码块","children":[{"id":"1248400337","level":3,"name":"表情增加","children":[]},{"id":"3978492343","level":3,"name":"取消选择","children":[]}]}]},{"id":"2932124966","level":1,"name":"坐标","children":[{"id":"3977808024","level":2,"name":"光标、触摸点坐标","children":[{"id":"2365583377","level":3,"name":"所在元素: offsetX | offsetY","children":[]},{"id":"242878406","level":3,"name":"定位元素：layerX \\ layerY","children":[]},{"id":"497584060","level":3,"name":"内容：pageX | pageY","children":[]},{"id":"1319450230","level":3,"name":"显示：clientX\\ clientY","children":[]},{"id":"3077402832","level":3,"name":"显示 | 内容 | 元素：x | y","children":[]},{"id":"3698495147","level":3,"name":"屏幕：screenX | screenY","children":[]}]},{"id":"395169984","level":2,"name":"元素坐标","children":[{"id":"1256084040","level":3,"name":"相对定位元素","children":[]},{"id":"438601495","level":3,"name":"[应用]相对内容窗口","children":[]},{"id":"1332625212","level":3,"name":"[松开事件]坐标有没有偏移","children":[]},{"id":"2099309250","level":3,"name":"取元素区块坐标尺寸","children":[]}]},{"id":"979437907","level":2,"name":"屏幕坐标","children":[{"id":"1817938321","level":3,"name":"浏览器相对于 屏幕坐标","children":[]},{"id":"236971240","level":3,"name":"显示窗口 相对于屏幕坐标","children":[]}]}]},{"id":"443373034","level":1,"name":"复制剪切粘帖","children":[{"id":"1123626085","level":2,"name":"复制事件 copy","children":[{"id":"2753582864","level":3,"name":"ie所有(包括edge)：","children":[]},{"id":"315853869","level":3,"name":"chrome、firefox:","children":[]}]},{"id":"991508094","level":2,"name":"粘帖事件 paste","children":[{"id":"525559105","level":3,"name":"ie所有(包括edge)：","children":[]},{"id":"2751113188","level":3,"name":"firefox：","children":[]},{"id":"1395022721","level":3,"name":"chrome：","children":[]},{"id":"1021607989","level":3,"name":"jq如何绑定：","children":[]}]},{"id":"2301218836","level":2,"name":"剪切事件 cut","children":[]},{"id":"2015481266","level":2,"name":"取剪切板内容","children":[{"id":"2118138569","level":3,"name":"ie6~11：","children":[]},{"id":"1797302596","level":3,"name":"高级，包括edge：","children":[]}]},{"id":"2894878744","level":2,"name":"设置剪切板","children":[{"id":"1809015270","level":3,"name":"随时操作剪切板的方式，复制实现","children":[]},{"id":"734924027","level":3,"name":"只能在 复制粘贴剪切事件 操作剪切板的方式","children":[]}]},{"id":"3311181001","level":2,"name":"关于事件绑定注意","children":[]},{"id":"2110897221","level":2,"name":"ie可能需开启权限","children":[]}]},{"id":"1067557495","level":1,"name":"打印机","children":[]},{"id":"853364843","level":1,"name":"浏览器","children":[{"id":"2280403651","level":2,"name":"手动刷新","children":[]},{"id":"3038446426","level":2,"name":"浏览器判断","children":[]}]},{"id":"853952347","level":1,"name":"浏览器窗口","children":[{"id":"1583122204","level":2,"name":"尺寸-显示窗口","children":[{"id":"3579948049","level":3,"name":"方式1：直接通过window获取，这应该是<strong><em>*被认可的方式</em></strong>","children":[]},{"id":"931095326","level":3,"name":"方式2：通过<code>&lt;html&gt;</code>元素的client，<strong><em>*兼容性最好</em></strong>","children":[]},{"id":"44137923","level":3,"name":"方式3：通过<code>&lt;html&gt;</code>元素的offset，次方案不可取","children":[]}]},{"id":"3916670742","level":2,"name":"给显示窗口设置背景","children":[]},{"id":"847781183","level":2,"name":"ie67 需通过 <code>&lt;html&gt;</code> 控制","children":[]},{"id":"2227748266","level":2,"name":"尺寸-内容窗口WH","children":[]}]},{"id":"3991019046","level":1,"name":"滚动条","children":[{"id":"4195355639","level":2,"name":"滚动条控制","children":[{"id":"2036598230","level":3,"name":"浏览器窗口","children":[{"id":"3372381811","level":4,"name":"scrollTo","children":[]},{"id":"447806692","level":4,"name":"scrollBy","children":[]}]},{"id":"340023951","level":3,"name":"元素","children":[]}]},{"id":"1018525977","level":2,"name":"获取 - 滚动条隐藏距离","children":[{"id":"1396189094","level":3,"name":"元素","children":[]},{"id":"3271214861","level":3,"name":"浏览器窗口","children":[{"id":"3894043790","level":4,"name":"1. 直接获取，此为推荐方式","children":[]},{"id":"1039383185","level":4,"name":"2. 通过元素方式，不推荐","children":[]}]}]},{"id":"1500202352","level":2,"name":"滚动事件","children":[]}]}],"content":"<section><h1 id=\"1802413526\">html 转图片</h1><p>借助 svg</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">elm, cvs, img</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> div = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>)\n  div.innerHTML = <span class=\"hljs-string\">`&lt;svg ref=\"svg\" viewBox=\"0 0 2016 1428\"&gt;\n    &lt;foreignObject width=\"2016\" height=\"1428\"&gt;<span class=\"hljs-subst\">${elm.outerHTML}</span>&lt;/foreignObject&gt;\n  &lt;/svg&gt;`</span>\n  <span class=\"hljs-keyword\">let</span> svg = div.children[<span class=\"hljs-number\">0</span>]\n\n  <span class=\"hljs-comment\">// let img = new Image()</span>\n  <span class=\"hljs-comment\">// img.style.position = 'relative'</span>\n  <span class=\"hljs-comment\">// document.body.appendChild(img)</span>\n  svg.children[<span class=\"hljs-number\">0</span>].innerHTML = elm.outerHTML\n  <span class=\"hljs-keyword\">let</span> ctx = cvs.getContext(<span class=\"hljs-string\">'2d'</span>)\n  <span class=\"hljs-keyword\">let</span> d = (<span class=\"hljs-keyword\">new</span> XMLSerializer()).serializeToString(svg)\n  <span class=\"hljs-comment\">// 数据流，字符串形式</span>\n  img.src = <span class=\"hljs-string\">'data:image/svg+xml;charset=utf-8,'</span> + d\n  img.width = <span class=\"hljs-number\">2016</span>\n  <span class=\"hljs-comment\">// img.width = 1008</span>\n  img.height = <span class=\"hljs-number\">1428</span>\n\n  img.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    cvs.width = img.width\n    cvs.height = img.height\n    ctx.drawImage(img, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n  }\n}\n</code></pre>\n</section><section><h1 id=\"2163630122\">btoa 字符串转 base64</h1><pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> d = (<span class=\"hljs-keyword\">new</span> XMLSerializer()).serializeToString(svg)\nd = btoa(d)\nimg.src = <span class=\"hljs-string\">'data:image/svg+xml;base64,'</span> + d</code></pre>\n</section><section><h1 id=\"134954462\">web 图片数据形式种类</h1><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 数据流，字符串形式</span>\nimg.src = <span class=\"hljs-string\">'data:image/svg+xml;charset=utf-8,'</span> + d\n<span class=\"hljs-comment\">// base 64</span>\nimg.src = <span class=\"hljs-string\">'data:image/svg+xml;base64,'</span> + d\n<span class=\"hljs-comment\">// 其他几种图片类型</span>\n<span class=\"hljs-comment\">// data:image/jpeg;base64,</span>\n<span class=\"hljs-comment\">// data:image/png;base64,</span>\n<span class=\"hljs-comment\">// data:image/gif;base64,</span></code></pre>\n</section><section><h1 id=\"4084891746\">弹窗</h1><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 确认窗，将挂起，点确认或者取消才会执行</span>\n<span class=\"hljs-keyword\">if</span> (confirm(<span class=\"hljs-string\">\"确实要删除吗\"</span>)) { }</code></pre>\n</section><section><h1 id=\"1516054025\">页面地址-url</h1><p>浏览器地址栏中的地址操作</p>\n<section><h2 id=\"688939871\">location.search 读取</h2><p>没有情况(只有一个<code>?</code>也视为没有)：空字符串  </p>\n<p>有：将包括?</p>\n</section><section><h2 id=\"196952574\">location.search 设置</h2><p>可以不加 <code>?</code></p>\n</section><section><h2 id=\"3240937770\">href 跳转执行后，后面的 js 还会执行吗？</h2><p>会执行。所有js 执行完成后 再href跳转</p>\n<p>js 报错影响是否影响 href 跳转？正常机制：</p>\n<ul>\n<li>href 之上，不会跳转</li>\n<li>href 之下，会跳转</li>\n</ul>\n</section></section><section><h1 id=\"862804977\">浏览器跳转</h1><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 直接替换当前页面</span>\nlocation.href = <span class=\"hljs-string\">'//baidu.com'</span></code></pre>\n</section><section><h1 id=\"1629685636\">设备像素比 window.devicePixelRatio</h1><p>如果是2，则是 1个像素点放了1/2像素的内容。\n即 2个物理分辨率 = 1个逻辑分辨率</p>\n<p>canvas 画图模糊情况使用</p>\n</section><section><h1 id=\"2733547024\">安卓浏览器兼容性判断</h1><p>不应判断android系统版本，跟系统版本无关，跟内置浏览器版本有关</p>\n</section><section><h1 id=\"2459793948\">ajax</h1><section><h2 id=\"3410471998\">问题</h2><section><h3 id=\"2482721014\">xhr.responseType</h3></section></section></section><section><h1 id=\"2084921260\">cookie</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie\">Document.cookie - Web API 接口 | MDN</a></p>\n<p>与当前网址关联</p>\n<section><h2 id=\"3712232302\">新增/修改 操作</h2><p>一次只能操作一个键值</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 新增/修改</span>\n<span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">\"succmsg=helloword;expires=Mon, 16 Jan 2012 20:30:11 UTC;path=/;domain=b.com\"</span>;\n<span class=\"hljs-comment\">// 新增/修改-动态过期时间</span>\n<span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">\"succmsg=helloword;expires=\"</span>+(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()).toUTCString()+<span class=\"hljs-string\">\";path=/;domain=b.com\"</span>;\n\n<span class=\"hljs-comment\">// 值设置为空字符串</span>\n<span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">'succmsg='</span>; \n<span class=\"hljs-comment\">// ie6视这种cookie是没有key情况</span>\n\n<span class=\"hljs-comment\">// 设置没有 key 的 cookie</span>\n<span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">'bar'</span>;\n<span class=\"hljs-comment\">// 加上之前设置的，console.log(document.cookie) 将返回：</span>\n<span class=\"hljs-comment\">// \"bar; succmsg=helloword;\"</span></code></pre>\n<p><strong>中文字符值注意事项：</strong></p>\n<p>避免中文字符无效情况，使用encodeURIComponent 转码，转码后不管什么字符都不会错：\n转码例子：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.cookie=<span class=\"hljs-string\">'test='</span>+<span class=\"hljs-built_in\">encodeURIComponent</span>(<span class=\"hljs-string\">'值'</span>)+<span class=\"hljs-string\">';path=/enterprise/company'</span></code></pre>\n</section><section><h2 id=\"2303298791\">参数 path</h2><p>设置后，只有访问相应地址才能取到值</p>\n<p>默认 <code>;path=/</code> 当前网站的任何子地址都可访问</p>\n</section><section><h2 id=\"1300789174\">删</h2><p>不管是会话还是持久cookie，只要将expires设置为过期，都将被删除</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">\"test=1;path=/\"</span>;\n<span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\nd.setDate(d.getDate()<span class=\"hljs-number\">-1</span>);\n<span class=\"hljs-built_in\">document</span>.cookie = <span class=\"hljs-string\">\"test=(随便，最好不为空);expires=\"</span>+d+<span class=\"hljs-string\">\";path=/\"</span>;<span class=\"hljs-comment\">//执行删除</span></code></pre>\n<p>删除必须的是相同的path。不管上级下级关系，反正只删除path值完全相等情况。<br>目前还不清楚跟domain什么关系，待测</p>\n</section><section><h2 id=\"495055656\">查</h2><p>将返回所有 cookie，键值对，分号+空格隔开</p>\n<p>没有任何 cookie 将值将返回<strong>空字符串</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.cookie)\n<span class=\"hljs-comment\">// FG=1; PSTM=1529373406; BD_CK_SAM=1; PSINO=6</span></code></pre>\n<p>简单封装，取指定key 的 cookie</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 没有值情况 返回null</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCookie</span>(<span class=\"hljs-params\">name</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(name + <span class=\"hljs-string\">'=([^;]*)'</span>),\n        v = reg.exec(<span class=\"hljs-built_in\">document</span>.cookie);\n    <span class=\"hljs-keyword\">return</span> v ? v[<span class=\"hljs-number\">1</span>] : v;\n}</code></pre>\n</section></section><section><h1 id=\"3218237203\">dataset 标签数据</h1><section><h2 id=\"1296701493\">兼容性</h2><p>ie 11 才开始支持，这种情况使用 <code>element.getAttribute(name)</code> 代替</p>\n</section><section><h2 id=\"2353812677\">js 设置</h2><p>js 设置操作将直接同步到标签上。可直接通过调试工具在标签上看到</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"item\"</span> <span class=\"hljs-attr\">data-index</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"undefined\">\n    item.dataset.index=2;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></section><section><h2 id=\"1781487754\">js 获取</h2><pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">console</span><span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-selector-tag\">item</span><span class=\"hljs-selector-class\">.dataset</span><span class=\"hljs-selector-class\">.index</span>)</code></pre>\n</section><section><h2 id=\"3321275307\">关于大小写问题</h2><p>只能小写获取。也就是说，标签属性名尽量小写。</p>\n<pre><code class=\"language-js\">document.body = `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"javascript:;\"</span>  <span class=\"hljs-attr\">data-qNo</span>=<span class=\"hljs-string\">\"' + qNo + '\"</span> <span class=\"hljs-attr\">data-index</span>=<span class=\"hljs-string\">\"' + i + '\"</span>&gt;</span>' + qNo + '1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>`\n\nconsole.log(btn.dataset.qno)</code></pre>\n</section></section><section><h1 id=\"1604334458\">document 对象</h1><section><h2 id=\"2163995916\">直接操作 title 标签值</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.title) <span class=\"hljs-comment\">// 读。String 类型</span>\n\n<span class=\"hljs-built_in\">document</span>.title = <span class=\"hljs-string\">\"*\"</span> + <span class=\"hljs-built_in\">document</span>.title; <span class=\"hljs-comment\">// 设置</span>\n</code></pre>\n<p><strong>兼容性：</strong>\nie9及以上。ie6~8估计得直接取到title标签进行操作了</p>\n</section><section><h2 id=\"2072402547\">页面加载状态 document.readyState</h2><p>只读属性</p>\n<p>返回值：字符串。</p>\n<ol>\n<li>&quot;loading&quot;：页面加载进行中</li>\n<li>&quot;interactive&quot;：DOM对象可以操作了，此时图片视频未加载</li>\n<li>&quot;complete&quot;：页面已完全加载（此时图片视频都已加载完毕）</li>\n</ol>\n<p>兼容性：<br>opera没有interactive状态。只有loading、complete状态<br>ie6\\7\\8\\9只有 点 刷新按钮 才有loading状态。通过URL重新加载页面 直接进入假的interactive状态(不可以操作DOM),\n所以只有在 点 刷新按钮 才能 实现DOMContentLoaded事件<br>chrome\\fox没问题</p>\n</section></section><section><h1 id=\"2365920071\">FormData</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\">https://developer.mozilla.org/zh-CN/docs/Web/API/FormData</a></p>\n<p>创建与使用</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-comment\">// 创建方案1：创建一个空的FormData对象</span>\n<span class=\"hljs-keyword\">var</span> formdata = <span class=\"hljs-keyword\">new</span> FormData()\n<span class=\"hljs-comment\">// 用 append 方法增加数据</span>\nformdata.append(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"诸葛亮\"</span>)\nformdata.append(<span class=\"hljs-string\">\"blog\"</span>, <span class=\"hljs-string\">\"http://www.cnblogs.com\"</span>)\nformdata.append(<span class=\"hljs-string\">\"file\"</span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'fileToUpload'</span>).files[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// 文件</span>\n\n<span class=\"hljs-comment\">// 创建方案2：通过 form 元素初始创建</span>\n<span class=\"hljs-keyword\">var</span> formobj =  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"form\"</span>)\n<span class=\"hljs-keyword\">var</span> formdata = <span class=\"hljs-keyword\">new</span> FormData(formobj)\n<span class=\"hljs-comment\">// 同样可用 append 方法</span>\nformdata.append(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"司马懿\"</span>)\n\n<span class=\"hljs-comment\">// ajax 使用</span>\n<span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest()\nxhr.open(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-string\">'/file'</span>)\nxhr.send(formdata)</code></pre>\n<p>参数1 相同，多次 append 依然有效</p>\n</section><section><h1 id=\"138148815\">h5 文件上传</h1><p>兼容性：ie10+</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-comment\">// 通过 input file 获取文件</span>\n<span class=\"hljs-comment\">// input file 可以选多个，所以返回 files</span>\n<span class=\"hljs-keyword\">var</span> file = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'file1'</span>).files[<span class=\"hljs-number\">0</span>];\n\n<span class=\"hljs-comment\">// FormData 模拟表单数据</span>\n<span class=\"hljs-comment\">// https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects</span>\nfd = <span class=\"hljs-keyword\">new</span> FormData();\nfd.append(<span class=\"hljs-string\">\"file\"</span>, file);\n\n<span class=\"hljs-comment\">// 文件大小</span>\n<span class=\"hljs-comment\">// file.size</span>\n\n<span class=\"hljs-comment\">// 文件名</span>\n<span class=\"hljs-comment\">// oFile.name // \"Fiddler2.7z\"</span>\n\n<span class=\"hljs-comment\">// 文件类型</span>\n<span class=\"hljs-comment\">// file.type</span>\n<span class=\"hljs-comment\">// 类型过滤</span>\n<span class=\"hljs-keyword\">var</span> fileFilter = <span class=\"hljs-regexp\">/^(image\\/bmp|image\\/gif|image\\/jpeg|image\\/png|image\\/tiff)$/i</span>\n<span class=\"hljs-keyword\">if</span> (!fileFilter.test(file.type)) { }\n\n<span class=\"hljs-comment\">// ajax</span>\n<span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();\n<span class=\"hljs-comment\">// 进度条</span>\nxhr.upload.addEventListener(<span class=\"hljs-string\">'progress'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-comment\">// 是否可以取到 进度数据</span>\n    <span class=\"hljs-keyword\">if</span> (e.lengthComputable) {\n        <span class=\"hljs-built_in\">console</span>.log(e.loaded / e.total)\n    }\n})\n<span class=\"hljs-comment\">// 完成后触发</span>\nxhr.addEventListener(<span class=\"hljs-string\">'load'</span>, uploadFinish)\n<span class=\"hljs-comment\">// 错误触发</span>\nxhr.addEventListener(<span class=\"hljs-string\">'error'</span>, uploadError)\n<span class=\"hljs-comment\">// 终止触发</span>\nxhr.addEventListener(<span class=\"hljs-string\">'abort'</span>, uploadAbort)\n\n<span class=\"hljs-comment\">// 上传</span>\nxhr.open(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-string\">'/file'</span>)\nxhr.send(fd)\n\n</code></pre>\n</section><section><h1 id=\"4168336262\">h5 文件系统 FileSystem API</h1><p>window.webkitRequestFileSystem 这个方法目前只有chrome支持</p>\n<section><h2 id=\"362986148\">文件读取</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\">https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader</a></p>\n<p>图片预览示例</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-keyword\">var</span> fileReader = <span class=\"hljs-keyword\">new</span> FileReader();\n<span class=\"hljs-comment\">// 文件读取 完后触发</span>\nfileReader.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    img.src = e.target.result;\n}\n<span class=\"hljs-comment\">// 文件读取为 DataURL，base64</span>\nfileReader.readAsDataURL(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'file'</span>).files[<span class=\"hljs-number\">0</span>]);\n</code></pre>\n</section><section><h2 id=\"2057100079\">base64</h2><ol>\n<li>通过 FileReader 读取文件得到</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> myfile = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"myfile\"</span>).files[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">var</span> fileRead = <span class=\"hljs-keyword\">new</span> FileReader();\nfileRead.readAsDataURL(myfile);\nfileRead.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(e);\n        <span class=\"hljs-keyword\">var</span> base64 = e.target.result;\n        <span class=\"hljs-built_in\">console</span>.log(base64);\n        <span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> Image();\n        img.src = base64;\n        <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"body\"</span>)[<span class=\"hljs-number\">0</span>].appendChild(img);\n    }</code></pre>\n<ol start=\"2\">\n<li>通过 canvas.toDataURL</li>\n</ol>\n</section><section><h2 id=\"3886228565\">blob 获取</h2><p><strong>blob 可直接进行 ajax 文件上传，无需转 file</strong></p>\n<section><h3 id=\"1261040296\">atob + Uint8Array 方式 (base64 转 blob)</h3><p>参考网址: <a href=\"https://blog.csdn.net/hahahhahahahha123456/article/details/80605836\">DataURL, Blob, File, Image之间的关系与转换 - CSDN博客</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dataURLToBlob</span>(<span class=\"hljs-params\">dataurl</span>)</span>{\n  <span class=\"hljs-keyword\">var</span> arr = dataurl.split(<span class=\"hljs-string\">','</span>);\n  <span class=\"hljs-keyword\">var</span> mime = arr[<span class=\"hljs-number\">0</span>].match(<span class=\"hljs-regexp\">/:(.*?);/</span>)[<span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">var</span> bstr = atob(arr[<span class=\"hljs-number\">1</span>]);\n  <span class=\"hljs-keyword\">var</span> n = bstr.length;\n  <span class=\"hljs-keyword\">var</span> u8arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>(n);\n  <span class=\"hljs-keyword\">while</span>(n--){\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Blob([u8arr], {<span class=\"hljs-attr\">type</span>:mime});\n}</code></pre>\n</section><section><h3 id=\"2355933663\">canvas.toBlob 方式</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement\">HTMLCanvasElement - Web API 接口 | MDN</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'canvas'</span>)\n<span class=\"hljs-built_in\">document</span>.body.appendChild(canvas)\n<span class=\"hljs-keyword\">var</span> ctx = canvas.getContext(<span class=\"hljs-string\">'2d'</span>);\n<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> Image();\nimg.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n  ctx.drawImage(img,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n  canvas.toBlob(<span class=\"hljs-function\"><span class=\"hljs-params\">blob</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(blob)\n  })\n}\nimg.src = <span class=\"hljs-string\">'/img/bd_logo1.png'</span>;</code></pre>\n</section></section><section><h2 id=\"2401870561\">blob 转 file</h2><p>必须带中括号</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> file = <span class=\"hljs-keyword\">new</span> File([blob], <span class=\"hljs-string\">'test.png'</span>, {<span class=\"hljs-keyword\">type</span>: blob.type})</code></pre>\n</section><section><h2 id=\"660441486\">浏览器直接打开 blob (也可实现下载)</h2><pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">window</span><span class=\"hljs-selector-class\">.open</span>(<span class=\"hljs-selector-tag\">URL</span><span class=\"hljs-selector-class\">.createObjectURL</span>(<span class=\"hljs-selector-tag\">blob</span>))</code></pre>\n</section></section><section><h1 id=\"3422879351\">h5 无刷新改变 url</h1><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 历史记录情况触发</span>\n<span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'popstate'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n  <span class=\"hljs-keyword\">var</span> state = e.state; <span class=\"hljs-comment\">// 参数1</span>\n  <span class=\"hljs-built_in\">document</span>.title = e.title; <span class=\"hljs-comment\">// 参数2</span>\n}, <span class=\"hljs-literal\">false</span>);\n\nhistory.pushState({<span class=\"hljs-attr\">page</span>: <span class=\"hljs-number\">1</span>}, <span class=\"hljs-string\">\"title 1\"</span>, <span class=\"hljs-string\">\"?page=1\"</span>);\nhistory.pushState({<span class=\"hljs-attr\">page</span>: <span class=\"hljs-number\">2</span>}, <span class=\"hljs-string\">\"title 2\"</span>, <span class=\"hljs-string\">\"?page=2\"</span>);\nhistory.replaceState({<span class=\"hljs-attr\">page</span>: <span class=\"hljs-number\">3</span>}, <span class=\"hljs-string\">\"title 3\"</span>, <span class=\"hljs-string\">\"?page=3\"</span>);\n\n<span class=\"hljs-comment\">// 触发 popstate 事件</span>\nhistory.back();\nhistory.back();\nhistory.go(<span class=\"hljs-number\">2</span>);\n</code></pre>\n</section><section><h1 id=\"2921257294\">h5 本地存储</h1><section><h2 id=\"625928606\">localStorage/sessionStorage</h2><ul>\n<li>localStorage 为永久存储</li>\n<li>sessionStorage 为临时存储，浏览器关闭则清除</li>\n</ul>\n<p>跟cookies类似，只针对某域名存储，只是容量变大了，每个域名有5M。\n只能存储字符串。</p>\n<p>两种方式操作相同，所以只举例 localStorage 用法：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 设置</span>\nlocalStorage.setItem(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"isaac\"</span>)\n\n<span class=\"hljs-comment\">// 取，如果没有返回 null</span>\n<span class=\"hljs-built_in\">console</span>.log(localStorage.getItem(<span class=\"hljs-string\">\"foo\"</span>))\n\n<span class=\"hljs-comment\">// 键值对 总个数</span>\nlocalStorage.length\n\n<span class=\"hljs-comment\">// 取key，根据索引，在不知道key情况使用</span>\nlocalStorage.key(i)\n</code></pre>\n<p>兼容性：\nie6不支持，ie8好像支持，待测</p>\n</section></section><section><h1 id=\"1857742047\">h5 页面状态 Page Visibility</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Page_Visibility_API\">MDN 文档</a></p>\n<p>可针对<strong>网页是否可见</strong>做必要的优化处理。</p>\n<p>比如，从视频播放页切换到其它选项卡，或者浏览器被最小化，或者被锁屏，停止播放。</p>\n</section><section><h1 id=\"658270668\">h5全屏</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API\">MDN 文档 - Fullscreen API</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fullscreen_API/%E6%8C%87%E5%8D%97\">全屏指南 - Web API 接口参考 | MDN</a></p>\n<section><h2 id=\"1385029849\">执行全屏</h2><pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">requestFullscreen</span>(<span class=\"hljs-params\">elem</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (elem.requestFullscreen) {\n    <span class=\"hljs-keyword\">return</span> elem.requestFullscreen();\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (elem.webkitRequestFullScreen) {\n    <span class=\"hljs-keyword\">return</span> elem.webkitRequestFullScreen();\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (elem.mozRequestFullScreen) {\n    <span class=\"hljs-keyword\">return</span> elem.mozRequestFullScreen();\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> elem.msRequestFullscreen();\n  }\n}</code></pre>\n</section><section><h2 id=\"882044559\">退出全屏</h2><pre><code class=\"language-js\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">exitFullscreen</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.exitFullscreen) {\n    <span class=\"hljs-built_in\">document</span>.exitFullscreen()\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.webkitExitFullscreen) {\n    <span class=\"hljs-built_in\">document</span>.webkitExitFullscreen()\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.mozCancelFullScreen) {\n    <span class=\"hljs-built_in\">document</span>.mozCancelFullScreen()\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.msExitFullscreen) {\n    <span class=\"hljs-built_in\">document</span>.msExitFullscreen()\n  }\n}</code></pre>\n</section><section><h2 id=\"193083576\">全屏改变事件</h2><pre><code class=\"language-js\">\ndiv1.addEventListener(<span class=\"hljs-string\">'webkitfullscreenchange'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n}, <span class=\"hljs-literal\">true</span>);</code></pre>\n</section><section><h2 id=\"1461339334\">判断是否全屏</h2><p>document.fullScreenElement 返回当前文档中正在以全屏模式显示的Element节点,如果没有使用全屏模式,则返回null.</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fullscreenElement</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.fullscreenElement) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span>.fullscreenElement\n  }\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.webkitFullscreenElement) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span>.webkitFullscreenElement\n  }\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.mozFullScreenElement) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span>.mozFullScreenElement\n  }\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">document</span>.msFullscreenElement) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span>.msFullscreenElement\n  }\n}\n</code></pre>\n<p>返回：布尔值</p>\n</section></section><section><h1 id=\"378925398\">h5拖放</h1><p>此处为临时摘抄，未整理验证完善</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drag\">MDN文档参考</a></p>\n<section><h2 id=\"4143912720\">元素可拖放设置</h2><pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">draggable</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"1.png\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">draggable</span>=<span class=\"hljs-string\">\"false\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>小5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></code></pre>\n</section><section><h2 id=\"2159587031\">相关事件：</h2><p>dragenter:拖进目标<br>dragleave:拖离目标<br>dragover:<br>目标上拖动<br>只要不离开目标都将反复触发，如果拖动，将触发更快<br>drop:目标上放下</p>\n<p>dragstart：开始拖放\ndragend：拖放结束</p>\n<p><strong>event：</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">//设置当前拖放元素的数据参数</span>\ne.dataTransfer.setData(<span class=\"hljs-string\">'text'</span>, <span class=\"hljs-keyword\">this</span>.innerHTML);\n\n<span class=\"hljs-comment\">//获取当前被拖放元素的存放数据参数</span>\n <span class=\"hljs-keyword\">var</span> text = e.dataTransfer.getData(<span class=\"hljs-string\">'text'</span>); \n<span class=\"hljs-comment\">//设置鼠标样式</span>\n e.dataTransfer.dropEffect = <span class=\"hljs-string\">'move'</span>;</code></pre>\n</section></section><section><h1 id=\"2644969683\">IE 专属</h1><section><h2 id=\"3237945699\">WScript 实现全屏</h2><p>通过js触发按键命令</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 触发F11键，实现全屏</span>\n(<span class=\"hljs-keyword\">new</span> activexobject(<span class=\"hljs-string\">\"WScript.Shell\"</span>)).sendKeys(<span class=\"hljs-string\">\"{F11}\"</span>); \n</code></pre>\n</section><section><h2 id=\"1309015604\">执行[注释]</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">/*@cc_on alert(123)@*/</span>\n\n<span class=\"hljs-comment\">/*@cc_on 此处写点什么@*/</span></code></pre>\n</section></section><section><h1 id=\"571950951\">js 操作 css</h1><section><h2 id=\"3773209595\">元素对象的 style 属性</h2><section><h3 id=\"2172125353\">传统方式操作 style</h3><section><h4 id=\"1440429756\">兼容性</h4><p>包括 ie6 的所有</p>\n</section><section><h4 id=\"2551324501\">设置</h4><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 比较直接的方式</span>\n<span class=\"hljs-comment\">// 需处理减号风格。使用驼峰</span>\n<span class=\"hljs-comment\">// 1</span>\nelem.style.color = <span class=\"hljs-string\">'red'</span>;\n<span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-keyword\">var</span> style = elem.style;\nstyle.backgroundColor = <span class=\"hljs-string\">'red'</span>;\n\n<span class=\"hljs-comment\">// 使用 cssText</span>\n<span class=\"hljs-comment\">// 无需处理减号</span>\n<span class=\"hljs-comment\">// 会覆盖之前的，可使用加等</span>\nelem.style.cssText += <span class=\"hljs-string\">'font-size:16px;'</span>;\n</code></pre>\n</section><section><h4 id=\"2262855949\">获取</h4><p>直接css属性、cssText</p>\n<p>如果没有设置返回 空字符串。\n设置了获取，将直接返回设置时的字符串</p>\n</section><section><h4 id=\"1459108995\">猜想：是否可以直接赋对象？</h4><p>答案是不行</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 错误例子</span>\nelem.style = {\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'red'</span>,\n    <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">'red'</span>\n}</code></pre>\n</section><section><h4 id=\"2669645360\">前缀问题</h4><pre><code><span class=\"hljs-selector-tag\">style</span><span class=\"hljs-selector-class\">.webkitAnimation</span>\n<span class=\"hljs-selector-tag\">style</span><span class=\"hljs-selector-class\">.MozAnimation</span>\n<span class=\"hljs-selector-tag\">style</span><span class=\"hljs-selector-class\">.msAnimation</span>\n上例中\n<span class=\"hljs-selector-tag\">Webkit</span> 首字母大小写均可\n<span class=\"hljs-selector-tag\">Moz</span> 首字母必须大写\n<span class=\"hljs-selector-tag\">ms</span> 首字母必须小写\n提醒：<span class=\"hljs-selector-tag\">css</span>语法中的属性名称是不区分大小写的，如<span class=\"hljs-selector-tag\">-MOz-columns</span>: 3 200<span class=\"hljs-selector-tag\">px</span>;</code></pre></section></section><section><h3 id=\"1768161724\">新方式操作 style</h3><section><h4 id=\"1303694146\">设置 - setProperty</h4><p>无需处理减号风格</p>\n<p>示例</p>\n<pre><code class=\"language-js\">elem.style.setProperty(<span class=\"hljs-string\">\"color\"</span>, <span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"important\"</span>);\nelem.style.setProperty(<span class=\"hljs-string\">'background-color'</span>, <span class=\"hljs-string\">'red'</span>);</code></pre>\n</section><section><h4 id=\"1136955867\">获取 – getPropertyValue</h4><p>只能获取内联css，即 style 标签属性内的 css</p>\n<p>没有返回 空字符串</p>\n<pre><code class=\"language-js\">elem.style.getPropertyValue(<span class=\"hljs-string\">'background-color'</span>) <span class=\"hljs-comment\">// 'rgb(51, 51, 51)'</span></code></pre>\n</section><section><h4 id=\"3947005540\">删除 - removeProperty</h4><p>有返回值，返回删除的值</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:10px\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"elem\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-built_in\">console</span>.log(elem.style.removeProperty(<span class=\"hljs-string\">'width'</span>)) <span class=\"hljs-comment\">// '10px'</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n</section><section><h4 id=\"2339332425\">判断是否使用 important 优先级 - getPropertyPriority</h4><p>返回值：string<br>有，返回 <code>important</code> 字符串; 没有，返回空字符串</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:10px!important;height:20px\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"elem\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-built_in\">console</span>.log(elem.style.getPropertyPriority(<span class=\"hljs-string\">'width'</span>)) <span class=\"hljs-comment\">// 'important'</span>\n  <span class=\"hljs-built_in\">console</span>.log(elem.style.getPropertyPriority(<span class=\"hljs-string\">'height'</span>)) <span class=\"hljs-comment\">// ''</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n</section><section><h4 id=\"3637581065\">内联css个数 – length</h4><pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:10px;height:20px\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"elem\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-built_in\">console</span>.log(elem.style.length) <span class=\"hljs-comment\">// 2</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n</section><section><h4 id=\"1490693836\">可操作索引</h4><pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:10px;height:20px\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"elem\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-built_in\">console</span>.log(elem.style[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-comment\">// 'width'</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n</section><section><h4 id=\"577434246\">兼容性</h4><p>ie9+、chrome、firefox<br>ie9极不稳定。iphone ios8  似乎不支持，慎用</p>\n</section></section><section><h3 id=\"1110373599\">ie专属，ie6 ~ ie11</h3><p>需处理减号分隔符</p>\n<pre><code class=\"language-js\">el.style.setAttribute(<span class=\"hljs-string\">'backgroundColor'</span>, <span class=\"hljs-string\">'red'</span>);</code></pre>\n<p>兼容性：\n所有ie。包括ie11</p>\n</section></section><section><h2 id=\"2512594924\">style 元素</h2><section><h3 id=\"178068669\">操作</h3><section><h4 id=\"3366717488\">innerHTML 方式</h4><p>支持的浏览器：ie9+、Firefox、Safari、Chrome、Opera</p>\n<p>设置读取操作都行。</p>\n<p>直接操作style元素的innerHTML即可。且不需要设置type特性。\n当然，动态创建情况，需把style元素增加到文档中才会生效。</p>\n<p>ie678只支持读取，设置操作将报错</p>\n</section><section><h4 id=\"2677758639\">textContent方式</h4><p>支持的浏览器：ie9+、Firefox、Safari、Chrome、Opera</p>\n<p>跟innerHTML一样，设置读取都行</p>\n<p>ie678压根没这个属性</p>\n</section><section><h4 id=\"3421388291\">styleElem.styleSheet.cssText IE独有方式</h4><p>解决 ie6~8 兼容问题</p>\n<p><strong>设置</strong></p>\n<pre><code class=\"language-js\">eStyle.styleSheet.cssText = <span class=\"hljs-string\">'div{color:red}'</span>;</code></pre>\n<p><strong>可读取</strong></p>\n<p>可获取任意style标签的值</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'style'</span>)[<span class=\"hljs-number\">0</span>].styleSheet.cssText);</code></pre>\n<p><strong>必须设置 type属性，否则不生效</strong><br>而且 eStyle.styleSheet 将获取到 null 值</p>\n<pre><code class=\"language-js\">eStyle.setAttribute(<span class=\"hljs-string\">\"type\"</span>, <span class=\"hljs-string\">\"text/css\"</span>);<span class=\"hljs-comment\">//此属性不设也生效</span></code></pre>\n<p><strong>兼容性</strong>：  \nie6<del>8专用，ie9</del>10也支持，ie11不支持</p>\n<p><strong>例子：</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> eStyle = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'style'</span>);\neStyle.setAttribute(<span class=\"hljs-string\">\"type\"</span>, <span class=\"hljs-string\">\"text/css\"</span>);<span class=\"hljs-comment\">// 必须设置</span>\neStyle.styleSheet.cssText = <span class=\"hljs-string\">'#test{color:red;}'</span>;\n<span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'head'</span>)[<span class=\"hljs-number\">0</span>].appendChild(eStyle);</code></pre>\n</section><section><h4 id=\"328246710\">兼容所有示例</h4><pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addCssText</span> (<span class=\"hljs-params\">txt</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> eStyle = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'style'</span>)\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'textContent'</span> <span class=\"hljs-keyword\">in</span> eStyle) {\n    eStyle.textContent = txt\n    <span class=\"hljs-built_in\">document</span>.head.appendChild(eStyle)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// ie678</span>\n    eStyle.setAttribute(<span class=\"hljs-string\">'type'</span>, <span class=\"hljs-string\">'text/css'</span>)\n    eStyle.styleSheet.cssText = txt\n    <span class=\"hljs-built_in\">document</span>.body.appendChild(eStyle)\n  }\n}</code></pre>\n</section></section><section><h3 id=\"2962436663\">动态创建注意</h3><section><h4 id=\"799325975\">位置</h4><p>js创建的style元素可增加到任意位置，body，head 等都将生效，建议增加到head标签</p>\n<p>所有浏览器都如此</p>\n</section><section><h4 id=\"2719908282\">生效</h4><p>需增加到文档中\n所有浏览器都如此</p>\n</section></section><section><h3 id=\"979848628\">关于 jq 的 html 方法</h3><p>并非简单的 innerHTML。对 style 有特别处理，使其生效。(会将style元素插入head中的)</p>\n</section></section><section><h2 id=\"3687277859\">全能取css值</h2><section><h3 id=\"459531511\">高级 - getComputedStyle</h3><p>外部样式表、内部样式表、内联样式，transition 过程中，都能被获取到</p>\n<p>只能取，不能设置</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-built_in\">window</span>.getComputedStyle(el)\n<span class=\"hljs-comment\">// 伪类元素</span>\n<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-built_in\">window</span>.getComputedStyle(el, <span class=\"hljs-string\">'::after'</span>)\n\n<span class=\"hljs-comment\">// 取值的三种方式</span>\n<span class=\"hljs-built_in\">console</span>.log(\n  s[<span class=\"hljs-string\">'background-color'</span>]\n  s.getPropertyValue(<span class=\"hljs-string\">'background-color'</span>),\n  s.backgroundColor,\n)\n\n<span class=\"hljs-comment\">// 常用写法</span>\n<span class=\"hljs-built_in\">window</span>.getComputedStyle(el)[<span class=\"hljs-string\">'background-color'</span>]</code></pre>\n<section><h4 id=\"1320085164\">兼容性：ie9+，chrome，firefox</h4></section></section><section><h3 id=\"670616703\">ie6 ~ 9</h3><section><h4 id=\"3829278220\">取操作</h4><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> ieStyle = eTest1.currentStyle;\n<span class=\"hljs-built_in\">console</span>.log(ieStyle.backgroundColor); <span class=\"hljs-comment\">// ie6 ~ 8</span>\n<span class=\"hljs-built_in\">console</span>.log(ieStyle.getPropertyValue(<span class=\"hljs-string\">'background-color'</span>)); <span class=\"hljs-comment\">// 只有ie9</span></code></pre>\n</section><section><h4 id=\"1594203113\">写操作 尝试</h4><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 同样也报不允许错误</span>\nieStyle.backgroundColor = <span class=\"hljs-string\">'red'</span>;\nieStyle.setProperty(<span class=\"hljs-string\">'background-color'</span>,<span class=\"hljs-string\">'red'</span>);</code></pre>\n</section></section></section><section><h2 id=\"3106555916\">className 操作</h2><section><h3 id=\"3410522275\">直接操作 className 属性</h3><section><h4 id=\"2782563179\">增删改查</h4><pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(eB.className); <span class=\"hljs-comment\">// 直接通过元素操作</span></code></pre>\n</section></section><section><h3 id=\"2469102697\">关于className中包含多个空格 影响</h3><section><h4 id=\"4200803648\">className 属性的影响</h4><p>取值影响: 不管类名中包含多少空格，取值时也会如实取过来</p>\n<pre><code class=\"language-html\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"   banner-show    test   \"</span> id=<span class=\"hljs-string\">\"fadeDemo\"</span>&gt;\n\ninfo.innerHTML = fadeDemo.className.match(<span class=\"hljs-regexp\">/ /g</span>).length; <span class=\"hljs-comment\">// 10</span>\n</code></pre>\n<p>兼容性：所有</p>\n</section><section><h4 id=\"1372092716\">对getElementsByClassName的没有影响</h4><p>不管是 </p>\n<pre><code class=\"language-html\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"   banner-show    test   \"</span>&gt;</code></pre>\n<p>还是</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">'                    banner-show'</span>)</code></pre>\n<p>getElementsByClassName 都会忽略掉多余的空格，视为正常的书写，也就是程序最终视为这样：</p>\n<pre><code class=\"language-html\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"banner-show test\"</span>&gt; </code></pre>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">'banner-show'</span>)</code></pre>\n<p>兼容性：支持getElementsByClassName的浏览器都是如此</p>\n</section></section><section><h3 id=\"1903107250\">操作 className 新方式 - classList</h3><p>兼容性：ie10+</p>\n<p>判断是否包含某类名<br>一次只能判断一个类名，貌似jq的hasClass也是如此</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isActive = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"mySwitch\"</span>).classList.contains(<span class=\"hljs-string\">\"mui-active\"</span>);</code></pre>\n<p>增加class</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">//添加mui-active类，打开开关</span>\nele.classList.add(<span class=\"hljs-string\">'mui-active'</span>);</code></pre>\n<p>删除class</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">//删除mui-active类，关闭开关</span>\nele.classList.remove(<span class=\"hljs-string\">'mui-active'</span>);</code></pre>\n<p>自动增删class</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">//也可以直接使用toggle方法自动处理打开或关闭</span>\nele.classList.toggle(<span class=\"hljs-string\">'mui-active'</span>);</code></pre>\n</section></section></section><section><h1 id=\"2577617645\">URL 解析</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/URL\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/URL</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">window</span>.URL(<span class=\"hljs-string\">'http://baidu.com'</span>) <span class=\"hljs-comment\">// 返回一个与 location 差不多对象</span>\n</code></pre>\n</section><section><h1 id=\"3008002491\">事件</h1><section><h2 id=\"1427704213\">事件类型一览表</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events\">事件类型一览表</a></p>\n</section><section><h2 id=\"4105913464\">事件注册、删除</h2><section><h3 id=\"4061146258\">方式1，通过元素属性</h3><p><strong>两种注册方式</strong>\n1标签属性</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"alert(1);\"</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n<p>2对象属性</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'button'</span>).onclick=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  alert(<span class=\"hljs-number\">2</span>);\n};</code></pre>\n<p><em>这两种方式某种意义上性质一样</em>。上例2种注册方式都写，那么1方式将被覆盖</p>\n<p><strong>删除</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 等于null即可(未注册时的默认值就是null)  </span>\n<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'button'</span>).onclick = <span class=\"hljs-literal\">null</span>;</code></pre>\n<p><strong>判断元素是否具有此类型事件</strong><br>未注册情况，事件属性值为 <code>null</code> ，说明有此事件。<br>为 <code>undefined</code> 说明没有此事件<br>兼容性：ie6 all</p>\n</section><section><h3 id=\"2415540675\">方式2，标准方法</h3><p>addEventListener<br>参数3 可不带，默认为false</p>\n<p>removeEventListener<br>attachEvent<br>detachEvent</p>\n</section></section><section><h2 id=\"4078345507\">多个事件触发顺序、冒泡原理</h2><p><strong>概述</strong><br>一个元素可以拥有多个事件，包括自身的和继承过来的。<br>自身的即为目标阶段，先触发。继承过来的即为冒泡阶段，后触发，且冒泡(向上)触发。<br>参数3可以将冒泡阶段提升为捕获阶段，将最先触发(先与目标阶段触发)</p>\n<p><strong>详细</strong><br>下面的序号值(阶段值)可通过event.eventPhase获取</p>\n<p>1-捕获：addEventListener 参数3为true<br>只会提升继承事件(所以只会提升冒泡阶段的事件)，将在自身事件之前触发(目标阶段)。(如果还有爷爷级的，先触发爷爷。。。)<br>自身事件的参数3是否为true没有影响(即对目标阶段无效)<br>此阶段ie678不支持</p>\n<p>2-目标：自身事件的触发阶段。<br>元素自身也可注册多个事件，先注册则先触发</p>\n<p>3-冒泡：继承事件的触发阶段<br>如果一个元素，除了自身事件，还有继承过来的事件，那么先触发自身，再触发继承事件(如果不止有父，还有爷爷，先触发父。。。)</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"parent\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span>\n        eParent=<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.parent'</span>),\n        eChild= eParent.children[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-built_in\">document</span>.body.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">6</span>);\n    }, <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-built_in\">document</span>.body.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">5</span>);\n    }, <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-built_in\">document</span>.body.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>);\n    }, <span class=\"hljs-literal\">true</span>);\n\n    eParent.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>);\n    }, <span class=\"hljs-literal\">true</span>);\n    eParent.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);\n    }, <span class=\"hljs-literal\">false</span>);\n\n    eChild.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);\n    }, <span class=\"hljs-literal\">false</span>);\n    eChild.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">0</span>);\n    }, <span class=\"hljs-literal\">true</span>);\n\n    <span class=\"hljs-comment\">// 依次输出：5、4、3、1、0、2、6</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n</section><section><h2 id=\"3943111243\">dispatchEvent 手动触发事件</h2><p>实现创建自定义事件和触发内置事件</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent\">https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\">https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events</a></p>\n</section><section><h2 id=\"2624513577\">阻止冒泡</h2><p>阻止继承过来的事件，详情见<a href=\"#js-dom-webapis/4078345507\">多个事件触发顺序、冒泡原理</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">e</span><span class=\"hljs-selector-class\">.stopPropagation</span>()</code></pre>\n<p><strong>兼容性写法</strong>  </p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">if</span> (e.stopPropagation) e.stopPropagation();\n<span class=\"hljs-keyword\">else</span> e.cancelBubble = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// ie678阻止方式</span></code></pre>\n</section><section><h2 id=\"3198224664\">阻止默认动作</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">if</span> (e.cancelable) e.preventDefault() <span class=\"hljs-comment\">//cancelable、preventDefault结合使用</span></code></pre>\n<p><strong>input[type=radio] 阻止选中。</strong><br>可在click、touchstart、ouchend事件中通过 preventDefault 阻止选中。mousedown，mouseup不能阻止选中</p>\n<p><strong>关于mousedown阻止click疑问</strong><br>mousedown不会阻止由click触发的默认动作，只能由click自己阻止</p>\n</section><section><h2 id=\"3352444482\">键盘输入事件</h2><section><h3 id=\"3878097473\">常用的几个 keyCode</h3><ul>\n<li>回车键：13</li>\n<li>shift：16</li>\n<li>ctrl：17</li>\n</ul>\n</section><section><h3 id=\"974908199\">keypress 字符键触发</h3><ul>\n<li>先触发后输入</li>\n<li>可以阻止输入触发</li>\n</ul>\n<p>问题：</p>\n<ul>\n<li>删除键，这种能改变字符串的不触发</li>\n<li>使用中文输入法输入时也不触发</li>\n</ul>\n<p>是否是先触发后输入？\n兼容性如何？</p>\n<p>不建议当做input事件触发前的监听事件：</p>\n</section><section><h3 id=\"3910306500\">input 有字符输入则触发</h3><p>实现输入字符 后触发\n改变后触发，即输入发生后触发</p>\n<p><strong>1.Firefox、Safari、Chrome</strong>\n除了input、textarea，还适用于div文本框。所有符号键 （包括删除键）</p>\n<p>div文本框 添加元素居然不触发，手动添加文本是否也不会触发呢</p>\n<pre><code class=\"language-js\">Text1.oninput = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    alert(<span class=\"hljs-string\">''</span>);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);\n};</code></pre>\n<p><strong>2.IE</strong>\n只适用于固有的input、textarea 输入框</p>\n<p>ie6 ie7 ie8 ie10  值变动就会触发</p>\n<p>ie9字符键触发，删除键不会触发</p>\n<pre><code class=\"language-js\">Text1.onpropertychange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    alert(<span class=\"hljs-string\">''</span>);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>);\n};</code></pre>\n<p><strong>3.Opera</strong>\n没有</p>\n</section></section><section><h2 id=\"171718762\">触摸事件</h2><p><code>touchcancel</code>：没有可能再触发触摸事件时触发。比如，触发默认的页面滚动后，将停止监听，即触发此事件</p>\n<section><h3 id=\"1955176462\">特性</h3><p><strong>多点 touch，元素外的点也会增加 TouchList：</strong>\ntouch 事件元素外增加触摸点，不会触发touch事件，但是原事件的TouchList 会多一个。</p>\n</section><section><h3 id=\"4166904423\">e.touches 与 e.targetTouches 区别</h3><p>touches 是所有在屏幕上的点，targetTouches是当前事件元素上的点</p>\n</section></section><section><h2 id=\"686390588\">鼠标事件</h2><section><h3 id=\"1580893052\">点下、松开</h3><p>mousedown、mouseup</p>\n<p>鼠标左右键都将触发</p>\n<p><strong>ie678，点击失效问题(点击过快情况)</strong></p>\n<pre><code class=\"language-js\">$(<span class=\"hljs-string\">'#div_test'</span>).mousedown(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'-----------------点下'</span>);\n}).mouseup(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'松开'</span>); \n});\n<span class=\"hljs-comment\">// 出现如下日志：</span>\n<span class=\"hljs-comment\">// 日志: -----------------点下 </span>\n<span class=\"hljs-comment\">// 日志: 松开 </span>\n<span class=\"hljs-comment\">// 日志: 松开</span>\n\n<span class=\"hljs-comment\">// 也就是执行了两次 松开事件了，</span>\n<span class=\"hljs-comment\">// 如下写法可以解决：</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eUp</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'松开'</span>);\n  $(<span class=\"hljs-string\">'#div_test'</span>).unbind(<span class=\"hljs-string\">'mouseup'</span>, eUp);\n}\n$(<span class=\"hljs-string\">'#div_test'</span>).mousedown(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'-----------------点下'</span>);\n  $(<span class=\"hljs-string\">'#div_test'</span>).mouseup(eUp);\n});\n</code></pre>\n</section><section><h3 id=\"3319562423\">右键菜单</h3><pre><code class=\"language-js\">el.oncontextmenu = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  e.preventDefault() <span class=\"hljs-comment\">// 阻止默认菜单弹出</span>\n}</code></pre>\n</section><section><h3 id=\"2955344799\">双击</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 兼容性：所有浏览器</span>\nel.ondblclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}\nel.addEventListener(<span class=\"hljs-string\">'dblclick'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{})</code></pre>\n</section><section><h3 id=\"1313378330\">移入事件</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">//1、正常的 移入移出 事件：onmouseover移入、onmouseout移出】</span>\n<span class=\"hljs-comment\">//兼容性：all浏览器</span>\n\n<span class=\"hljs-comment\">/* ----------------------------------------------\n * 事件中特有属性——relatedTarget属性\n *\n *获取 触发事件 后 鼠标\n* 之前所处 元素对象——onmouseover移入事件\n *当前所处 元素对象——onmouseout移出事件\n *\n * event对象的属性，只对这两个事件有效：onmouseout移出事件、onmouseover移入事件\n*\n * 兼容性： 所有ie中 只有ie9支持。非ie浏览器没问题\n */</span>\nalert(e.relatedTarget.className);\n\n<span class=\"hljs-comment\">/***********************************************************/</span>\n<span class=\"hljs-comment\">//2、特殊的 移入移出 事件</span>\n<span class=\"hljs-comment\">//【onmouseenter移入、onmouseleave移出】</span>\n<span class=\"hljs-comment\">//事件 根元素 及其后代 看成一个整体 来触发此事件</span>\n<span class=\"hljs-comment\">//兼容性：所有ie，Opera支持。fox、Chrome现在已经支持了</span>\n</code></pre>\n</section><section><h3 id=\"2610568403\">滚轮事件</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/wheel#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\">滚轮事件#浏览器兼容性 - MDN</a></p>\n<p>目前标准 <code>wheel</code>：</p>\n<pre><code class=\"language-js\">elem.addEventListener(<span class=\"hljs-string\">'wheel'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n  e.preventDefault()\n  <span class=\"hljs-built_in\">console</span>.log(e.deltaY &gt; <span class=\"hljs-number\">0</span>)\n})</code></pre>\n</section></section><section><h2 id=\"2603044725\">滚动条事件</h2><p>scroll</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 给元素绑定</span>\nel.onscroll = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-comment\">// 给浏览器窗口绑定</span>\n<span class=\"hljs-built_in\">window</span>.onscroll = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}</code></pre>\n<section><h3 id=\"2467352993\">新版 chrome 窗口滚动条默认无法阻止解决</h3><p><a href=\"https://segmentfault.com/a/1190000007913386\">https://segmentfault.com/a/1190000007913386</a></p>\n<p>即给 document、document.body 绑定的 touchstart、touchmove 默认无法通过 preventDefault 阻止浏览器窗口滚动条滚动</p>\n<p>注：给其他元素绑定可阻止浏览器窗口滚动条</p>\n<p>需通过如下方式</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">'touchmove'</span>, touchmove, { <span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">false</span> })</code></pre>\n<blockquote>\n<p>passive 支持检测。引自 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener\">addEventListener | MDN</a></p>\n</blockquote>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> passiveSupported = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">var</span> options = <span class=\"hljs-built_in\">Object</span>.defineProperty({}, <span class=\"hljs-string\">\"passive\"</span>, {\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      passiveSupported = <span class=\"hljs-literal\">true</span>;\n    }\n  });\n\n  <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"test\"</span>, <span class=\"hljs-literal\">null</span>, options);\n} <span class=\"hljs-keyword\">catch</span>(err) {}</code></pre>\n<p>但旧版浏览器不支持此种参数</p>\n</section></section><section><h2 id=\"4181958572\">设备旋转事件</h2><p>chrome 模拟的是旋转前触发</p>\n<p>android 机未测</p>\n<p>ios 11 旋转后触发，可获取真实的浏览器宽度</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"orientationchange\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// screen.orientation ios 11 不支持</span>\n  <span class=\"hljs-built_in\">document</span>.body.innerHTML = (screen.orientation.angle + <span class=\"hljs-string\">'--'</span> + <span class=\"hljs-built_in\">window</span>.innerWidth);\n})</code></pre>\n</section><section><h2 id=\"3803333168\">resize 窗口变化事件</h2><p>ios 旋转有动画，resize是否能获取真实浏览器宽？</p>\n<p>ios 11 可以，也就是说旋转后触发。动画前触发。动画不影响宽度获取，估计动画是假象，动画前就已经渲染完成</p>\n<p>印象中之前某次测试的是旋转前，难道是修复了？？</p>\n</section><section><h2 id=\"2621930356\">阻止失焦</h2><p>鼠标情况在 <code>mousedown</code> 中阻止</p>\n</section><section><h2 id=\"216132586\">问题</h2><section><h3 id=\"1706639416\">移动端(android) touchend 中 focus() 获焦失败</h3><pre><code class=\"language-js\">el.addEventListener(<span class=\"hljs-string\">\"touchend\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n  e.stopPropagation() <span class=\"hljs-comment\">// 要让获焦成功，android 必须加这个</span>\n  ipt.focus()\n})</code></pre>\n<p>android 在 touchend 后有默认动作触发，如果在 touchend 中通过 focus 使某文本框获焦，会立马失焦。ios 没此问题</p>\n</section><section><h3 id=\"1459965971\">移动端 chrome touchmove 卡顿现象</h3><p>chrome 在触发默认滚动条时，move 事件卡顿，触发频率很低</p>\n</section><section><h3 id=\"4237432648\">ios document click 无效问题</h3><p><a href=\"https://stackoverflow.com/questions/3705937/document-click-not-working-correctly-on-iphone-jquery\">https://stackoverflow.com/questions/3705937/document-click-not-working-correctly-on-iphone-jquery</a></p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">cursor</span>: pointer;\n}</code></pre>\n</section></section></section><section><h1 id=\"419508510\">元素 clone</h1><section><h2 id=\"1219005805\">使用 document.importNode</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/importNode\">document.importNode - Web API 接口 | MDN</a></p>\n<pre><code><span class=\"hljs-keyword\">var</span> node = <span class=\"hljs-built_in\">document</span>.importNode(externalNode, deep);</code></pre><p><strong>疑问？</strong></p>\n<p>事件绑定是否也被 clone</p>\n<p><strong>兼容性：</strong></p>\n<p>ie9+</p>\n<p>并且，参数<code>deep</code>(深度克隆) ie都不支持</p>\n</section><section><h2 id=\"1272656410\">其实还可使用 innerHTML、outerHTML 进行 clone</h2></section></section><section><h1 id=\"4013338251\">元素、节点</h1><section><h2 id=\"2478185641\">元素对象创建</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 通用</span>\n<span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"div\"</span>);\n\n<span class=\"hljs-comment\">// 部分元素独有</span>\n<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> Image() <span class=\"hljs-comment\">// img 元素</span>\n</code></pre>\n</section><section><h2 id=\"2269785115\">节点替换(适用元素)</h2><p><strong>兼容性</strong>：ie5+，其他高级</p>\n<section><h3 id=\"4184924124\">子节点替换</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/replaceChild\">replaceChild 文档</a></p>\n<section><h4 id=\"2783909579\">语法</h4><p><code>replacedNode = parentNode.replaceChild(newChild, oldChild);</code></p>\n<p>replacedNode 和oldChild相等。</p>\n<p><strong>参数</strong></p>\n<ul>\n<li><strong>newChild</strong>\n替换oldChild的元素，可以是新建的，也可以是文档中现有的</li>\n<li><strong>oldChild</strong></li>\n</ul>\n</section><section><h4 id=\"234366387\">例子</h4><pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">elemCont</span><span class=\"hljs-selector-class\">.replaceChild</span>(<span class=\"hljs-selector-tag\">elzBox</span>, <span class=\"hljs-selector-tag\">elemCont</span><span class=\"hljs-selector-class\">.firstElementChild</span>)</code></pre>\n</section><section><h4 id=\"400048638\">兼容性</h4><p>ie6+</p>\n</section></section></section><section><h2 id=\"2018526052\">节点增加</h2><section><h3 id=\"1350694802\">末尾追加子节点(适用元素)</h3><pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">elem</span><span class=\"hljs-selector-class\">.appendChild</span>(<span class=\"hljs-selector-tag\">elem2</span>);</code></pre>\n<p>兼容性：包括ie6的所有</p>\n</section><section><h3 id=\"3108011756\">元素内部增加 insertBefore</h3><p>目标节点内部，目标节点的后代节点前面</p>\n<p>参数</p>\n<ul>\n<li>参数1 要添加节点/元素</li>\n<li>参数2 后代节点/元素</li>\n</ul>\n<p>兼容性：包括ie6的所有</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">el</span><span class=\"hljs-selector-class\">.insertBefore</span>(<span class=\"hljs-selector-tag\">newElem</span>, <span class=\"hljs-selector-tag\">childElem</span>);</code></pre>\n</section></section><section><h2 id=\"2617611724\">元素增加</h2><section><h3 id=\"2784297168\">增加 html 文本 - insertAdjacentHTML</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML\">文档很详细</a></p>\n<p>element.insertAdjacentHTML(position, text);</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!-- beforebegin --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- afterbegin --&gt;</span>\nfoo\n<span class=\"hljs-comment\">&lt;!-- beforeend --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- afterend --&gt;</span></code></pre>\n</section><section><h3 id=\"2868209738\">增加元素 - insertAdjacentElement</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentElement\">文档很详细</a></p>\n<p>element.insertAdjacentElement(position, element);</p>\n<pre><code class=\"language-html\"><span class=\"hljs-comment\">&lt;!-- beforebegin --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- afterbegin --&gt;</span>\nfoo\n<span class=\"hljs-comment\">&lt;!-- beforeend --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- afterend --&gt;</span></code></pre>\n</section></section><section><h2 id=\"894646666\">节点克隆/复制(适用元素)</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode\">MDN 文档，很详细</a></p>\n<p><strong>语法</strong>：\n<code>var dupNode = node.cloneNode(deep);</code></p>\n<p><strong>参数</strong>：</p>\n<ul>\n<li><strong>deep</strong>\n是否采用深度克隆,如果为true,则该节点的所有后代节点也都会被克隆,如果为false,则只克隆该节点本身.</li>\n</ul>\n<p><strong>兼容性</strong>：ie5+，其他高级</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> eUl = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"ul\"</span>)[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-keyword\">var</span> dupNode = eUl.cloneNode(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// 进行深度克隆</span>\n<span class=\"hljs-built_in\">document</span>.body.insertBefore(dupNode, eUl);\n</code></pre>\n</section><section><h2 id=\"1847524604\">识别文档中不存在元素</h2><p>即：通过innerHTML删除的元素。或者，createElement 创建后还未加入页面中的元素</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// baseURI 为当前页面url</span>\n<span class=\"hljs-comment\">// offsetParent 为定位参照元素</span>\n\n<span class=\"hljs-comment\">// 如果不存在</span>\n\n<span class=\"hljs-comment\">// baseURI 为空字符串</span>\nelem.baseURI <span class=\"hljs-comment\">// ''</span>\n\n<span class=\"hljs-comment\">// offsetParent 为 null</span>\nelem.offsetParent <span class=\"hljs-comment\">// null</span></code></pre>\n</section><section><h2 id=\"818182405\">元素标签文本操作</h2><section><h3 id=\"132263404\">innerText</h3><pre><code>描述：\n取解析后的文本格式，即最终被显示的文本格式\n\n兼容性：\nie(包括edge)，chrome：\n会转换元素，但不会保留文本换行，单个或连续的多个 换行、空格都将会转为单个空格。\n就如描述说的那样，页面实际显示成什么样子，取到的文本格式就是什么样子\n（关于转换元素：比如p元素会转为换行）\nfirefox：\n42版也不支持\n</code></pre></section><section><h3 id=\"2251304369\">textContent</h3><p>不会转换元素，但会保留文本换行，多个连续换行\\空格都会被保留\n相当于去标签版的innerHTML</p>\n<p>兼容性：ie678不支持</p>\n</section><section><h3 id=\"1128054757\">innerHTML</h3><p>描述：\n按当时书写原始格式原封不动的输出来</p>\n<p>ie678 特殊性：\n不保留原始格式，保留带标签的解析后的文本格式。也就是本质还是innerText，只是这次保留了标签</p>\n<p>ie6/7/8/9 bug：\n设置祖先的innerHTML属性时，会将设置前缓存的后代元素innerHTML属性设置为空字符串</p>\n</section><section><h3 id=\"3657723935\">outerHTML</h3><p>包含当前元素本身的html文本，格式与innerHTML一样。也具有ie678 innerHTML属性的特殊性\n兼容性：包括ie6的所有</p>\n</section><section><h3 id=\"4228217143\">textContent 与 innerText 区别</h3><p><strong>换行符 (\\n)</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.body.textContent= <span class=\"hljs-string\">'hello \\n word!'</span>\n<span class=\"hljs-comment\">// \\n 依然是空格</span>\n\n<span class=\"hljs-built_in\">document</span>.body.innerText= <span class=\"hljs-string\">'hello \\n word!'</span>;\n <span class=\"hljs-comment\">// \\n 能够转成 &lt;br/&gt;</span></code></pre>\n<p><strong>textContent 居然只能单向</strong>\n也就是说，获取操作可以从html 转成 text，设置操作不能将text转成html\nhtml 转成 text指的是：块元素或者br等转成 \\r\\n\ntext无法转成html指的是：\\r\\n 无法被转成 块元素了</p>\n<p><strong>innerText 可以双向</strong>，兼容：ie方面，包括ie6的所有。chrome。firefox目前也已经支持</p>\n</section><section><h3 id=\"1082081173\">总结</h3><p>不管是innerText或innerHTML， ie678 只会返回解析后的文本。所以，无法做到与textContent 等同，\n甚至没法做到与高级浏览器innerHTML等同</p>\n</section></section><section><h2 id=\"1662527672\">元素标签属性操作</h2><section><h3 id=\"3458683957\">通用全能操作</h3><p>获取</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">/*\n 属性值读取方式1\n\n 根据 指定属性名 获取——getAttribute方法\n 这里讲的获取方式是：通过 [元素节点]对象的getAttribute方法 获取\n 没有此属性情况 返回null\n 兼容性：ie6部分属性依然无法获取，像class属性，即使有设置，获取的竟然是null。其他浏览器正常\n */</span>\n<span class=\"hljs-comment\">//没有此属性情况 返回null</span>\n<span class=\"hljs-keyword\">var</span> attrValue = div2.getAttribute(<span class=\"hljs-string\">\"class\"</span>);\n\n<span class=\"hljs-comment\">/*\n属性值读取方式2：通过属性的对象形式，nodeValue\n此方式还可直接进行设置\n兼容性：所有浏览器兼容\n*/</span></code></pre>\n<p>设置</p>\n<pre><code class=\"language-js\">script.setAttribute(<span class=\"hljs-string\">'class'</span>, <span class=\"hljs-string\">''</span>);\n<span class=\"hljs-comment\">// ie6+ 支持</span>\n<span class=\"hljs-comment\">// ie67 不支持这样设置css， elem.setAttribute('style','background:#333'); </span></code></pre>\n<p>删除</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">div2</span><span class=\"hljs-selector-class\">.removeAttribute</span>(\"<span class=\"hljs-selector-tag\">class</span>\");</code></pre>\n</section><section><h3 id=\"956406354\">部分直接 js 操作</h3><section><h4 id=\"2557761756\">name 标签属性 -- 表单元素独有</h4><p>可读写</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"pwd\"</span>).name = <span class=\"hljs-string\">\"password\"</span>;</code></pre>\n<p><strong>真正拥有name属性的元素：</strong>\n目前知道的有 所有的input元素、img元素。即使你不为这些元素的name属性给值，通过js获取的是 空字符串。</p>\n<p><strong>没有name属性的元素却强制给了name属性：</strong>\n通过对象的name属性 将获取到undefined。但ie6可以获取成功</p>\n</section><section><h4 id=\"451964985\">class 标签属性 -- 通过 className 读写</h4><pre><code class=\"language-js\">el.className = <span class=\"hljs-string\">'main'</span></code></pre>\n</section><section><h4 id=\"2895993404\">id 标签属性</h4><pre><code class=\"language-js\">el.id = <span class=\"hljs-string\">'jj'</span></code></pre>\n</section></section></section><section><h2 id=\"2022542267\">多个节点增加效率写法-文档碎片</h2><p>可以理解为一个临时顶级元素，被加入文档时只有其中的成员才会被加入</p>\n<p>举例\n非文档碎片的 <strong>低效率写法</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> arrText=[<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>,<span class=\"hljs-string\">\"10\"</span>];\n <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;arrText.length;i++)\n {\n    <span class=\"hljs-keyword\">var</span> op=<span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"P\"</span>);\n    <span class=\"hljs-keyword\">var</span> oText=<span class=\"hljs-built_in\">document</span>.createTextNode(arrText[i]);\n    op.appendChild(oText);\n    <span class=\"hljs-built_in\">document</span>.body.appendChild(op);\n }</code></pre>\n<p> 这段代码运行良好，但问题是它调用了十次document.body.appendChild(),每次要产生一次页面刷新</p>\n<p><strong>文档碎片写法</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> arrText=[<span class=\"hljs-string\">\"1\"</span>,<span class=\"hljs-string\">\"2\"</span>,<span class=\"hljs-string\">\"3\"</span>,<span class=\"hljs-string\">\"4\"</span>,<span class=\"hljs-string\">\"5\"</span>,<span class=\"hljs-string\">\"6\"</span>,<span class=\"hljs-string\">\"7\"</span>,<span class=\"hljs-string\">\"8\"</span>,<span class=\"hljs-string\">\"9\"</span>,<span class=\"hljs-string\">\"10\"</span>];\n<span class=\"hljs-keyword\">var</span> oFrag=<span class=\"hljs-built_in\">document</span>.createDocumentFragment();\n\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;arrText.length;i++)\n{\n    <span class=\"hljs-keyword\">var</span> op=<span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"P\"</span>);\n    <span class=\"hljs-keyword\">var</span> oText=<span class=\"hljs-built_in\">document</span>.createTextNode(arrText[i]);\n    op.appendChild(oText);\n    oFrag.appendChild(op);\n\n}\n<span class=\"hljs-built_in\">document</span>.body.appendChild(oFrag);</code></pre>\n<p><code>document.body.appendChild()</code> 仅调用了一次，这意味首只需要进行一次屏幕的刷新。\n这里指的刷新：页面的本质发生改变，显示并没任何改变，只有在执行完代码后，显示才会有改变</p>\n</section><section><h2 id=\"2652051468\">文本节点相关</h2><pre><code>inserData(offset,<span class=\"hljs-built_in\">string</span>) 指定位置插入\nappendData(<span class=\"hljs-built_in\">string</span>) 追加\ndeleteData(off,count,<span class=\"hljs-built_in\">string</span>)  删除指定字符\nsplitData(offset) 拆分成两个节点\nsubstring(offset,count)</code></pre></section><section><h2 id=\"3280263448\">节点类型 node.nodeType</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元素节点(HTMLElement)</td>\n<td>1</td>\n</tr>\n<tr>\n<td>文本节点(Text)</td>\n<td>3</td>\n</tr>\n<tr>\n<td>注释节点(Comment)</td>\n<td>8</td>\n</tr>\n<tr>\n<td>属性节点(Attr)</td>\n<td>2</td>\n</tr>\n<tr>\n<td>文档节点(document 对象)</td>\n<td>9</td>\n</tr>\n<tr>\n<td>碎片文档节点(DocumentFragment对象)</td>\n<td>11</td>\n</tr>\n</tbody></table>\n<p>兼容性：所有浏览器</p>\n</section><section><h2 id=\"4192021880\">节点名称 node.nodeName</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元素节点(HTMLElement)</td>\n<td>就是 标签名，但是大写</td>\n</tr>\n<tr>\n<td>文本节点(Text)</td>\n<td>#text</td>\n</tr>\n<tr>\n<td>注释节点(Comment)</td>\n<td>#comment</td>\n</tr>\n<tr>\n<td>属性节点(Attr)</td>\n<td>属性名</td>\n</tr>\n<tr>\n<td>文档节点(document对象)</td>\n<td>#document</td>\n</tr>\n<tr>\n<td>碎片文档节点(DocumentFragment对象)</td>\n<td>#document-fragment</td>\n</tr>\n</tbody></table>\n</section><section><h2 id=\"167568070\">节点值 node.nodeValue</h2><p>兼容性：所有浏览器</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元素节点、文档节点</td>\n<td>永远返回 null</td>\n</tr>\n<tr>\n<td>文本节点、注释节点</td>\n<td>节点之间的文本值，且将去掉两头的 空格符、换行符</td>\n</tr>\n<tr>\n<td>属性节点</td>\n<td>就是属性值。同样，也将去掉两头的 空格符、换行符。而且中间的连续空格符只会保留一个，且不保留换行符号</td>\n</tr>\n</tbody></table>\n</section><section><h2 id=\"1464599712\">对象形式操作 元素属性</h2><p>当对象 获取到后，就可通过 nodeType、nodeName、nodeValue属性进行操作了</p>\n<ol>\n<li>nodeType：将返回一个Number类型，表明此对象是属性节点。只读</li>\n<li>nodeName：属性名。只读</li>\n<li>nodeValue：属性值。可读写。获取的值特点：将去掉两头的 空格符、换行符。且中间的连续空格符只保留一个，不保留换行符</li>\n</ol>\n<p>兼容性：所有</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 创建 class 属性</span>\n<span class=\"hljs-keyword\">var</span> classAttr = <span class=\"hljs-built_in\">document</span>.createAttribute(<span class=\"hljs-string\">\"class\"</span>);\n\n\n\n<span class=\"hljs-comment\">// 设置到元素上</span>\nelem.setAttributeNode(classAttr);\n\n<span class=\"hljs-comment\">// 获取</span>\n<span class=\"hljs-built_in\">console</span>.log(elem.getAttributeNode(<span class=\"hljs-string\">\"class\"</span>) === classAttr)\n\n<span class=\"hljs-comment\">// 获取所有</span>\n<span class=\"hljs-comment\">// ie6 获取到的不只有标签属性 ，还有 元素的js属性</span>\n<span class=\"hljs-keyword\">var</span> attrs = elem.attributes;\n\n<span class=\"hljs-comment\">// 删除</span>\n<span class=\"hljs-comment\">// 兼容性：ie6 删除src时，有问题。没有 removeAttribute 好</span>\nelem.removeAttributeNode(classAttr);</code></pre>\n</section></section><section><h1 id=\"499406943\">元素、节点删除</h1><section><h2 id=\"2432015744\">remove</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'input'</span>)[<span class=\"hljs-number\">0</span>].remove();</code></pre>\n<p>包括ie11的所有ie、Safari 不支持。<br>chrome、firefox支持<br>低版本安卓 4.3以下webview不支持。</p>\n</section><section><h2 id=\"2234178404\">removeChild</h2><p>完美兼容方式。兼容ie6</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> elem = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'input'</span>)[<span class=\"hljs-number\">0</span>];\nelem.parentNode.removeChild(elem);</code></pre>\n<p>以上两种都是Node的方法。也可用于Element</p>\n</section></section><section><h1 id=\"1072596367\">元素、节点获取</h1><section><h2 id=\"3310007783\">简单汇总</h2><pre>\ngetElementById,\ngetElementsByName,\ngetElementsByTagName\ngetElementsByClassName\nquerySelector\nquerySelectorAll\n\n其中\nquerySelector\nquerySelectorAll\n实现模拟 css选择器。ie8(含)以上 及其他高级\n可以document直接调用，也可元素调用，元素调用则在所有后代中赛选\n获取不到情况也将返回空的 NodeList []，并非 null 等可隐式转换 false 的值，所以无需担心循环报错问题\n\n\nhttp://www.cnblogs.com/kissdodog/archive/2012/12/25/2833213.html\n\n1、firstElementChild        第一个子元素节点\n2、lastElementChild        最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点 ie9+\n4、previousElementSibling    前一个兄弟元素节点ie9+\n5、childElementCount        子元素节点个数量\n\n</pre>\n\n</section><section><h2 id=\"216965745\">根据 id 取</h2><p>取不到情况返回 null</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"test2\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-comment\">// 兼容性：all浏览器</span>\n\n<span class=\"hljs-comment\">// 直接取。即直接通过id名获取</span>\ntest2.innerHTML = <span class=\"hljs-string\">'hello word'</span>;\n\n<span class=\"hljs-comment\">// 通过 document.getElementById(idname)</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"test2\"</span>) === test2) <span class=\"hljs-comment\">// true</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n</section><section><h2 id=\"2123470865\">子元素集合 children</h2><p>兼容性：所有浏览器都支持。只是ie6注释节点也被获取到了</p>\n<p><strong>返回 HTMLCollection 对象。拥有实时特性</strong>\n元素被移走后，children值会实时改变，并不区分是否在文档中。ie6也支持此特性</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 1在页面文档中的例子:</span>\n<span class=\"hljs-keyword\">var</span> chils = <span class=\"hljs-built_in\">document</span>.body.children;\n<span class=\"hljs-built_in\">document</span>.body.appendChild(<span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'s'</span>));<span class=\"hljs-comment\">// 先更改</span>\ninfo.innerHTML = chils.length;<span class=\"hljs-comment\">// 后取。依然最新</span>\n\n<span class=\"hljs-comment\">// 2不在页面文档中的例子:</span>\n<span class=\"hljs-keyword\">var</span> el = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>),\n    chils = el.children;\nchils = el.children;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n    el.appendChild(<span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>));\n}\n<span class=\"hljs-built_in\">console</span>.log(chils.length) <span class=\"hljs-comment\">// 依然最新</span>\n</code></pre>\n</section><section><h2 id=\"3407738935\">紧邻元素获取</h2><p>其他关键字：相邻元素</p>\n<p>上一个</p>\n<pre><code class=\"language-js\">elem.previousElementSibling <span class=\"hljs-comment\">// 元素 ie9+</span>\nelem.previousSibling <span class=\"hljs-comment\">// 节点 ie6+</span></code></pre>\n<p>下一个</p>\n<pre><code class=\"language-js\">elem.nextElementSibling <span class=\"hljs-comment\">// 元素 ie9+</span>\nelem.nextSibling <span class=\"hljs-comment\">// 节点 ie6+</span></code></pre>\n<p>chrome、firefox 也是支持的</p>\n</section><section><h2 id=\"728851034\">第一个子元素</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode/firstElementChild\">firstElementChild 文档</a></p>\n<p>语法\nvar element = node.firstElementChild;</p>\n<p>例子</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"foo\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>First  (1)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Second (2)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Third  (3)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'foo'</span>);\n<span class=\"hljs-comment\">// yields: First  (1)</span>\n<span class=\"hljs-built_in\">console</span>.log(foo.firstElementChild.textContent);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>兼容性：ie9+</p>\n</section><section><h2 id=\"3529259605\">事件元素</h2><section><h3 id=\"2862979273\">事件根元素</h3><p>即正真拥有此事件的 对象。通过 <strong>this</strong> 获取。\n如果要讲的更贴切一点，this获取的是执行此事件的对象</p>\n</section><section><h3 id=\"1660142823\">当前事件元素</h3><p>1、event.target 属性\n兼容性：ie中 只有ie9支持，其他浏览器没问题</p>\n<p>2、event.srcElement 属性\n兼容性：fox 不支持。其他没问题</p>\n</section></section><section><h2 id=\"3308106261\">后代元素获取</h2><section><h3 id=\"2160762847\">指定标签名的后代元素</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> objs = div2.getElementsByTagName(<span class=\"hljs-string\">\"div\"</span>);</code></pre>\n<p>返回值：HTMLCollection 集合对象</p>\n<p>没获取任何后代情况：返回的依然是 集合对象，只是length属性为0</p>\n</section><section><h3 id=\"541251458\">所有后代</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 1 getElementsByTagName(\"*\")</span>\n<span class=\"hljs-comment\">// 兼容性：IE6中[注释节点]也被获取到了。其他浏览器正常</span>\n<span class=\"hljs-keyword\">var</span> objs = elem.getElementsByTagName(<span class=\"hljs-string\">\"*\"</span>); <span class=\"hljs-comment\">// elem 下的后代</span>\n<span class=\"hljs-keyword\">var</span> objs = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"*\"</span>); <span class=\"hljs-comment\">// 所有</span>\n\n<span class=\"hljs-comment\">// 2 querySelectorAll('*')</span>\n<span class=\"hljs-keyword\">let</span> all = eBox.querySelectorAll(<span class=\"hljs-string\">'*'</span>);\n\n<span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-comment\">// 兼容性：~ie11。其他不支持，包括edge也不支持</span>\n<span class=\"hljs-keyword\">var</span> elems = <span class=\"hljs-built_in\">document</span>.all <span class=\"hljs-comment\">//  等同 document.getElementsByTagName(\"*\")</span></code></pre>\n</section><section><h3 id=\"92234323\">根据 name - getElementsByName</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> elems = elem.getElementsByName(<span class=\"hljs-string\">\"name1\"</span>);\n<span class=\"hljs-keyword\">var</span> elems2 = <span class=\"hljs-built_in\">document</span>.getElementsByName(<span class=\"hljs-string\">\"name2\"</span>); <span class=\"hljs-comment\">// 全范围查找</span>\n</code></pre>\n<p>兼容性：ie6 - ie9 只有表单元素 才有 name 属性？</p>\n</section><section><h3 id=\"3835865320\">根据 class - getElementsByClassName</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 兼容性：ie9+</span>\n<span class=\"hljs-keyword\">var</span> elems = elem.getElementsByClassName(<span class=\"hljs-string\">'box'</span>);  <span class=\"hljs-comment\">// 全范围查找</span>\n<span class=\"hljs-keyword\">var</span> elems2 = <span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">'box'</span>);  <span class=\"hljs-comment\">// 全范围查找</span>\n</code></pre>\n<p><strong>返回值：HTMLCollection</strong>\n没获取任何后代情况，返回的依然是集合对象，只是length属性为0</p>\n<p>兼容性：IE6中[注释节点]也能获取到，标签名为!字符。其他浏览器正常</p>\n</section></section><section><h2 id=\"3281857630\">根据元素取 document 对象</h2><p>兼容：包括ie6的 所有</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.body.ownerDocument === <span class=\"hljs-built_in\">document</span>) <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// document 自身也有ownerDocument，不过返回null</span>\n<span class=\"hljs-built_in\">document</span>.ownerDocument <span class=\"hljs-comment\">// null</span></code></pre>\n</section><section><h2 id=\"179806075\">一些疑虑</h2><section><h3 id=\"1101882065\">display:none 元素的获取</h3><p>纯属多虑，没区别，所有浏览器都是如此</p>\n</section><section><h3 id=\"3472824765\">取元素集合，元素顺序问题</h3><p>顺序根据文档从上到下，与元素层级关系无关</p>\n<p>测试例子</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"u1\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"u2\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'li'</span>));\n<span class=\"hljs-built_in\">console</span>.log($(<span class=\"hljs-string\">'.u1 li'</span>).add($(<span class=\"hljs-string\">'.u2 li'</span>)));\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n</section></section><section><h2 id=\"1791347227\">父节点、父元素</h2><p>一般来说，元素的父节点肯定是元素。所以 parentNode 一般通用</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> node = el.parentNode\n<span class=\"hljs-keyword\">var</span> parent = el2.parentElement</code></pre>\n</section></section><section><h1 id=\"2236386526\">元素尺寸</h1><section><h2 id=\"1200042511\">高宽 - 精确</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\">let rectObject = Element.<strong>getBoundingClientRect</strong>()</a> - 元素尺寸坐标</p>\n<p>--- 或者 ---</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle\">let style = window.<strong>getComputedStyle</strong>(element, [pseudoElt]);</a> - 计算元素 css 值</p>\n<blockquote>\n<p>getComputedStyle 还能获取动画(transition、animation)过程中的css值(animation 未实际测试，待测)</p>\n</blockquote>\n</section><section><h2 id=\"1232234443\">高宽 - 无法精确到小数</h2><p>获取的是四舍五入的整数</p>\n<section><h3 id=\"2607873410\">汇总</h3><pre><code>1、元素窗口高宽：一般能对应 css(非auto情况) height、width 值\n不包括边框 和 滚动条\nclientHeight\nclientWidth\n包括边框\noffsetHeight\noffsetWidth\n2、内容高宽：不包括边框 和 滚动条\nscrollHeight\nscrollWidth </code></pre><p><strong>都是只读属性</strong></p>\n<p><strong>有几种情况将取不到值(即值为0)：</strong></p>\n<ol>\n<li>样式 display 属性值 为none</li>\n<li>对象 被动态 创建后 并没有插入html中</li>\n<li>操作的是内联元素</li>\n</ol>\n</section><section><h3 id=\"1461854581\">clientHeight、clientWidth属性——不包括边框 和 滚动条</h3><p>以下 clientWH 简写指 clientHeight、clientWidth</p>\n<section><h4 id=\"3242670145\">inline 元素也将得到 0</h4><p>使用 inline-block 解决</p>\n<p>offsetWidth、offsetHeight 没有这个问题</p>\n<p>兼容情况待测</p>\n</section><section><h4 id=\"3741971762\">描述</h4><p>不包括边框、滚动条\n包括padding ，也就是从padding开始</p>\n</section><section><h4 id=\"316383947\">返回值：Number类型</h4></section><section><h4 id=\"1661088537\">兼容性：</h4><p><strong>ie6\\7有问题：</strong>ie6\\7中，如果元素的css高宽为auto时，获取到的是0。html、body元素没问题</p>\n<p><strong>ie6\\7问题解决办法：</strong><br>需要获取元素高宽时，都是为了获取 与css高宽等价的值。可以通过下面的offset属性获取。<br>如，offsetWidth(元素实质宽)-clientLeft*2(边框一般有左右宽，所以乘2) 即可获取 css宽度，且兼容所有浏览器</p>\n<p><strong>与 css width 关系</strong><br>一般情况下等同css 的width，以下列出两种例外</p>\n<ol>\n<li>设置了 box-sizing: border-box 后，此种情况下，css width 包括了 边框，js clientWH 依然不包括边框</li>\n<li>display: none 情况，js clientWH 将固定取都0</li>\n</ol>\n</section></section><section><h3 id=\"2083922026\">offsetHeight、offsetWidth属性——包括边框</h3><p>不包括margin，也就是从边框外边起始</p>\n<p>返回值：Number类型</p>\n<p>兼容性：所有浏览器。强调，ie6\\7没有上述client属性的问题</p>\n</section><section><h3 id=\"19606876\">scrollHeight、scrollWidth属性——内容高宽，不包括边框</h3><p>包括padding，即从边框内边起始</p>\n<p>元素内容高度：元素显示高度+元素最大滚动高度(即被隐藏的高度)</p>\n<p>overflow: hidden/auto 情况下用来获取元素内容高宽\n这种情况client、offset都只能取到显示高宽</p>\n<p>ie6不建议使用：<br>ie6虽然支持，但是很怪异，似乎跟字体大小行高都有关系。\n而且如果直接在body下面执行scrollHeight，即同步文档执行，取到的值几乎等同容器高度。异步延后执行又对了，估计同步情况页面都没渲染出来吧，所以取不到</p>\n</section></section><section><h2 id=\"860158061\">边框宽度</h2><p>或者说是从padding到margin的距离。。。<br><strong>只能获取 左上 两边边框宽度</strong><br>clientLeft左、clientTop上</p>\n<p><strong>只读属性</strong></p>\n<p>有几种情况将取不到值(即值为0)：</p>\n<ol>\n<li>样式 display 属性值 为none</li>\n<li>对象 被动态 创建后 并没有插入html中</li>\n<li>操作的是内联元素</li>\n</ol>\n<p><strong>兼容性：</strong>\n包括ie6的所有</p>\n<p><strong>ie6\\7特殊情况：</strong><br>目标元素css高宽造成 获取的clientLeft、clientTop值有误\n当目标元素的css高宽值 都为auto时，获取到的是0。\n解决办法，在ie6\\7中，最好给元素的高宽设置具体值</p>\n</section></section><section><h1 id=\"1902255510\">元素集合 HTMLCollection</h1><section><h2 id=\"2754801478\">实时改变特性</h2><p><strong>原生获取的 HTMLCollection 集合对象都具有实时改变特性</strong>。  \n即转移或者删除某元素，其存在的HTMLCollection集合对象会实时改变。children 属性获取的就是 HTMLCollection 。</p>\n<p>兼容性：包括ie6的所有</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> eDiv = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'test'</span>).getElementsByTagName(<span class=\"hljs-string\">'div'</span>);\n\n<span class=\"hljs-built_in\">console</span>.log(eDiv.length); <span class=\"hljs-comment\">// 2</span>\n\n<span class=\"hljs-built_in\">document</span>.body.appendChild(eDiv[<span class=\"hljs-number\">0</span>]);\n\n<span class=\"hljs-built_in\">console</span>.log(eDiv.length); <span class=\"hljs-comment\">// 1</span></code></pre>\n</section><section><h2 id=\"1313060110\">判断某集合是否是HTMLCollection类派生</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'div'</span>) <span class=\"hljs-keyword\">instanceof</span> HTMLCollection;<span class=\"hljs-comment\">// true</span></code></pre>\n</section><section><h2 id=\"825910866\">根据name标签属性检索元素</h2><p>从集合中检索</p>\n<p>HTMLCollection.prototype.namedItem(name)</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> elem = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'div'</span>).namedItem(<span class=\"hljs-string\">'name1'</span>)</code></pre>\n<p>兼容性：<br>ie全系列，包括edge，只支持表单内元素。也许是因为name属性本身就是为表单元素而生\n其他高级浏览器div都支持</p>\n</section><section><h2 id=\"2043468818\">根据标签名检索 - ie独有</h2><p>返回：HTMLCollection集合</p>\n<p>HTMLCollection.prototype.tags(tagName)</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'*'</span>).tags(<span class=\"hljs-string\">'input'</span>);</code></pre>\n<p>兼容性：全系列ie支持，包括edge。其他高级均不支持</p>\n</section></section><section><h1 id=\"579953887\">光标操作</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Range\">Range - Web API 接口 | MDN</a></p>\n<section><h2 id=\"3878516610\">textarea input[type=text]</h2><section><h3 id=\"2994780874\">ie10+</h3><p>属性 selectionStart、selectionEnd。可读写。通过此属性实现移动和选择</p>\n<p>还有属性 setSelectionRange？？待测</p>\n<p>方法 select 实现全选</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-comment\">//// 光标到文本最后 ////</span>\n\nelInput.selectionStart = elInput.selectionEnd = elInput.value.length;\n\n<span class=\"hljs-comment\">//// 选择指定 ？   ////</span>\n\nelInput.setSelectionRange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-comment\">//// 实现全选      ////</span>\n\n<span class=\"hljs-comment\">// 1 直接使用 select</span>\nelInput.select()\n\n<span class=\"hljs-comment\">// 2 变相实现。推荐方式1...</span>\nelInput.selectionStart = <span class=\"hljs-number\">0</span>;\nelInput.selectionEnd = elInput.value.length;</code></pre>\n</section><section><h3 id=\"272115081\">ie6/7/8/9</h3><p>通过操作 selection range 实现</p>\n<p><strong>撤销当前选中</strong><code>document.selection.empty()</code></p>\n<p><strong>创建活动区域的Range对象</strong><code>document.selection.createRange()</code></p>\n<p><strong>对指定的 range 执行选中</strong><code>range.select()</code></p>\n</section></section><section><h2 id=\"1826000980\">ie 678 selection、range</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> sel= <span class=\"hljs-built_in\">document</span>.selection;\n<span class=\"hljs-keyword\">var</span> r = sel.createRange();\n\nr.moveEnd(<span class=\"hljs-string\">\"character\"</span>,<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//从当前位置 起，往右选择3个字符</span>\nr.select();<span class=\"hljs-comment\">//执行选择</span>\n\nr.moveStart(<span class=\"hljs-string\">\"character\"</span>,<span class=\"hljs-number\">-3</span>);<span class=\"hljs-comment\">// 从当前位置 起，往左选择3个字符</span>\nr.select();<span class=\"hljs-comment\">//执行选择</span>\n\n<span class=\"hljs-comment\">// 获取 选中文字</span>\n<span class=\"hljs-built_in\">console</span>.log(r.text);\n\n<span class=\"hljs-comment\">// 光标前 插入 html文本</span>\nr.pasteHTML(<span class=\"hljs-string\">'&lt;img src=\"http://ctc.qzonestyle.gtimg.cn/qzone/em/e122.gif\"&gt;'</span>);\n\n<span class=\"hljs-comment\">// 还要通过 focus 才能出现光标，待测</span>\nel.focus();</code></pre>\n</section><section><h2 id=\"753009244\">富文本光标操作</h2><section><h3 id=\"4258238071\">将光标设置到末尾</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> selection = <span class=\"hljs-built_in\">window</span>.getSelection()\n<span class=\"hljs-keyword\">let</span> range = <span class=\"hljs-built_in\">document</span>.createRange()\nrange.selectNodeContents(elem)\nrange.collapse()\nselection.removeAllRanges()\nselection.addRange(range)</code></pre>\n<p><strong>Microsoft Edge <code>selection.addRange</code> 必须再最后</strong><br>如下代码所示将无发获焦，其他浏览器没问题</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> selection = <span class=\"hljs-built_in\">window</span>.getSelection()\n<span class=\"hljs-keyword\">let</span> range = <span class=\"hljs-built_in\">document</span>.createRange()\nselection.removeAllRanges()\nselection.addRange(range)\nrange.selectNodeContents(elem)\nrange.collapse()</code></pre>\n</section></section><section><h2 id=\"2738810390\">实用代码块</h2><section><h3 id=\"1248400337\">表情增加</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> imgTxt = <span class=\"hljs-string\">'&lt;img src=\"http://ctc.qzonestyle.gtimg.cn/qzone/em/e122.gif\"&gt;'</span>;\n<span class=\"hljs-keyword\">var</span> sel, range;\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.getSelection) {\n    <span class=\"hljs-keyword\">var</span> imgDom = $(imgTxt);\n\n    <span class=\"hljs-comment\">//光标选区对象</span>\n    sel = <span class=\"hljs-built_in\">window</span>.getSelection();\n\n    <span class=\"hljs-comment\">//选区 操作对象</span>\n    range = sel.getRangeAt(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-comment\">//删除选中文字</span>\n    range.deleteContents();\n\n    <span class=\"hljs-comment\">//插入 :光标处 插入 元素</span>\n    range.insertNode(imgDom[<span class=\"hljs-number\">0</span>]);\n\n    <span class=\"hljs-comment\">//移动光标</span>\n    range = range.cloneRange();\n    range.setStartAfter(imgDom[<span class=\"hljs-number\">0</span>]);<span class=\"hljs-comment\">//移动到指定 元素 后面</span>\n    range.collapse(<span class=\"hljs-literal\">true</span>);    \n    sel.removeAllRanges();\n    sel.addRange(range);\n} <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// ie678</span>\n    <span class=\"hljs-built_in\">document</span>.selection.createRange().pasteHTML(imgTxt);\n}\n</code></pre>\n</section><section><h3 id=\"3978492343\">取消选择</h3><pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">if</span> (<span class=\"hljs-selector-tag\">window</span><span class=\"hljs-selector-class\">.getSelection</span>) <span class=\"hljs-selector-tag\">window</span><span class=\"hljs-selector-class\">.getSelection</span>()<span class=\"hljs-selector-class\">.removeAllRanges</span>();\n<span class=\"hljs-selector-tag\">else</span> <span class=\"hljs-selector-tag\">document</span><span class=\"hljs-selector-class\">.selection</span><span class=\"hljs-selector-class\">.empty</span>();</code></pre>\n</section></section></section><section><h1 id=\"2932124966\">坐标</h1><section><h2 id=\"3977808024\">光标、触摸点坐标</h2><section><h3 id=\"2365583377\">所在元素: offsetX | offsetY</h3><p><strong>说明：</strong><br>光标或者触摸点位于当前所在元素坐标获取<br>强调：<br>这个所在元素包括任意任何，定位的，无定位的元素。ie67只包括定位元素</p>\n<p><strong>兼容性：</strong><br>ie全系列：边框内边 起始<br>Chrome\\Safari：边框外边 起始<br>Opera：外补丁内边<br>Firefox：不支持(新版火狐，39版本支持)<br>ie7的另外问题：元素有滚动条情况，将获取 边框内边起始距离 + 滚动条隐藏距离</p>\n</section><section><h3 id=\"242878406\">定位元素：layerX \\ layerY</h3><p><strong>说明：</strong><br>相对于 当前所在元素往上最近的定位元素(包括当前所在元素)<br>定位元素包括：absolute\\relative\\fixed,也包括overflow非visible值的元素<br>往上都没有定位元素情况：浏览器内容窗口 起始</p>\n<p>absolute\\relative 与 fixed区别：起始位置<br>absolute\\relative ：边框外边起始<br>fixed：元素初始位置(滚动条在初始位置情况) 的边框外边起始<br>总结：本质上absolute\\relative定位的元素一直都在初始位置上，某种意义上没有区别</p>\n<p><strong>兼容性：</strong><br>ie6\\ie7\\ie8\\Opera：不支持  </p>\n</section><section><h3 id=\"497584060\">内容：pageX | pageY</h3><p><strong>说明：</strong><br>光标相对于内容区域坐标</p>\n<p><strong>兼容性：</strong><br>ie6\\7\\8：不支持</p>\n<p><strong>ie6\\7\\8偏门 实现：</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">document</span><span class=\"hljs-selector-class\">.documentElement</span><span class=\"hljs-selector-class\">.scrollLeft</span> + <span class=\"hljs-selector-tag\">e</span><span class=\"hljs-selector-class\">.clientX</span>\n<span class=\"hljs-selector-tag\">document</span><span class=\"hljs-selector-class\">.documentElement</span><span class=\"hljs-selector-class\">.scrollTop</span> + <span class=\"hljs-selector-tag\">e</span><span class=\"hljs-selector-class\">.clientY</span></code></pre>\n<p><strong>应用：</strong></p>\n<pre><code class=\"language-js\">box[<span class=\"hljs-number\">0</span>].onmousemove=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    e = e || <span class=\"hljs-built_in\">window</span>.event;\n\n    <span class=\"hljs-keyword\">var</span> pageX = e.pageX === <span class=\"hljs-literal\">undefined</span> ? <span class=\"hljs-built_in\">document</span>.documentElement.scrollLeft + e.clientX : e.pageX;\n};</code></pre>\n</section><section><h3 id=\"1319450230\">显示：clientX\\ clientY</h3><p><strong>说明：</strong><br>光标相对于显示区域坐标</p>\n<p><strong>兼容性：</strong><br>所有浏览器都支持<br>ie6\\7有点问题：考虑黑边 的2px。ie6消掉黑边即可  </p>\n</section><section><h3 id=\"3077402832\">显示 | 内容 | 元素：x | y</h3><p>ie6\\ie7\\Safari\\Chrome\\Opera，固定是显示。另外ie6\\7考虑黑边<br>ie8，固定是内容<br>ie9，光标所在元素定位属性决定。absolute--内容，static\\fixed—显示，relative—所在元素<br>Firefox，不支持</p>\n</section><section><h3 id=\"3698495147\">屏幕：screenX | screenY</h3><p>兼容性：所有浏览器</p>\n</section></section><section><h2 id=\"395169984\">元素坐标</h2><section><h3 id=\"1256084040\">相对定位元素</h3><p>offsetLeft offsetTop</p>\n<p>取 相对于 定位父元素</p>\n<p>td tr 等特殊元素 可能会是参照物</p>\n<p>距离范围：自身边框外边——&gt;定位参照物边框内边<br>ie8\\Opera在有参照元素的情况下，距离范围 不同：从边框外边起始——&gt;定位参照物 边框外边</p>\n<p>一些固定取值为0的情况：</p>\n<ol>\n<li>样式 display 属性值 为none</li>\n<li>对象 被动态 创建后 并没有插入html中</li>\n<li>操作的是内联元素</li>\n</ol>\n<p>body、html 的offsetLeft offsetTop不同浏览器会有差异，而且一般不会这么用，不讨论了</p>\n<p><strong>transform是否可通过offsetLeft获取？</strong><br>offsetLeft 只能获取relative 或者 absolute 的 left top\ntransform 可通过 getBoundingClientRect | getComputedStyle 获取</p>\n</section><section><h3 id=\"438601495\">[应用]相对内容窗口</h3><p>通过 offsetParent实现<br>可取offsetLeft,offsetTop 值的 参照元素对象，循环便可得到 相对内容坐标了<br>兼容性：包括ie6的所有  </p>\n<p><strong>fixed 的特殊性：</strong><br>offsetParent 固定返回 null</p>\n<p>offsetTop 直接就能获取相对于视窗坐标，但只能是视窗，不考虑滚动条。</p>\n<p>如果要获取相对于内容窗口坐标，需加上滚动条：<br>fixedElem.offsetTop + window.pageYOffset</p>\n</section><section><h3 id=\"1332625212\">[松开事件]坐标有没有偏移</h3><p><strong>疑问：</strong><br>惯性拖 松开后，是否与最后的移动值不同。<br><strong>结论：</strong><br>点下是多少，松开时就是多少。<br>由于ie678的实现方式不同，所以得的值不一样，但还是与最后的移动事件的值一致的(触摸也如此)。<br><strong>[速率计算] 总结：</strong><br>速率计算，应考虑松开时的时间，以及最后移动的位置。不应考虑松开时的位置(因为没有意义)  </p>\n<p><strong>[移动松开]总结：</strong>(包括触摸)<br>松开时光标坐标值并没有发生偏移。如果偏移了，那都得先触发移动事件  </p>\n<p><strong>最终总结：</strong><br>松开事件没有发生坐标偏移。在发生偏移后，松开事件的坐标等于移动事件里面最后的坐标<br>这里说的松开事件包括触摸松开  </p>\n</section><section><h3 id=\"2099309250\">取元素区块坐标尺寸</h3><p>这将获取精确的坐标，且支持 transform</p>\n<p><strong>区块坐标尺寸说明</strong></p>\n<p>xy坐标：\n    相对于浏览器窗口坐标。\n    强调，此坐标不包含窗口滚动条卷去高度，也就是相当于： 相对内容窗口Y坐标-窗口滚动条卷去高度(window.pageYOffset)</p>\n<p>尺寸：\n    元素所占面积，包括边框，不包括外补白</p>\n<p>getBoundingClientRect：\n取当前元素所占区块对象，包括了尺寸和坐标。是整个元素所占的一个区块，只有一个</p>\n<p>getClientRects：\n取当前元素所占的多个区块\n此情况一个元素会出现多个区块：某元素因文本过多而换行，一行一个区块</p>\n<p><strong>兼容性：</strong>\nie678只有坐标，没有尺寸</p>\n</section></section><section><h2 id=\"979437907\">屏幕坐标</h2><section><h3 id=\"1817938321\">浏览器相对于 屏幕坐标</h3><p>Chrome 支持的写法<br>window.screenTop</p>\n<p>ie9\\opera\\Chrome\\fox支持的写法<br>window.screenY</p>\n</section><section><h3 id=\"236971240\">显示窗口 相对于屏幕坐标</h3><p>ie6789\\opera<br>window.screenTop</p>\n</section></section></section><section><h1 id=\"443373034\">复制剪切粘帖</h1><section><h2 id=\"1123626085\">复制事件 copy</h2><section><h3 id=\"2753582864\">ie所有(包括edge)：</h3><ol>\n<li>只能给页面元素绑定，比如 <code>document.documentElement.oncopy(html)</code>、<code>document.body.oncopy(body)</code>，错误方式 <code>document.oncopy</code></li>\n<li>假如不选中文本，不会发生复制，也不会一直触发事件，大概触发一次两次的样子 </li>\n</ol>\n</section><section><h3 id=\"315853869\">chrome、firefox:</h3><ol>\n<li>包括document.oncopy的所有方式</li>\n<li>假如不选中文本，不会发生复制，但会一直触发事件</li>\n</ol>\n</section></section><section><h2 id=\"991508094\">粘帖事件 paste</h2><p>粘贴操作时触发，粘贴效果前触发。可 <code>event.preventDefault()</code> 阻止默认粘贴发生</p>\n<section><h3 id=\"525559105\">ie所有(包括edge)：</h3><p>剪切板为空情况，不会触发 paste 事件。也就是说，只有真正发生粘帖后才会触发。</p>\n<p>除 document 外，其它任意元素都能绑定，可继承</p>\n</section><section><h3 id=\"2751113188\">firefox：</h3><p>即使即使剪切板为空，只要在输入元素中，都会发生</p>\n<p>包括 document 的所有元素，可继承</p>\n</section><section><h3 id=\"1395022721\">chrome：</h3><p>任何元素，包括 document。剪切板为空都行，ctrl+v 都会触发</p>\n</section><section><h3 id=\"1021607989\">jq如何绑定：</h3><p>不能直接点出 paste，但可通过on，如 <code>jIn.on(&#39;paste&#39;, function () {alert(&#39;&#39;);});</code></p>\n</section></section><section><h2 id=\"2301218836\">剪切事件 cut</h2></section><section><h2 id=\"2015481266\">取剪切板内容</h2><section><h3 id=\"2118138569\">ie6~11：</h3><p><code>window.clipboardData.getData(&#39;text&#39;)</code> 任意事件，任意地方，任意取</p>\n</section><section><h3 id=\"1797302596\">高级，包括edge：</h3><p>只能在粘帖事件中取</p>\n<pre><code class=\"language-js\">event.clipboardData.getData(<span class=\"hljs-string\">'text/plain'</span>)\n\n<span class=\"hljs-comment\">// firefox、edge不支持复制过来的html，默认会清掉格式。。。所以只支持取直接通过setData('text/html')的</span>\n<span class=\"hljs-comment\">// 只有chrome完美支持，只要是有格式的，哪里的文本都行</span>\nevent.clipboardData.getData(<span class=\"hljs-string\">'text/html'</span>) \n</code></pre>\n</section></section><section><h2 id=\"2894878744\">设置剪切板</h2><section><h3 id=\"1809015270\">随时操作剪切板的方式，复制实现</h3><p>通过 <code>document.execCommand(&#39;copy&#39;)</code> 命令</p>\n<pre><code class=\"language-js\">aBtn.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    getSelection().selectAllChildren(<span class=\"hljs-keyword\">this</span>.previousSibling);\n    <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">'copy'</span>);\n});\n</code></pre>\n</section><section><h3 id=\"734924027\">只能在 复制粘贴剪切事件 操作剪切板的方式</h3><p>高级，包括edge：</p>\n<p>需结合e.preventDefault()使用，否则剪切板不会被替换，依然是之前的内容。</p>\n<p>只能在copy事件中设置，由于这点限制，一般使用flash实现</p>\n<pre><code class=\"language-js\">event.clipboardData.setData(<span class=\"hljs-string\">'text/plain'</span>,<span class=\"hljs-string\">'剪切板内容'</span>);\nevent.clipboardData.setData(<span class=\"hljs-string\">'text/html'</span>,<span class=\"hljs-string\">'&lt;b style=\"color:red\"&gt;剪切板内容&lt;/b&gt;'</span>);\n\n<span class=\"hljs-built_in\">document</span>.body.oncopy = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-comment\">//e.clipboardData.setData('text/html', '&lt;b style=\"color:red\"&gt;xxx&lt;/b&gt;');</span>\n    <span class=\"hljs-comment\">//e.clipboardData.setData('text/plain', '&lt;b style=\"color:red\"&gt;xxx&lt;/b&gt;');</span>\n    e.clipboardData.setData(<span class=\"hljs-string\">'text/plain'</span>, <span class=\"hljs-string\">''</span>);\n\n    e.preventDefault();<span class=\"hljs-comment\">// 需禁用默认copy事件</span>\n};</code></pre>\n</section></section><section><h2 id=\"3311181001\">关于事件绑定注意</h2><p>在给整个页面绑定事件时，由于所有ie浏览器不支持直接document方式，推荐document.body或document.documentElement</p>\n</section><section><h2 id=\"2110897221\">ie可能需开启权限</h2><p>internet 选项 –&gt; 安全 -&gt; 自定义级别</p>\n</section></section><section><h1 id=\"1067557495\">打印机</h1><p>调用打印\nwindow.print()</p>\n</section><section><h1 id=\"853364843\">浏览器</h1><section><h2 id=\"2280403651\">手动刷新</h2><p>之前都是 <code>location.href=&quot;&quot;</code>，其实有直接的方法</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">location</span><span class=\"hljs-selector-class\">.reload</span>()\n</code></pre>\n<p>其它方式</p>\n<pre><code class=\"language-js\">history.go(<span class=\"hljs-number\">0</span>)\nlocation=location\nlocation.assign(location)\n<span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">'Refresh'</span>)\n<span class=\"hljs-built_in\">window</span>.navigate(location)\nlocation.replace(location)\n<span class=\"hljs-built_in\">document</span>.URL=location.href\n</code></pre>\n</section><section><h2 id=\"3038446426\">浏览器判断</h2><p>ie专属判断\n兼容性：ie6 和其它浏览器不支持</p>\n<pre><code>isie6789 = <span class=\"hljs-built_in\">document</span>.documentMode &amp;&amp; <span class=\"hljs-built_in\">document</span>.documentMode &lt; <span class=\"hljs-number\">10</span>\n\nalert(!-[<span class=\"hljs-number\">1</span>,]) <span class=\"hljs-comment\">// 判断是不是 ie678</span>\nalert(<span class=\"hljs-comment\">/*@cc_on !@*/</span><span class=\"hljs-literal\">false</span>);<span class=\"hljs-comment\">//判断是不是ie</span></code></pre><p>所有浏览器支持方式</p>\n<pre><code><span class=\"hljs-selector-tag\">window</span><span class=\"hljs-selector-class\">.navigator</span><span class=\"hljs-selector-class\">.userAgent</span>\n<span class=\"hljs-selector-tag\">window</span><span class=\"hljs-selector-class\">.navigator</span><span class=\"hljs-selector-class\">.appVersion</span></code></pre></section></section><section><h1 id=\"853952347\">浏览器窗口</h1><section><h2 id=\"1583122204\">尺寸-显示窗口</h2><section><h3 id=\"3579948049\">方式1：直接通过window获取，这应该是<strong><em>*被认可的方式</em></strong></h3><p>innerHeight、innerWidth</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">console</span><span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-selector-tag\">window</span><span class=\"hljs-selector-class\">.innerHeight</span>);</code></pre>\n<p>兼容：ie9+、其他高级浏览器</p>\n</section><section><h3 id=\"931095326\">方式2：通过<code>&lt;html&gt;</code>元素的client，<strong><em>*兼容性最好</em></strong></h3><p>clientHeight、clientWidth</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">console</span><span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-selector-tag\">document</span><span class=\"hljs-selector-class\">.documentElement</span><span class=\"hljs-selector-class\">.clientHeight</span>);</code></pre>\n<p>兼容：包括ie6的所有</p>\n<p>其他疑虑(<strong>此疑虑可忽略</strong>，因为结果是clientWH绝对可正确获取 显示窗口高宽的):<br>首先，clientHeight取得尺寸值是不包括padding，border的，也就是从padding内边起始的<br>假如给html 设置padding，border，html的clientHeight值是否会受影响？<br>答案是，只有ie6受html border宽度，padding大小影响。其他浏览器不受影响，依然是完整的显示窗口高宽。但谁又会去设置html的border，padding呢，而且ie似乎已经淡出视野了，所以这个担心可忽略。当然，还是不要去控制html的border padding</p>\n<p>经过细测，上述说的只有ie6受影响不完全正确，ie8也有影响，不过是一种固定的黑边(仔细看浏览器就会发现)，无法通过css去除，所以得到的值是真实的显示<code>窗口高宽 - 黑边4px</code>。  \nie6也有这种黑边，严格来说，ie6中 是 得到的值 是  <code>窗口高宽 - (黑边4px + border + padding)</code><br>ie7居然没有黑边...<br>然而，定位元素是以这种黑边内边起始的，所以此问题依然忽略...</p>\n</section><section><h3 id=\"44137923\">方式3：通过<code>&lt;html&gt;</code>元素的offset，次方案不可取</h3><p>offsetHeight、offsetWidth<br>兼容性：ie6~10 正确，而且ie6、8得到的高宽值终于包括了黑边，看似正确，反而造成了问题，因为上面说过，元素定位是以黑边内边起始。。。<br>ie11、其他高级，取得是内容窗口高宽...</p>\n</section></section><section><h2 id=\"3916670742\">给显示窗口设置背景</h2><p>包括背景色，背景图片等等。<br>通过body实现。<br>兼容包括ie6的所有。<br>此内容属于css范畴...<br>窗口滚动条控制<br>还是属于css范畴，但还是提一下</p>\n</section><section><h2 id=\"847781183\">ie67 需通过 <code>&lt;html&gt;</code> 控制</h2><p>其他 可同过 <code>&lt;html&gt;</code>，也可通过<code>&lt;body&gt;</code>，截止今天2016.7，最新版chrome也是如此<br>看来 <html>控制窗口滚动条兼容性最好啊，发现自己以前都是通过 <code>&lt;body&gt;</code>控制的...<br>那么以后通过html控制？？</p>\n</section><section><h2 id=\"2227748266\">尺寸-内容窗口WH</h2><p>通过body获取即可，使用元素的获取方式:<strong>一般使用下面的方式1即可</strong></p>\n<p>1、元素窗口高宽：一般能对应 css(非auto情况) height、width 值<br>不包括边框 和 滚动条<br>document.body.clientHeight<br>document.body.clientWidth<br>包括边框<br>document.body.offsetHeight<br>document.body.offsetWidth  </p>\n<p>不控制body高度情况，可得到准确的内容高度，否则只是body元素窗口高度。所以尽量不控制body高度，不过一般也不会控制。</p>\n<p>兼容性：所有</p>\n<p>2、元素内容高宽：不包括边框 和 滚动条<br>document.body.scrollHeight<br>document.body.scrollWidth  </p>\n<p>这种方式在内容少，即视窗高大于内容高的时候，可以得到视窗高度。<br>而且在控制body高度的情况也能准确获取内容高</p>\n<p>兼容性：ie67不适用</p>\n</section></section><section><h1 id=\"3991019046\">滚动条</h1><section><h2 id=\"4195355639\">滚动条控制</h2><section><h3 id=\"2036598230\">浏览器窗口</h3><section><h4 id=\"3372381811\">scrollTo</h4><p>滚动条隐藏指定页面高度</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 参数依次是 x y</span>\n<span class=\"hljs-comment\">// 兼容所有浏览器</span>\n<span class=\"hljs-built_in\">window</span>.scrollTo(<span class=\"hljs-number\">0</span>, elem.offsetTop)<span class=\"hljs-comment\">// 滚动到某元素位置</span></code></pre>\n</section><section><h4 id=\"447806692\">scrollBy</h4><p>以当前位置为基础追加</p>\n<p>与scrollTo区别：</p>\n<ul>\n<li>scrollTo 直接到指定的页面位置</li>\n<li>scrollBy 当前页面位置为基础，追加</li>\n</ul>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 参数依次是 x y</span>\n<span class=\"hljs-comment\">// 兼容所有浏览器</span>\n<span class=\"hljs-built_in\">window</span>.scrollBy(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">200</span>)</code></pre>\n</section></section><section><h3 id=\"340023951\">元素</h3><p>理解：滚动条隐藏指定距离</p>\n<p>元素边框内边起始</p>\n<p>兼容性：all浏览器</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 滚动到底部</span>\nel.scrollTop = el.scrollHeight</code></pre>\n</section></section><section><h2 id=\"1018525977\">获取 - 滚动条隐藏距离</h2><section><h3 id=\"1396189094\">元素</h3><p>scrollTop、scrollLeft</p>\n<p>只读</p>\n<p>兼容性：所有浏览器支持<br>ie7 能取到负数<br>其他浏览器 只能是 正数(在小于0的情况，返回0)</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">console</span><span class=\"hljs-selector-class\">.log</span>(<span class=\"hljs-selector-tag\">el</span><span class=\"hljs-selector-class\">.scrollTop</span>);</code></pre>\n</section><section><h3 id=\"3271214861\">浏览器窗口</h3><section><h4 id=\"3894043790\">1. 直接获取，此为推荐方式</h4><p>window.pageYOffset、window.pageXOffset</p>\n<p>兼容性：只有ie678不支持</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 兼容性封装，包括ie6的所有浏览器</span>\n<span class=\"hljs-keyword\">var</span> getWindowScrollTop = <span class=\"hljs-string\">'pageYOffset'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">window</span> ? <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> pageYOffset;\n} : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop;\n};\n</code></pre>\n</section><section><h4 id=\"1039383185\">2. 通过元素方式，不推荐</h4><p>兼容性：  </p>\n<ol>\n<li>Chrome、Safari、Edge(新版ie)<ul>\n<li>只能使用body对象，使用html对象将取到0</li>\n</ul>\n</li>\n<li>ie6~11<ul>\n<li>只能使用html对象，使用body对象将取到0</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 兼容性封装</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getWindowScrollTop</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> isIe6_11 ? <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop : <span class=\"hljs-built_in\">document</span>.body.scrollTop;\n}</code></pre>\n</section></section></section><section><h2 id=\"1500202352\">滚动事件</h2><p><strong>当 由于 内容 的变化，造成 滚动条的变化时</strong><br>ie全系列、opera 不会触发 滚动条事件<br>其他会触发</p>\n"})
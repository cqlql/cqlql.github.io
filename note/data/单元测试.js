window['cb_单元测试']({"outline":[{"id":"1284950661","level":1,"name":"jasmine","children":[{"id":"413865736","level":2,"name":"beforeEach、beforeAll","children":[]}]},{"id":"792769009","level":1,"name":"jest 测试框架","children":[{"id":"1080079740","level":2,"name":"nodejs 测试问题","children":[{"id":"2688629562","level":3,"name":"会根据 <code>.babelrc</code> 文件进行 babel 转化","children":[]}]},{"id":"3845976729","level":2,"name":"--watch 模式","children":[]},{"id":"232571922","level":2,"name":"使用指定的 babel.config","children":[]}]},{"id":"2478576641","level":1,"name":"mocha API 使用","children":[{"id":"4199850942","level":2,"name":"异步测试","children":[]},{"id":"3760210709","level":2,"name":"only","children":[]}]},{"id":"95910959","level":1,"name":"经验","children":[]},{"id":"2676455134","level":1,"name":"入门、工具列表","children":[{"id":"2434591943","level":2,"name":"工具列表","children":[]},{"id":"223647589","level":2,"name":"好处","children":[]},{"id":"3311902760","level":2,"name":"webdriver 实验","children":[]},{"id":"3655543983","level":2,"name":"参考学习","children":[]}]}],"content":"<section><h1 id=\"1284950661\">jasmine</h1><section><h2 id=\"413865736\">beforeEach、beforeAll</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>\ndescribe(<span class=\"hljs-string\">'test-foo'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// 每次 it 都会执行</span>\n  <span class=\"hljs-comment\">// 只限于当前 describe</span>\n  beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'beforeEach'</span>, i++)\n  });\n\n  <span class=\"hljs-comment\">// 只执行一次</span>\n  beforeAll(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'beforeAll'</span>)\n  });\n\n\n  it(<span class=\"hljs-string\">'it1'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n\n  })\n\n  it(<span class=\"hljs-string\">'it2'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  })\n})\n\ndescribe(<span class=\"hljs-string\">'test-bar'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  it(<span class=\"hljs-string\">'it3'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n  })\n})\n</code></pre>\n</section></section><section><h1 id=\"792769009\">jest 测试框架</h1><section><h2 id=\"1080079740\">nodejs 测试问题</h2><section><h3 id=\"2688629562\">会根据 <code>.babelrc</code> 文件进行 babel 转化</h3><p><a href=\"https://facebook.github.io/jest/docs/zh-Hans/getting-started.html#%E4%BD%BF%E7%94%A8-babel\">使用 babel - 官方解释</a></p>\n<p><strong>解决</strong></p>\n<ol>\n<li>更改 pageage.json</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// package.json</span>\n{\n  <span class=\"hljs-string\">\"jest\"</span>: {\n    <span class=\"hljs-string\">\"transform\"</span>: {}\n  }\n}</code></pre>\n<ol start=\"2\">\n<li>使用配置文件</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// jest.config</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"my-project\"</span>,\n  <span class=\"hljs-attr\">transform</span>: {},\n  <span class=\"hljs-attr\">testEnvironment</span>: <span class=\"hljs-string\">\"node\"</span>\n}</code></pre>\n</section></section><section><h2 id=\"3845976729\">--watch 模式</h2><p>很聪明，只会测试更改的文件</p>\n<p>当然，<code>--watchAll</code> 就会测试所有了</p>\n</section><section><h2 id=\"232571922\">使用指定的 babel.config</h2><p>jest-js-transformer.js</p>\n<pre><code class=\"language-js\">const babelOptions = {\n  <span class=\"hljs-string\">\"presets\"</span>: [\n    [<span class=\"hljs-string\">\"@babel/preset-env\"</span>, {\n      // <span class=\"hljs-string\">\"modules\"</span>: <span class=\"hljs-string\">'auto'</span>,\n      // <span class=\"hljs-string\">\"useBuiltIns\"</span>: <span class=\"hljs-string\">\"usage\"</span>,\n      // <span class=\"hljs-string\">\"targets\"</span>: {\n      //   <span class=\"hljs-string\">\"browsers\"</span>: [<span class=\"hljs-string\">\"&gt; 1%\"</span>, <span class=\"hljs-string\">\"last 2 versions\"</span>, <span class=\"hljs-string\">\"not ie &lt;= 8\"</span>]\n      // }\n    }]\n  ],\n  <span class=\"hljs-string\">\"plugins\"</span>: [\n    <span class=\"hljs-string\">\"@babel/plugin-transform-runtime\"</span>,\n    <span class=\"hljs-string\">\"@babel/plugin-syntax-dynamic-import\"</span>,\n    // <span class=\"hljs-string\">\"transform-vue-jsx\"</span>\n  ]\n};\n\nmodule.exports = require(<span class=\"hljs-string\">'babel-jest'</span>).createTransformer(babelOptions);\n</code></pre>\n<p>jest.config.js</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">verbose</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-string\">'rootDir'</span>: <span class=\"hljs-string\">'../'</span>,\n  <span class=\"hljs-attr\">testMatch</span>: [<span class=\"hljs-string\">'&lt;rootDir&gt;/test/**/*.test.js'</span>],\n  <span class=\"hljs-comment\">// 'testRegex': [</span>\n  <span class=\"hljs-comment\">//   '/test/unit/.+(test|spec)\\\\.[jt]sx?$'</span>\n  <span class=\"hljs-comment\">// ],</span>\n  testPathIgnorePatterns: [<span class=\"hljs-string\">'/src/'</span>, <span class=\"hljs-string\">'node_modules'</span>],\n  <span class=\"hljs-string\">'moduleNameMapper'</span>: {\n    <span class=\"hljs-comment\">// 同步 webpack 别名</span>\n    <span class=\"hljs-string\">'@/(.*)$'</span>: <span class=\"hljs-string\">'&lt;rootDir&gt;/src/$1'</span>\n  },\n\n  <span class=\"hljs-attr\">transform</span>: { <span class=\"hljs-string\">'^.+\\\\.js$'</span>: <span class=\"hljs-string\">'&lt;rootDir&gt;/test/jest-preprocess.js'</span> },\n}</code></pre>\n</section></section><section><h1 id=\"2478576641\">mocha API 使用</h1><section><h2 id=\"4199850942\">异步测试</h2><p><strong>可利用此方式查看输出到测试浏览器中的对象：</strong> 测试执行完后，测试浏览器输出的对象被销毁，无法查看，可通过此方式暂停运行，查看输出的对象</p>\n<p>默认超时时间为2s，超时后自动执行done。超时时间可设置</p>\n<pre><code class=\"language-js\">describe(<span class=\"hljs-string\">'加法函数的测试'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  it(<span class=\"hljs-string\">'测试应该5000毫秒后结束'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">done</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">5000</span>);<span class=\"hljs-comment\">//设置超时时间为5s</span>\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      x = <span class=\"hljs-literal\">false</span>;\n      expect(x).to.be.not.ok;\n      done(); <span class=\"hljs-comment\">// 通知Mocha测试结束</span>\n    };\n    setTimeout(f, <span class=\"hljs-number\">4000</span>);\n  });\n});</code></pre>\n</section><section><h2 id=\"3760210709\">only</h2><pre><code class=\"language-js\">describe(<span class=\"hljs-string\">'Array'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  describe.only(<span class=\"hljs-string\">'#indexOf()'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    it.only(<span class=\"hljs-string\">'should return -1 unless present'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-comment\">// ...</span>\n    });\n  });\n});\n<span class=\"hljs-string\">``</span><span class=\"hljs-string\">`# karma 中使用 Chrome Headless\n\n需安装 `</span>karma-chrome-launcher<span class=\"hljs-string\">` 插件，之前一直有装，只是使用的是有头版。\n\n\n`</span><span class=\"hljs-string\">``</span>js\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">config</span>) </span>{\n  config.set({\n    <span class=\"hljs-comment\">// browsers: ['Chrome'], // 有头</span>\n    browsers: [<span class=\"hljs-string\">'ChromeHeadless'</span>] <span class=\"hljs-comment\">// 无头</span>\n  })\n}</code></pre>\n</section></section><section><h1 id=\"95910959\">经验</h1><p>只测试功能接口，没必要测试内部所有实现</p>\n</section><section><h1 id=\"2676455134\">入门、工具列表</h1><section><h2 id=\"2434591943\">工具列表</h2><ul>\n<li>测试管理工具：<a href=\"http://karma-runner.github.io/1.0/index.html\">Karma</a></li>\n<li>测试框架：<a href=\"https://mochajs.org/\">Mocha</a></li>\n<li>断言库：Jasmine、<a href=\"http://chaijs.com/guide/\">chai.js</a></li>\n<li><a href=\"https://jestjs.io/\">jest</a>：开箱即用，几乎零配置的测试框架</li>\n<li>web app|站点 测试：<a href=\"http://nightwatchjs.org/\">Nightwatch.js</a></li>\n</ul>\n<p>可以这么组合: Karma + Jasmine | karma + Mocha + chai.js</p>\n</section><section><h2 id=\"223647589\">好处</h2><ul>\n<li>放心大胆重构：代码重构时可保证安全性，即保证功能完整</li>\n<li>测试用例相当于API文档</li>\n<li>迫使编写更易于维护的代码：因为需尽量做到让编写的每个单元都可单独测试</li>\n</ul>\n</section><section><h2 id=\"3311902760\">webdriver 实验</h2><p><a href=\"https://www.npmjs.com/package/selenium-webdriver\">可模拟浏览器点击的测试框架：selenium-webdriver</a></p>\n<p><a href=\"http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_WebElement.html\">http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_WebElement.html</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> webdriver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'selenium-webdriver'</span>),\n    By = webdriver.By,\n    until = webdriver.until;\n\n<span class=\"hljs-keyword\">var</span> driver = <span class=\"hljs-keyword\">new</span> webdriver.Builder()\n    .forBrowser(<span class=\"hljs-string\">'firefox'</span>)\n    .build();\n\ndriver.get(<span class=\"hljs-string\">'https://www.baidu.com/'</span>);\ndriver.findElement(By.id(<span class=\"hljs-string\">'kw'</span>)).sendKeys(<span class=\"hljs-string\">'123'</span>);\ndriver.findElement(By.id(<span class=\"hljs-string\">'su'</span>)).click();\ndriver.wait(until.titleIs(<span class=\"hljs-string\">'百度一下，你就知道'</span>), <span class=\"hljs-number\">1000</span>);\ndriver.quit();</code></pre>\n</section><section><h2 id=\"3655543983\">参考学习</h2><p><a href=\"https://www.douban.com/note/334051223/\">为什么要做测试？karma的使用</a></p>\n<p><a href=\"https://github.com/tmallfe/tmallfe.github.io/issues/37\">https://github.com/tmallfe/tmallfe.github.io/issues/37</a></p>\n<p><a href=\"http://www.jianshu.com/p/6726c0410650\">http://www.jianshu.com/p/6726c0410650</a></p>\n<p><a href=\"http://taobaofed.org/blog/2016/01/08/karma-origin/\">http://taobaofed.org/blog/2016/01/08/karma-origin/</a></p>\n<p><a href=\"https://www.cnblogs.com/wangmeijian/p/9080188.html\">像素级对比、快照 测试</a></p>\n"})
window['cb_reactjs']({"outline":[{"id":"4200091664","level":1,"name":"hook","children":[{"id":"2200779849","level":2,"name":"useState 创建响应属性","children":[]},{"id":"3677281820","level":2,"name":"useEffect 副效应","children":[{"id":"2792449676","level":3,"name":"作用","children":[]},{"id":"2986483911","level":3,"name":"示例","children":[]}]},{"id":"3824536892","level":2,"name":"useContext 状态共享","children":[]},{"id":"3852944131","level":2,"name":"useEffect ??","children":[]},{"id":"1285955236","level":2,"name":"useCallback ??","children":[]},{"id":"130083584","level":2,"name":"props","children":[]},{"id":"2261433526","level":2,"name":"自定义 hook","children":[]},{"id":"187687413","level":2,"name":"问题","children":[{"id":"4189221449","level":3,"name":"每次状态改变，函数都会执行吗？","children":[]}]}]},{"id":"1952791075","level":1,"name":"ts 类型","children":[{"id":"3938257325","level":2,"name":"函数式组件","children":[]}]},{"id":"78757009","level":1,"name":"问题","children":[{"id":"1343434139","level":2,"name":"Form.Item 写法","children":[]},{"id":"502369306","level":2,"name":"改变数组中某成员对象属性时，如何触发更新","children":[]},{"id":"3879242745","level":2,"name":"hook 希望能够初始化一部分变量，而不是每次数据更新都重新初始化","children":[]},{"id":"2411637027","level":2,"name":"属于 hook 自己的 data 在哪里？","children":[]},{"id":"1180614292","level":2,"name":"生命周期","children":[]},{"id":"1574535016","level":2,"name":"只属于组件的属性方法","children":[]}]}],"content":"<section><h1 id=\"4200091664\">hook</h1><section><h2 id=\"2200779849\">useState 创建响应属性</h2><p>代替 <code>this</code> 保存当前组件的状态</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index.less'</span>\n<span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">IndexPage</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onClick</span>(<span class=\"hljs-params\"></span>) </span>{\n    setCount(count + <span class=\"hljs-number\">1</span>)\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{styles.title}</span>&gt;</span>Page index {count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}</code></pre>\n</section><section><h2 id=\"3677281820\">useEffect 副效应</h2><section><h3 id=\"2792449676\">作用</h3><ol>\n<li>每次状态改变都会执行</li>\n<li>也可当某属性改变后才执行</li>\n</ol>\n</section><section><h3 id=\"2986483911\">示例</h3><pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> React, { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Welcome</span>(<span class=\"hljs-params\">props</span>) </span>{\n  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'只要发生改变这里就会执行'</span>)\n    <span class=\"hljs-built_in\">document</span>.title = <span class=\"hljs-string\">'加载完成'</span>\n  })\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, {props.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\n}</code></pre>\n</section></section><section><h2 id=\"3824536892\">useContext 状态共享</h2><pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> React, { useState, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n\n<span class=\"hljs-keyword\">const</span> colorContext = React.createContext(<span class=\"hljs-string\">''</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Bar</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> color = useContext(colorContext)\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color</span> }}&gt;</span>{color}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> &lt;Bar /&gt;\n}\nexport default function App() {\n  const [color, setColor] = useState('red')\n  function click() {\n    setColor(color === 'grey' ? 'red' : 'grey')\n  }\n  return (\n    &lt;colorContext.Provider value={color}&gt;\n      &lt;Foo /&gt;\n      &lt;button onClick={click}&gt;改变&lt;/button&gt;\n    &lt;/colorContext.Provider&gt;\n  )\n}</code></pre>\n</section><section><h2 id=\"3852944131\">useEffect ??</h2><p>参数 2 到底时怎么一回事？？</p>\n<p>真的能实现 watch 吗？？</p>\n</section><section><h2 id=\"1285955236\">useCallback ??</h2></section><section><h2 id=\"130083584\">props</h2><p>可以把 props 看出标签属性集，跟 vue 一样</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n\ntype WelcomeProps = {\n  name?: string\n}\n\n<span class=\"hljs-keyword\">const</span> Welcome: React.FC&lt;WelcomeProps&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =&gt;</span> {\n  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">document</span>.title = <span class=\"hljs-string\">'加载完成'</span>\n  })\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, {props.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> [name, setName] = useState(<span class=\"hljs-string\">'Jo'</span>)\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">click</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// eslint-disable-next-line no-bitwise</span>\n    setName(<span class=\"hljs-string\">`Jo<span class=\"hljs-subst\">${~~(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">100</span>)}</span>`</span>)\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    &lt;&gt;\n      &lt;button onClick={click}&gt;test&lt;/button&gt;\n      &lt;Welcome name={name} /&gt;\n    &lt;/&gt;\n  )\n}</code></pre>\n</section><section><h2 id=\"2261433526\">自定义 hook</h2><p>也就是 hook 封装以及调用。</p>\n<p>看上去就是函数，只是有些写法约定</p>\n</section><section><h2 id=\"187687413\">问题</h2><section><h3 id=\"4189221449\">每次状态改变，函数都会执行吗？</h3><p>函数重新执行后状态会重置成初始值吗？</p>\n<pre><code class=\"language-jsx\">import React, { useState } from <span class=\"hljs-string\">'react'</span>\n\n<span class=\"hljs-keyword\">function</span> useTest(): [number, React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt;] {\n  const [count, setCount] = useState(0)\n  console.log(<span class=\"hljs-string\">'这里每次渲染都会执行，但状态保存了'</span>, count)\n  <span class=\"hljs-built_in\">return</span> [count, setCount]\n}\n\n<span class=\"hljs-built_in\">export</span> default ({ title }: { title: string }) =&gt; {\n  const [count, setCount] = useTest()\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">onClick</span></span>() {\n    setCount(Math.random())\n  }\n\n  <span class=\"hljs-built_in\">return</span> (\n    &lt;div&gt;\n      &lt;h1&gt;{title}&lt;/h1&gt;\n      &lt;p&gt;{count}&lt;/p&gt;\n      &lt;button onClick={onClick}&gt;<span class=\"hljs-built_in\">test</span>&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}</code></pre>\n</section></section></section><section><h1 id=\"1952791075\">ts 类型</h1><section><h2 id=\"3938257325\">函数式组件</h2><pre><code class=\"language-tsx\">type WelcomeProps = {\n  name?: string;\n};\n\n<span class=\"hljs-keyword\">const</span> Welcome: React.FC&lt;WelcomeProps&gt; = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =&gt;</span> {\n  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">document</span>.title = <span class=\"hljs-string\">\"加载完成\"</span>;\n  });\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello, {props.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;\n};</code></pre>\n</section></section><section><h1 id=\"78757009\">问题</h1><section><h2 id=\"1343434139\">Form.Item 写法</h2><p><a href=\"https://link.segmentfault.com/?enc=gMAoRXE4SL2UcQuL0urc3w%3D%3D.w1UDu4zg9SSt7Z64MqMrkcGmNIcBEIexSu3e5fvqJ3MtIB9FgEUQqsFwnFIhbOd31ro9RXC7G9DhfADuurgACg%3D%3D\">http://facebook.github.io/react/docs/jsx-in-depth.html</a></p>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> { Form, Input, Button, Checkbox } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'antd'</span>\n<span class=\"hljs-keyword\">const</span> Demo = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Input</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form.Item</span>&gt;</span>\n  )\n}</span></code></pre>\n</section><section><h2 id=\"502369306\">改变数组中某成员对象属性时，如何触发更新</h2></section><section><h2 id=\"3879242745\">hook 希望能够初始化一部分变量，而不是每次数据更新都重新初始化</h2></section><section><h2 id=\"2411637027\">属于 hook 自己的 data 在哪里？</h2><p>状态改变，hook 函数执行，useState 重新调用？？那状态被保存在哪里了？？</p>\n</section><section><h2 id=\"1180614292\">生命周期</h2></section><section><h2 id=\"1574535016\">只属于组件的属性方法</h2>"})
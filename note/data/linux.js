window['cb_linux']({"outline":[{"id":"3557334946","level":1,"name":"软件工具","children":[{"id":"461042694","level":2,"name":"<a href=\"https://github.com/Unitech/pm2\">pm2</a> 多进程运行","children":[]}]},{"id":"795695517","level":1,"name":"nodejs 环境变量","children":[]},{"id":"1653542776","level":1,"name":"linux 安装 npm","children":[]},{"id":"1140511805","level":1,"name":"linux 安装 curl","children":[]},{"id":"2113593575","level":1,"name":"命令行快捷键","children":[]},{"id":"1198551733","level":1,"name":"root 用户切换","children":[]},{"id":"4147401250","level":1,"name":"Linux环境变量和符号链接","children":[]},{"id":"3864495863","level":1,"name":"nginx 部署","children":[{"id":"886496231","level":2,"name":"编译安装步骤","children":[{"id":"1325685627","level":3,"name":"下载","children":[]},{"id":"379898771","level":3,"name":"编译安装","children":[]}]},{"id":"3717525662","level":2,"name":"依赖库 zlib, pcre, openssl","children":[]},{"id":"3293437970","level":2,"name":"可能需要","children":[]},{"id":"698729315","level":2,"name":"多个location指向不同的本地目录","children":[]},{"id":"570576886","level":2,"name":"将所有请求指向一个页面","children":[]},{"id":"2315544552","level":2,"name":"nginx.confg","children":[]}]},{"id":"4261443925","level":1,"name":"nodejs 部署","children":[{"id":"1769640630","level":2,"name":"安装","children":[{"id":"1134084258","level":3,"name":"简单安装(使用编译好的二进制包)","children":[{"id":"1638105263","level":4,"name":"设置全局访问","children":[]}]},{"id":"3170607037","level":3,"name":"编译安装步骤 (编译时间太长，不推荐。。。直接使用二进制包吧)","children":[{"id":"3873429106","level":4,"name":"下载","children":[]},{"id":"186565272","level":4,"name":"编译安装","children":[]}]}]},{"id":"3951900617","level":2,"name":"使用 pm2 管理 node 服务","children":[]}]},{"id":"830686041","level":1,"name":"Shadowsocks 部署","children":[{"id":"2496504822","level":2,"name":"ubuntu 安装","children":[]},{"id":"4064779513","level":2,"name":"直接运行","children":[]},{"id":"2347762062","level":2,"name":"config.json 方式","children":[]},{"id":"3788470973","level":2,"name":"开机启动","children":[]}]},{"id":"1083386091","level":1,"name":"vim 命令","children":[{"id":"3728735666","level":2,"name":"保存和退出","children":[]},{"id":"3266169748","level":2,"name":"撤销反撤销","children":[]}]},{"id":"3172948098","level":1,"name":"_常用命令汇总","children":[{"id":"486784988","level":2,"name":"搜索","children":[]},{"id":"2470463600","level":2,"name":"文件夹 - 创建","children":[]},{"id":"2045980078","level":2,"name":"文件夹 - 重命名","children":[]},{"id":"3806802426","level":2,"name":"删除","children":[]},{"id":"272223172","level":2,"name":"进程、端口","children":[]},{"id":"1569312561","level":2,"name":"tar 解压缩","children":[]}]},{"id":"4014409210","level":1,"name":"一些问题","children":[]},{"id":"3244591075","level":1,"name":"工具使用","children":[{"id":"1049455938","level":2,"name":"wget 下载工具","children":[]},{"id":"2304402852","level":2,"name":"gcc 编译工具","children":[]},{"id":"881566905","level":2,"name":"apt 包管理器","children":[]}]},{"id":"1542187451","level":1,"name":"系统目录说明","children":[]}],"content":"<section><h1 id=\"3557334946\">软件工具</h1><section><h2 id=\"461042694\"><a href=\"https://github.com/Unitech/pm2\">pm2</a> 多进程运行</h2><pre><code class=\"language-sh\">pm2 start http-server -- <span class=\"hljs-regexp\">/usr/</span>website</code></pre>\n</section></section><section><h1 id=\"795695517\">nodejs 环境变量</h1><p><a href=\"https://www.jianshu.com/p/4125b3672baf\">ubuntu安装及配置nodejs</a></p>\n<p>export NODE_HOME=/usr/local/nodejs<br>export PATH=$PATH:$NODE_HOME/bin<br>export NODE_PATH=$NODE_HOME/lib/node_modules</p>\n<p>软链接方式：</p>\n<pre><code class=\"language-sh\">sudo ln -s /usr/<span class=\"hljs-built_in\">local</span>/nodejs/bin/node /usr/<span class=\"hljs-built_in\">local</span>/bin/node\nsudo ln -s /usr/<span class=\"hljs-built_in\">local</span>/nodejs/bin/npm /usr/<span class=\"hljs-built_in\">local</span>/bin/npm</code></pre>\n</section><section><h1 id=\"1653542776\">linux 安装 npm</h1><p>curl <a href=\"http://npmjs.org/install.sh\">http://npmjs.org/install.sh</a> | sudo sh</p>\n</section><section><h1 id=\"1140511805\">linux 安装 curl</h1><p>sudo apt-get install curl</p>\n</section><section><h1 id=\"2113593575\">命令行快捷键</h1><p><a href=\"https://www.cnblogs.com/aslongas/p/5899586.html\">https://www.cnblogs.com/aslongas/p/5899586.html</a></p>\n<p>ctrl+a   ctrl+e   分别代表把管标移动到最前和最后</p>\n<p>ctrl+u   ctrl+k   分别代表光标处往前和光标处往后删除</p>\n<p>移动光标\nCtrl – a ：移到行首\nCtrl – e ：移到行尾\nCtrl – b ：往回(左)移动一个字符\nCtrl – f ：往后(右)移动一个字符\nAlt – b ：往回(左)移动一个单词\nAlt – f ：往后(右)移动一个单词\nCtrl – xx ：在命令行尾和光标之间移动\nM-b ：往回(左)移动一个单词\nM-f ：往后(右)移动一个单词</p>\n</section><section><h1 id=\"1198551733\">root 用户切换</h1><p>设置密码</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-attribute\">sudo</span> passwd root</code></pre>\n<p>切换</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attribute\">su</span> root</code></pre>\n<p>xshell 无法使用 root 登录问题</p>\n<ol>\n<li>修改 <code>/etc/ssh/sshd_config</code> 文件，把 <code>PermitRootLogin Prohibit-password</code> 添加#注释掉</li>\n<li>新添加：<code>PermitRootLogin yes</code></li>\n<li>重启ssh服务 <code>/etc/init.d/ssh restart</code></li>\n</ol>\n</section><section><h1 id=\"4147401250\">Linux环境变量和符号链接</h1><p><a href=\"https://www.jianshu.com/p/ac17d8a3d0c4\">https://www.jianshu.com/p/ac17d8a3d0c4</a></p>\n</section><section><h1 id=\"3864495863\">nginx 部署</h1><p>此处使用的系统是 Ubuntu Server 16.04.6 LTS 64位</p>\n<p>参考文档</p>\n<p><a href=\"https://blog.csdn.net/niceliusir/article/details/81048373\">Ubuntu Server 16.04.1 LTS 64位安装 Nginx 以及简单应用</a></p>\n<p><a href=\"https://nginx.org/en/docs/configure.html\">二进制安装官方配置文档</a></p>\n<p><a href=\"https://www.qdskill.com/information/8426.html\">Nginx与前端开发</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/wecUdGnuHdZOs3t7zc16jw\">前端必备！最全nginx技术分析 - 前端之巅</a></p>\n<section><h2 id=\"886496231\">编译安装步骤</h2><section><h3 id=\"1325685627\">下载</h3><p><a href=\"https://nginx.org/en/download.html\">从官网拿最新的下载地址</a></p>\n<pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 下载</span>\n<span class=\"hljs-attribute\">wget</span> https://nginx.org/download/nginx-1.14.2.tar.gz\n<span class=\"hljs-comment\"># 解压缩</span>\ntar -xzvf nginx-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">14</span>.<span class=\"hljs-number\">2</span>.tar.gz\n<span class=\"hljs-comment\"># 重命名</span>\nmv nginx-<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">14</span>.<span class=\"hljs-number\">2</span> nginx</code></pre>\n</section><section><h3 id=\"379898771\">编译安装</h3><pre><code class=\"language-sh\"># 配置（这条命令在解压后的Nginx目录下执行，/usr/local/nginx 为安装路径）(可能需要安装 gcc)\nsudo ./configure --user=www --group=www --prefix=<span class=\"hljs-regexp\">/usr/</span>local/nginx --<span class=\"hljs-keyword\">with</span>-http_stub_status_module --<span class=\"hljs-keyword\">with</span>-http_ssl_module --<span class=\"hljs-keyword\">with</span>-http_realip_module\n# 编译 (可能需要安装 make)\nsudo make\n# 安装\nsudo make install</code></pre>\n</section></section><section><h2 id=\"3717525662\">依赖库 zlib, pcre, openssl</h2><p><a href=\"https://blog.csdn.net/z920954494/article/details/52132125\">ubuntu下安装nginx时依赖库zlib，pcre，openssl安装方法</a></p>\n<p>http_rewrite_module 需要 PCRE library</p>\n<pre><code class=\"language-sh\">sudo apt-<span class=\"hljs-keyword\">get</span> install libpcre3 libpcre3-dev</code></pre>\n<p>http_ssl_module 需要 OpenSSL library</p>\n<pre><code class=\"language-sh\">sudo apt-<span class=\"hljs-keyword\">get</span> install openssl libssl-dev</code></pre>\n</section><section><h2 id=\"3293437970\">可能需要</h2><p>安装编译工具</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 安装 gcc，编译器</span>\n<span class=\"hljs-attribute\">sudo</span> apt install gcc\n<span class=\"hljs-comment\"># 安装 make，编译执行</span>\nsudo apt install make</code></pre>\n<p>新建用户和用户组</p>\n<pre><code class=\"language-sh\">/usr/sbin/groupadd -f www\n/usr/sbin/useradd -g www www</code></pre>\n</section><section><h2 id=\"698729315\">多个location指向不同的本地目录</h2><p>一个server中配置多个location指向不同的本地目录</p>\n<p>参考文档：<a href=\"http://daimin.github.io/posts/Nginx-zhong-yi-ge-server-pei-zhi-duo-ge.html\">Nginx中一个server配置多个location | 茶瓯葱丝</a></p>\n<pre><code class=\"language-nginxconf\"><span class=\"hljs-attribute\">location</span> / {\n    <span class=\"hljs-attribute\">root</span>   E:/github/my-note-build/dist;\n    <span class=\"hljs-attribute\">index</span>  index.html index.htm;\n}\n<span class=\"hljs-comment\"># 其他目录需使用别名</span>\n<span class=\"hljs-attribute\">location</span> /docs {\n    <span class=\"hljs-attribute\">alias</span>   D:/_work/oa-mobile/projects/_docs/dist;\n    <span class=\"hljs-attribute\">index</span>  index.html index.htm;\n}</code></pre>\n</section><section><h2 id=\"570576886\">将所有请求指向一个页面</h2><p>当然是404情况才指向此页面</p>\n<p>有两种方式</p>\n<pre><code class=\"language-nginxconf\"><span class=\"hljs-comment\"># 方式 1，通过 try_files</span>\n<span class=\"hljs-attribute\">location</span> / {\n    <span class=\"hljs-attribute\">root</span>   E:/github/my-note-build/dist;\n    <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> <span class=\"hljs-variable\">$uri</span>/ /index.html;\n}\n\n<span class=\"hljs-comment\"># 方式 2，通过重定向 404</span>\n<span class=\"hljs-attribute\">error_page</span> <span class=\"hljs-number\">404</span> =<span class=\"hljs-number\">200</span> /index.html;</code></pre>\n</section><section><h2 id=\"2315544552\">nginx.confg</h2><p>位置：nginx/conf/nginx.conf</p>\n<p><a href=\"https://www.cnblogs.com/netsa/p/6383094.html\">nginx 常见正则匹配符号表示</a></p>\n<ul>\n<li>~ 为区分大小写匹配</li>\n<li>~* 为不区分大小写匹配</li>\n<li>!<del>和!</del>*分别为区分大小写不匹配及不区分大小写不匹配</li>\n</ul>\n<pre><code class=\"language-nginxconf\">\n<span class=\"hljs-attribute\">user</span>  www www;\n<span class=\"hljs-attribute\">worker_processes</span>  <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-comment\">#error_log  logs/error.log;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  notice;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  info;</span>\n\n<span class=\"hljs-comment\">#pid        logs/nginx.pid;</span>\n\n\n<span class=\"hljs-section\">events</span> {\n    <span class=\"hljs-attribute\">worker_connections</span>  <span class=\"hljs-number\">1024</span>;\n}\n\n\n<span class=\"hljs-section\">http</span> {\n    <span class=\"hljs-comment\"># 设置mime类型，类型由mime.type文件定义</span>\n    <span class=\"hljs-attribute\">include</span>       mime.types;\n    <span class=\"hljs-attribute\">default_type</span>  application/octet-stream;\n\n    <span class=\"hljs-comment\"># 设定日志格式</span>\n    <span class=\"hljs-comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n    <span class=\"hljs-comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span>\n    <span class=\"hljs-comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span>\n\n    <span class=\"hljs-comment\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"hljs-comment\"># sendfile指令指定Nginx是否调用sendfile函数（zero copy方式）来输出文件，对于普通应用，必须设定为on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的uptime</span>\n    <span class=\"hljs-attribute\">sendfile</span>        <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-comment\">#tcp_nopush     on;</span>\n\n    <span class=\"hljs-comment\"># 设置超时时间</span>\n    <span class=\"hljs-comment\">#keepalive_timeout  0;</span>\n    <span class=\"hljs-attribute\">keepalive_timeout</span>  <span class=\"hljs-number\">65</span>;\n\n    <span class=\"hljs-attribute\">gzip</span>  <span class=\"hljs-literal\">on</span>; <span class=\"hljs-comment\"># 开启gzip压缩</span>\n\n    <span class=\"hljs-section\">server</span> {\n        <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span>;  <span class=\"hljs-comment\"># Nginx的监听端口</span>\n        <span class=\"hljs-attribute\">server_name</span>  localhost;  <span class=\"hljs-comment\"># 访问Nginx服务器的域名</span>\n\n        <span class=\"hljs-comment\"># 编码设置</span>\n        <span class=\"hljs-comment\">#charset koi8-r;</span>\n\n        <span class=\"hljs-comment\"># 设定虚拟主机的访问日志</span>\n        <span class=\"hljs-comment\">#access_log  logs/host.access.log  main;</span>\n\n        <span class=\"hljs-attribute\">location</span> / {\n            <span class=\"hljs-attribute\">root</span>   html; <span class=\"hljs-comment\"># 前端项目入口文件的路径</span>\n            <span class=\"hljs-attribute\">index</span>  index.html index.htm; <span class=\"hljs-comment\"># 前端入口文件为index.html</span>\n        }\n\n        <span class=\"hljs-attribute\">location</span> /api {  <span class=\"hljs-comment\"># 凡是以/api开头的http请求都会被下面的服务器处理</span>\n            <span class=\"hljs-attribute\">proxy_pass</span>  https://127.0.0.1:3000;  <span class=\"hljs-comment\"># 被代理的服务器的域名</span>\n            <span class=\"hljs-attribute\">proxy_redirect</span>     <span class=\"hljs-literal\">off</span>;\n            <span class=\"hljs-attribute\">proxy_set_header</span>   Host             <span class=\"hljs-variable\">$host</span>;\n            <span class=\"hljs-attribute\">proxy_set_header</span>   X-Real-IP        <span class=\"hljs-variable\">$remote_addr</span>;\n            <span class=\"hljs-attribute\">proxy_set_header</span>   X-Forwarded-For  <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n        }\n\n        <span class=\"hljs-comment\"># 静态文件交给Nginx直接处理</span>\n        <span class=\"hljs-comment\">#location ~* ^.+\\.(css|js|txt|swf|mp4)$ {</span>\n        <span class=\"hljs-comment\">#location ~ /public { # 这样应该更好 /public 下是所有的静态资源</span>\n        <span class=\"hljs-comment\">#    root E:/web/public; # 注意，不能是反斜杠(\\)</span>\n        <span class=\"hljs-comment\">#    access_log off;</span>\n        <span class=\"hljs-comment\">#    expires 24h;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-attribute\">error_page</span>  <span class=\"hljs-number\">404</span>              /<span class=\"hljs-number\">404</span>.html;\n\n        <span class=\"hljs-comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-attribute\">error_page</span>   <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">502</span> <span class=\"hljs-number\">503</span> <span class=\"hljs-number\">504</span>  /50x.html;\n        <span class=\"hljs-attribute\">location</span> = /50x.html {\n            <span class=\"hljs-attribute\">root</span>   html;\n        }\n\n        <span class=\"hljs-comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ \\.php$ {</span>\n        <span class=\"hljs-comment\">#    root           html;</span>\n        <span class=\"hljs-comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"hljs-comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"hljs-comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"hljs-comment\">#    include        fastcgi_params;</span>\n        <span class=\"hljs-comment\">#}</span>\n\n        <span class=\"hljs-comment\"># deny access to .htaccess files, if Apache's document root</span>\n        <span class=\"hljs-comment\"># concurs with nginx's one</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\">#location ~ /\\.ht {</span>\n        <span class=\"hljs-comment\">#    deny  all;</span>\n        <span class=\"hljs-comment\">#}</span>\n    }\n\n    <span class=\"hljs-comment\"># 多个server，可实现同一个端口，多个域名</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       80;</span>\n    <span class=\"hljs-comment\">#    #域名</span>\n    <span class=\"hljs-comment\">#    server_name  blog.huruji3.com;</span>\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        #node.js应用的端口</span>\n    <span class=\"hljs-comment\">#        proxy_pass http://127.0.0.1:3001;</span>\n    <span class=\"hljs-comment\">#        root blog;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n    <span class=\"hljs-comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       8000;</span>\n    <span class=\"hljs-comment\">#    listen       somename:8080;</span>\n    <span class=\"hljs-comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n\n    <span class=\"hljs-comment\"># HTTPS server</span>\n    <span class=\"hljs-comment\">#</span>\n    <span class=\"hljs-comment\">#server {</span>\n    <span class=\"hljs-comment\">#    listen       443 ssl;</span>\n    <span class=\"hljs-comment\">#    server_name  localhost;</span>\n\n    <span class=\"hljs-comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"hljs-comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"hljs-comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"hljs-comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"hljs-comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"hljs-comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"hljs-comment\">#    location / {</span>\n    <span class=\"hljs-comment\">#        root   html;</span>\n    <span class=\"hljs-comment\">#        index  index.html index.htm;</span>\n    <span class=\"hljs-comment\">#    }</span>\n    <span class=\"hljs-comment\">#}</span>\n\n}\n</code></pre>\n</section></section><section><h1 id=\"4261443925\">nodejs 部署</h1><section><h2 id=\"1769640630\">安装</h2><section><h3 id=\"1134084258\">简单安装(使用编译好的二进制包)</h3><p><a href=\"https://www.jianshu.com/p/4125b3672baf\">ubuntu安装及配置nodejs</a></p>\n<p><a href=\"https://blog.csdn.net/yuwujian1992/article/details/74075099\">Linux(ubuntu16.04)下安装nodejs及配置环境变量</a></p>\n<p><a href=\"https://nodejs.org/en/download/\">从官网拿最新的下载地址</a></p>\n<pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 下载</span>\n<span class=\"hljs-attribute\">wget</span> -P /home/jony https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz\n<span class=\"hljs-comment\"># 解压缩</span>\nxz -d node-v10.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">3</span>.tar.xz\ntar -xvf node-v10.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">3</span>.tar\n<span class=\"hljs-comment\"># 重命名</span>\nmv node-v10.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">3</span>-linux-x64 nodejs\n\n</code></pre>\n<section><h4 id=\"1638105263\">设置全局访问</h4><p><strong>环境变量方式</strong></p>\n<pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 要修改的配置文件，二选一，root 用户肯定是全局配置，其他用户全局配置是否有效，待测</span>\nvim /etc/profile  <span class=\"hljs-comment\">#全局环境变量配置文件</span>\nvim ~/.bashrc  <span class=\"hljs-comment\">#当前用户环境变量配置文件</span>\n\n<span class=\"hljs-comment\">#node</span>\n<span class=\"hljs-built_in\">export</span> NODE_HOME=/opt/nodejs\n<span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$NODE_HOME</span>/bin:<span class=\"hljs-variable\">$PATH</span>\n\n<span class=\"hljs-comment\">#npm</span>\n<span class=\"hljs-built_in\">export</span> NODE_PATH=<span class=\"hljs-variable\">$NODE_HOME</span>/lib/node_modules\n\n<span class=\"hljs-comment\"># 二选一</span>\n<span class=\"hljs-built_in\">source</span> /etc/profile\nvim ~/.bashrc</code></pre>\n<p><strong>软连接方式</strong> - 不推荐，安装的全局软件又要单独设置</p>\n<pre><code class=\"language-sh\">sudo ln -s /usr/<span class=\"hljs-built_in\">local</span>/nodejs/bin/node /usr/<span class=\"hljs-built_in\">local</span>/bin/node\nsudo ln -s /usr/<span class=\"hljs-built_in\">local</span>/nodejs/bin/npm /usr/<span class=\"hljs-built_in\">local</span>/bin/npm</code></pre>\n</section></section><section><h3 id=\"3170607037\">编译安装步骤 (编译时间太长，不推荐。。。直接使用二进制包吧)</h3><section><h4 id=\"3873429106\">下载</h4><p><a href=\"https://nodejs.org/en/download/\">从官网拿最新的下载地址</a></p>\n<pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 下载</span>\n<span class=\"hljs-attribute\">wget</span> https://nodejs.org/dist/v10.15.3/node-v10.15.3.tar.gz\n<span class=\"hljs-comment\"># 解压缩</span>\ntar -xzvf node-v10.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">3</span>.tar.gz\n<span class=\"hljs-comment\"># 重命名</span>\nmv node-v10.<span class=\"hljs-number\">15</span>.<span class=\"hljs-number\">3</span> nodejs</code></pre>\n</section><section><h4 id=\"186565272\">编译安装</h4><pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 可能需要安装</span>\n<span class=\"hljs-comment\"># sudo apt-get install gcc g++ make python</span>\n\n<span class=\"hljs-comment\"># 配置（这条命令在解压后的nodejs目录下执行，/usr/local/nodejs/ 为安装目录）</span>\n<span class=\"hljs-attribute\">sudo</span> ./configure --prefix=/usr/local/nodejs\n<span class=\"hljs-comment\"># 编译</span>\nsudo make\n<span class=\"hljs-comment\"># 安装</span>\nsudo make install</code></pre>\n</section></section></section><section><h2 id=\"3951900617\">使用 pm2 管理 node 服务</h2><p><a href=\"https://github.com/Unitech/pm2\">pm2 进程管理工具</a> - 生产环境用</p>\n<p>适用于网站访问量比较大,需要完整的监控界面</p>\n<p>支持异常自动重启</p>\n<p>运行管理多个进程程序</p>\n<p>除了nodejs，还<a href=\"https://pm2.io/doc/en/runtime/guide/process-management/?utm_source=github#manage-any-application-type\">支持其他语言程序</a> </p>\n<pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 运行js</span>\n<span class=\"hljs-attribute\">pm2</span> start app.js\n<span class=\"hljs-comment\"># 支持命令</span>\npm2 start http-server -- /usr/website</code></pre>\n</section></section><section><h1 id=\"830686041\">Shadowsocks 部署</h1><p><a href=\"http://blog.csdn.net/qq_34049853/article/details/76039550\">http://blog.csdn.net/qq_34049853/article/details/76039550</a></p>\n<section><h2 id=\"2496504822\">ubuntu 安装</h2><pre><code><span class=\"hljs-attribute\">apt</span> install python-gevent python-pip python-m2crypto\n\npip install shadowsocks\n</code></pre></section><section><h2 id=\"4064779513\">直接运行</h2><pre><code><span class=\"hljs-attribute\">ssserver</span> -p <span class=\"hljs-number\">3389</span> -k NmVhMTMyNT -m aes-<span class=\"hljs-number\">256</span>-cfb start </code></pre></section><section><h2 id=\"2347762062\">config.json 方式</h2><p>/etc/shadowsocks/config.json</p>\n<pre><code>{\n  <span class=\"hljs-string\">\"server\"</span>: <span class=\"hljs-string\">\"0.0.0.0\"</span>, <span class=\"hljs-comment\">// 不在本机部署才需设置？</span>\n  <span class=\"hljs-string\">\"server_port\"</span>:<span class=\"hljs-number\">3389</span>,\n  <span class=\"hljs-string\">\"password\"</span>:<span class=\"hljs-string\">\"xx\"</span>,\n  <span class=\"hljs-string\">\"timeout\"</span>:<span class=\"hljs-number\">300</span>,\n  <span class=\"hljs-string\">\"method\"</span>:<span class=\"hljs-string\">\"aes-256-cfb\"</span>,\n  <span class=\"hljs-string\">\"fast_open\"</span>:<span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-string\">\"workers\"</span>:<span class=\"hljs-number\">1</span>\n}</code></pre><p>运行</p>\n<pre><code><span class=\"hljs-attribute\">ssserver</span> -c /etc/shadowsocks/config.json start</code></pre><p>加 -d 后台运行</p>\n<pre><code><span class=\"hljs-attribute\">ssserver</span> -c /etc/shadowsocks/config.json -d start</code></pre></section><section><h2 id=\"3788470973\">开机启动</h2><p><a href=\"http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html\">涉及开机启动的文章</a></p>\n<p><a href=\"http://man.linuxde.net/systemctl\">systemctl 命令</a></p>\n<p><strong>创建后台服务文件</strong></p>\n<p>/etc/systemd/system/shadowsocks.service</p>\n<pre><code>[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=<span class=\"hljs-number\">0</span>\nExecStart=<span class=\"hljs-regexp\">/usr/</span>local/bin/ssserver -c /etc/shadowsocks/config.json\n\n[Install]\nWantedBy=multi-user.target</code></pre><p><strong>开机服务启动命令</strong></p>\n<p><a href=\"http://man.linuxde.net/systemctl\">systemctl 命令</a></p>\n<p>启动</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># 激活</span>\n<span class=\"hljs-attribute\">systemctl</span> enable shadowsocks\n<span class=\"hljs-comment\"># 启动</span>\nsystemctl start shadowsocks\n<span class=\"hljs-comment\"># 重启</span>\nsystemctl restart shadowsocks</code></pre>\n<p>查看状态</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># 能看到部分日志</span>\n<span class=\"hljs-attribute\">systemctl</span> status shadowsocks -l</code></pre>\n<p>查看所有日志<br>通过 journalctl + 进程id 查询 方式查询<br>贴上一篇文章：<a href=\"https://blog.csdn.net/zstack_org/article/details/56274966\">如何使用Journalctl查看并操作Systemd日志</a></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># 搜索 ssserver 进程id</span>\n<span class=\"hljs-attribute\">ps</span> -aux | grep ssserver\n\n<span class=\"hljs-comment\"># 查看 id 为 21779，今天的日志</span>\njournalctl _PID=<span class=\"hljs-number\">21779</span> --since today\n<span class=\"hljs-comment\"># 昨天</span>\njournalctl _PID=<span class=\"hljs-number\">21779</span> --since yesterday\n<span class=\"hljs-comment\"># 最近50条</span>\njournalctl _PID=<span class=\"hljs-number\">21779</span> -n <span class=\"hljs-number\">50</span></code></pre>\n</section></section><section><h1 id=\"1083386091\">vim 命令</h1><p><a href=\"https://www.cnblogs.com/yangjig/p/6014198.html\">vim常用命令总结</a></p>\n<section><h2 id=\"3728735666\">保存和退出</h2><p>:w 保存<br>:q 退出<br>ZZ :wq 保存退出<br>ZQ | :q! 不保存退出<br>:w filename 另存为</p>\n</section><section><h2 id=\"3266169748\">撤销反撤销</h2><p>普通模式下</p>\n<p>撤销 <code>u</code></p>\n<p>反撤销 <code>ctrl + r</code></p>\n</section></section><section><h1 id=\"3172948098\">_常用命令汇总</h1><section><h2 id=\"486784988\">搜索</h2><pre><code><span class=\"hljs-attribute\">find</span> / -name ssserver</code></pre></section><section><h2 id=\"2470463600\">文件夹 - 创建</h2><p>在当前目录创建一个 test 文件</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-attribute\">mkdir</span> test</code></pre>\n</section><section><h2 id=\"2045980078\">文件夹 - 重命名</h2><pre><code class=\"language-sh\"><span class=\"hljs-selector-tag\">mv</span> <span class=\"hljs-selector-tag\">nginx-1</span><span class=\"hljs-selector-class\">.14</span><span class=\"hljs-selector-class\">.2</span> <span class=\"hljs-selector-tag\">nginx</span> # 将 <span class=\"hljs-selector-tag\">nginx-1</span><span class=\"hljs-selector-class\">.14</span><span class=\"hljs-selector-class\">.2</span> 命名为 <span class=\"hljs-selector-tag\">nginx</span></code></pre>\n</section><section><h2 id=\"3806802426\">删除</h2><p>支持文件和文件夹</p>\n<pre><code class=\"language-sh\">rm -rf /<span class=\"hljs-keyword\">var</span>/www/nodercms\nrm -rf /<span class=\"hljs-keyword\">var</span>/www/nodercms-old\nrm -rf /<span class=\"hljs-keyword\">var</span>/www/nodercms.tar</code></pre>\n<p>-r 就是向下递归，不管有多少级目录，一并删除\n-f 就是直接强行删除，不作任何提示的意思</p>\n</section><section><h2 id=\"272223172\">进程、端口</h2><p><a href=\"https://www.cnblogs.com/liuzhengliang/p/4609632.html\">Linux查看端口、进程情况及kill进程</a></p>\n<pre><code class=\"language-sh\"><span class=\"hljs-comment\"># 查看进程，过滤 ssserver 关键字</span>\n<span class=\"hljs-attribute\">ps</span> -aux | grep ssserver\n\n<span class=\"hljs-comment\"># 查看端口，过滤 27017 的端口</span>\nnetstat -lanp | grep <span class=\"hljs-string\">\"27017\"</span></code></pre>\n<p>结束进程</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-attribute\">kill</span> <span class=\"hljs-number\">1001</span> <span class=\"hljs-comment\"># 1001 为 pid</span></code></pre>\n</section><section><h2 id=\"1569312561\">tar 解压缩</h2><p>不同的文件类型参数不同</p>\n<pre><code><span class=\"hljs-selector-tag\">xz</span> <span class=\"hljs-selector-tag\">-d</span> <span class=\"hljs-selector-tag\">node-v10</span><span class=\"hljs-selector-class\">.15</span><span class=\"hljs-selector-class\">.3</span><span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.xz</span>\n<span class=\"hljs-selector-tag\">tar</span> <span class=\"hljs-selector-tag\">-xvf</span> <span class=\"hljs-selector-tag\">node-v10</span><span class=\"hljs-selector-class\">.15</span><span class=\"hljs-selector-class\">.3</span><span class=\"hljs-selector-class\">.tar</span>\n<span class=\"hljs-selector-tag\">tar</span> <span class=\"hljs-selector-tag\">-xzvf</span> <span class=\"hljs-selector-tag\">node-v10</span><span class=\"hljs-selector-class\">.15</span><span class=\"hljs-selector-class\">.3</span><span class=\"hljs-selector-class\">.tar</span><span class=\"hljs-selector-class\">.gz</span></code></pre></section></section><section><h1 id=\"4014409210\">一些问题</h1><p><a href=\"https://blog.csdn.net/guozhiyingguo/article/details/52852337\">Ubuntu Server 命令行下的中文乱码(菱形图标）的解决方案</a></p>\n</section><section><h1 id=\"3244591075\">工具使用</h1><section><h2 id=\"1049455938\">wget 下载工具</h2><pre><code><span class=\"hljs-comment\"># 默认下载到当前目录</span>\n<span class=\"hljs-attribute\">wget</span> http://nginx.org/download/nginx-1.14.0.tar.gz</code></pre><p>与 curl 区别：\ncurl由于可自定义各种请求参数所以在模拟web请求方面更擅长；wget由于支持ftp和Recursive所以在下载文件方面更擅长。类比的话curl是浏览器，而wget是迅雷9。</p>\n</section><section><h2 id=\"2304402852\">gcc 编译工具</h2><p>安装</p>\n<pre><code><span class=\"hljs-attribute\">sudo</span> apt install gcc</code></pre><p>查看版本</p>\n<pre><code><span class=\"hljs-attribute\">gcc</span> --version</code></pre></section><section><h2 id=\"881566905\">apt 包管理器</h2></section></section><section><h1 id=\"1542187451\">系统目录说明</h1><p><a href=\"https://blog.csdn.net/longxu0872/article/details/71168340\">Linux系统目录详解</a></p>\n<ol>\n<li>/bin ：获得最小的系统可操作性所需要的命令</li>\n<li>/boot ：内核和加载内核所需的文件</li>\n<li>/dev ：终端、磁盘、调制解调器等的设备项</li>\n<li>/etc ：关键的启动文件和配置文件</li>\n<li>/home ：用户的主目录</li>\n<li>/lib ：C编译器的库和部分C编译器</li>\n<li>/media ：可移动介质上文件系统的安装点</li>\n<li>/opt ：可选的应用安装包</li>\n<li>/proc ：所有正在运行进程的映像</li>\n<li>/root ：超级用户的主目录</li>\n<li>/sbin ：引导、修复或者恢复系统的命令</li>\n<li>/tmp ：每次重新引导就消失的临时文件</li>\n<li>/usr ：次要文件和命令的层次结构</li>\n<li>/usr/bin ：大多数命令和可执行文件</li>\n<li>/usr/include ：编译C程序的头文件</li>\n<li>/usr/lib ：库，供标准程序使用的支持文件</li>\n<li>/usr/local ：本地软件（主要存放那些手动安装的软件，即不是通过“新立得”或apt-get安装的软件。它和/usr目录具有相类似的目录结构。让软件包管理器来管理/usr目录，而把自定义的脚本(scripts)放到/usr/local目录下面）</li>\n<li>/usr/local/bin ：本地的可执行文件</li>\n<li>/usr/local/etc ：本地系统配置文件和命令</li>\n<li>/usr/local/lib ：本地的支持文件</li>\n<li>/usr/local/sbin ：静态链接的本地系统维护命令</li>\n<li>/usr/local/src ：/usr/local/*的源代码</li>\n<li>/usr/man ：联机用户手册</li>\n<li>/usr/sbin不太关键的系统管理命令和修复命令</li>\n<li>/usr/share ：多种系统共同的东西（只读）</li>\n<li>/usr/share/man ：练级用户手册</li>\n<li>/usr/src ：非本地软件包的源代码</li>\n<li>/var ：系统专用数据和配置文件</li>\n<li>/var/adm ：各种不同的东西</li>\n<li>/var/log ：各种系统日志文件</li>\n<li>/var/spool ：供打印机、邮件等使用的假脱机目录</li>\n<li>/var/tmp ：更多的临时空间（在重新引导之后，文件予以保留）</li>\n</ol>\n"})
[{"name":"js","outline":"[\"性能\"]","content":""},{"name":"js","outline":"[\"性能\",\"变量\"]","content":"浏览器解析**局部变量**要比解析**全局变量**快，当然，比**嵌套属性**更快\r\n所以，将全局变量或者嵌套属性赋值为局部变量性能更好\r\n"},{"name":"js","outline":"[\"性能\",\"函数\"]","content":"构造函数中最好不要有函数声明，这样，new 完之后，所占内存应该会被回收\r\n"},{"name":"js","outline":"[\"可隐式转换为 true/ false 的值\"]","content":"**表示false：** undefined、null、NaN、0、''\r\n**表示true：** 其余的都是 true\r\n"},{"name":"js","outline":"[\"调试\"]","content":"可直接代码中 `debugger` 设置断点\r\n"},{"name":"js","outline":"[\"注释约定\"]","content":"参考：https://github.com/tj/dox\r\n/**\n * @example\n *     utils.escape('<script></script>')\n *     // => '&lt;script&gt;&lt;/script&gt;'\n * @method dialog.drag(status)\n * @param {function|string} onStart  可通过 return false 阻止拖动触发\n * @param {function} [onUp] 可选。 可通过 return false 阻止拖动触发 \n * @return {String} escaped html\n * */\n\r\n"},{"name":"js","outline":"[\"Ajax(XMLHttpRequest)\"]","content":""},{"name":"js","outline":"[\"Ajax(XMLHttpRequest)\",\"例子说明\"]","content":"var xhr\nif (XMLHttpRequest) {\n  // w3c标准创建方式。ie7+支持\n  xhr = new XMLHttpRequest();\n} else {\n  // IE5,6创建方式\n  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n}\n\n/*\n * onreadystatechange事件 属性\n *\n * 每当AJAX对象的readyState属性改变时就会调用一次\n * readyState属性的初始值为0。表示 请求未初始化\n */\nfunction readystatechange () {\n  if (xhr.readyState === 1) {\n    console.log(\"服务器连接已建立\")\n  } else if (xhr.readyState === 2) {\n    console.log(\"请求已接收\")\n  } else if (xhr.readyState === 3) {\n    console.log(\"请求处理中\")\n  }\n  /**\n   * 4表示响应数据已到达浏览器端;200表示 正确的响应结果;404表示页面未找到\n   *\n   * 在此处 处理响应的结果\n   * 调用AJAX对象的responseText属性来获取响应的文本格式数据\n   * 还有一个属性 responseXML ，待测\n   *\n   */\n else if (xhr.readyState === 4) {\n   if (xhr.status === 200) {\n     // 如果不指定 responseType ,默认 text 格式！！！\n      var response = xhr.response\n      // console.log(xhr.responseText)\n      // console.log(xhr.responseXML)\n\n      // android 4.4以下，ajax不会根据后台响应要求自动转换 json为对象。所以只能手动转换\n      if (responseType === 'json' && typeof response === 'string') {\n        console.log(JSON.parse(response))\n      } else {\n        console.log(response)\n      }\n    } else {\n      console.error(xhr)\n    }\n    console.log('complete')\n  }\n}\n// 华为安卓机总是用老浏览器内核，设置 responseType 会报错\ntry {\n  xhr.responseType = 'json'\n  xhr.onreadystatechange = readystatechange\n} catch (e) {\n  xhr.onload = readystatechange\n}\n\n\n/*\n指定提交的数据格式(可选)\n默认 text/plain\n\n相当于form表单的enctype标签属性。但不能指定为 multipart/form-data。即使指定了也无效(变成默认的text/plain)\n\n可设置的值，竖线后为 send 对应的值格式：\ntext/plain | 文本\napplication/json | '{ \"k\" : \"v\" }'\napplication/x-www-form-urlencoded | 'name=value&n2=v2'\n\n值后面可指定编码格式\n */\nxhr.setRequestHeader(\"Content-type\", \"application/json;charset=utf-8\");\n\nxhr.open(\"post\", \"/Default.aspx\")\n\n/*\n执行提交\n\n参数即提交的数据，如果是get方式，填写null即可\n\n参数格式与 Content-type 对应\n*/\n\najaxObj.send(JSON.stringify({data: '测试数据'}));\n\r\n"},{"name":"js","outline":"[\"Ajax(XMLHttpRequest)\",\"xhr.responseType\"]","content":"指定响应的数据类型。  \n服务器可据此作出相应处理，返回指定类型。  \n浏览器会据此将数据解析成指定类型对象，可通过xhr.response获取\r\n"},{"name":"js","outline":"[\"Ajax(XMLHttpRequest)\",\"xhr.response\"]","content":"获取响应的数据，通过responseType指定类型\r\n"},{"name":"js","outline":"[\"Ajax(XMLHttpRequest)\",\"兼容性问题\"]","content":""},{"name":"js","outline":"[\"Ajax(XMLHttpRequest)\",\"兼容性问题\",\"不支持responseType、onreadystatechange\"]","content":"**浏览器版本：**  \n`AppleWebKit/534.30  Version/4.0; Android 7.0; HUAWEINXT-AL10`\n没错，这是安卓7.0，关键是一部华为机，所以就坑爹了，弄个这么低版本内置浏览器，阻碍世界发展\r\n华为安卓7.0贴上完整的版本信息：chrome 版本都没有。。。坑\n5.0 (Linux; Android 7.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\r\n**不支持：**\r\nxhr.responseType = \"json\"\r\n同时onreadystatechange事件也有问题(只会触发一次，且xhr.readyState为1)，需使用onload代替，目前如下解决\r\nfunction readystatechange(){ }\ntry {\n    xhr.responseType = \"json\";\n    xhr.onreadystatechange = readystatechange;\n}\ncatch( e ) {\n    xhr.onload = readystatechange;\n}\r\n"},{"name":"js","outline":"[\"Ajax(XMLHttpRequest)\",\"兼容性问题\",\"不支持自动转JSON为对象\"]","content":"明明指定了xhr.responseType = \"json\"，指明后台返回json数据，浏览器当然可以直接转对象\r\n**系统版本**  \n`AppleWebKit/537.36 Version/1.5 Chrome/28.0.1500.94 Mobile; Android 4.3; SAMSUNG SM-G3586V`\n这是一部旧的小三星，能支持到这样算不错了，这个版本以下的应该都不支持\r\n**目前如下解决：**\r\nif(typeof response==='string'){\n    success(JSON.parse(response));\n}\nelse{\n    success(response);\n}\n\r\n"},{"name":"js","outline":"[\"console 控制台\"]","content":""},{"name":"js","outline":"[\"console 控制台\",\"耗时查看。\"]","content":"可用来性能测试\r\nconsole.time('small loop');\nfor (var i = 0; i < 100000; i++) {}\nconsole.timeEnd('small loop');\n//small loop: 2.304ms\r\n"},{"name":"js","outline":"[\"console 控制台\",\"分组\"]","content":"console.group(\"程序日志\");\nconsole.log(\"[07:21:36.754\");\nconsole.log(\"[07:21:36.754\");\nconsole.groupEnd();\r\n"},{"name":"js","outline":"[\"console 控制台\",\"换行写法 + 颜色\"]","content":"console.log(\"换\\n行\");\nconsole.log(\"默认部分 %c 红色部分）\", \"color:red\");\nconsole.log(`%c vue-devtools %c Detected Vue v${'2.0.0'} %c`, \"background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff\", \"background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff\", \"background:transparent\")\r\n"},{"name":"js","outline":"[\"Date 时间日期\"]","content":""},{"name":"js","outline":"[\"Date 时间日期\",\"ios \\\"-\\\" 号连接问题\"]","content":"月日必须是2位，\"/\" 没有此问题。Android也没有问题\r\nios版本：iPhone OS 11_0_3 AppleWebKit/604.1.38 Version/11.0 Mobile/15A432 Safari/604.1\r\nnew Date('2017-1-1') // 不支持\nnew Date('2017-01-01') // 支持\r\n"},{"name":"js","outline":"[\"Date 时间日期\",\"取天总数\"]","content":"指定年月, 天的总数\r\n// month 从1 开始\nfunction getDayCount (year, month) {\n  var d = new Date(year, month)\n  d.setDate(0)\n  return d.getDate()\n}\n\r\n"},{"name":"js","outline":"[\"Function 函数\"]","content":""},{"name":"js","outline":"[\"Function 函数\",\"变量、函数提升的区别\"]","content":"函数是完全的提升；\n变量只是 声明提升，赋值运算不会提升\r\nconsole.log(a)\nvar a=1\nconsole.log(a)\nfunction a () {\n    console.log(2)\n}\n\n// 提升后\nvar a\nfunction a () {\n    console.log(4)\n}\nconsole.log(a)\na=1\nconsole.log(a)\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\"]","content":""},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"数位处理\"]","content":""},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"数位处理\",\"去小数\"]","content":""},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"数位处理\",\"去小数\",\"直接去，黑魔法\"]","content":"参数可以使字符串\r\n参数不是数字类型：返回0\r\n返回值类型：number\r\n\nconsole.log(~~12.123) // 12\nconsole.log(~~'-12.123') // -12\nconsole.log(~~num / 2) // num去小数后 在除2。如果是对结果去小数，需加个括号\nconsole.log(~~'-12.123px') // 0 。非数字类型返回0，即 isNaN 为 false 的值\n\nconsole.log('-12.123'^0) // -12\nconsole.log('-12.123'|0) // -12\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"数位处理\",\"去小数\",\"向前取整\"]","content":"正数去小数后加一  \n负数直接去小数\r\nconsole.log(Math.ceil(5.1)) // 6\nconsole.log(Math.ceil('5.1')) // 6。返回 Number 类型\nconsole.log(Math.ceil(-5.1)) // -5\nconsole.log(Math.ceil(5.5)) // 6\nconsole.log(Math.ceil(5.0)) // 5。这种情况不能看成小数\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"数位处理\",\"去小数\",\"向后取整\"]","content":"与 Math.ceil 相反\r\n正数直接去小数  \n负数去小数后减一\r\nconsole.log(Math.floor(5.1)) // 5\nconsole.log(Math.floor('5.1')) // 5。返回 Number 类型\nconsole.log(Math.floor(-5.1)) // -6\nconsole.log(Math.floor(5.5)) // 5\nconsole.log(Math.floor(5.0)) // 5。这种情况不能看成小数\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"数位处理\",\"去小数\",\"四舍五入\"]","content":"console.log(Math.round(5.1)) // 5\nconsole.log(Math.round('5.1')) // 5。返回 Number 类型\nconsole.log(Math.round(-5.1)) // -5\nconsole.log(Math.round(-5.6)) // -6\nconsole.log(Math.round(5.5)) // 6\nconsole.log(Math.round(5.0)) // 5。这种情况不能看成小数\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"数位处理\",\"保留指定位小数\"]","content":"numObj.toFixed([digits])\r\n返回字符串\r\nconsole.log((56.45).toFixed()) // '56'。参数可选，默认0，即去掉所有小数\nconsole.log((56.456).toFixed(2)) // '56.46'。 四舍五入\nconsole.log((56).toFixed(2)) // '56.00'。根据参数固定保留\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"随机数 random\"]","content":"获取 0~1之间的随机数。小数位大概在17位以上。20位以下。\r\ndocument.write(Math.random())\r\n**应用：** 指定范围整数  \r\n// 0~1\n~~(Math.random()*2)\n// 0~5\n~~(Math.random()*6)\n// ...(类推)\n\n// 附上循环测试例子\nfor (var i = 100;i--;) {\n    console.log(~~(Math.random()*6))\n}\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"平方\"]","content":"//参数：必须\nalert(Math.sqrt(9));//3\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"幂/平方\"]","content":"//参数：必须\nalert(Math.pow(3, 2));//9，即3的2次幂\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"平方根，立方根\"]","content":"Math.pow(9, 1/2)//3\nMath.pow(8, 1/3)//2\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"角度 与 弧度\"]","content":"弧度与角度关系：π(弧度)= 180°\r\n1角度 所代表的 弧度 是：` Math.PI / 180`\r\n1弧度 所代表的 角度 是：`180 / Math.PI`\r\n// 角度转弧度：\n// 参数：角度\nfunction radian(angle) {\n    return angle * Math.PI / 180;\n}\n\n// 弧度转角度：\n// 参数：弧度\nfunction angle(radian) {\n    return radian * 180 / Math.PI;\n}\n\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"直角三角形\"]","content":""},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"直角三角形\",\"所有 相关 函数\"]","content":"Math.sin() -- 返回数字的正弦值  \nMath.cos() -- 返回数字的余弦值  \nMath.tan() -- 返回数字的正切值  \nMath.asin() -- 返回数字的反正弦值  \nMath.acos() -- 返回数字的反余弦值  \nMath.atan() -- 返回数字的反正切值  \nMath.atan2() -- 返回由x轴到点(x,y)的角度(以弧度为单位)  \nMath.PI 属性 -- 返回圆的周长与其直径的比值(圆周率π)，约等于3.1415926\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"直角三角形\",\"边的比值-正弦 余弦 正切\"]","content":"Math.sin(r)//正弦\nMath.cos(r)//余弦\nMath.tan(r)//正切\r\n**参数：**  \nnumber类型，弧度值  \n**返回值：**  \nnumber类型，边的比值\r\n**数学知识**  \n正弦：对比斜  \n余弦：邻比斜  \n正切：对比邻\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"直角三角形\",\"角度获取-反正弦 反余弦 反正切\"]","content":"所有代码示例：\r\nMath.asin()\nMath.acos()\nMath.atan()\r\n**参数：**  \n边的比值\r\n**返回值：**  \n弧度值\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"圆\"]","content":""},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"圆\",\"PI\"]","content":"alert(Math.PI);// 3.141592653589793。包括ie6的所有都返回这样一组数\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"绝对值\"]","content":"console.log(Math.abs(-1)) // 1\nconsole.log(Math.abs('-1')) // 1\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"取最大/小值\"]","content":"Math.max(34, 23, 43) // 43\nMath.min(34, 23, 43) // 23\n\n// 可用来取数组最大/小值。通过 apply\nconsole.log(Math.max.apply(Math, [34, 23, 43])); // 43 最大值\n\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"e，某数乘10的n次方\"]","content":"console.log(1e3) // 1000 即1*Math.pow(10, 3)\nconsole.log(2e3) // 2000 即2*Math.pow(10, 3)\r\n"},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"一些应用\"]","content":""},{"name":"js","outline":"[\"Math 数学，Number 处理\",\"一些应用\",\"3点算角度\"]","content":"使用余弦定理\r\n"},{"name":"js","outline":"[\"Object\"]","content":""},{"name":"js","outline":"[\"Object\",\"JSON字符串 -> JS对象\"]","content":"通过 JSON.parse\r\n通过 eval，不推荐\r\nvar objs = eval('({ \"border\": \"2px #0068b7 solid\", \"height\": \"200px\" })');\r\n"},{"name":"js","outline":"[\"Object\",\"删除操作\"]","content":""},{"name":"js","outline":"[\"Object\",\"快速效率查找实现\"]","content":"配合delete，for in，js空对象可做 数据字典，实现快速效率查找\r\n实践：复选框绑定id，复选框对应空对象，空对象中的已有项可定位原数据\r\n"},{"name":"js","outline":"[\"Object\",\"Object.assign() 合并复制\"]","content":""},{"name":"js","outline":"[\"Object\",\"Object.assign() 合并复制\",\"合并\"]","content":"[Object.assign() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\r\n将修改源对象\r\nvar obj = { a: 1 };\nObject.assign(obj, {b:2});\n// obj 对象变了\nconsole.log(obj); // { a: 1, b: 2 }\r\n"},{"name":"js","outline":"[\"Object\",\"Object.assign() 合并复制\",\"复制\"]","content":"var obj = { a: 1 };\nvar copy = Object.assign({}, obj);\nconsole.log(copy); // { a: 1 }\r\n"},{"name":"js","outline":"[\"Object\",\"Object.create() 创建原型对象\"]","content":"将目标对象的属性生成到新对象的原型上去\r\n[Object.create() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\r\nlet obj = Object.create({bar: 123})\nconsole.log(obj.__proto__.bar === 123) // true\r\n"},{"name":"js","outline":"[\"Object\",\"Object.defineProperties() 定义属性的新方式\"]","content":"[Object.defineProperties() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\r\nvar obj = {};\nObject.defineProperties(obj, {\n  'property1': {\n    value: true,\n    writable: true\n  },\n  'property2': {\n    value: 'Hello',\n    writable: false\n  },\n  'fun': {\n    value: function () {},\n    writable: false\n  }\n});\nconsole.log(obj.property2) // Hello\nconsole.log(obj.fun) // 这是一个值为函数的属性\r\n"},{"name":"js","outline":"[\"Object\",\"成员遍历\"]","content":""},{"name":"js","outline":"[\"Object\",\"成员遍历\",\"for...in\"]","content":"包括 **可枚举、原型上** 属性\r\n"},{"name":"js","outline":"[\"Object\",\"成员遍历\",\"Object.keys\"]","content":"包括 **可枚举** 属性  \n不包括 **原型上** 的属性\r\n[Object.keys() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\r\nObject.keys 不包括原型上的属性，for...in 还将枚举原型上的属性\r\nJSON.stringify()：也只串行化对象自身的可枚举的属性\r\n// simple array\nvar arr = ['a', 'b', 'c'];\nconsole.log(Object.keys(arr)); // console: ['0', '1', '2']\n\n// array like object\nvar obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.keys(obj)); // console: ['0', '1', '2']\r\n"},{"name":"js","outline":"[\"Object\",\"成员遍历\",\"getOwnPropertyNames\"]","content":"包括 **可枚举、不可枚举** 属性  \n不包括 **原型上** 的属性\r\nvar obj = {\"name\":\"Poly\", \"career\":\"it\"}\n\n// 此方式将创建一个不可枚举属性\nObject.defineProperty(obj, \"age\", {value:\"forever 18\", enumerable:false});\n\n// 原型属性\nObject.prototype.protoPer1 = function(){console.log(\"proto\");};\nObject.prototype.protoPer2 = 2;\n\nconsole.log(\n  \"Object.getOwnPropertyNames: \",\n  Object.getOwnPropertyNames(obj)); // [\"name\", \"career\", \"age\"]\r\n"},{"name":"js","outline":"[\"String 字符串\"]","content":""},{"name":"js","outline":"[\"String 字符串\",\"取索引\"]","content":"indexOf 从前往后; lastIndexOf 从后往前\r\n什么时候匹配结束：匹配成功便结束，不再继续查找\r\n没有匹配返回值：-1\r\n参数多个字符情况: 返回开头字符索引\r\nvar str = \"helloword\";\n\n//从前往后\nstr.indexOf('ow') // 4\n\n//从后往前\nsrt.lastIndexOf('ow') // 6\r\n"},{"name":"js","outline":"[\"String 字符串\",\"编码、解码\"]","content":""},{"name":"js","outline":"[\"String 字符串\",\"编码、解码\",\"js数据编解码\"]","content":"escape、unescape\n就是完全的编码解码\n兼容性:all\r\n"},{"name":"js","outline":"[\"String 字符串\",\"编码、解码\",\"url参数编码解码\"]","content":"encodeURIComponent decodeURIComponent\n避免#等特殊字符截断\n-_.!~*'()   这些符合是不会被编码解码的\r\n'<a href=\"http://passport.baidu.com/?u='+encodeURIComponent(\"http://cang.baidu.com/bruce42\")+'\">退出</a>';\r\n兼容性:all\r\n"},{"name":"js","outline":"[\"String 字符串\",\"编码、解码\",\"url编码解码\"]","content":"encodeURI decodeURI\n保证有特殊字符的url路径能进行访问，但现在大部分浏览器会自动对未编码的url进行编码(至于哪些浏览器，什么机制，待测)\r\n;/?:@&=+$,#  这些字符不会被编码解码\r\nlocation.href=encodeURI(http://cang.baidu.com/百度存储/do/s?word=xx&ct=21);\r\n兼容性:all\r\n"},{"name":"js","outline":"[\"String 字符串\",\"编码、解码\",\"对应的php编码解码\"]","content":"rawurlencode、rawurldecode对应 encodeURIComponent decodeURIComponent\nurlencode()、urldecode()应该对应？encodeURI decodeURI\r\n"},{"name":"js","outline":"[\"String 字符串\",\"字符串比较\"]","content":"小返回-1，相等返回0，大返回1。可实现排序\r\n'吧'.localeCompare('啊') // 1 。看来是按拼音来的，b比a大\n'asd'.localeCompare('bcd') // -1\n\r\n"},{"name":"js","outline":"[\"String 字符串\",\"空字符串\"]","content":"// length 为 0\nconsole.log(''.length === 0) // true\n\n// 默认转换为0\nconsole.log('' - 23); // 相当于0-23\nconsole.log('' > -1); // true。相当于0>-1\nconsole.log('' === 0) // false\nconsole.log('' == 0); // true\r\n兼容性：all浏览器。包括严格模式\r\n"},{"name":"js","outline":"[\"String 字符串\",\"length\"]","content":"只读属性。能获取字符串的字符个数\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子字符获取\"]","content":"var str = 'hello';\n// 都是返回'h'字符。强调：依然是string类型\n\n// charAt 获取\nalert(str.charAt(index)); // 兼容所有浏览器\n\n// 索引 获取\nalert(str[0]); // ie6\\7不兼容\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子串获取\"]","content":""},{"name":"js","outline":"[\"String 字符串\",\"子串获取\",\"substring\"]","content":"[substring 文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring)\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子串获取\",\"substring\",\"语法\"]","content":"str.substring(indexStart[, indexEnd])\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子串获取\",\"substring\",\"示例说明\"]","content":"\n// 参数2不给将获取剩下的所有字符\nconsole.log(\"hello word\".substring(1)) // 'ello word'\n// 超过情况同上\nconsole.log(\"hello word\".substring(1, 100)) // 'ello word'\n\nconsole.log(\"hello word\".substring(1, 2)) // 'e'\n\nconsole.log(\"hello word\".substring(0, 2)) // 'he'\n\n// 几种特殊情况\n\n// 超过范围情况。返回空字符串\nconsole.log(\"hello word\".substring(100)) // ''\n\n// 2个参数都可不带。。返回原字符串\nconsole.log(\"hello word\".substring()) // 'hello word'\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子串获取\",\"substring\",\"兼容性\"]","content":"包括ie6的所有\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子串获取\",\"substr\"]","content":"[substr 文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子串获取\",\"substr\",\"语法\"]","content":"str.substr(start[, length])\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子串获取\",\"substr\",\"示例说明\"]","content":"\n// 参数2不给将获取剩下的所有字符\nconsole.log(\"hello word\".substr(1)) // 'ello word'\n// 超过情况同上\nconsole.log(\"hello word\".substr(1, 100)) // 'ello word'\n\nconsole.log(\"hello word\".substr(1, 2)) // 'el'\n\nconsole.log(\"hello word\".substr(0, 2)) // 'he'\n\n// 几种特殊情况\n\n// 超过范围情况。返回空字符串\nconsole.log(\"hello word\".substr(100)) // ''\n\n// 2个参数都可不带。。返回原字符串\nconsole.log(\"hello word\".substr()) // 'hello word'\r\n"},{"name":"js","outline":"[\"String 字符串\",\"子串获取\",\"substr\",\"兼容性\"]","content":"包括ie6的所有\r\n"},{"name":"js","outline":"[\"String 字符串\",\"String(数字) Number 互转\"]","content":"\n// Number -> String\nconsole.log(1 + '') // '1'。性能最好\nconsole.log(String(1)) // '1'。性能一般\nconsole.log((1).toString()) // '1'。性能差\n\n// String -> Number\nconsole.log(+'1') // 性能最好\nconsole.log(Number('1')) // 性能比 +1 稍差\nconsole.log('1' * 1) // 1 性能比 Number稍差\nconsole.log('1' - 0) // 1。性能与 *1 差不多\nconsole.log(parseFloat('1')) // 1。性能不佳\nconsole.log(parseInt('1')) // 1。性能不佳，与 parseFloat 差不多\n\n\n// 性能测试\nvar j\nconsole.time()\nfor (let i = 0; i < 100000; i++) {\n  j = (1).toString()\n}\nconsole.timeEnd()\n\n\r\n"},{"name":"js","outline":"[\"String 字符串\",\"字符串 —> number\"]","content":""},{"name":"js","outline":"[\"String 字符串\",\"字符串 —> number\",\"使用 parseFloat、parseFloat\"]","content":"都是 window 的方法：window.parseFloat、window.parseInt\r\nparseFloat：最多只保留 14位小数，第14位如果有，进1\r\n兼容性：所有浏览器\r\n\nparseInt('好啊') // NaN\nparseFloat('好啊') // NaN\n\nparseInt(\"123.45转不了\") // 123\nparseFloat(\"123.45转不了\") // 123.45\n\r\n"},{"name":"js","outline":"[\"String 字符串\",\"字符串 —> number\",\"ECMAScript 3中的 parseInt 问题\"]","content":"ECMAScript 5 中没有这一问题\r\nparseInt('08') // 将返回0 。起始为0 的字符串将以8进制方式解析，相当于parseInt('08',8)\n\r\n所以，在考虑 ECMAScript 3 环境时尽量带第二个参数 ：`parseInt('08',10)`。当然，转换的方式还有很多，比如正则\r\n"},{"name":"js","outline":"[\"String 字符串\",\"字符串 —> number\",\"什么情况使用 parseFloat、parseInt\"]","content":"部分数字类型，且起始情况：\r\nconsole.log(parseFloat(\"123你好\")) // 123\r\n完全的数字类型使用如下方式，性能要好\r\nconsole.log(+\"08\") // 性能最好\nconsole.log(Number(\"08\"))\nconsole.log(\"08\" * 1)\r\n"},{"name":"js","outline":"[\"String 字符串\",\"其他类型 转 字符串\"]","content":"// 兼容性：所有浏览器\n\n// 推荐方式\ndocument.write(123 + \"\" + 123);\n\n// 其他方式1\ndocument.write(String(123)+123);\n\n// 其他方式2\ndocument.write((123).toString() + 123);\n\r\n"},{"name":"js","outline":"[\"String 字符串\",\"字母大小写转换\"]","content":"//大写——>小写\nvar _info = (\"AAAaaa\").toLowerCase();\n\n//小写——>大写\nvar _info = (\"AAAaaa\").toUpperCase();\n\n//兼容性：all浏览器\n\r\n"},{"name":"js","outline":"[\"String 字符串\",\"去掉两头空白字符-trim\"]","content":"('   sss        ').trim()\r\n兼容性：ie9+ 、其他高级\r\n"},{"name":"js","outline":"[\"String 字符串\",\"其他进制 --> 十进制\"]","content":"parseInt(\"589E\",16);// 某16进制字符串转10进制 。589E代表中文字符\"增\"\nparseInt(\"10\",8); //某8进制字符串转10进制\nparseInt(\"10\",2); //某2进制字符串转10进制\n\r\n"},{"name":"js","outline":"[\"String 字符串\",\"字符，Unicode码\"]","content":""},{"name":"js","outline":"[\"String 字符串\",\"字符，Unicode码\",\"字符 -> Unicode 的十进制数\"]","content":"返回值：编码值，number类型，十进制\r\n兼容性：all浏览器\r\n\n// 字符 'a' 的 Unicode 值（参数不给将默认0）\nconsole.log(('ac').charCodeAt()) // 97\n\n// 字符 'c' 的 Unicode 值\nconsole.log(('ac').charCodeAt(1)) // 99\n\n// 超出情况，返回 NaN\nconsole.log(('ac').charCodeAt()) // NaN\r\n"},{"name":"js","outline":"[\"String 字符串\",\"字符，Unicode码\",\"十进制 Unicode -> 字符\"]","content":"String.fromCharCode(49);// '1'\r\n"},{"name":"js","outline":"[\"String 字符串\",\"字符，Unicode码\",\"字符 Unicode 直接量写法\"]","content":"\\u + 16进制\r\n直接输出显示转行后的字符\r\nconsole.log('\\u4f60\\u597d\\u554a') // '你好啊'\r\n16进制转10进制可使用parseInt\r\n"},{"name":"js","outline":"[\"String 字符串\",\"中文字符比较\"]","content":"[String.prototype.localeCompare() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare)\r\nreferenceStr.localeCompare(compareString[, locales[, options]])\r\n**referenceStr 字符：**\r\n小，返回 -1\r\n大 返回 1\r\n相等 返回 0\r\nlet referenceStr = '哈哈' // haha\nlet compareString = '啊啊' // aa\nreferenceStr.localeCompare(compareString, 'zh'); // 1\r\n"},{"name":"js","outline":"[\"String 字符串\",\"汉字范围 十六进制写法\"]","content":"**number**  \n0x4e00  \n0x9fa5\r\n**字符串**  \n\\u4e00  \n\\u9fa5  \r\n"},{"name":"js","outline":"[\"String 字符串\",\"两种空格\"]","content":"空格符有两种，但正则表达式的 `\\s` 两种都能匹配\r\n两个空格的 Unicode 写法\r\n\nconsole.log('\\u0020', '\\u00A0')\n\r\n"},{"name":"js","outline":"[\"WebSocket 或 SSE\"]","content":"[SSE 比较 WebSocket](https://www.ibm.com/developerworks/cn/web/wa-http-server-push-with-websocket-sse/index.html)\r\n"},{"name":"js","outline":"[\"关键字\"]","content":""},{"name":"js","outline":"[\"关键字\",\"instanceof 判断是否属于某构造函数实例\"]","content":""},{"name":"js","outline":"[\"关键字\",\"instanceof 判断是否属于某构造函数实例\",\"判断数组类型\"]","content":"var arr = new Array();\nalert(arr instanceof Array);//返回true\n\r\n"},{"name":"js","outline":"[\"关键字\",\"instanceof 判断是否属于某构造函数实例\",\"instanceof 不认为原始类型值的变量是对象\"]","content":"原始类型：undefined、null、boolean、number 和 string\r\nvar temp=\"a string for test\";   \n//下面这句返回\"string\"   \nalert( typeof temp);   \n//下面这句返回\"false\"   \nalert(temp instanceof String); \n\r\n"},{"name":"js","outline":"[\"关键字\",\"in 判断是否是某实例成员\"]","content":"包括原型上的成员\r\nconsole.log('body' in document) // true\r\n"},{"name":"js","outline":"[\"其他\"]","content":""},{"name":"js","outline":"[\"其他\",\"任务链 赋值\"]","content":"var b, c\nvar a = b = c = 100\r\n"},{"name":"js","outline":"[\"其他\",\"测试表达式执行顺序\"]","content":"var a = [], i = 0;\na[i++] = (function () {\n    alert(i);\n    debugger\n})()\r\n先左后右，所以先执行左边的i++\r\n"},{"name":"js","outline":"[\"其他\",\"if/for 大括号是否创建了域？\"]","content":"只有函数才有域，if/for 没有域\r\nes6 let 变量有域\r\n"},{"name":"js","outline":"[\"其他\",\"eval\"]","content":"调用有作用域\r\nfunction fun() {\n  var j = 20;\n  eval('alert(j)') // 成功\n}\nfun()\r\n创建也有作用域\r\nfunction fun() {\n  eval('var i=10')\n  alert('内部' + i) // 成功\n}\nfun()\nalert(i) // 报错\r\n"},{"name":"js","outline":"[\"变量提升 函数提升\"]","content":"es6将取消\r\n"},{"name":"js","outline":"[\"定时器\"]","content":""},{"name":"js","outline":"[\"定时器\",\"setInterval(fn, ms)\"]","content":"队列机制：\n每隔ms秒后，fn便增加到队列里面。如果上一个fn执行完了，立马执行队列里面的下一个fn。如果上一个执行的时间超过了几个ms秒，那么队列里面可能会堆积很多个fn等待执行\r\n"},{"name":"js","outline":"[\"异常处理\"]","content":""},{"name":"js","outline":"[\"异常处理\",\"throw 手动抛异常\"]","content":"手动让程序报错，程序将终止\r\n"},{"name":"js","outline":"[\"异常处理\",\"throw 手动抛异常\",\"语法\"]","content":"throw expression;\r\nexpression 任意表达式\r\n"},{"name":"js","outline":"[\"异常处理\",\"throw 手动抛异常\",\"示例\"]","content":"throw \"Error2\"; // 抛出了一个值为字符串的异常\n// 后面的代码不会执行\n\nthrow 42;       // 抛出了一个值为整数42的异常\nthrow true;     // 抛出了一个值为true的异常\r\n"},{"name":"js","outline":"[\"异常处理\",\"异常捕获\"]","content":"阻止程序异常终止运行\r\n// 捕获自定义异常\ntry {\n  throw '错误1'\n} catch(e) {\n  console.log(e) // '错误1'\n}\n\n// 捕获程序异常。将抛出一个 Error 对象\ntry {\n  a\n} catch(e) {\n  console.log(e) // 一个 Error 对象\n}\n\r\n"},{"name":"js","outline":"[\"异常处理\",\"Error\"]","content":"能给出代码位置信息(stack)\r\nconsole.dir(new Error('test'))\r\nError 子类\r\nEvalError: raised when an error occurs executing code in eval() \r\nRangeError: raised when a numeric variable or parameter is outside of its valid range \r\nReferenceError: raised when de-referencing an invalid reference \r\nSyntaxError: raised when a syntax error occurs while parsing code in eval() \r\nTypeError: raised when a variable or parameter is not a valid type \r\nURIError: raised when encodeURI() or decodeURI() are passed invalid parameters\r\n"},{"name":"js","outline":"[\"异常处理\",\"try catch 是否可捕获函数中的错误\"]","content":"方法内部有错误，try 中执行此方法，能捕捉到此错误吗？答案是可以\r\n也就是说，只要在入口处 try catch，就可以保证程序不会中断运行了\r\nfunction test () {\n  testChild()\n}\n\nfunction testChild () {\n  throw new Error('err')\n}\n\ntry {\n  test()\n}\ncatch (err) {\n  console.log(err)\n}\n\r\n"},{"name":"js","outline":"[\"循环\"]","content":""},{"name":"js","outline":"[\"循环\",\"for\"]","content":""},{"name":"js","outline":"[\"循环\",\"for\",\"跳出循环的方式\"]","content":"通过 `break`\r\n`return` 也可跳出循环，但整个函数往下都不会再执行了\r\n疑问：if 中的 break 是否会影响 for 的跳出\r\nfor (var i = 0; i < 100; i++) {\n    console.log(i)\n    if (true) {break}\n}\n// 只会输出 0\r\n"},{"name":"js","outline":"[\"循环\",\"for/in\"]","content":"可以遍历对象，得到 key 值\r\n当然也可遍历数组，会避开缺失成员\r\n"},{"name":"js","outline":"[\"循环\",\"break：用于 跳出循环或 switch。(if除外)\"]","content":""},{"name":"js","outline":"[\"循环\",\"continue：不再往下执行，直接下一次循环\"]","content":"不能 用于switch\r\n"},{"name":"js","outline":"[\"数组\"]","content":"[Array - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\r\n"},{"name":"js","outline":"[\"数组\",\"创建\"]","content":"**字面量方式**\r\nvar arr = [];\nvar arr = [\"成员1\", 2];//可以是不同成员\r\n**构造函数方式**\r\n1、空的\r\nvar array = new Array();\r\n2、指定长度\r\nvar array2 = new Array(10);\n成员值都是undefined。此方式有技巧使用\n虽然值是undefined，但join后不会出现undefined字符串\n比如：\nnew Array(10).join('') // 依然返回空字符串\nnew Array(10).join('x') // 9个x\nnew Array(10).join('<li></li>') // 9个li标签\r\n"},{"name":"js","outline":"[\"数组\",\"length\"]","content":"可读写属性\r\n**读操作**\n都懂...略过\r\n**写操作**\n==增==操作(比之前多)：相当于末尾追加了成员，初始值为undefined。非真实存在，forEach、for in 会跳过此成员\r\n==减==操作(比之前少)：少了多少相当于 末尾删了多少  \n数组对length属性进行减少的 写操作，成员真的减少了。  \n有时候想，length属性如果没真正删除，reverse反转后是不是能把删除的反过来？而实际上，  \nreverse反转操作正常(强调：正常指并没有把删掉的成员反转过来)  \r\ndiv1.innerHTML = array.length;\r\n"},{"name":"js","outline":"[\"数组\",\"取成员\"]","content":""},{"name":"js","outline":"[\"数组\",\"取成员\",\"取单个,一般获取\"]","content":"根据索引获取\r\nvar arr=['张', '李', '陈', '黄'];\nconsole.log(arr[0]);\nconsole.log(arr['0']);// 根据以前的笔记说firefox这样不行？反正现在是行了...\r\n"},{"name":"js","outline":"[\"数组\",\"取成员\",\"取单个,带删除的获取 shift、pop、splice\"]","content":"取一个便少一个。将更改 原数组\r\n**取第一个**\r\narr.shift();\r\n**取最后一个**\r\narr.pop();\r\n**取指定**\n使用splice实现\r\nvar arr=['张', '李', '陈', '黄'];\narr.splice(2, 1);// '陈'。取到了第3个成员\narr;// ['张', '李', '黄']\r\n"},{"name":"js","outline":"[\"数组\",\"取成员\",\"取多个,带删除的获取 splice\"]","content":"取多个指定成员，取多少原数组便会减多少\n`Array.splice(开始索引,数量)`\n返回一个新数组，装载取到的成员\r\n"},{"name":"js","outline":"[\"数组\",\"取成员\",\"取多个，复制形式获取-slice\"]","content":"详见 [复制数组-slice](复制数组-slice)\r\n"},{"name":"js","outline":"[\"数组\",\"增成员\"]","content":""},{"name":"js","outline":"[\"数组\",\"增成员\",\"追加\"]","content":"底部-push：追加一个或多个\r\narray.push(\"烧饼1\");\r\n头部-unshift：追加一个或多个\r\narray.unshift(\"烧饼0\",\"烧饼1\");\r\n返回值\n返回更改后的数组长度\r\n"},{"name":"js","outline":"[\"数组\",\"增成员\",\"指定位置增加\"]","content":"**使用splice，真正意义上的指定位置增加**\n参数1：增加的位置，此位置原有的元素会往后挤\n参数2：必须为0\n参数3：要增加的成员，可以多个\r\nvar arr = [1, 2, 3];\n\narr.splice(1, 0, '成员1'); // [1, '成员1', 2, 3]\narr.splice(2, 0, '成员2', '成员3');\narr.splice(3, 0, ['成员4', '成员5']); // 注意，此方式没有例外，依然只添加一个成员，3索引位置是一个数组（以为会有concat特性，添加2个成员，实际不是）\r\n**使用修改方式，严格来说这还是修改**\n当索引大于等于length时，才是增加，否则为修改\r\nvar arr=[];\narr[3]=1;\nconsole.log(arr.length);// 4\r\n"},{"name":"js","outline":"[\"数组\",\"删成员\"]","content":""},{"name":"js","outline":"[\"数组\",\"删成员\",\"使用delete操作符\"]","content":"删第一个\r\nvar arr=[\"张\", \"李\", \"陈\", \"黄\"];\ndelete arr[0];\nconsole.log(arr[0]);// undefined\nconsole.log(arr.length);// 4\r\n删最后一个\r\nvar arr=[\"张\", \"李\", \"陈\", \"黄\"];\ndelete arr[3];\nconsole.log(arr[3]);// undefined\nconsole.log(arr.length);// 4\r\n两个例子说明，只是把值换成了undefined了，length不变。  \n==但是==  \n使用for in无法循环出删掉的成员了，如果强行赋值undefined，又能循环出来，看来真删除了。    \n或者说这只是对象的特性而已，数组也是对象嘛  \r\n**总结**\ndelete 操作不会致使数组的 length 属性改变\ndelete 操作与直接赋 undefined 是不一样的，for in 无法获取 delete 删除的成员，可获取服 undefined 的成员\r\n**兼容性**：包括ie6的所有\r\n"},{"name":"js","outline":"[\"数组\",\"删成员\",\"通过设置length\"]","content":"var arr=[\"张\", \"李\", \"陈\", \"黄\"];\narr.length=1;\nconsole.log(arr);//[\"张\"] 。真的就只有这么一个了！！\r\n兼容性：包括ie6的所有\r\n详情 见 [length] 写操作\r\n"},{"name":"js","outline":"[\"数组\",\"删成员\",\"删头尾，一次删一个\"]","content":"使用shift pop\n见 [取成员]\r\n"},{"name":"js","outline":"[\"数组\",\"删成员\",\"指定范围删除，一次可删多个\"]","content":"使用splice\n见 [取成员]\r\n"},{"name":"js","outline":"[\"数组\",\"删成员\",\"根据索引删除-使用splice\"]","content":"将更改原数组。返回一个新数组，装载删掉的成员\r\n快速使用：\r\n// 删除指定索引位置成员，参数2固定为1\narr.splice(index,1);\r\n"},{"name":"js","outline":"[\"数组\",\"改成员\"]","content":"根据索引覆盖操作。都懂...\r\nvar arr=['张', '李', '陈', '黄'];\narr[0]='xx';\r\n"},{"name":"js","outline":"[\"数组\",\"转换\"]","content":""},{"name":"js","outline":"[\"数组\",\"转换\",\"字符串转数组-split\"]","content":"`String.split([string])`\r\n**· 给参情况**\n用字符串中指定子串 将 字符串 切割成 数组\r\n'张,李,陈,黄'.split(',');//[\"张\", \"李\", \"陈\", \"黄\"]\r\n**· 空字符串情况**\n将每个字符分割成数组\r\n'张,李,陈,黄'.split('');//[\"张\", \",\", \"李\", \",\", \"陈\", \",\", \"黄\"]\r\n**· 不给参情况**\n返回只有原字符串一个成员的数组\r\n'张,李,陈,黄'.split();//[\"张,李,陈,黄\"]\r\n"},{"name":"js","outline":"[\"数组\",\"转换\",\"数组转字符串-join\"]","content":"**用指定字符串 将 数组 连接成 字符串**\r\n['张', '李', '陈', '黄'].join('-');// '张-李-陈-黄'\r\n**不带参：**\r\n['张', '李', '陈', '黄'].join();// '张,李,陈,黄'\r\n似乎默认使用了逗号相连\n也可以说是 直接将数组转换成字符串\r\n**数组length=1**\r\n['张'].join('-');// '张'\r\n**数组length=0**\r\n[].join('-').length===0;//true。看来是空字符串...\r\n"},{"name":"js","outline":"[\"数组\",\"转换\",\"集合转数组-slice技巧\"]","content":"集合指的是那种有length属性的类数组对象\r\n**HTMLCollection 集合例子**\r\neItems = [].slice.call(document.body.children, 0);\r\n这种集合ie678不支持，参数3不会影响HTMLCollection集合\r\n**对象模拟 例子**\r\nvar obj = {\n    0: 0,\n    1: 1,\n    length: 10\n};\nvar arr = [].slice.call(obj, 0);\narr.lenght; // 10\r\n这种支持包括ie6的所有。参数3如果给，将影响obj。不给或者负数都不影响\r\n其他splice用法见 [splice增删详解](splice增删详解)\r\n"},{"name":"js","outline":"[\"数组\",\"转换\",\"数组转字符串-toString\"]","content":"arr.toString() 相当于 arr.join(',')\nvar arr = ['成员1', '成员2', {}];\narr.toString() //成员1,成员2,[object Object]\narr.join(',') //成员1,成员2,[object Object]\r\n"},{"name":"js","outline":"[\"数组\",\"splice 增删详解\"]","content":"[参考网址](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)\r\n**语法**\n`array.splice(start, deleteCount[, item1[, item2[, ...]]])`\r\n**参数：**\r\n**start** 必须。起始索引，负数表示从尾部开始起始，而超出情况将再尾部追加\r\n**deleteCount** 必须(实测可以不带)。删除的个数(含第 start 位)\r\n0或负数都表示不删除，一般用0\r\n超出情况将删除index之后的所有成员\r\n技术文档都说这个是必须，实测不带也可以，不带将删除start(包含start)之后的所有\r\n**itemN** 可选，要替换的成员。将指定区域替换成指定成员\r\n**返回值：**\n被删掉的成员组成的新数组\n没有被删返回空数组\r\n**将更改原始数组：**\ndeleteCount 删除、itemN 增加 将应用到原数组中。而被删除的成员将拼成一个新数组被返回\r\n**兼容：**\n包括ie6的所有\r\n**关于clone：**\nsplice不能实现clone，arr.concat、arr.slice可以实现\r\n"},{"name":"js","outline":"[\"数组\",\"slice-复制数组\"]","content":"可指定位置进行复制\r\n**语法**\n`arr.slice(begin[, end])`\r\n**参数**\r\n**begin**\r\n开始索引，从0开始\r\n可以是负数，负数情况 相当于 length + begin，相减后结果如果还是负数将视0为起始\r\n包含，新数组将包含此位置的值\r\n经测试此参数也是可选的，省略情况相当于arr.slice(0)\r\n**end**\r\n结束索引，从0开始\r\n省略此参数将将一直取到原数组末尾\r\n可以是负数，负数情况原理同begin一样\r\n不包含，新数组将不包含此位置的值\r\n小于或者等于begin 将 返回空数组，负数情况也如此\r\n**返回新数组**\r\n**不更改原数组**\r\n**完全复制**\n不带参或者 begin 为 0 即可实现完全复制\r\n**可用于取子字符串**\n详情见[String]()\r\n**示例**\r\ntest.innerHTML = [1,2,3,4,5].slice(1, 3);//[2,3]\ntest.innerHTML = [1,2,3,4,5].slice(1, 1);//[]\ntest.innerHTML = [1,2,3,4,5].slice(2);//[3,4,5]\r\n**兼容性**\n包括 ie6 的所有浏览器\r\n**concat也可以实现复制**\r\n"},{"name":"js","outline":"[\"数组\",\"concat-合并数组\"]","content":"实现 合并 或者 追加。返回一个新数组\n数组情况是合并，非数组是追加。\r\nvar arr = ['成员1', '成员2', '成员3'],\narr.concat('成员4',['成员5'])// [\"成员1\", \"成员2\", \"成员3\", \"成员4\", \"成员5\"]\r\n**语法：**\n`array.concat(value1, value2, ..., valueN)`\r\n**参数：**\n valueN 可选，不带参将实现复制\r\n**关于合并：**\n就是将数组的所有子成员追加进来，相当于如果参数是数组，那么你当它没有中括号吧。\n合并只限于子级， 如果子成员还是数组 ，不会再去合并，此数组将视为成员。\r\nvar arr = ['成员1', '成员2', '成员3'],\n    arr2= ['成员4',['成员5']];\nvar newArr = arr.concat(arr2);\nconsole.log(newArr); // [\"成员1\", \"成员2\", \"成员3\", \"成员4\", [\"成员5\"]]\r\n**返回值：**\n合并后的数组\r\n**不更改原数组，也不会更改作为参数的数组**\r\nvar arr = ['成员1', '成员2', '成员3'],\n    arr2= ['成员4','成员5'];\nvar newArr = arr.concat(arr2);\n\nconsole.log(arr); // [\"成员1\", \"成员2\", \"成员3\"]\nconsole.log(arr2); // [\"成员4\", \"成员5\"]\nconsole.log(newArr); // [\"成员1\", \"成员2\", \"成员3\", \"成员4\", \"成员5\"]\r\n**可实现clone**\n不带参即可\nslice也可以实现clone\r\nvar arr = ['成员1', '成员2', '成员3'];\nvar newArr = arr.concat();\n兼容性：包括ie6的所有\r\n"},{"name":"js","outline":"[\"数组\",\"sort 排序\"]","content":""},{"name":"js","outline":"[\"数组\",\"sort 排序\",\"默认排序，将按字符排序\"]","content":"不带参即可，升序，即小的在前面。\r\n['B','A','C'].sort() // [\"A\", \"B\", \"C\"]\r\n**将更改原数组**\r\n**字符排序探索**\n逐个字符进行对比(如果是数字，并非根据数量)\r\n[100,99].sort()// [100, 99]\r\n其实，如果看了下面的自定义排序，上例的结果感觉应该是这么来的。转字符串，再比较\r\n'100'<'99'// true\r\n**汉字**\n的话根据 Unicode编码，并非按照拼音\r\n['陈','张', '黄','李'].sort();//[\"张\", \"李\", \"陈\", \"黄\"]\r\n上例中，如果按照拼音，'陈'应该在最前才对。而输出字符对于的Unicode编码是 5F20 674E 9648 9EC4，这很明显\n==推想，估计所有字符，包括字母都是按照编码来的==\r\n"},{"name":"js","outline":"[\"数组\",\"sort 排序\",\"自定义排序\"]","content":"下例实现数字排序。例子为降序。升序 将1 和 -1 调换即可\r\n([2, 33, 12, 6, 3333]).sort(function (v1, v2) {\n    if (v1 < v2) return 1;\n    if (v1 > v2) return -1;\n    return 0;// 不处理\n})\r\n强调：将==更改原数组==\r\n"},{"name":"js","outline":"[\"数组\",\"sort 排序\",\"有返回值\"]","content":"虽然更改了原数组，但还是有返回值，返回更改后的原数组，或者说返回原数组引用\r\n"},{"name":"js","outline":"[\"数组\",\"reverse 数组反转\"]","content":"`arr.reverse()`\n差不多就是将整个数组倒过来，第一个位置就是 最后一个成员了\r\n"},{"name":"js","outline":"[\"数组\",\"查找值，取值的索引-indexOf\"]","content":"取成员索引，不存在返回-1\nie兼容性：ie9+\r\nvar d = {};\nvar arr = ['a', 'b', d];\nconsole.log(arr.indexOf('a'));// 0\nconsole.log(arr.indexOf(arr[1]));// 1\n// 支持对象\nconsole.log(arr.indexOf(d));// 2\r\n"},{"name":"js","outline":"[\"数组\",\"查找值，是否包含指定值-includes\"]","content":"[Array.prototype.includes() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes)\r\nvar pets = ['cat', 'dog', 'bat'];\n\nconsole.log(pets.includes('cat'));\n// expected output: true\r\n"},{"name":"js","outline":"[\"数组\",\"数组类型判断\"]","content":"详见 [./类型判断.md](./类型判断.md)\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\"]","content":""},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"every和some : 是否满足\"]","content":"every 和 some 都会避开缺失元素\r\n可实现中断遍历：forEach 没法中断，但这个可以啊\r\n**every**\r\n必须全对\r\n传递函数只有全部返回true(或者可转化为true的值)，才返回true\r\n(此处可略看)反之，只要出现false，遍历停止，返回false\r\n**some**\r\n有一个对就行\r\n传递函数只要出现true(或者可转化为true的值)，便停止遍历，返回true\r\n(此处可略略看)反之，必须全部false才返回false\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"filter\"]","content":"实现过滤掉不符合条件的成员\n返回一个新数组，不更改原数组\n会避开缺失元素\r\n**语法**\n`var new_arrary = arr.filter(callback[, thisArg])`\r\n**参数**\r\n**callback** 用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。\r\n返回true(或者可转化为true的值)表示保留该元素（通过测试），false(或者可转化为false的值)则不保留。\r\n**thisArg** 可选。执行 callback 时的用于 this 的值。\r\n**浏览器兼容性**\r\nie9+\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"forEach\"]","content":"[Array.prototype.forEach() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n注意: 没有返回值!\r\nvar array1 = ['a', 'b', 'c'];\n\narray1.forEach(function(element, index, array) {\n  // element 当前成员\n  // index 当前索引\n  // array 为原数组\n\n  console.log(element);\n});\n\n// expected output: \"a\"\n// expected output: \"b\"\n// expected output: \"c\"\n\r\n**兼容性**\nie678 不支持。可用for in代替。不推荐for循环，主要是因为for循环如果不特殊处理不会跳过不存在成员，即稀疏数组问题\r\n**注意**\n只支持 array，其他集合，比如 document.getElementsByTagName('div')、document.body.children， 不支持。但可以变通实现\r\n[].forEach.call(document.body.children, function (element, index) {\n  console.log(element, index)\n})\n\r\n循环过程中**没法终止循环**。\n下例依然输出了所有成员，无法通过false终止\r\n// 这是一个错误的例子\n([1, 2, 3, 4, 5]).forEach(function (n) {\n    console.log(n);\n    return false;\n});\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"map\"]","content":"数组映射。遍历数组，并返回一个新的\r\n不更改原数组\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"map\",\"语法\"]","content":"arr.map(callback[, thisArg])\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"map\",\"参数\"]","content":"callback\r\ncurrentValue\r\nindex\r\narray\r\nthisArg 可选。callback函数中this调用\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"map\",\"示例\"]","content":"var newArr = arr.map(function (currentValue, index, array) {\n    console.log(arguments);\n    console.log(this);//传入的第二个参数\n    return arguments[1];//给新数组添加值\n}, $);\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"map\",\"兼容性\"]","content":"ie678 不支持\r\n"},{"name":"js","outline":"[\"数组\",\"遍历迭代\",\"reduce、reduceRight(相反)\"]","content":"遍历累加\r\n**语法**\narr.reduce(callback[, initialValue])\r\n**参数**\r\ncallback\r\npreviousValue\r\ncurrentValue\r\nindex\r\narray\r\ninitialValue 可选。累加的初始值。如果不给，默认是数组的第一个，并且直接进行第二次遍历\r\n**示例**\r\nvar newArr = arr.reduce(function (previousValue, currentValue, index, array) {\n    return previousValue + currentValue;//给下一次遍历传入的值\n});\r\n**兼容性**\nie678 不支持\r\n**注意**\ninitialValue如果不给，默认值是数组的第一个，并且直接进行第二次遍历\r\n"},{"name":"js","outline":"[\"数组\",\"类型\"]","content":""},{"name":"js","outline":"[\"数组\",\"类型\",\"es5 方式\"]","content":"Array.isArray([]) // true\nArray.isArray({}) // false\r\n"},{"name":"js","outline":"[\"数组\",\"类型\",\"全兼容方式\"]","content":"var isArray=Array.isArray||function(o){\n  return Object.prototype.toString.call(o)===\"[object Array]\";\n};\r\nes5 方式本质也使用了 Object.prototype.toString\r\n"},{"name":"js","outline":"[\"数组\",\"类型\",\"不推荐使用\"]","content":"iframe 情况可能会出问题\r\n[] instanceof Array // true\n({}) instanceof Array // false\r\n"},{"name":"js","outline":"[\"数组\",\"delete\"]","content":"删除真实存在，不等同赋undefined。具体见下\r\n"},{"name":"js","outline":"[\"数组\",\"关于直接赋undefined与delete操作区别讨论\"]","content":"var a = new Array(10);\na[1] = undefined;\na[2] = undefined;\na[3] = undefined;\n\n\n// 高级浏览器\na.forEach(function () {\n    console.log(1);\n});\n// ie678使用如下\nfor (var k in a) {\n    console.log(2);\n}\n// 上面两个循环都只循环了3次\n\n// 删除真实存在，不等同赋undefined\ndelete a[1];\n\na.forEach(function () {\n    console.log(1);\n});\nfor (var k in a) {\n    console.log(2);\n}\n// 现在只循环2次了\n\na.length=10;\n\na.forEach(function () {\n    console.log(1);\n});\nfor (var k in a) {\n    console.log(2);\n}\n// 还是循环2次\n\na.length=1;\n\na.forEach(function () {\n    console.log(1);\n});\nfor (var k in a) {\n    console.log(2);\n}\n// 循环1次\n\r\n总结：\r\n即使是赋了undefined的成员，依然是存在的\r\n直接操作length，增大操作，并不影响成员增加的本质。但对lenght直接减少操作会影响存在成员个数\r\nforEach看似是用for in实现的，而且这两种循环只根据真实存在成员，不参照length属性\r\n数组也是对象，依然保留对象特性。for in、delete的使用跟对象一样，也是可以做数据字典的。\r\n即delete生效于for in(当然还有forEach)\r\ndelete不改变length。for循环差不多是自己制定循环次数，受制于length，属例外\r\n一些根据length来实现的属性，即使成员不存在：\ntoString、join、split\r\n非根据length来实现的属性，只根据真实存在成员：\nforEach、for in\r\n此处兼容性包括ie6的所有浏览器\r\n"},{"name":"js","outline":"[\"数组\",\"取最大/小值\"]","content":"通过 fun.apply\r\nconsole.log(Math.max.apply(Math, [34, 23, 43])); // 43 最大值\r\n"},{"name":"js","outline":"[\"数组\",\"数组类型检测\"]","content":"方式1：\n`Array.isArray(obj)`\r\n方式2：\n`obj instanceof Array`\r\n"},{"name":"js","outline":"[\"数组\",\"valueOf 返回数组对象本身\"]","content":"[Object.prototype.valueOf() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)\r\n"},{"name":"js","outline":"[\"正则表达式\"]","content":""},{"name":"js","outline":"[\"正则表达式\",\"相关方法\"]","content":""},{"name":"js","outline":"[\"正则表达式\",\"相关方法\",\"汇总\"]","content":"RegExp.prototype.exec    \r\nRegExp.prototype.test    \r\nString.prototype.match    \r\nsearch    \r\nString.prototype.replace    \r\nsplit\r\n"},{"name":"js","outline":"[\"正则表达式\",\"相关方法\",\"验证 RegExp.prototype.test\"]","content":"验证指定字符串是否匹配, 返回bool值\r\nvar patrn = /\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;//E-mail\nif (patrn.test('hello@gmail.com')) alert('成功匹配');\r\n"},{"name":"js","outline":"[\"正则表达式\",\"相关方法\",\"替换 String.prototype.replace()\"]","content":"**返回值：** \r\n有替换 情况：替换好的字符串； \r\n没替换 情况：源字符串\r\n**两个参数：** \r\n用于匹配的表达式\r\n用于替换的字符\r\n**关于调用表达式匹配内容：**  \r\n通过$&可以调用整个表达式匹配的内容。  \r\n通过$[1-9]可以调用匹配子内容。数字为括号的位置。调用整个匹配内容就把整个表达式括起来\r\n**关于replace方法中的 修饰符g**  \n将依次将所有匹配的内容 替换。如下例就有两个匹配的内容，这两个内容都将被替换\r\nalert(('hello@qq.com||world@qq.com').replace(/(qq)(.)/g, \"QQ$1$2\"));\nvar a = ('asdsad').replace(/[a-z]/, function (d) {\n    // 此回调 如果没找到将不执行。也就是，找到一个执行一次\n    //d 为 匹配的字符\n    return d.toUpperCase();//return替换匹配字符\n});\r\n"},{"name":"js","outline":"[\"正则表达式\",\"相关方法\",\"查找\"]","content":""},{"name":"js","outline":"[\"正则表达式\",\"相关方法\",\"查找\",\"RegExp.prototype.exec()\"]","content":"**返回值：**\r\n没有匹配返回null\r\n有匹配情况，数组对象，有两个固定的属性  \r\nindex 匹配字符串开始索引位置  \r\ninput 原字符串\r\n**修饰符g  ：**\r\n每执行一次exec方法，都将继续往下寻找 未匹配过的内容。但必须是同一个RegExp实例，见下例\r\nvar patt = /W3School/g; // 等同 new RegExp('W3School', 'g')\n\nconsole.log(   \n    patt.exec('Visit W3School, W3School is a place to study web technology.').index // 6 \n    ,\n    patt.exec('Visit W3School, W3School is a place to study web technology.').index // 14\n    ,\n    /W3School/g.exec('Visit W3School, W3School is a place to study web technology.').index // 6 新表达式对象\n    ,\n    patt.exec('Visit W3School, W3School is a place to study web technology.') // null\n);\r\n修饰符g + while 非常好用\r\n// 使用了 赋值表达式也有返回值 的原理\nwhile (result = reg.exec(content)) {\n    console.log(result );\n}\r\n"},{"name":"js","outline":"[\"正则表达式\",\"相关方法\",\"查找\",\"String.prototype.match()\"]","content":"**参数：**\r\n可以是 字符串；还可以是 正则表达式\r\n字符串其实也是正则，貌似不支持修饰符g了\r\n**返回值：**\r\n1.没有匹配情况，返回null\r\n2.有匹配情况，不带g  \n数组成员1为整个表达式匹配的字符串，其后的成员为被括号扩起的子表达式匹配的字符串，带两个固定属性，  \nindex 匹配字符串开始索引位置  \ninput 原字符串\r\n3.带g：得到的数组是匹配到所有字符块，匹配多少就有多少成员。不会被括号影响，不带属性\r\nconsole.log(('msie 9.0 oooo').match(/msie ([\\d.]+)/)); // [\"msie 9.0\", \"9.0\", index: 0, input: \"msie 9.0 oooo\"]\nconsole.log(('msie 9.0 8.0').match(/ ([\\d.]+)/g)); // [\" 9.0\", \" 8.0\"]\nconsole.log(('msie 9.0 8.0').match('[\\\\d]')); // 字符串情况\r\n"},{"name":"js","outline":"[\"正则表达式\",\"对象创建\"]","content":"**1 字面量**\r\nvar reg = /\\d\\d/;\nvar reg2 = /\\d\\d/g; // 带修饰符\nvar reg3 = /\\d\\d/gi; // 多个修饰符\r\n**2 构造函数**  \n好处是可以 根据字符串创建\r\n参数2 为修饰符\r\nvar reg = new  RegExp('\\\\d\\\\d');\nvar reg2 = new  RegExp('\\\\d\\\\d','g');// 带修饰符\nvar reg3 = new  RegExp('\\\\d\\\\d','gi');// 多个修饰符\r\n"},{"name":"js","outline":"[\"正则表达式\",\"修饰符\"]","content":"g （全文查找）  \ni （忽略大小写）   \r\nm （多行查找）  \n可更改&#94;和&#36;作用，变成每行头尾(默认只表示字符串的开头和结尾)。如/^b/m将匹配到'test\\nbbs'\r\n"},{"name":"js","outline":"[\"正则表达式\",\"括号的多种意义\"]","content":""},{"name":"js","outline":"[\"正则表达式\",\"括号的多种意义\",\"`(pattern)` 获取指定匹配\"]","content":"会反馈到到结果数组中，也可在匹配时或者替换时调用\r\nstring.replace 参数2 中通过 `$1`···`$9` 依次等访问\r\n表达式中通过 `\\1` ··· `\\9` 依次访问\r\n(/\\w(\\w)\\1/).exec('abcdd') // [\"cdd\", \"d\", index: 2, input: \"abcdd\"]\r\n"},{"name":"js","outline":"[\"正则表达式\",\"括号的多种意义\",\"`(?:pattern)`\"]","content":"待完成\r\n"},{"name":"js","outline":"[\"正则表达式\",\"括号的多种意义\",\"用于字符组合\"]","content":"'v     a b c de'.match(/(\\w\\s)+/g) // [\"v \", \"a b c \"]\r\n"},{"name":"js","outline":"[\"正则表达式\",\"括号的多种意义\",\"`()` + `|`。子表达式 + 多个\"]","content":"// 文件类型过滤\n/\\.(jpg|png)&/.test('1.png') // true\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\"]","content":""},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"双字节字符个数\"]","content":"function stringSize (s) {\n    return (s.match(/[^\\x00-\\xff]/g) || '').length\n}\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"去掉http部分\"]","content":"/http:\\/\\/[^\\/]*/\n('http://upload.x.com/attachment/companyLogo/1_350.jpg').replace(/http:\\/\\/[^\\/]*/,'')\r\n返回 '/attachment/companyLogo/0218/1_350.jpg'\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"去掉HTML标签\"]","content":"示例为去掉 p 标签 和 div标签\r\nn.Content.replace(/<\\/{0,1}p>|<\\/{0,1}div>/g, \"\")\r\n所有标签清除。带属性的 标签照样清\r\nc.tagClear= function (str) {\n    return str.replace(/<\\/{0,1}[^<>]+\\/{0,1}>/g, '');\n};\r\n其实可以使用 innerText 去掉，或者getContent\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"匹配是否以某标签 开头/结尾\"]","content":"(/^([ ]*(&nbsp;)*)*<p>/).test('&nbsp;  &nbsp;   <p>')\n\n// 清除p元素开头\n('&nbsp;  &nbsp;   <p><div>').replace(/^([ ]*(&nbsp;)*)*(<p>)|(<div>)/,'')\n// 清除p元素结尾\n('</p></div>  &nbsp;  &nbsp;   ').replace(/((<\\/p>)|(<\\/div>))([ ]*(&nbsp;)*)*$/,'')\n\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"去 html 属性\"]","content":"document.body.innerHTML = data.replace(/ style=\"[^\"]*\"/g,'');\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"取后缀\"]","content":"var ex = ('c:/sdf/sdfsd/sdf/xxx.rmvb').match(/(?!=.)[^.]+$/);\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"不包含指定字符串\"]","content":"使用 `(?!pattern)` 负向预查\r\n/^(?!index).+\\.js$/.test('index.js') // false\r\n**一些注意，容易误导的地方**：\r\n/(?!index)\\.js$/.test('index.js') // true\r\n去掉了 `^`，就为 `true` 了，这是因为，只要找到满足条件的字符串即可，`.js`这部分满足，所以为`true`。为false的例子是因为没有一处是满足的\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"实现匹配字符串前面追加\"]","content":"示例实现了在 body 结束标签前追加 script 标签\r\n'</body>'.replace(/(?=<\\/body>)/, '<script src=\"/js/vue.min.js\"></script>')\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"取url文件名，包括后缀\"]","content":"filePath.match(/[^/]+$/)\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"文件类型过滤\"]","content":"/\\.(jpg|png)&/.test('1.png') // true\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"手机号码\"]","content":"/^\\d{11}$/.test('13923401527')\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"E-mail\"]","content":"/\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"html节\"]","content":"html节点：/^<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)$/\r\nhtml节点2：/<([a-zA-Z]+)\\s+[\\w=\"]+>[^<]*<\\/\\1>/\r\n"},{"name":"js","outline":"[\"正则表达式\",\"收集\",\"字符范围\"]","content":"匹配所有单字节：[\\x00-\\xff]\r\n匹配所有双字节：[^\\x00-\\xff]\r\n去两头空白字符：/^\\s*(\\S*(\\s+\\S+)*)\\s*$/\r\n匹配所有东亚区的语言 `^[\\u2E80-\\u9FFF]+$`    \r\n匹配简体和繁体 `^[\\u4E00-\\u9FFF]+$`\r\n匹配简体 `^[\\u4E00-\\u9FA5]+$`\r\n"},{"name":"js","outline":"[\"注释\"]","content":""},{"name":"js","outline":"[\"注释\",\"函数注释约定\"]","content":"/**\n * 获取后代元素\n * @example\n    common.confirm_v2({\n        title: '相册删除',\n        description: '确认要删除？'\n        onBtns: [function () {\n\n        }]\n    })\n\n * @param (arr,function) onBtns\n    至少有一个。一个将配置第一个确认按钮。第二个按钮默认关闭窗口\n    多个将依次给按钮配置指定事件\n * @param (string) description 描述\n * @parma ([bool]) hanCloseBtn \n * @parma ([function]) onCloseBtn \n * @return string 返回说明\n * @兼容性 所有浏览器\n **/\n\r\n"},{"name":"js","outline":"[\"类型、值和变量\"]","content":""},{"name":"js","outline":"[\"类型、值和变量\",\"类型获取 typeof\"]","content":""},{"name":"js","outline":"[\"类型、值和变量\",\"类型获取 toString 万能方式\"]","content":"Object.prototype.toString.call([])// [object Array]\nObject.prototype.toString.call({})// [object Object]\nObject.prototype.toString.call(1)// [object Number]\nObject.prototype.toString.call(function(){})// [object Function]\nObject.prototype.toString.call(true)// [object Boolean]\nObject.prototype.toString.call('') // [object String]\n\n// 可直接简写成：即用 window 的 toString 方法\n\ntoString.call([])// [object Array]\ntoString.call({})// [object Object]\ntoString.call(1)// [object Number]\ntoString.call(function(){})// [object Function]\ntoString.call(true)// [object Boolean]\ntoString.call('') // [object String]\r\n"},{"name":"js","outline":"[\"类型、值和变量\",\"类型判断\"]","content":""},{"name":"js","outline":"[\"类型、值和变量\",\"类型判断\",\"数组判断\"]","content":"**方式1：ES5 方法**\r\nArray.isArray([]) // true\r\n**方式2：使用instanceof，某书中说ie浏览器有不确定性。理论上 ie6+**\r\nconsole.log([] instanceof Array);//返回true\r\n**方式3：万能**\r\n({}).toString.call([])//\"[object Array]\"\r\n兼容性原型扩展，兼容包括ie6的所有\r\nif(typeof Array.isArray === 'undefined'){\n    Array.isArray = function (arg){\n        return ({}).toString.call(arg) === '[object Array]';\n    }\n}\r\n"},{"name":"js","outline":"[\"类型、值和变量\",\"类型判断\",\"isNaN 非数字判断\"]","content":"凡是可以隐式转换成 number 的值，都将视为 number，即返回false\r\nalert(isNaN(123));//false\nalert(isNaN(\"\"));//false，空字符就是0所以也是number\nalert(isNaN(\"123\"));//false\nalert(isNaN(\"123px\"));//true\r\n"},{"name":"js","outline":"[\"类型、值和变量\",\"类型转换\"]","content":""},{"name":"js","outline":"[\"类型、值和变量\",\"类型转换\",\"--> Boolean\"]","content":"// 隐式转换也是这种转换\nBoolean(\"false\"); // true\r\n"},{"name":"js","outline":"[\"类型、值和变量\",\"类型转换\",\"--> Number\"]","content":""},{"name":"js","outline":"[\"类型、值和变量\",\"null和undefined\"]","content":""},{"name":"js","outline":"[\"类型、值和变量\",\"null和undefined\",\"是否可被重写\"]","content":""},{"name":"js","outline":"[\"类型、值和变量\",\"null和undefined\",\"是否可被重写\",\"undefined 在作用域中可重写\"]","content":"在全局中不会被重写\r\n(function(){\n  var undefined = 123;\n  console.log(undefined);// 输出123\n})()\r\n"},{"name":"js","outline":"[\"类型、值和变量\",\"null和undefined\",\"是否可被重写\",\"null 不会被重写\"]","content":"(function(){\n    // Error。直接报错\n    var null = 123;\n    console.log(null)\n})()\r\n"},{"name":"js","outline":"[\"类型、值和变量\",\"NaN\"]","content":"NaN与任何值都不相等，与自己也不相等\r\n"},{"name":"js","outline":"[\"编辑器编码规范配置\"]","content":"[.editorconfig](http://editorconfig.org/)\r\n"},{"name":"js","outline":"[\"运算符\"]","content":""},{"name":"js","outline":"[\"运算符\",\"++ --\"]","content":"var i = 0\n\n// 先加\nconsole.log(i)   // 0\nconsole.log(++i) // 1\n\n// 先用\nconsole.log(i)   // 1\nconsole.log(i++) // 2\nconsole.log(i)   // 2\r\n"},{"name":"js","outline":"[\"运算符\",\"void\"]","content":"执行指定表达式，不返回任何值(即返回underfined)。\r\n表达式，类似于【i = 3 * 3;】中的【3 * 3】\r\nalert(void(3 * 3));\nalert(void 0);\r\n"},{"name":"js-dom-webapis","outline":"[\"html 转图片\"]","content":"借助 svg\r\nexport default function (elm, cvs, img) {\n  let div = document.createElement('div')\n  div.innerHTML = `<svg ref=\"svg\" viewBox=\"0 0 2016 1428\">\n    <foreignObject width=\"2016\" height=\"1428\">${elm.outerHTML}</foreignObject>\n  </svg>`\n  let svg = div.children[0]\n\n  // let img = new Image()\n  // img.style.position = 'relative'\n  // document.body.appendChild(img)\n  svg.children[0].innerHTML = elm.outerHTML\n  let ctx = cvs.getContext('2d')\n  let d = (new XMLSerializer()).serializeToString(svg)\n  // 数据流，字符串形式\n  img.src = 'data:image/svg+xml;charset=utf-8,' + d\n  img.width = 2016\n  // img.width = 1008\n  img.height = 1428\n\n  img.onload = function () {\n    cvs.width = img.width\n    cvs.height = img.height\n    ctx.drawImage(img, 0, 0)\n  }\n}\n\r\n"},{"name":"js-dom-webapis","outline":"[\"btoa 字符串转 base64\"]","content":"let d = (new XMLSerializer()).serializeToString(svg)\nd = btoa(d)\nimg.src = 'data:image/svg+xml;base64,' + d\r\n"},{"name":"js-dom-webapis","outline":"[\"web 图片数据形式种类\"]","content":"// 数据流，字符串形式\nimg.src = 'data:image/svg+xml;charset=utf-8,' + d\n// base 64\nimg.src = 'data:image/svg+xml;base64,' + d\n// 其他几种图片类型\n// data:image/jpeg;base64,\n// data:image/png;base64,\n// data:image/gif;base64,\r\n"},{"name":"js-dom-webapis","outline":"[\"弹窗\"]","content":"// 确认窗，将挂起，点确认或者取消才会执行\nif (confirm(\"确实要删除吗\")) { }\r\n"},{"name":"js-dom-webapis","outline":"[\"页面地址-url\"]","content":"浏览器地址栏中的地址操作\r\n"},{"name":"js-dom-webapis","outline":"[\"页面地址-url\",\"location.search 读取\"]","content":"没有情况(只有一个`?`也视为没有)：空字符串  \r\n有：将包括?\r\n"},{"name":"js-dom-webapis","outline":"[\"页面地址-url\",\"location.search 设置\"]","content":"可以不加 `?`\r\n"},{"name":"js-dom-webapis","outline":"[\"页面地址-url\",\"href 跳转执行后，后面的 js 还会执行吗？\"]","content":"会执行。所有js 执行完成后 再href跳转\r\njs 报错影响是否影响 href 跳转？正常机制：\r\nhref 之上，不会跳转\r\nhref 之下，会跳转\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器跳转\"]","content":"// 直接替换当前页面\nlocation.href = '//baidu.com'\r\n"},{"name":"js-dom-webapis","outline":"[\"设备像素比 window.devicePixelRatio\"]","content":"如果是2，则是 1个像素点放了1/2像素的内容。\n即 2个物理分辨率 = 1个逻辑分辨率\r\ncanvas 画图模糊情况使用\r\n"},{"name":"js-dom-webapis","outline":"[\"安卓浏览器兼容性判断\"]","content":"不应判断android系统版本，跟系统版本无关，跟内置浏览器版本有关\r\n"},{"name":"js-dom-webapis","outline":"[\"ajax\"]","content":""},{"name":"js-dom-webapis","outline":"[\"ajax\",\"问题\"]","content":""},{"name":"js-dom-webapis","outline":"[\"ajax\",\"问题\",\"xhr.responseType\"]","content":""},{"name":"js-dom-webapis","outline":"[\"cookie\"]","content":"[Document.cookie - Web API 接口 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie)\r\n与当前网址关联\r\n"},{"name":"js-dom-webapis","outline":"[\"cookie\",\"新增/修改 操作\"]","content":"一次只能操作一个键值\r\n// 新增/修改\ndocument.cookie = \"succmsg=helloword;expires=Mon, 16 Jan 2012 20:30:11 UTC;path=/;domain=b.com\";\n// 新增/修改-动态过期时间\ndocument.cookie = \"succmsg=helloword;expires=\"+(new Date()).toUTCString()+\";path=/;domain=b.com\";\n\n// 值设置为空字符串\ndocument.cookie = 'succmsg='; \n// ie6视这种cookie是没有key情况\n\n// 设置没有 key 的 cookie\ndocument.cookie = 'bar';\n// 加上之前设置的，console.log(document.cookie) 将返回：\n// \"bar; succmsg=helloword;\"\r\n**中文字符值注意事项：**\r\n避免中文字符无效情况，使用encodeURIComponent 转码，转码后不管什么字符都不会错：\n转码例子：\r\ndocument.cookie='test='+encodeURIComponent('值')+';path=/enterprise/company'\r\n"},{"name":"js-dom-webapis","outline":"[\"cookie\",\"参数 path\"]","content":"设置后，只有访问相应地址才能取到值\r\n默认 `;path=/` 当前网站的任何子地址都可访问\r\n"},{"name":"js-dom-webapis","outline":"[\"cookie\",\"删\"]","content":"不管是会话还是持久cookie，只要将expires设置为过期，都将被删除\r\ndocument.cookie = \"test=1;path=/\";\nvar d = new Date();\nd.setDate(d.getDate()-1);\ndocument.cookie = \"test=(随便，最好不为空);expires=\"+d+\";path=/\";//执行删除\r\n删除必须的是相同的path。不管上级下级关系，反正只删除path值完全相等情况。  \n目前还不清楚跟domain什么关系，待测\r\n"},{"name":"js-dom-webapis","outline":"[\"cookie\",\"查\"]","content":"将返回所有 cookie，键值对，分号+空格隔开\r\n没有任何 cookie 将值将返回**空字符串**\r\nconsole.log(document.cookie)\n// FG=1; PSTM=1529373406; BD_CK_SAM=1; PSINO=6\r\n简单封装，取指定key 的 cookie\r\n// 没有值情况 返回null\nfunction getCookie(name) {\n    var reg = new RegExp(name + '=([^;]*)'),\n        v = reg.exec(document.cookie);\n    return v ? v[1] : v;\n}\r\n"},{"name":"js-dom-webapis","outline":"[\"dataset 标签数据\"]","content":""},{"name":"js-dom-webapis","outline":"[\"dataset 标签数据\",\"兼容性\"]","content":"ie 11 才开始支持，这种情况使用 `element.getAttribute(name)` 代替\r\n"},{"name":"js-dom-webapis","outline":"[\"dataset 标签数据\",\"js 设置\"]","content":"js 设置操作将直接同步到标签上。可直接通过调试工具在标签上看到\r\n<div id=\"item\" data-index=\"1\"></div>\n\n<script>\n    item.dataset.index=2;\n</script>\r\n"},{"name":"js-dom-webapis","outline":"[\"dataset 标签数据\",\"js 获取\"]","content":"console.log(item.dataset.index)\r\n"},{"name":"js-dom-webapis","outline":"[\"dataset 标签数据\",\"关于大小写问题\"]","content":"只能小写获取。也就是说，标签属性名尽量小写。\r\ndocument.body = `<a href=\"javascript:;\"  data-qNo=\"' + qNo + '\" data-index=\"' + i + '\">' + qNo + '1</a>`\n\nconsole.log(btn.dataset.qno)\r\n"},{"name":"js-dom-webapis","outline":"[\"document 对象\"]","content":""},{"name":"js-dom-webapis","outline":"[\"document 对象\",\"直接操作 title 标签值\"]","content":"console.log(document.title) // 读。String 类型\n\ndocument.title = \"*\" + document.title; // 设置\n\r\n**兼容性：**\nie9及以上。ie6~8估计得直接取到title标签进行操作了\r\n"},{"name":"js-dom-webapis","outline":"[\"document 对象\",\"页面加载状态 document.readyState\"]","content":"只读属性\r\n返回值：字符串。\r\n\"loading\"：页面加载进行中\r\n\"interactive\"：DOM对象可以操作了，此时图片视频未加载\r\n\"complete\"：页面已完全加载（此时图片视频都已加载完毕）\r\n兼容性：  \nopera没有interactive状态。只有loading、complete状态  \nie6\\7\\8\\9只有 点 刷新按钮 才有loading状态。通过URL重新加载页面 直接进入假的interactive状态(不可以操作DOM),\n所以只有在 点 刷新按钮 才能 实现DOMContentLoaded事件  \nchrome\\fox没问题\r\n"},{"name":"js-dom-webapis","outline":"[\"FormData\"]","content":"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\r\n创建与使用\r\n\n// 创建方案1：创建一个空的FormData对象\nvar formdata = new FormData()\n// 用 append 方法增加数据\nformdata.append(\"name\", \"诸葛亮\")\nformdata.append(\"blog\", \"http://www.cnblogs.com\")\nformdata.append(\"file\", document.getElementById('fileToUpload').files[0]) // 文件\n\n// 创建方案2：通过 form 元素初始创建\nvar formobj =  document.getElementById(\"form\")\nvar formdata = new FormData(formobj)\n// 同样可用 append 方法\nformdata.append(\"name\", \"司马懿\")\n\n// ajax 使用\nvar xhr = new XMLHttpRequest()\nxhr.open('post', '/file')\nxhr.send(formdata)\r\n参数1 相同，多次 append 依然有效\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件上传\"]","content":"兼容性：ie10+\r\n\n// 通过 input file 获取文件\n// input file 可以选多个，所以返回 files\nvar file = document.getElementById('file1').files[0];\n\n// FormData 模拟表单数据\n// https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects\nfd = new FormData();\nfd.append(\"file\", file);\n\n// 文件大小\n// file.size\n\n// 文件名\n// oFile.name // \"Fiddler2.7z\"\n\n// 文件类型\n// file.type\n// 类型过滤\nvar fileFilter = /^(image\\/bmp|image\\/gif|image\\/jpeg|image\\/png|image\\/tiff)$/i\nif (!fileFilter.test(file.type)) { }\n\n// ajax\nvar xhr = new XMLHttpRequest();\n// 进度条\nxhr.upload.addEventListener('progress', function (e) {\n    // 是否可以取到 进度数据\n    if (e.lengthComputable) {\n        console.log(e.loaded / e.total)\n    }\n})\n// 完成后触发\nxhr.addEventListener('load', uploadFinish)\n// 错误触发\nxhr.addEventListener('error', uploadError)\n// 终止触发\nxhr.addEventListener('abort', uploadAbort)\n\n// 上传\nxhr.open('post', '/file')\nxhr.send(fd)\n\n\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件系统 FileSystem API\"]","content":"window.webkitRequestFileSystem 这个方法目前只有chrome支持\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件系统 FileSystem API\",\"文件读取\"]","content":"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\r\n图片预览示例\r\n\nvar fileReader = new FileReader();\n// 文件读取 完后触发\nfileReader.onload = function (e) {\n    img.src = e.target.result;\n}\n// 文件读取为 DataURL，base64\nfileReader.readAsDataURL(document.getElementById('file').files[0]);\n\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件系统 FileSystem API\",\"base64\"]","content":"通过 FileReader 读取文件得到\r\nvar myfile = document.getElementById(\"myfile\").files[0];\nvar fileRead = new FileReader();\nfileRead.readAsDataURL(myfile);\nfileRead.onload = function(e){\n        console.log(e);\n        var base64 = e.target.result;\n        console.log(base64);\n        var img = new Image();\n        img.src = base64;\n        document.getElementsByTagName(\"body\")[0].appendChild(img);\n    }\r\n通过 canvas.toDataURL\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件系统 FileSystem API\",\"blob 获取\"]","content":"**blob 可直接进行 ajax 文件上传，无需转 file**\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件系统 FileSystem API\",\"blob 获取\",\"atob + Uint8Array 方式\"]","content":"参考网址: [DataURL, Blob, File, Image之间的关系与转换 - CSDN博客](https://blog.csdn.net/Tinker12345/article/details/78570456)\r\nfunction dataURLToBlob(dataurl){\n  var arr = dataurl.split(',');\n  var mime = arr[0].match(/:(.*?);/)[1];\n  var bstr = atob(arr[1]);\n  var n = bstr.length;\n  var u8arr = new Uint8Array(n);\n  while(n--){\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new Blob([u8arr], {type:mime});\n}\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件系统 FileSystem API\",\"blob 获取\",\"canvas.toBlob 方式\"]","content":"[HTMLCanvasElement - Web API 接口 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement)\r\nvar canvas = document.createElement('canvas')\ndocument.body.appendChild(canvas)\nvar ctx = canvas.getContext('2d');\nvar img = new Image();\nimg.onload = function(){\n  ctx.drawImage(img,0,0);\n  canvas.toBlob(blob => {\n    console.log(blob)\n  })\n}\nimg.src = '/img/bd_logo1.png';\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件系统 FileSystem API\",\"blob 转 file\"]","content":"必须带中括号\r\nvar file = new File([blob], 'test.png', {type: blob.type})\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 文件系统 FileSystem API\",\"浏览器直接打开 blob\"]","content":"window.open(URL.createObjectURL(blob))\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 无刷新改变 url\"]","content":"// 历史记录情况触发\nwindow.addEventListener('popstate', function(e){\n  var state = e.state; // 参数1\n  document.title = e.title; // 参数2\n}, false);\n\nhistory.pushState({page: 1}, \"title 1\", \"?page=1\");\nhistory.pushState({page: 2}, \"title 2\", \"?page=2\");\nhistory.replaceState({page: 3}, \"title 3\", \"?page=3\");\n\n// 触发 popstate 事件\nhistory.back();\nhistory.back();\nhistory.go(2);\n\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 本地存储\"]","content":""},{"name":"js-dom-webapis","outline":"[\"h5 本地存储\",\"localStorage/sessionStorage\"]","content":"localStorage 为永久存储\r\nsessionStorage 为临时存储，浏览器关闭则清除\r\n跟cookies类似，只针对某域名存储，只是容量变大了，每个域名有5M。\n只能存储字符串。\r\n两种方式操作相同，所以只举例 localStorage 用法：\r\n// 设置\nlocalStorage.setItem(\"foo\", \"isaac\")\n\n// 取，如果没有返回 null\nconsole.log(localStorage.getItem(\"foo\"))\n\n// 键值对 总个数\nlocalStorage.length\n\n// 取key，根据索引，在不知道key情况使用\nlocalStorage.key(i)\n\r\n兼容性：\nie6不支持，ie8好像支持，待测\r\n"},{"name":"js-dom-webapis","outline":"[\"h5 页面状态 Page Visibility\"]","content":"[MDN 文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Page_Visibility_API)\r\n可针对**网页是否可见**做必要的优化处理。\r\n比如，从视频播放页切换到其它选项卡，或者浏览器被最小化，或者被锁屏，停止播放。\r\n"},{"name":"js-dom-webapis","outline":"[\"h5全屏\"]","content":"[MDN 文档 - Fullscreen API](https://developer.mozilla.org/zh-TW/docs/Web/API/Fullscreen_API)\r\n"},{"name":"js-dom-webapis","outline":"[\"h5全屏\",\"执行全屏\"]","content":"var div1 = document.getElementById('div1');\ndiv1.webkitRequestFullScreen();\r\n"},{"name":"js-dom-webapis","outline":"[\"h5全屏\",\"取消全屏\"]","content":"document.webkitCancelFullScreen();\r\n"},{"name":"js-dom-webapis","outline":"[\"h5全屏\",\"全屏改变事件\"]","content":"\ndiv1.addEventListener('webkitfullscreenchange', function () {\n    div2.innerHTML = document.webkitIsFullScreen;\n}, true);\r\n"},{"name":"js-dom-webapis","outline":"[\"h5全屏\",\"判断是否全屏\"]","content":"console.log(document.webkitIsFullScreen)\r\n返回：布尔值\r\n"},{"name":"js-dom-webapis","outline":"[\"h5拖放\"]","content":"此处为临时摘抄，未整理验证完善\r\n[MDN文档参考](https://developer.mozilla.org/en-US/docs/Web/Events/drag)\r\n"},{"name":"js-dom-webapis","outline":"[\"h5拖放\",\"元素可拖放设置\"]","content":"<li draggable=\"true\"><img src=\"1.png\" alt=\"\" draggable=\"false\"><p>小5</p></li>\r\n"},{"name":"js-dom-webapis","outline":"[\"h5拖放\",\"相关事件：\"]","content":"dragenter:拖进目标  \ndragleave:拖离目标  \ndragover:  \n目标上拖动  \n只要不离开目标都将反复触发，如果拖动，将触发更快  \ndrop:目标上放下\r\ndragstart：开始拖放\ndragend：拖放结束\r\n**event：**\r\n//设置当前拖放元素的数据参数\ne.dataTransfer.setData('text', this.innerHTML);\n\n//获取当前被拖放元素的存放数据参数\n var text = e.dataTransfer.getData('text'); \n//设置鼠标样式\n e.dataTransfer.dropEffect = 'move';\r\n"},{"name":"js-dom-webapis","outline":"[\"IE 专属\"]","content":""},{"name":"js-dom-webapis","outline":"[\"IE 专属\",\"WScript 实现全屏\"]","content":"通过js触发按键命令\r\n// 触发F11键，实现全屏\n(new activexobject(\"WScript.Shell\")).sendKeys(\"{F11}\"); \n\r\n"},{"name":"js-dom-webapis","outline":"[\"IE 专属\",\"执行[注释]\"]","content":"/*@cc_on alert(123)@*/\n\n/*@cc_on 此处写点什么@*/\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"兼容性\"]","content":"包括 ie6 的所有\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"设置\"]","content":"// 比较直接的方式\n// 需处理减号风格。使用驼峰\n// 1\nelem.style.color = 'red';\n// 2\nvar style = elem.style;\nstyle.backgroundColor = 'red';\n\n// 使用 cssText\n// 无需处理减号\n// 会覆盖之前的，可使用加等\nelem.style.cssText += 'font-size:16px;';\n\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"获取\"]","content":"直接css属性、cssText\r\n如果没有设置返回 空字符串。\n设置了获取，将直接返回设置时的字符串\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"猜想：是否可以直接赋对象？\"]","content":"答案是不行\r\n// 错误例子\nelem.style = {\n    color: 'red',\n    backgroundColor: 'red'\n}\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"传统方式操作 style\",\"前缀问题\"]","content":"style.webkitAnimation\nstyle.MozAnimation\nstyle.msAnimation\n上例中\nWebkit 首字母大小写均可\nMoz 首字母必须大写\nms 首字母必须小写\n提醒：css语法中的属性名称是不区分大小写的，如-MOz-columns: 3 200px;\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"设置 - setProperty\"]","content":"无需处理减号风格\r\n示例\r\nelem.style.setProperty(\"color\", \"red\", \"important\");\nelem.style.setProperty('background-color', 'red');\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"获取 – getPropertyValue\"]","content":"只能获取内联css，即 style 标签属性内的 css\r\n没有返回 空字符串\r\nelem.style.getPropertyValue('background-color') // 'rgb(51, 51, 51)'\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"删除 - removeProperty\"]","content":"有返回值，返回删除的值\r\n<div style=\"width:10px\" id=\"elem\"></div>\n<script>\nconsole.log(elem.style.removeProperty('width')) // '10px'\n</script>\n\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"判断是否使用 important 优先级 - getPropertyPriority\"]","content":"返回值：string  \n有，返回 `important` 字符串; 没有，返回空字符串\r\n<div style=\"width:10px!important;height:20px\" id=\"elem\"></div>\n<script>\n  console.log(elem.style.getPropertyPriority('width')) // 'important'\n  console.log(elem.style.getPropertyPriority('height')) // ''\n</script>\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"内联css个数 – length\"]","content":"<div style=\"width:10px;height:20px\" id=\"elem\"></div>\n<script>\n  console.log(elem.style.length) // 2\n</script>\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"可操作索引\"]","content":"<div style=\"width:10px;height:20px\" id=\"elem\"></div>\n<script>\n  console.log(elem.style[0]) // 'width'\n</script>\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"新方式操作 style\",\"兼容性\"]","content":"ie9+、chrome、firefox  \nie9极不稳定。iphone ios8  似乎不支持，慎用\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"元素对象的 style 属性\",\"ie专属，ie6 ~ ie11\"]","content":"需处理减号分隔符\r\nel.style.setAttribute('backgroundColor', 'red');\r\n兼容性：\n所有ie。包括ie11\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"操作\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"操作\",\"innerHTML 方式\"]","content":"支持的浏览器：ie9+、Firefox、Safari、Chrome、Opera\r\n设置读取操作都行。\r\n直接操作style元素的innerHTML即可。且不需要设置type特性。\n当然，动态创建情况，需把style元素增加到文档中才会生效。\r\nie678只支持读取，设置操作将报错\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"操作\",\"textContent方式\"]","content":"支持的浏览器：ie9+、Firefox、Safari、Chrome、Opera\r\n跟innerHTML一样，设置读取都行\r\nie678压根没这个属性\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"操作\",\"styleElem.styleSheet.cssText IE独有方式\"]","content":"解决 ie6~8 兼容问题\r\n**设置**\r\neStyle.styleSheet.cssText = 'div{color:red}';\r\n**可读取**\r\n可获取任意style标签的值\r\nconsole.log(document.getElementsByTagName('style')[0].styleSheet.cssText);\r\n**必须设置 type属性，否则不生效**  \n而且 eStyle.styleSheet 将获取到 null 值\r\neStyle.setAttribute(\"type\", \"text/css\");//此属性不设也生效\r\n**兼容性**：  \nie6~8专用，ie9~10也支持，ie11不支持\r\n**例子：**\r\nvar eStyle = document.createElement('style');\neStyle.setAttribute(\"type\", \"text/css\");// 必须设置\neStyle.styleSheet.cssText = '#test{color:red;}';\ndocument.getElementsByTagName('head')[0].appendChild(eStyle);\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"操作\",\"兼容所有示例\"]","content":"function addCssText (txt) {\n  let eStyle = document.createElement('style')\n\n  if ('textContent' in eStyle) {\n    eStyle.textContent = txt\n    document.head.appendChild(eStyle)\n  } else {\n    // ie678\n    eStyle.setAttribute('type', 'text/css')\n    eStyle.styleSheet.cssText = txt\n    document.body.appendChild(eStyle)\n  }\n}\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"动态创建注意\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"动态创建注意\",\"位置\"]","content":"js创建的style元素可增加到任意位置，body，head 等都将生效，建议增加到head标签\r\n所有浏览器都如此\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"动态创建注意\",\"生效\"]","content":"需增加到文档中\n所有浏览器都如此\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"style 元素\",\"关于 jq 的 html 方法\"]","content":"并非简单的 innerHTML。对 style 有特别处理，使其生效。(会将style元素插入head中的)\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"全能取css值\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"全能取css值\",\"高级 - getComputedStyle\"]","content":"外部样式表、内部样式表、内联样式，transition 过程中，都能被获取到\r\n只能取，不能设置\r\nvar s = window.getComputedStyle(el)\n// 伪类元素\nvar s = window.getComputedStyle(el, '::after')\n\n// 取值的三种方式\nconsole.log(\n  s['background-color']\n  s.getPropertyValue('background-color'),\n  s.backgroundColor,\n)\n\n// 常用写法\nwindow.getComputedStyle(el)['background-color']\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"全能取css值\",\"高级 - getComputedStyle\",\"兼容性：ie9+，chrome，firefox\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"全能取css值\",\"ie6 ~ 9\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"全能取css值\",\"ie6 ~ 9\",\"取操作\"]","content":"var ieStyle = eTest1.currentStyle;\nconsole.log(ieStyle.backgroundColor); // ie6 ~ 8\nconsole.log(ieStyle.getPropertyValue('background-color')); // 只有ie9\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"全能取css值\",\"ie6 ~ 9\",\"写操作 尝试\"]","content":"// 同样也报不允许错误\nieStyle.backgroundColor = 'red';\nieStyle.setProperty('background-color','red');\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"className 操作\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"className 操作\",\"直接操作 className 属性\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"className 操作\",\"直接操作 className 属性\",\"增删改查\"]","content":"console.log(eB.className); // 直接通过元素操作\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"className 操作\",\"关于className中包含多个空格 影响\"]","content":""},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"className 操作\",\"关于className中包含多个空格 影响\",\"className 属性的影响\"]","content":"取值影响: 不管类名中包含多少空格，取值时也会如实取过来\r\n<div class=\"   banner-show    test   \" id=\"fadeDemo\">\n\ninfo.innerHTML = fadeDemo.className.match(/ /g).length; // 10\n\r\n兼容性：所有\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"className 操作\",\"关于className中包含多个空格 影响\",\"对getElementsByClassName的没有影响\"]","content":"不管是 \r\n<div class=\"   banner-show    test   \">\r\n还是\r\ndocument.getElementsByClassName('                    banner-show')\r\ngetElementsByClassName 都会忽略掉多余的空格，视为正常的书写，也就是程序最终视为这样：\r\n<div class=\"banner-show test\"> \r\ndocument.getElementsByClassName('banner-show')\r\n兼容性：支持getElementsByClassName的浏览器都是如此\r\n"},{"name":"js-dom-webapis","outline":"[\"js 操作 css\",\"className 操作\",\"操作 className 新方式 - classList\"]","content":"兼容性：ie10+\r\n判断是否包含某类名  \n一次只能判断一个类名，貌似jq的hasClass也是如此\r\nvar isActive = document.getElementById(\"mySwitch\").classList.contains(\"mui-active\");\r\n增加class\r\n//添加mui-active类，打开开关\nele.classList.add('mui-active');\r\n删除class\r\n//删除mui-active类，关闭开关\nele.classList.remove('mui-active');\r\n自动增删class\r\n//也可以直接使用toggle方法自动处理打开或关闭\nele.classList.toggle('mui-active');\r\n"},{"name":"js-dom-webapis","outline":"[\"URL 解析\"]","content":"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/URL\r\nnew window.URL('http://baidu.com') // 返回一个与 location 差不多对象\n\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\"]","content":"[事件类型一览表](https://developer.mozilla.org/zh-CN/docs/Web/Events)\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"dispatchEvent 手动触发事件\"]","content":"至今才知道。。。再一次证明，书看的少多可怕\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"阻止冒泡\"]","content":"e.stopPropagation()\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"阻止默认动作\"]","content":"if (e.cancelable) e.preventDefault() //cancelable、preventDefault结合使用\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"键盘输入事件\"]","content":""},{"name":"js-dom-webapis","outline":"[\"事件\",\"键盘输入事件\",\"常用的几个 keyCode\"]","content":"回车键：13\r\nshift：16\r\nctrl：17\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"键盘输入事件\",\"keypress 字符键触发\"]","content":"先触发后输入\r\n可以阻止输入触发\r\n问题：\r\n删除键，这种能改变字符串的不触发\r\n使用中文输入法输入时也不触发\r\n是否是先触发后输入？\n兼容性如何？\r\n不建议当做input事件触发前的监听事件：\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"键盘输入事件\",\"input 有字符输入则触发\"]","content":"实现输入字符 后触发\n改变后触发，即输入发生后触发\r\n**1.Firefox、Safari、Chrome**\n除了input、textarea，还适用于div文本框。所有符号键 （包括删除键）\r\ndiv文本框 添加元素居然不触发，手动添加文本是否也不会触发呢\r\nText1.oninput = function (e) {\n    alert('');\n    console.log(1);\n};\r\n**2.IE**\n只适用于固有的input、textarea 输入框\r\nie6 ie7 ie8 ie10  值变动就会触发\r\nie9字符键触发，删除键不会触发\r\nText1.onpropertychange = function (e) {\n    alert('');\n    console.log(1);\n};\r\n**3.Opera**\n没有\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"触摸事件\"]","content":"`touchcancel`：没有可能再触发触摸事件时触发。比如，触发默认的页面滚动后，将停止监听，即触发此事件\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"触摸事件\",\"特性\"]","content":"**多点 touch，元素外的点也会增加 TouchList：**\ntouch 事件元素外增加触摸点，不会触发touch事件，但是原事件的TouchList 会多一个。\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"触摸事件\",\"e.touches 与 e.targetTouches 区别\"]","content":"touches 是所有在屏幕上的点，targetTouches是当前事件元素上的点\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"鼠标事件\"]","content":""},{"name":"js-dom-webapis","outline":"[\"事件\",\"鼠标事件\",\"点下、松开\"]","content":"mousedown、mouseup\r\n鼠标左右键都将触发\r\n**ie678，点击失效问题(点击过快情况)**\r\n$('#div_test').mousedown(function () {\n  console.log('-----------------点下');\n}).mouseup(function () {\n  console.log('松开'); \n});\n// 出现如下日志：\n// 日志: -----------------点下 \n// 日志: 松开 \n// 日志: 松开\n\n// 也就是执行了两次 松开事件了，\n// 如下写法可以解决：\nfunction eUp() {\n  console.log('松开');\n  $('#div_test').unbind('mouseup', eUp);\n}\n$('#div_test').mousedown(function () {\n  console.log('-----------------点下');\n  $('#div_test').mouseup(eUp);\n});\n\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"鼠标事件\",\"右键菜单\"]","content":"el.oncontextmenu = function () {\n  e.preventDefault() // 阻止默认菜单弹出\n}\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"鼠标事件\",\"双击\"]","content":"// 兼容性：所有浏览器\nel.ondblclick = function () {}\nel.addEventListener('dblclick', function () {})\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"鼠标事件\",\"移入事件\"]","content":"//1、正常的 移入移出 事件：onmouseover移入、onmouseout移出】\n//兼容性：all浏览器\n\n/* ----------------------------------------------\n * 事件中特有属性——relatedTarget属性\n *\n *获取 触发事件 后 鼠标\n* 之前所处 元素对象——onmouseover移入事件\n *当前所处 元素对象——onmouseout移出事件\n *\n * event对象的属性，只对这两个事件有效：onmouseout移出事件、onmouseover移入事件\n*\n * 兼容性： 所有ie中 只有ie9支持。非ie浏览器没问题\n */\nalert(e.relatedTarget.className);\n\n/***********************************************************/\n//2、特殊的 移入移出 事件\n//【onmouseenter移入、onmouseleave移出】\n//事件 根元素 及其后代 看成一个整体 来触发此事件\n//兼容性：所有ie，Opera支持。fox、Chrome现在已经支持了\n\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"鼠标事件\",\"滚轮事件\"]","content":"[滚轮事件#浏览器兼容性 - MDN](https://developer.mozilla.org/zh-CN/docs/Web/Events/wheel#浏览器兼容性)\r\n目前标准 `wheel`：\r\nelem.addEventListener('wheel', function (e) {\n  e.preventDefault()\n  console.log(e.deltaY > 0)\n})\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"滚动条事件\"]","content":"scroll\r\n// 给元素绑定\nel.onscroll = function () {}\n// 给浏览器窗口绑定\nwindow.onscroll = function () {}\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"滚动条事件\",\"新版 chrome 窗口滚动条默认无法阻止解决\"]","content":"https://segmentfault.com/a/1190000007913386\r\n即给 document、document.body 绑定的 touchstart、touchmove 默认无法通过 preventDefault 阻止浏览器窗口滚动条滚动\r\n注：给其他元素绑定可阻止浏览器窗口滚动条\r\n需通过如下方式\r\ndocument.addEventListener('touchmove', touchmove, { passive: false })\r\npassive 支持检测。引自 [addEventListener | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)\r\nvar passiveSupported = false;\n\ntry {\n  var options = Object.defineProperty({}, \"passive\", {\n    get: function() {\n      passiveSupported = true;\n    }\n  });\n\n  window.addEventListener(\"test\", null, options);\n} catch(err) {}\r\n但旧版浏览器不支持此种参数\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"设备旋转事件\"]","content":"chrome 模拟的是旋转前触发\r\nandroid 机未测\r\nios 11 旋转后触发，可获取真实的浏览器宽度\r\nwindow.addEventListener(\"orientationchange\", function () {\n  // screen.orientation ios 11 不支持\n  document.body.innerHTML = (screen.orientation.angle + '--' + window.innerWidth);\n})\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"resize 窗口变化事件\"]","content":"ios 旋转有动画，resize是否能获取真实浏览器宽？\r\nios 11 可以，也就是说旋转后触发。动画前触发。动画不影响宽度获取，估计动画是假象，动画前就已经渲染完成\r\n印象中之前某次测试的是旋转前，难道是修复了？？\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"阻止失焦\"]","content":"鼠标情况在 `mousedown` 中阻止\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"问题\"]","content":""},{"name":"js-dom-webapis","outline":"[\"事件\",\"问题\",\"移动端(android) touchend 中 focus() 获焦失败\"]","content":"el.addEventListener(\"touchend\", function (e) {\n  e.stopPropagation() // 要让获焦成功，android 必须加这个\n  ipt.focus()\n})\r\nandroid 在 touchend 后有默认动作触发，如果在 touchend 中通过 focus 使某文本框获焦，会立马失焦。ios 没此问题\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"问题\",\"移动端 chrome touchmove 卡顿现象\"]","content":"chrome 在触发默认滚动条时，move 事件卡顿，触发频率很低\r\n"},{"name":"js-dom-webapis","outline":"[\"事件\",\"问题\",\"ios document click 无效问题\"]","content":"https://stackoverflow.com/questions/3705937/document-click-not-working-correctly-on-iphone-jquery\r\nhtml {\n  cursor: pointer;\n}\r\n"},{"name":"js-dom-webapis","outline":"[\"元素 clone\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素 clone\",\"使用 document.importNode\"]","content":"[document.importNode - Web API 接口 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/importNode)\r\nvar node = document.importNode(externalNode, deep);\r\n**疑问？**\r\n事件绑定是否也被 clone\r\n**兼容性：**\r\nie9+\r\n并且，参数`deep`(深度克隆) ie都不支持\r\n"},{"name":"js-dom-webapis","outline":"[\"元素 clone\",\"其实还可使用 innerHTML、outerHTML 进行 clone\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素对象创建\"]","content":"// 通用\nvar div1 = document.createElement(\"div\");\n\n// 部分元素独有\nvar img = new Image() // img 元素\n\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点替换(适用元素)\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点替换(适用元素)\",\"子节点替换\"]","content":"[replaceChild 文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Node/replaceChild)\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点替换(适用元素)\",\"子节点替换\",\"语法\"]","content":"replacedNode = parentNode.replaceChild(newChild, oldChild);\r\nreplacedNode 和oldChild相等。\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点替换(适用元素)\",\"子节点替换\",\"例子\"]","content":"elemCont.replaceChild(elzBox, elemCont.firstElementChild)\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点替换(适用元素)\",\"子节点替换\",\"兼容性\"]","content":"ie6+\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点增加\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点增加\",\"末尾追加子节点(适用元素)\"]","content":"elem.appendChild(elem2);\r\n兼容性：包括ie6的所有\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点增加\",\"元素内部增加 insertBefore\"]","content":"目标节点内部，目标节点的后代节点前面\r\n参数\r\n参数1 要添加节点/元素\r\n参数2 后代节点/元素\r\n兼容性：包括ie6的所有\r\nel.insertBefore(newElem, childElem);\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素增加\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素增加\",\"增加 html 文本 - insertAdjacentHTML\"]","content":"[文档很详细](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML)\r\nelement.insertAdjacentHTML(position, text);\r\n<!-- beforebegin -->\n<p>\n<!-- afterbegin -->\nfoo\n<!-- beforeend -->\n</p>\n<!-- afterend -->\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素增加\",\"增加元素 - insertAdjacentElement\"]","content":"[文档很详细](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentElement)\r\nelement.insertAdjacentElement(position, element);\r\n<!-- beforebegin -->\n<p>\n<!-- afterbegin -->\nfoo\n<!-- beforeend -->\n</p>\n<!-- afterend -->\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点克隆/复制(适用元素)\"]","content":"[MDN 文档，很详细](https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode)\r\n**语法**：\n`var dupNode = node.cloneNode(deep);`\r\n**参数**：\r\n**deep**\r\n是否采用深度克隆,如果为true,则该节点的所有后代节点也都会被克隆,如果为false,则只克隆该节点本身.\r\n**兼容性**：ie5+，其他高级\r\nvar eUl = document.getElementsByTagName(\"ul\")[0]\nvar dupNode = eUl.cloneNode(true); // 进行深度克隆\ndocument.body.insertBefore(dupNode, eUl);\n\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点替换(适用元素)\"]","content":"[MDN 文档，很详细](https://developer.mozilla.org/zh-CN/docs/Web/API/Node/replaceChild)\r\n`replacedNode = parentNode.replaceChild(newChild, oldChild);`\r\n**参数**\r\n**newChild**\r\n替换oldChild的元素，可以是新建的，也可以是文档中现有的\r\n**oldChild**\r\n**兼容性**：ie5+，其他高级\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"识别文档中不存在元素\"]","content":"即：通过innerHTML删除的元素。或者，createElement 创建后还未加入页面中的元素\r\n// baseURI 为当前页面url\n// offsetParent 为定位参照元素\n\n// 如果不存在\n\n// baseURI 为空字符串\nelem.baseURI // ''\n\n// offsetParent 为 null\nelem.offsetParent // null\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签文本操作\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签文本操作\",\"innerText\"]","content":"描述：\n取解析后的文本格式，即最终被显示的文本格式\n\n兼容性：\nie(包括edge)，chrome：\n会转换元素，但不会保留文本换行，单个或连续的多个 换行、空格都将会转为单个空格。\n就如描述说的那样，页面实际显示成什么样子，取到的文本格式就是什么样子\n（关于转换元素：比如p元素会转为换行）\nfirefox：\n42版也不支持\n\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签文本操作\",\"textContent\"]","content":"不会转换元素，但会保留文本换行，多个连续换行\\空格都会被保留\n相当于去标签版的innerHTML\r\n兼容性：ie678不支持\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签文本操作\",\"innerHTML\"]","content":"描述：\n按当时书写原始格式原封不动的输出来\r\nie678 特殊性：\n不保留原始格式，保留带标签的解析后的文本格式。也就是本质还是innerText，只是这次保留了标签\r\nie6/7/8/9 bug：\n设置祖先的innerHTML属性时，会将设置前缓存的后代元素innerHTML属性设置为空字符串\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签文本操作\",\"outerHTML\"]","content":"包含当前元素本身的html文本，格式与innerHTML一样。也具有ie678 innerHTML属性的特殊性\n兼容性：包括ie6的所有\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签文本操作\",\"textContent 与 innerText 区别\"]","content":"**换行符 (\\n)**\r\ndocument.body.textContent= 'hello \\n word!'\n// \\n 依然是空格\n\ndocument.body.innerText= 'hello \\n word!';\n // \\n 能够转成 <br/>\r\n**textContent 居然只能单向**\n也就是说，获取操作可以从html 转成 text，设置操作不能将text转成html\nhtml 转成 text指的是：块元素或者br等转成 \\r\\n\ntext无法转成html指的是：\\r\\n 无法被转成 块元素了\r\n**innerText 可以双向**，兼容：ie方面，包括ie6的所有。chrome。firefox目前也已经支持\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签文本操作\",\"总结\"]","content":"不管是innerText或innerHTML， ie678 只会返回解析后的文本。所以，无法做到与textContent 等同，\n甚至没法做到与高级浏览器innerHTML等同\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签属性操作\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签属性操作\",\"通用全能操作\"]","content":"获取\r\n/*\n 属性值读取方式1\n\n 根据 指定属性名 获取——getAttribute方法\n 这里讲的获取方式是：通过 [元素节点]对象的getAttribute方法 获取\n 没有此属性情况 返回null\n 兼容性：ie6部分属性依然无法获取，像class属性，即使有设置，获取的竟然是null。其他浏览器正常\n */\n//没有此属性情况 返回null\nvar attrValue = div2.getAttribute(\"class\");\n\n/*\n属性值读取方式2：通过属性的对象形式，nodeValue\n此方式还可直接进行设置\n兼容性：所有浏览器兼容\n*/\r\n设置\r\nscript.setAttribute('class', '');\n// ie6+ 支持\n// ie67 不支持这样设置css， elem.setAttribute('style','background:#333'); \r\n删除\r\ndiv2.removeAttribute(\"class\");\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签属性操作\",\"部分直接 js 操作\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签属性操作\",\"部分直接 js 操作\",\"name 标签属性 -- 表单元素独有\"]","content":"可读写\r\ndocument.getElementById(\"pwd\").name = \"password\";\r\n**真正拥有name属性的元素：**\n目前知道的有 所有的input元素、img元素。即使你不为这些元素的name属性给值，通过js获取的是 空字符串。\r\n**没有name属性的元素却强制给了name属性：**\n通过对象的name属性 将获取到undefined。但ie6可以获取成功\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签属性操作\",\"部分直接 js 操作\",\"class 标签属性 -- 通过 className 读写\"]","content":"el.className = 'main'\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"元素标签属性操作\",\"部分直接 js 操作\",\"id 标签属性\"]","content":"el.id = 'jj'\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"多个节点增加效率写法-文档碎片\"]","content":"可以理解为一个临时顶级元素，被加入文档时只有其中的成员才会被加入\r\n举例\n非文档碎片的 **低效率写法**\r\nvar arrText=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"];\n for(var i=0;i<arrText.length;i++)\n {\n    var op=document.createElement(\"P\");\n    var oText=document.createTextNode(arrText[i]);\n    op.appendChild(oText);\n    document.body.appendChild(op);\n }\r\n 这段代码运行良好，但问题是它调用了十次document.body.appendChild(),每次要产生一次页面刷新\r\n**文档碎片写法**\r\nvar arrText=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"];\nvar oFrag=document.createDocumentFragment();\n\nfor(var i=0;i<arrText.length;i++)\n{\n    var op=document.createElement(\"P\");\n    var oText=document.createTextNode(arrText[i]);\n    op.appendChild(oText);\n    oFrag.appendChild(op);\n\n}\ndocument.body.appendChild(oFrag);\r\n`document.body.appendChild()` 仅调用了一次，这意味首只需要进行一次屏幕的刷新。\n这里指的刷新：页面的本质发生改变，显示并没任何改变，只有在执行完代码后，显示才会有改变\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"文本节点相关\"]","content":"inserData(offset,string) 指定位置插入\nappendData(string) 追加\ndeleteData(off,count,string)  删除指定字符\nsplitData(offset) 拆分成两个节点\nsubstring(offset,count)\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点类型 node.nodeType\"]","content":"兼容性：所有浏览器\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点名称 node.nodeName\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"节点值 node.nodeValue\"]","content":"兼容性：所有浏览器\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点\",\"对象形式操作 元素属性\"]","content":"当对象 获取到后，就可通过 nodeType、nodeName、nodeValue属性进行操作了\r\nnodeType：将返回一个Number类型，表明此对象是属性节点。只读\r\nnodeName：属性名。只读\r\nnodeValue：属性值。可读写。获取的值特点：将去掉两头的 空格符、换行符。且中间的连续空格符只保留一个，不保留换行符\r\n兼容性：所有\r\n// 创建 class 属性\nvar classAttr = document.createAttribute(\"class\");\n\n\n\n// 设置到元素上\nelem.setAttributeNode(classAttr);\n\n// 获取\nconsole.log(elem.getAttributeNode(\"class\") === classAttr)\n\n// 获取所有\n// ie6 获取到的不只有标签属性 ，还有 元素的js属性\nvar attrs = elem.attributes;\n\n// 删除\n// 兼容性：ie6 删除src时，有问题。没有 removeAttribute 好\nelem.removeAttributeNode(classAttr);\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点删除\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点删除\",\"remove\"]","content":"document.getElementsByTagName('input')[0].remove();\r\n包括ie11的所有ie、Safari 不支持。  \nchrome、firefox支持  \n低版本安卓 4.3以下webview不支持。\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点删除\",\"removeChild\"]","content":"完美兼容方式。兼容ie6\r\nvar elem = document.getElementsByTagName('input')[0];\nelem.parentNode.removeChild(elem);\r\n以上两种都是Node的方法。也可用于Element\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"简单汇总\"]","content":"<pre>\ngetElementById,\ngetElementsByName,\ngetElementsByTagName\ngetElementsByClassName\nquerySelector\nquerySelectorAll\n\n其中\nquerySelector\nquerySelectorAll\n实现模拟 css选择器。ie8(含)以上 及其他高级\n可以document直接调用，也可元素调用，元素调用则在所有后代中赛选\n获取不到情况也将返回空的 NodeList []，并非 null 等可隐式转换 false 的值，所以无需担心循环报错问题\n\n\nhttp://www.cnblogs.com/kissdodog/archive/2012/12/25/2833213.html\n\n1、firstElementChild        第一个子元素节点\n2、lastElementChild        最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点 ie9+\n4、previousElementSibling    前一个兄弟元素节点ie9+\n5、childElementCount        子元素节点个数量\n\n</pre>\n\n\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"根据 id 取\"]","content":"取不到情况返回 null\r\n<div id=\"test2\"></div>\n<script>\n// 兼容性：all浏览器\n\n// 直接取。即直接通过id名获取\ntest2.innerHTML = 'hello word';\n\n// 通过 document.getElementById(idname)\nconsole.log(document.getElementById(\"test2\") === test2) // true\n</script>\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"子元素集合 children\"]","content":"兼容性：所有浏览器都支持。只是ie6注释节点也被获取到了\r\n**返回 HTMLCollection 对象。拥有实时特性**\n元素被移走后，children值会实时改变，并不区分是否在文档中。ie6也支持此特性\r\n// 1在页面文档中的例子:\nvar chils = document.body.children;\ndocument.body.appendChild(document.createElement('s'));// 先更改\ninfo.innerHTML = chils.length;// 后取。依然最新\n\n// 2不在页面文档中的例子:\nvar el = document.createElement('div'),\n    chils = el.children;\nchils = el.children;\nfor (var i = 0; i < 5; i++) {\n    el.appendChild(document.createElement('div'));\n}\nconsole.log(chils.length) // 依然最新\n\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"紧邻元素获取\"]","content":"其他关键字：相邻元素\r\n上一个\r\nelem.previousElementSibling // 元素 ie9+\nelem.previousSibling // 节点 ie6+\r\n下一个\r\nelem.nextElementSibling // 元素 ie9+\nelem.nextSibling // 节点 ie6+\r\nchrome、firefox 也是支持的\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"第一个子元素\"]","content":"[firstElementChild 文档](https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode/firstElementChild)\r\n语法\nvar element = node.firstElementChild;\r\n例子\r\n<ul id=\"foo\">\n  <li>First  (1)</li>\n  <li>Second (2)</li>\n  <li>Third  (3)</li>\n</ul>\n\n<script>\nvar foo = document.getElementById('foo');\n// yields: First  (1)\nconsole.log(foo.firstElementChild.textContent);\n</script>\r\n兼容性：ie9+\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"事件元素\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"事件元素\",\"事件根元素\"]","content":"即正真拥有此事件的 对象。通过 **this** 获取。\n如果要讲的更贴切一点，this获取的是执行此事件的对象\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"事件元素\",\"当前事件元素\"]","content":"1、event.target 属性\n兼容性：ie中 只有ie9支持，其他浏览器没问题\r\n2、event.srcElement 属性\n兼容性：fox 不支持。其他没问题\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"后代元素获取\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"后代元素获取\",\"指定标签名的后代元素\"]","content":"var objs = div2.getElementsByTagName(\"div\");\r\n返回值：HTMLCollection 集合对象\r\n没获取任何后代情况：返回的依然是 集合对象，只是length属性为0\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"后代元素获取\",\"所有后代\"]","content":"// 1 getElementsByTagName(\"*\")\n// 兼容性：IE6中[注释节点]也被获取到了。其他浏览器正常\nvar objs = elem.getElementsByTagName(\"*\"); // elem 下的后代\nvar objs = document.getElementsByTagName(\"*\"); // 所有\n\n// 2 querySelectorAll('*')\nlet all = eBox.querySelectorAll('*');\n\n// 3\n// 兼容性：~ie11。其他不支持，包括edge也不支持\nvar elems = document.all //  等同 document.getElementsByTagName(\"*\")\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"后代元素获取\",\"根据 name - getElementsByName\"]","content":"var elems = elem.getElementsByName(\"name1\");\nvar elems2 = document.getElementsByName(\"name2\"); // 全范围查找\n\r\n兼容性：ie6 - ie9 只有表单元素 才有 name 属性？\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"后代元素获取\",\"根据 class - getElementsByClassName\"]","content":"// 兼容性：ie9+\nvar elems = elem.getElementsByClassName('box');  // 全范围查找\nvar elems2 = document.getElementsByClassName('box');  // 全范围查找\n\r\n**返回值：HTMLCollection**\n没获取任何后代情况，返回的依然是集合对象，只是length属性为0\r\n兼容性：IE6中[注释节点]也能获取到，标签名为!字符。其他浏览器正常\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"根据元素取 document 对象\"]","content":"兼容：包括ie6的 所有\r\nconsole.log(document.body.ownerDocument === document) // true\n\n// document 自身也有ownerDocument，不过返回null\ndocument.ownerDocument // null\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"一些疑虑\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"一些疑虑\",\"display:none 元素的获取\"]","content":"纯属多虑，没区别，所有浏览器都是如此\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"一些疑虑\",\"取元素集合，元素顺序问题\"]","content":"顺序根据文档从上到下，与元素层级关系无关\r\n测试例子\r\n<ul class=\"u1\">\n    <li>1</li>\n    <li>3</li>\n    <li>2</li>\n    <li>1</li>\n</ul>\n<div>\n    <ul class=\"u2\">\n        <li>1</li>\n        <li>4</li>\n        <li>3</li>\n        <li>1</li>\n    </ul>\n</div>\n\n<script>\nconsole.log(document.getElementsByTagName('li'));\nconsole.log($('.u1 li').add($('.u2 li')));\n</script>\n\r\n"},{"name":"js-dom-webapis","outline":"[\"元素、节点获取\",\"父节点、父元素\"]","content":"一般来说，元素的父节点肯定是元素。所以 parentNode 一般通用\r\nvar node = el.parentNode\nvar parent = el2.parentElement\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 精确\"]","content":"[let rectObject = Element.**getBoundingClientRect**()](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect) - 元素尺寸坐标\r\n--- 或者 ---\r\n[let style = window.**getComputedStyle**(element, [pseudoElt]);](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle) - 计算元素 css 值\r\ngetComputedStyle 还能获取动画(transition、animation)过程中的css值(animation 未实际测试，待测)\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\"]","content":"获取的是四舍五入的整数\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"汇总\"]","content":"1、元素窗口高宽：一般能对应 css(非auto情况) height、width 值\n不包括边框 和 滚动条\nclientHeight\nclientWidth\n包括边框\noffsetHeight\noffsetWidth\n2、内容高宽：不包括边框 和 滚动条\nscrollHeight\nscrollWidth \r\n**都是只读属性**\r\n**有几种情况将取不到值(即值为0)：**\r\n样式 display 属性值 为none\r\n对象 被动态 创建后 并没有插入html中\r\n操作的是内联元素\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\"]","content":"以下 clientWH 简写指 clientHeight、clientWidth\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\",\"inline 元素也将得到 0\"]","content":"使用 inline-block 解决\r\noffsetWidth、offsetHeight 没有这个问题\r\n兼容情况待测\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\",\"描述\"]","content":"不包括边框、滚动条\n包括padding ，也就是从padding开始\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\",\"返回值：Number类型\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"clientHeight、clientWidth属性——不包括边框 和 滚动条\",\"兼容性：\"]","content":"**ie6\\7有问题：**ie6\\7中，如果元素的css高宽为auto时，获取到的是0。html、body元素没问题\r\n**ie6\\7问题解决办法：**  \n需要获取元素高宽时，都是为了获取 与css高宽等价的值。可以通过下面的offset属性获取。  \n如，offsetWidth(元素实质宽)-clientLeft*2(边框一般有左右宽，所以乘2) 即可获取 css宽度，且兼容所有浏览器\r\n**与 css width 关系**  \n一般情况下等同css 的width，以下列出两种例外\r\n设置了 box-sizing: border-box 后，此种情况下，css width 包括了 边框，js clientWH 依然不包括边框\r\ndisplay: none 情况，js clientWH 将固定取都0\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"offsetHeight、offsetWidth属性——包括边框\"]","content":"不包括margin，也就是从边框外边起始\r\n返回值：Number类型\r\n兼容性：所有浏览器。强调，ie6\\7没有上述client属性的问题\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"高宽 - 无法精确到小数\",\"scrollHeight、scrollWidth属性——内容高宽，不包括边框\"]","content":"包括padding，即从边框内边起始\r\n元素内容高度：元素显示高度+元素最大滚动高度(即被隐藏的高度)\r\noverflow: hidden/auto 情况下用来获取元素内容高宽\n这种情况client、offset都只能取到显示高宽\r\nie6不建议使用：  \nie6虽然支持，但是很怪异，似乎跟字体大小行高都有关系。\n而且如果直接在body下面执行scrollHeight，即同步文档执行，取到的值几乎等同容器高度。异步延后执行又对了，估计同步情况页面都没渲染出来吧，所以取不到\r\n"},{"name":"js-dom-webapis","outline":"[\"元素尺寸\",\"边框宽度\"]","content":"或者说是从padding到margin的距离。。。  \n**只能获取 左上 两边边框宽度**  \nclientLeft左、clientTop上\r\n**只读属性**\r\n有几种情况将取不到值(即值为0)：\r\n样式 display 属性值 为none\r\n对象 被动态 创建后 并没有插入html中\r\n操作的是内联元素\r\n**兼容性：**\n包括ie6的所有\r\n**ie6\\7特殊情况：**  \n目标元素css高宽造成 获取的clientLeft、clientTop值有误\n当目标元素的css高宽值 都为auto时，获取到的是0。\n解决办法，在ie6\\7中，最好给元素的高宽设置具体值\r\n"},{"name":"js-dom-webapis","outline":"[\"元素集合 HTMLCollection\"]","content":""},{"name":"js-dom-webapis","outline":"[\"元素集合 HTMLCollection\",\"实时改变特性\"]","content":"**原生获取的 HTMLCollection 集合对象都具有实时改变特性**。  \n即转移或者删除某元素，其存在的HTMLCollection集合对象会实时改变。children 属性获取的就是 HTMLCollection 。\r\n兼容性：包括ie6的所有\r\nvar eDiv = document.getElementById('test').getElementsByTagName('div');\n\nconsole.log(eDiv.length); // 2\n\ndocument.body.appendChild(eDiv[0]);\n\nconsole.log(eDiv.length); // 1\r\n"},{"name":"js-dom-webapis","outline":"[\"元素集合 HTMLCollection\",\"判断某集合是否是HTMLCollection类派生\"]","content":"document.getElementsByTagName('div') instanceof HTMLCollection;// true\r\n"},{"name":"js-dom-webapis","outline":"[\"元素集合 HTMLCollection\",\"根据name标签属性检索元素\"]","content":"从集合中检索\r\nHTMLCollection.prototype.namedItem(name)\r\nvar elem = document.getElementsByTagName('div').namedItem('name1')\r\n兼容性：  \nie全系列，包括edge，只支持表单内元素。也许是因为name属性本身就是为表单元素而生\n其他高级浏览器div都支持\r\n"},{"name":"js-dom-webapis","outline":"[\"元素集合 HTMLCollection\",\"根据标签名检索 - ie独有\"]","content":"返回：HTMLCollection集合\r\nHTMLCollection.prototype.tags(tagName)\r\ndocument.getElementsByTagName('*').tags('input');\r\n兼容性：全系列ie支持，包括edge。其他高级均不支持\r\n"},{"name":"js-dom-webapis","outline":"[\"光标操作\"]","content":"[Range - Web API 接口 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Range)\r\n"},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"textarea input[type=text]\"]","content":""},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"textarea input[type=text]\",\"ie10+\"]","content":"属性 selectionStart、selectionEnd。可读写。通过此属性实现移动和选择\r\n还有属性 setSelectionRange？？待测\r\n方法 select 实现全选\r\n\n//// 光标到文本最后 ////\n\nelInput.selectionStart = elInput.selectionEnd = elInput.value.length;\n\n//// 选择指定 ？   ////\n\nelInput.setSelectionRange(0, 0);\n\n//// 实现全选      ////\n\n// 1 直接使用 select\nelInput.select()\n\n// 2 变相实现。推荐方式1...\nelInput.selectionStart = 0;\nelInput.selectionEnd = elInput.value.length;\r\n"},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"textarea input[type=text]\",\"ie6/7/8/9\"]","content":"通过操作 selection range 实现\r\n**撤销当前选中**`document.selection.empty()`\r\n**创建活动区域的Range对象**`document.selection.createRange()`\r\n**对指定的 range 执行选中**`range.select()`\r\n"},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"ie 678 selection、range\"]","content":"var sel= document.selection;\nvar r = sel.createRange();\n\nr.moveEnd(\"character\",3);//从当前位置 起，往右选择3个字符\nr.select();//执行选择\n\nr.moveStart(\"character\",-3);// 从当前位置 起，往左选择3个字符\nr.select();//执行选择\n\n// 获取 选中文字\nconsole.log(r.text);\n\n// 光标前 插入 html文本\nr.pasteHTML('<img src=\"http://ctc.qzonestyle.gtimg.cn/qzone/em/e122.gif\">');\n\n// 还要通过 focus 才能出现光标，待测\nel.focus();\r\n"},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"富文本光标操作\"]","content":""},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"富文本光标操作\",\"将光标设置到末尾\"]","content":"let selection = window.getSelection()\nlet range = document.createRange()\nrange.selectNodeContents(elem)\nrange.collapse()\nselection.removeAllRanges()\nselection.addRange(range)\r\n**Microsoft Edge `selection.addRange` 必须再最后**  \n如下代码所示将无发获焦，其他浏览器没问题\r\nlet selection = window.getSelection()\nlet range = document.createRange()\nselection.removeAllRanges()\nselection.addRange(range)\nrange.selectNodeContents(elem)\nrange.collapse()\r\n"},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"实用代码块\"]","content":""},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"实用代码块\",\"表情增加\"]","content":"var imgTxt = '<img src=\"http://ctc.qzonestyle.gtimg.cn/qzone/em/e122.gif\">';\nvar sel, range;\nif (window.getSelection) {\n    var imgDom = $(imgTxt);\n\n    //光标选区对象\n    sel = window.getSelection();\n\n    //选区 操作对象\n    range = sel.getRangeAt(0);\n\n    //删除选中文字\n    range.deleteContents();\n\n    //插入 :光标处 插入 元素\n    range.insertNode(imgDom[0]);\n\n    //移动光标\n    range = range.cloneRange();\n    range.setStartAfter(imgDom[0]);//移动到指定 元素 后面\n    range.collapse(true);    \n    sel.removeAllRanges();\n    sel.addRange(range);\n} else { // ie678\n    document.selection.createRange().pasteHTML(imgTxt);\n}\n\r\n"},{"name":"js-dom-webapis","outline":"[\"光标操作\",\"实用代码块\",\"取消选择\"]","content":"if (window.getSelection) window.getSelection().removeAllRanges();\nelse document.selection.empty();\r\n"},{"name":"js-dom-webapis","outline":"[\"坐标\"]","content":""},{"name":"js-dom-webapis","outline":"[\"坐标\",\"元素坐标\"]","content":""},{"name":"js-dom-webapis","outline":"[\"坐标\",\"元素坐标\",\"相对定位元素\"]","content":"offsetLeft offsetTop\r\n取 相对于 定位父元素\r\ntd tr 等特殊元素 可能会是参照物\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\"]","content":""},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"复制事件 copy\"]","content":""},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"复制事件 copy\",\"ie所有(包括edge)：\"]","content":"只能给页面元素绑定，比如 `document.documentElement.oncopy(html)`、`document.body.oncopy(body)`，错误方式 `document.oncopy`\r\n假如不选中文本，不会发生复制，也不会一直触发事件，大概触发一次两次的样子 \r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"复制事件 copy\",\"chrome、firefox:\"]","content":"包括document.oncopy的所有方式\r\n假如不选中文本，不会发生复制，但会一直触发事件\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"粘帖事件 paste\"]","content":"粘贴操作时触发，粘贴效果前触发。可 `event.preventDefault()` 阻止默认粘贴发生\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"粘帖事件 paste\",\"ie所有(包括edge)：\"]","content":"剪切板为空情况，不会触发 paste 事件。也就是说，只有真正发生粘帖后才会触发。\r\n除 document 外，其它任意元素都能绑定，可继承\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"粘帖事件 paste\",\"firefox：\"]","content":"即使即使剪切板为空，只要在输入元素中，都会发生\r\n包括 document 的所有元素，可继承\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"粘帖事件 paste\",\"chrome：\"]","content":"任何元素，包括 document。剪切板为空都行，ctrl+v 都会触发\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"粘帖事件 paste\",\"jq如何绑定：\"]","content":"不能直接点出 paste，但可通过on，如 `jIn.on('paste', function () {alert('');});`\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"剪切事件 cut\"]","content":""},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"取剪切板内容\"]","content":""},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"取剪切板内容\",\"ie6~11：\"]","content":"`window.clipboardData.getData('text')` 任意事件，任意地方，任意取\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"取剪切板内容\",\"高级，包括edge：\"]","content":"只能在粘帖事件中取\r\nevent.clipboardData.getData('text/plain')\n\n// firefox、edge不支持复制过来的html，默认会清掉格式。。。所以只支持取直接通过setData('text/html')的\n// 只有chrome完美支持，只要是有格式的，哪里的文本都行\nevent.clipboardData.getData('text/html') \n\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"设置剪切板\"]","content":""},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"设置剪切板\",\"随时操作剪切板的方式，复制实现\"]","content":"通过 `document.execCommand('copy')` 命令\r\naBtn.addEventListener('click', function (e) {\n    getSelection().selectAllChildren(this.previousSibling);\n    document.execCommand('copy');\n});\n\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"设置剪切板\",\"只能在 复制粘贴剪切事件 操作剪切板的方式\"]","content":"高级，包括edge：\r\n需结合e.preventDefault()使用，否则剪切板不会被替换，依然是之前的内容。\r\n只能在copy事件中设置，由于这点限制，一般使用flash实现\r\nevent.clipboardData.setData('text/plain','剪切板内容');\nevent.clipboardData.setData('text/html','<b style=\"color:red\">剪切板内容</b>');\n\ndocument.body.oncopy = function (e) {\n    //e.clipboardData.setData('text/html', '<b style=\"color:red\">xxx</b>');\n    //e.clipboardData.setData('text/plain', '<b style=\"color:red\">xxx</b>');\n    e.clipboardData.setData('text/plain', '');\n\n    e.preventDefault();// 需禁用默认copy事件\n};\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"关于事件绑定注意\"]","content":"在给整个页面绑定事件时，由于所有ie浏览器不支持直接document方式，推荐document.body或document.documentElement\r\n"},{"name":"js-dom-webapis","outline":"[\"复制剪切粘帖\",\"ie可能需开启权限\"]","content":"internet 选项 –> 安全 -> 自定义级别\r\n"},{"name":"js-dom-webapis","outline":"[\"打印机\"]","content":"调用打印\nwindow.print()\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器\"]","content":""},{"name":"js-dom-webapis","outline":"[\"浏览器\",\"手动刷新\"]","content":"之前都是 `location.href=\"\"`，其实有直接的方法\r\nlocation.reload()\n\r\n其它方式\r\nhistory.go(0)\nlocation=location\nlocation.assign(location)\ndocument.execCommand('Refresh')\nwindow.navigate(location)\nlocation.replace(location)\ndocument.URL=location.href\n\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器\",\"浏览器判断\"]","content":"ie专属判断\n兼容性：ie6 和其它浏览器不支持\r\nisie6789 = document.documentMode && document.documentMode < 10\n\nalert(!-[1,]) // 判断是不是 ie678\nalert(/*@cc_on !@*/false);//判断是不是ie\r\n所有浏览器支持方式\r\nwindow.navigator.userAgent\nwindow.navigator.appVersion\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器窗口\"]","content":""},{"name":"js-dom-webapis","outline":"[\"浏览器窗口\",\"尺寸-显示窗口\"]","content":""},{"name":"js-dom-webapis","outline":"[\"浏览器窗口\",\"尺寸-显示窗口\",\"方式1：直接通过window获取，这应该是****被认可的方式***\"]","content":"innerHeight、innerWidth\r\nconsole.log(window.innerHeight);\r\n兼容：ie9+、其他高级浏览器\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器窗口\",\"尺寸-显示窗口\",\"方式2：通过`<html>`元素的client，****兼容性最好***\"]","content":"clientHeight、clientWidth\r\nconsole.log(document.documentElement.clientHeight);\r\n兼容：包括ie6的所有\r\n其他疑虑(**此疑虑可忽略**，因为结果是clientWH绝对可正确获取 显示窗口高宽的):  \n首先，clientHeight取得尺寸值是不包括padding，border的，也就是从padding内边起始的  \n假如给html 设置padding，border，html的clientHeight值是否会受影响？  \n答案是，只有ie6受html border宽度，padding大小影响。其他浏览器不受影响，依然是完整的显示窗口高宽。但谁又会去设置html的border，padding呢，而且ie似乎已经淡出视野了，所以这个担心可忽略。当然，还是不要去控制html的border padding\r\n经过细测，上述说的只有ie6受影响不完全正确，ie8也有影响，不过是一种固定的黑边(仔细看浏览器就会发现)，无法通过css去除，所以得到的值是真实的显示`窗口高宽 - 黑边4px`。  \nie6也有这种黑边，严格来说，ie6中 是 得到的值 是  `窗口高宽 - (黑边4px + border + padding)`  \nie7居然没有黑边...  \n然而，定位元素是以这种黑边内边起始的，所以此问题依然忽略...\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器窗口\",\"尺寸-显示窗口\",\"方式3：通过`<html>`元素的offset，次方案不可取\"]","content":"offsetHeight、offsetWidth  \n兼容性：ie6~10 正确，而且ie6、8得到的高宽值终于包括了黑边，看似正确，反而造成了问题，因为上面说过，元素定位是以黑边内边起始。。。  \nie11、其他高级，取得是内容窗口高宽...\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器窗口\",\"给显示窗口设置背景\"]","content":"包括背景色，背景图片等等。  \n通过body实现。  \n兼容包括ie6的所有。  \n此内容属于css范畴...  \n窗口滚动条控制  \n还是属于css范畴，但还是提一下\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器窗口\",\"ie67 需通过 `<html>` 控制\"]","content":"其他 可同过 `<html>`，也可通过`<body>`，截止今天2016.7，最新版chrome也是如此  \n看来 <html>控制窗口滚动条兼容性最好啊，发现自己以前都是通过 `<body>`控制的...  \n那么以后通过html控制？？\r\n"},{"name":"js-dom-webapis","outline":"[\"浏览器窗口\",\"尺寸-内容窗口WH\"]","content":"通过body获取即可，使用元素的获取方式:**一般使用下面的方式1即可**\r\n1、元素窗口高宽：一般能对应 css(非auto情况) height、width 值  \n不包括边框 和 滚动条  \ndocument.body.clientHeight  \ndocument.body.clientWidth  \n包括边框  \ndocument.body.offsetHeight  \ndocument.body.offsetWidth  \r\n不控制body高度情况，可得到准确的内容高度，否则只是body元素窗口高度。所以尽量不控制body高度，不过一般也不会控制。\r\n兼容性：所有\r\n2、元素内容高宽：不包括边框 和 滚动条  \ndocument.body.scrollHeight  \ndocument.body.scrollWidth  \r\n这种方式在内容少，即视窗高大于内容高的时候，可以得到视窗高度。  \n而且在控制body高度的情况也能准确获取内容高\r\n兼容性：ie67不适用\r\n"},{"name":"js-dom-webapis","outline":"[\"滚动条\"]","content":""},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"滚动条控制\"]","content":""},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"滚动条控制\",\"浏览器窗口\"]","content":""},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"滚动条控制\",\"浏览器窗口\",\"scrollTo\"]","content":"滚动条隐藏指定页面高度\r\n// 参数依次是 x y\n// 兼容所有浏览器\nwindow.scrollTo(0, elem.offsetTop)// 滚动到某元素位置\r\n"},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"滚动条控制\",\"浏览器窗口\",\"scrollBy\"]","content":"以当前位置为基础追加\r\n与scrollTo区别：\r\nscrollTo 直接到指定的页面位置\r\nscrollBy 当前页面位置为基础，追加\r\n// 参数依次是 x y\n// 兼容所有浏览器\nwindow.scrollBy(10, 200)\r\n"},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"滚动条控制\",\"元素\"]","content":"理解：滚动条隐藏指定距离\r\n元素边框内边起始\r\n兼容性：all浏览器\r\n// 滚动到底部\nel.scrollTop = el.scrollHeight\r\n"},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"获取 - 滚动条隐藏距离\"]","content":""},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"获取 - 滚动条隐藏距离\",\"元素\"]","content":"scrollTop、scrollLeft\r\n只读\r\n兼容性：所有浏览器支持  \nie7 能取到负数  \n其他浏览器 只能是 正数(在小于0的情况，返回0)\r\nconsole.log(el.scrollTop);\r\n"},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"获取 - 滚动条隐藏距离\",\"浏览器窗口\"]","content":""},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"获取 - 滚动条隐藏距离\",\"浏览器窗口\",\"1. 直接获取，此为推荐方式\"]","content":"window.pageYOffset、window.pageXOffset\r\n兼容性：只有ie678不支持\r\n// 兼容性封装，包括ie6的所有浏览器\nvar getWindowScrollTop = 'pageYOffset' in window ? function () {\n    return pageYOffset;\n} : function () {\n    return document.documentElement.scrollTop;\n};\n\r\n"},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"获取 - 滚动条隐藏距离\",\"浏览器窗口\",\"2. 通过元素方式，不推荐\"]","content":"兼容性：  \r\nChrome、Safari、Edge(新版ie)\r\n只能使用body对象，使用html对象将取到0\r\nie6~11\r\n只能使用html对象，使用body对象将取到0\r\n// 兼容性封装\nfunction getWindowScrollTop(){\n    return isIe6_11 ? document.documentElement.scrollTop : document.body.scrollTop;\n}\r\n"},{"name":"js-dom-webapis","outline":"[\"滚动条\",\"滚动事件\"]","content":"**当 由于 内容 的变化，造成 滚动条的变化时**  \nie全系列、opera 不会触发 滚动条事件  \n其他会触发\r\n"},{"name":"js-es6等新规范","outline":"[\"class\"]","content":""},{"name":"js-es6等新规范","outline":"[\"class\",\"常用模式、性能\"]","content":"es6 class 常用模式:\r\n// 私有成员，创建在class 外面，如果还是有其他class，使用 即时函数了\n// 此为目前无奈解决方案\n\n// 功能初始，最先执行，只执行一次\nfunction testInit() {\n    // 保证只执行一次\n    testInit=function(){};\n}\n\nclass test{\n    constructor(){\n\n        // 公共成员，非共享\n\n    }\n\n    // 公共成员，共享\n\n}\n\r\n"},{"name":"js-es6等新规范","outline":"[\"class\",\"基本语法\"]","content":"属性只能在constructor函数中创建\r\n// 定义类\nclass hello {\n\n  // 构造函数，如果没有显式定义，一个空的constructor方法会被默认添加。\n  constructor(name) {\n    // new 的时候执行\n    // 参数也是 new 的时候传入的\n\n    this.name = name;\n\n    // 默认返回实例对象（即this）,完全可以指定返回另外一个对象\n    // return {}\n  }\n\n  // 方法成员\n  hi() {\n    return 'hello '+this.name;\n  }\n}\n\n// 调用。不使用new是没法调用的，会报错\nlet p1 = new hello('jony');\n\nlet p2 = new hello; // 不传参也没事\n\r\n"},{"name":"js-es6等新规范","outline":"[\"class\",\"继承\"]","content":""},{"name":"js-es6等新规范","outline":"[\"class\",\"继承\",\"速度使用\"]","content":"extends：继承关键字\nsuper：执行父类的构造函数\r\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  } \n}\r\n"},{"name":"js-es6等新规范","outline":"[\"Fetch 新一代 替换传统ajax\"]","content":"[Fetch 概念](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API)\r\n[fetch 实现库，兼容不支持 fetch 情况](https://github.github.io/fetch/)  \n[npm：whatwg-fetch ](https://www.npmjs.com/package/whatwg-fetch)\r\n[Fetch 使用问题解决](https://segmentfault.com/a/1190000003810652)\r\n"},{"name":"js-es6等新规范","outline":"[\"let、const\"]","content":""},{"name":"js-es6等新规范","outline":"[\"let、const\",\"const\"]","content":"不能将其他值付给变量。但是可以更改值的成员\r\nconst a = {}\na.b = 123 // 允许\na = 123 // 不允许\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\"]","content":""},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"快速了解\"]","content":"Promise 一般用于函数内，作为返回值\r\nPromise 一般结合 async 函数和使用\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"快速使用、语法简要说明\"]","content":"**Promise**\r\nvar fs = require('fs');\n\nvar readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    // 此处会立即执行(同步执行)\n    // 强调：此处会在当前 new Promise 实例后立即执行\n\n    // ...异步逻辑代码\n    fs.readFile(fileName, function(error, data) {\n\n      /*异步失败*/\n      if (error) return reject(error);\n\n      /*异步成功*/\n      resolve(data);\n    });\n  });\n};\n\r\n**async**：实际上是 Promise 的扩展\r\nvar asyncReadFile = async function () {\n  // 此处会立马同步执行\n\n  // await 返回的是 Promise 的 resolve 执行后传入的值\n  var f1 = await readFile('/etc/fstab');\n  // 此处等待 await 异步执行完后才会执行\n\n  var f2 = await readFile('/etc/shells');\n  // 此处等待 await 异步执行完后才会执行\n\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n// 异步函数执行\nasyncReadFile();\n\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise\"]","content":""},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise\",\"catch 简写\"]","content":"2 种方式\r\np.then((val) => console.log('fulfilled:', val))\n  .catch((err) => console.log('rejected', err));\n\n// 等同于\np.then((val) => console.log('fulfilled:', val))\n  .then(null, (err) => console.log(\"rejected:\", err));\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise\",\"then catch 执行机制\"]","content":"执行 resolve 后，后面的 then 都会执行，除了 catch\r\n执行 reject 后，从 catch 开始执行，后面的 then 都会执行\r\nnew Promise(function (resolve, reject) {\n  setTimeout(function () {\n    reject('错了')\n  },1000)\n}).then(function () {\n  console.log(1)\n}).then(function () {\n  console.log(2)\n}).catch(function (err) {\n  console.log(err)\n}).then(function () {\n  console.log(3)\n}).then(function () {\n  console.log(4)\n});\n\n// 输出：(等待1s)'错了'、(同步)3、(同步)4\r\nthen catch 中都可继续异步\r\nnew Promise(function (resolve, reject) {\n  setTimeout(function () {\n    reject('错了')\n  },1000)\n}).then(function () {\n  console.log(1)\n}).then(function () {\n  console.log(2)\n}).catch(function (err) {\n  console.log(err)\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      reject('继续错了')\n    },1000)\n  })\n}).then(function () {\n  console.log(3)\n}).then(function () {\n  console.log(4)\n}).catch(function (err) {\n  console.log(err)\n}).then(function () {\n  console.log(5)\n}).then(function () {\n  console.log(6)\n});\n\n// (等待1s)输出：'错了'、(等待1s)'继续错了'、(同步)5、(同步)6\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise\",\"then catch 都将返回 Promise 实例\"]","content":"function get () {\n  return new Promise(function (resolve, reject) {\n    resolve('hi')\n  }).then(function (d) {\n    return d\n  })\n}\n\n// 继续 then\n// 因为 上一个 then 的执行返回的是 Promise\nget().then(function (d) {\n  console.log(d)\n})\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise\",\"then 中手动抛错的正确方式\"]","content":"实现自定义 catch 触发\r\naxios.post('/Mccard/ClassBrand/GetGroupEditModel', { code: equipmentCode  }).then(({data}) => {\n  if (data.code === 0) {\n    return data.data.id\n  }\n  // 手动抛错\n  return Promise.reject(new Error('classId 获取失败'))\n}).then(classId => {\n  // 不会执行\n}).catch(e => {\n  // 捕获到错误\n\n  // 可再抛错\n  e.message += ', 一错再错'\n  return Promise.reject(e)\n}).catch(e => {\n  // 依然可以捕获\n  console.dir(e)\n})\n\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise\",\"resolve/reject 立即执行 then/catch 依然是异步\"]","content":"(new Promise(function (resolve, reject) {\n  console.log(2) // 同步\n  resolve() // 直接执行\n  console.log(3) // 同步\n})).then(function () {\n  console.log('处理') // 异步\n  return Promise.reject(new Error('失败'))\n}).catch(function (e) {\n  console.log(e) // 异步\n})\nconsole.log(1)\n\n// 依次输出：2，3，1，'处理'，'失败'\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise\",\"resolve 只能传一个参数\"]","content":"new Promise(function (resolve) {\n  resolve(1, 2, 3)\n}).then(function (d1, d2, d3) {\n  console.log(d1, d2, d3) // 1 undefined undefined\n})\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise\",\"reject 传入什么，就返回什么\"]","content":"不会自动包装成一个 Error 实例\r\n// 反例\nnew Promise(function (resolve, reject) {\n  reject('err')\n}).catch(function (err) {\n  console.log(err === 'err') // true\n})\n\n// 正确示范\nnew Promise(function (resolve, reject) {\n  reject(new Error('err'))\n}).catch(function (err) {\n  console.log(err.message === 'err') // true\n})\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise.all 并发，返回所有结果\"]","content":"出错情况：返回第一个出错的结果\r\n// 生成一个Promise对象的数组\nconst promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"Promise.race 并发，返回第一个完成的结果\"]","content":"无论对错，都将只返回第一个完成的结果\r\nconst p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\n\np\n.then(console.log)\n.catch(console.error);\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"async\"]","content":"async function f () {\n  const result = await new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      if (0) {\n        reject('e111')\n      }\n      resolve('111')\n    }, 600)\n  })\n}\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"async\",\"返回 Promise 对象\"]","content":"async 函数执行，将返回值包装成 Promise 对象，再返回\r\nasync function f() {\n  return 'hello world';\n}\n\nf().then(v => console.log(v))\n// \"hello world\"\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"async\",\"错误处理\"]","content":"如果出错，将不会继续往下，直接执行 catch。如果没有 catch 捕捉，直接报错并中断执行\r\n先创建两个\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"async\",\"错误处理\",\"捕捉方式 1: try catch\"]","content":"function get1 () {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      if (1) {\n        reject('e111')\n      }\n      resolve('111')\n    }, 600)\n\n  })\n}\nfunction get2 () {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      if (1) {\n        reject('e222')\n      }\n      resolve('222')\n    }, 600)\n  })\n}\nasync function f() {\n  try {\n    const result = await get1()\n  } catch (e) {\n    console.log(e)\n  }\n  await get2()\n}\n\nf()\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"async\",\"错误处理\",\"捕捉方式 2: Promise 的 catch\"]","content":"async function f () {\n  const result = await new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      if (1) {\n        reject('e111')\n      }\n      resolve('111')\n    }, 600)\n\n  })\n  await new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      if (1) {\n        reject('e222')\n      }\n      resolve('222')\n    }, 600)\n\n  })\n}\n\n// 捕捉错误\nf().catch(e =>console.log(e))\n\n// 或者, 既可接收返回值，又能捕获错误\nf().then(v =>console.log(v), e =>console.log(e))\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"async\",\"手动抛错\"]","content":"使用 throw 即可\r\nasync function login (user) {\n  let { data } = await axios.post('/comm/v1/token', user)\n  if (data.code === 0) {\n    return data.result\n  }\n  throw new Error(data.message)\n}\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"async\",\"await 返回的是 resolve 传的值\"]","content":"也就是 then 给函数输出的参数\r\n**而 reject 返回的值**需 async 执行后通过 catch，或者不接受，报错直接中断执行\r\n"},{"name":"js-es6等新规范","outline":"[\"Promise + async\",\"async\",\"处理并发\"]","content":"借助 Promise.all\r\nfunction get1 () {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      resolve('111')\n    }, 2100)\n\n  })\n}\nfunction get2 () {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      resolve('222')\n    }, 1100)\n  })\n}\n\nasync function f() {\n  console.time()\n  let results = await Promise.all([get1(), get2()]);\n  console.log(results)\n  console.timeEnd()\n\n}\nf()\r\n"},{"name":"js-es6等新规范","outline":"[\"Symbol\"]","content":"[Symbol - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\r\nSymbol 解决属性冲突\r\nlet sym1 = Symbol();\nlet sym2 = Symbol('foo');\nlet sym3 = Symbol('foo');\n\nconsole.log(Symbol(\"foo\") === Symbol(\"foo\")); // false\n\nlet obj = {\n  [sym2]: 2,\n  [sym3]: 3,\n}\nconsole.log(obj)\nconsole.log(obj[sym2]) // 2\nconsole.log(obj[sym3]) // 3\r\n"},{"name":"css","outline":"[\"使用css的3种方式：外链，内联，行内\"]","content":""},{"name":"css","outline":"[\"元素上设置遮罩层 mask-image\"]","content":"https://developer.mozilla.org/zh-CN/docs/Web/CSS/mask-image\r\n"},{"name":"css","outline":"[\"多列 columns\"]","content":"特性：\r\n多余的文本会自动往下一列\r\n"},{"name":"css","outline":"[\"translate scale 书写顺序影响效果\"]","content":"translate 需写在 scale 前面\r\n.message {\n  transform:translate(-50%,-50%);    \n}\n\n.zoom-in-enter, .zoom-out-leave-to {\n  opacity: 0;\n  transform: translate(-50%,-50%) scale(0.8);\n}\r\n"},{"name":"css","outline":"[\"background\"]","content":""},{"name":"css","outline":"[\"background\",\"size && position 冲突\"]","content":"设置 background-size 后，对应的 background-position 会失效\r\ntest{\n  background-size: 100% auto; /* 设置了 x 100% */\n  background-position-x: 83%; /* x失效，y有效 */\n}\r\n"},{"name":"css","outline":"[\"float\"]","content":""},{"name":"css","outline":"[\"float\",\"浮动与非浮动，发生重叠\"]","content":"现有浮动元素 fA，非浮动元素 B。fA 在前，B 在后。\r\nB 将无视 fA 的存在，发生重叠。\r\n并且 fA 层叠更高，将覆盖 B（相同 position 情况）\r\n所以才需要清浮动\r\n"},{"name":"css","outline":"[\"float\",\"多个float元素，高度不一，换行规律\"]","content":"目前没发现什么实用价值\r\n"},{"name":"css","outline":"[\"float\",\"js 相关\"]","content":""},{"name":"css","outline":"[\"float\",\"js 相关\",\"压缩报错问题\"]","content":"作为字面量对象的名称时，尽量以字符串形式。否则无法压缩。原因是float为 javascript 预留保留词\r\nvar b = { float:'xx' }; // 不推荐\nvar b = { 'float': 'xx' }; // 推荐\r\n"},{"name":"css","outline":"[\"transform 变换\"]","content":""},{"name":"css","outline":"[\"transform 变换\",\"动画性能\"]","content":"尽量使用 translate3d，但translate3d 会造成模糊，动画完后删掉属性\r\n"},{"name":"css","outline":"[\"transform 变换\",\"滚动条下面隐藏的元素未渲染\"]","content":"滚动条下面未显示的元素，通过设置 translate3d 移上来依然是不显示的\r\n**解决：**\r\n原因是此元素为静态定位(static)所致。设置为非静态定位即可，比如相对定位(relative)\r\n测试浏览器 chrome 53.0.2785.116 m、android  5.1 webview\r\n"},{"name":"css","outline":"[\"transform 变换\",\"对inline 元素无效，可使用 inline-block 代替\"]","content":""},{"name":"css","outline":"[\"transform 变换\",\"问题：ios wkwebview translate 居然 100% 不能好好动画，改成99%即可\"]","content":"看来跟完全隐藏有关系\r\n"},{"name":"css","outline":"[\"transition 过渡动画\"]","content":""},{"name":"css","outline":"[\"transition 过渡动画\",\"transition 支持情况：ie10+\"]","content":""},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\"]","content":""},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"一般操作步骤\"]","content":"先加 transition，再设置目的地\r\n兼容性：ie10+\r\neBox.style.transition = '0.3s ease'\neBox.style.transform = 'translateX(100px)'\n\r\n"},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"非 number 属性起始情况\"]","content":"起始值非 number 的属性，需先设置其实值，还需借助 setTimeout\r\n兼容性：ie10+。ie setTimeout 不能设为 0，包括 edge\r\neBox.style.left = '0' // 默认 auto\neBox.style.transition = '0.3s ease'\nsetTimeout(function () {\n  eBox.style.left = '100px'\n}, 1)\r\n"},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"动态增加 elem 情况\"]","content":"先加 elem 到页面，再借助 setTimeout\r\n兼容性：ie10+。ie setTimeout 不能设为 0，包括 edge\r\nlet eBox = document.createElement('div')\neBox.className = 'a-box'\nthis.$el.appendChild(eBox)\nsetTimeout(function () {\n  eBox.style.transition = '0.3s ease'\n  eBox.style.transform = 'translateX(100px)'\n}, 1)\r\n"},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"虽然 ie setTimeout 不能设为 0，但还是异步\"]","content":"发现 ie setTimeout 为0 可能不会触发动画，以为是同步的，但依然是异步\r\nconsole.log(1)\nsetTimeout(function () {\n  console.log(2)\n}, 0)\nconsole.log(3)\n\n// 1\n// 3\n// 2\r\n"},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"不用考虑起始值的属性\"]","content":"opacity\r\ntransform\r\n"},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"删除 transition 后是否会触发 transitionend 事件？\"]","content":"即动画过程中删除。删除后**不会**触发 transitionend 事件\r\n"},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"删除 transition 后是否会触发 transitionend 事件？\",\"兼容性\"]","content":"firefox 无法通过删除 transition 终止动画，所以固定会触发 transitionend。  \nchrome、edge 没问题。\r\n"},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"删除 transition 后是否会触发 transitionend 事件？\",\"测试代码\"]","content":"<template>\n  <div>\n    hello\n  </div>\n</template>\n<script>\nexport default {\n  async mounted () {\n    let el = this.$el\n    let { transitionActive, to } = this.$style\n    let { classList } = el\n    classList.add(transitionActive)\n    el.addEventListener('transitionend', function () {\n      console.log('end')\n    })\n\n    await this.wait(1)\n    classList.add(to)\n\n    await this.wait(100) // 动画 100ms 后删除\n    classList.remove(transitionActive)\n  },\n  methods: {\n    wait (time = 0) {\n      return new Promise(resolve => {\n        setTimeout(resolve, time)\n      })\n    }\n  }\n}\n</script>\n\n<style module>\n.transitionActive {\n  transition: 0.3s ease;\n  transition-property: opacity, transform;\n}\n.to {\n  transform: translateX(50%);\n}\n</style>\n\r\n"},{"name":"css","outline":"[\"transition 过渡动画\",\"js 操作\",\"删除 transition 后，之前注册的 transitionend 是否还有效\"]","content":"肯定得有效，也符合正常逻辑\r\n"},{"name":"css","outline":"[\"动画库第三方\"]","content":"[Animate.css](https://daneden.github.io/animate.css/)\r\n[vivify](http://vivify.mkcreative.cz/)\r\n"},{"name":"css","outline":"[\"后代选择写法原则\"]","content":"尽量控制在3层\r\n模块>子模块>随意\r\n子模块需要可控，尽量小\r\n"},{"name":"css","outline":"[\"定位\"]","content":""},{"name":"css","outline":"[\"定位\",\"fiexd\"]","content":"一些特性：  \r\n不会撑出滚动条\r\n"},{"name":"css","outline":"[\"布局\"]","content":""},{"name":"css","outline":"[\"布局\",\"ABC并行 A适应，并且最前，BC固定\"]","content":"<template>\n  <div>\n    <div :class=\"$style.main\">\n      <div :class=\"$style.mid\">\n        内容\n      </div>\n    </div>\n    <aside :class=\"$style.aside\">\n      左侧\n    </aside>\n    <div :class=\"$style.right\">\n      右侧\n    </div>\n  </div>\n</template>\n\n<style module>\n.main {\n  float: left;\n  width: 100%;\n  min-height: 100px;\n}\n.aside {\n  width: 300px;\n  position: relative;\n  float: left;\n  margin-left: -100%;\n}\n.mid {\n  margin-left: 300px;\n}\n.right {\n  width: 375px;\n  margin-left: -375px;\n}\n</style>\r\n"},{"name":"css","outline":"[\"布局\",\"AB并行，A固定，B自适应\"]","content":""},{"name":"css","outline":"[\"布局\",\"AB并行，A固定，B自适应\",\"浮动在前\"]","content":"left + margin：浮动重叠特性\r\nleft + overflow:hidden\r\n"},{"name":"css","outline":"[\"布局\",\"居中布局\"]","content":".center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\r\n"},{"name":"css","outline":"[\"布局\",\"居中布局 2\"]","content":".center {\n  width: 320px;\n\n  position: fixed;\n  display: table;\n  z-index: 99;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  margin: auto;\n}\r\n"},{"name":"css","outline":"[\"弹性盒 flex\"]","content":""},{"name":"css","outline":"[\"弹性盒 flex\",\"flex 弹性盒布局\"]","content":"`width: 600px` 等同 `flex:0 600px`\r\n"},{"name":"css","outline":"[\"文本\"]","content":""},{"name":"css","outline":"[\"文本\",\"word-spacing：html 空格宽度控制\"]","content":"关键字：空格 空格控制 空格宽度 空格大小\r\n<style>\n.l-label{\n    word-spacing: 30px;    \n}\n</style>\n<div class=\"l-label\">行 为:</div>\r\n'行为'文本之间有个空格，即控制此空格的间距\r\n"},{"name":"css","outline":"[\"文本\",\"换行\"]","content":"单词默认会自动换行，字母就要加下面的\r\n.t {\n  word-wrap: break-word;\n  word-break: break-all;\n}\r\n兼容性：所有浏览器\r\n"},{"name":"css","outline":"[\"文本\",\"不换行\"]","content":".t{\n  white-space: nowrap;      \n}\n\r\n"},{"name":"css","outline":"[\"文本\",\"裁剪\"]","content":"快速使用：\r\n.test{\n  width:10px;\n  overflow:hidden;\n  text-overflow:ellipsis;\n  white-space: nowrap;    \n}\r\n兼容性：包括ie6的所有\r\n"},{"name":"css","outline":"[\"文本\",\"垂直居中\"]","content":"文本垂直居中。待测\r\n.test{\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\r\n"},{"name":"css","outline":"[\"文本\",\"文字描边\"]","content":".demo {\n  -webkit-text-stroke: 4px red;\n}\r\n"},{"name":"css","outline":"[\"比例单位\"]","content":""},{"name":"css","outline":"[\"比例单位\",null,\"em\"]","content":"不会参照以 `[rm]` 单位的上级元素，固定找到设置为`[px]`的上级元素\r\n只能用于字体单位？\r\n"},{"name":"css","outline":"[\"比例单位\",null,\"rem\"]","content":"**还可作为其他尺寸单位**\r\n**兼容性：ie9+**\r\n**chrome 最小 12px**  \r\nchrome html 最小字体为`12px`，小于`12px`的都按`12px`算。  \r\nie9+、edge、firefox 都没有这个问题\r\n代码所示，div width应该是700才对，可实际是1200。\r\nhtml{\n    font-size:7px\n}\ndiv{\n    width:100rem;\n}\r\n**rem 自适应js备份**\r\n// 自适应\nlet w = window.innerWidth\nif (w < 360) {\n    // browserWidth * p = fontSize\n    // 即：\n    // p = fontSize / browserWidth\n    document.documentElement.style.fontSize = w * 0.28 + 'px'\n}\r\n"},{"name":"css","outline":"[\"毛玻璃\"]","content":"毛玻璃。让元素变模糊\n -webkit-filter: blur(3px); \r\n"},{"name":"css","outline":"[\"滚动，滚动条\"]","content":""},{"name":"css","outline":"[\"滚动，滚动条\",\"滚动条样式\"]","content":"/*** ie ***/  \n*{  \n  scrollbar-face-color:#F3F3F3; /*面子*/  \n  scrollbar-arrow-color:#C0C0C0; /*箭头*/  \n  scrollbar-3dlight-color:#C0C0C0; /*最外左*/  \n  scrollbar-highlight-color:#FFFFFF; /*左二*/  \n  scrollbar-shadow-color:#FFFFFF; /*右二*/  \n  scrollbar-darkshadow-color:#C0C0C0; /*右一*/  \n  scrollbar-track-color:#F3F3F3; /*滑道*/  \n }  \n\n/*** webkit ***/  \n/*滚动条整体*/\n::-webkit-scrollbar{\n  width:14px; /*滚动条宽度*/\n}\n/*滚动条按钮*/\n/* ::-webkit-scrollbar-button {\n\n} */\n/* 滑道 */\n::-webkit-scrollbar-track{\n  background-color:#F3F3F3;\n}\n/* ::-webkit-scrollbar-track-piece{\n  background-color:#F3F3F3;\n} */\n\n/*横竖滚动条交角*/\n/* ::-webkit-scrollbar-corner {\n  background-color: #F3F3F3;\n} */\n/*横竖滚动条交角图案*/\n/* ::-webkit-resizer {\n  background-repeat: no-repeat;\n  background-position: bottom right;\n} */\n/*滚动条*/\n::-webkit-scrollbar-thumb{\n  background-color:#F3F3F3;\n  border:solid 1px #C0C0C0;\n}\n::-webkit-scrollbar-thumb:hover{\n  background-color:#F3F3E0;\n}\n\r\n"},{"name":"css","outline":"[\"滚动，滚动条\",\"加滚动惯性 - IOS 移动端\"]","content":"`-webkit-overflow-scrolling: touch;`\r\n网站参考：  \n[为固定高度的网页元素添加 iOS Safari 滚动「惯性效果」的方法](http://www.renfei.org/blog/how-to-add-ios-inertial-scrolling-to-a-fixed-height-element.html)\r\n"},{"name":"css","outline":"[\"滤镜\"]","content":""},{"name":"css","outline":"[\"滤镜\",\"滤镜 - 标准？\"]","content":"非 ie 也有滤镜了\r\n.test {\n  filter: brightness(0.7) contrast(0.8) sepia(1) hue-rotate(160deg) saturate(3);\n}\n\r\n"},{"name":"css","outline":"[\"移动端问题\"]","content":""},{"name":"css","outline":"[\"移动端问题\",\"ios 去掉点击阴影\"]","content":"a标签的href，或者给元素绑定click，Android ios 会有阴影。可通过如下方式去掉\r\n给 body 设置即可\r\nbody {\n  -webkit-tap-highlight-color:transparent;\n}\r\n"},{"name":"css","outline":"[\"选择器\"]","content":""},{"name":"css","outline":"[\"选择器\",\"奇偶选择\"]","content":"li:nth-child(2n){color:#f00;} /* 偶数 */\nli:nth-child(2n+1){color:#000;} /* 奇数 */\r\n"},{"name":"css-modules","outline":"[\"复用\"]","content":".className {\n  color: green;\n  background: red;\n}\n\n.otherClassName {\n  composes: className;\n  color: yellow;\n}\r\n"},{"name":"html","outline":"[\"HTML 元素参考\"]","content":"[HTML 元素参考 - HTML（超文本标记语言） | MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element)\r\n"},{"name":"html","outline":"[\"form 表单\"]","content":""},{"name":"html","outline":"[\"form 表单\",\"输入控件 disabled 后将不会提交到后台\"]","content":"兼容性：ie6+\r\n"},{"name":"html","outline":"[\"form 表单\",\"表单提交 name 属性\"]","content":"form 表单提交会把所有拥有 name 属性的的 input 的 value 提交给服务器。当然 input[type=\"button\"] 除外，即使有 name 属性，也会过滤掉\r\n<form action=\"http://baidu.com/s\" method=\"get\">\n <input type=\"text\" name=\"wd\" value=\"张三\">\n <input type=\"button\" name=\"bt_save\" value=\"测试值\">\n <input type=\"submit\">\n</form>\r\n"},{"name":"html","outline":"[\"input file 动态选择实现\"]","content":"为了避免问题，动态文件选择最好 append 到 文档中\r\niPhone 微信浏览器因为没有增加到文档，click 方法无效\r\nexport default function (onSelect, accept) {\n  let file = document.createElement('input')\n  file.type = 'file'\n  file.accept = accept\n\n  // 移动端 file 元素最好加到页面中\n  file.style.display = 'none'\n  document.body.appendChild(file)\n\n  file.onchange = onSelect\n  file.click()\n}\n\r\n"},{"name":"html","outline":"[\"其他\"]","content":""},{"name":"html","outline":"[\"其他\",\"页面中的 flash\"]","content":"改变 display、position 都将重置 flash组件\r\n"},{"name":"html","outline":"[\"body\"]","content":""},{"name":"html","outline":"[\"body\",\"js\"]","content":""},{"name":"html","outline":"[\"body\",\"js\",\"关于body清空\"]","content":"可以这样清空body，这种方式ie678不支持\r\ndocument.body = document.createElement('body');\r\n其实跟这样效率差别不大，所有浏览器支持\r\ndocument.body.innerHTML ='';\r\n"},{"name":"html","outline":"[\"body\",\"css\"]","content":""},{"name":"html","outline":"[\"body\",\"css\",\"background 设置满屏背景\"]","content":"兼容性：包括ie6的所有\r\n"},{"name":"html","outline":"[\"body\",\"css\",\"默认css\"]","content":"默认有margin属性，但margin各浏览器不同\r\n兼容性：包括ie6的所有\r\n"},{"name":"html","outline":"[\"canvas\"]","content":""},{"name":"html","outline":"[\"canvas\",\"高宽指定、变形情况\"]","content":"style  ：拉伸尺寸  \n标签属性：像素尺寸\r\n指定 css width height 将是拉伸放大canvas，并未改变canvas本质高宽。\n比如我画一个圆 ctx.arc(300, 150, 20, 0, 2 * Math.PI); 如果是放大2倍，那么可以 xy参数就会是600,300的位置了。\n要改变本质高宽须通过设置标签属性\r\n"},{"name":"html","outline":"[\"canvas\",\"绘制图形轮廓 stroke\"]","content":""},{"name":"html","outline":"[\"canvas\",\"经验 - 饼图统计，线末端转折\"]","content":"根据线所在圆的角度判断即可\r\n"},{"name":"html","outline":"[\"canvas\",\"经验 - 统计，画轴，画网格，实现\"]","content":"其实只算出刻度数据即可\r\nx轴，算y刻度\r\ny轴，算x刻度\r\n然后再根据刻度数据画轴，画网格，数据与视图分离\r\n"},{"name":"html","outline":"[\"canvas\",\"经验 - 画笔效果，实现\"]","content":"首先是移动轨迹的所有点。也就是监听移动事件，这里可以知道移动轨迹的所有点。\r\n然后用 lineTo 连接即可。\r\n边触发边连接\r\n"},{"name":"html","outline":"[\"canvas\",\"画线\"]","content":""},{"name":"html","outline":"[\"canvas\",\"画线\",\"1px 看是去有2px\"]","content":"画线的坐标参数，是从两个像素之间开始算的，由于抗锯齿，所以看上去是2px\r\n**坐标起始位置，0位置**：canvas 边框内边边缘\r\n所以要画出1px的线，需要给坐标加 0.5。下例将画出紧贴内边(真正的0起始)1px的线\r\nctx.beginPath()\nlet y = 0.5\nctx.moveTo(0, y)\nctx.lineTo(300, y)\nctx.stroke()\r\n"},{"name":"html","outline":"[\"canvas\",\"canvas.drawImage\"]","content":"提供直接绘制图片的功能，支持直接写其他canvas\r\n"},{"name":"html","outline":"[\"canvas\",\"canvas.drawImage\",\"语法：\"]","content":"canvas.drawImage(image, dx, dy)\r\n"},{"name":"html","outline":"[\"canvas\",\"canvas.drawImage\",\"兼容问题：\"]","content":"**浏览器：** Android webkit 53.30  v4.0\r\n**image 参数**  \r\n是另一个canvas，则必须加到页面才能成功绘制。\r\n是 img 元素，src 是 base 64，好像也无法绘制(待确定)\r\n"},{"name":"html","outline":"[\"canvas\",\"画圆 画弧\"]","content":""},{"name":"html","outline":"[\"canvas\",\"画圆 画弧\",\"MDN 文档参考\"]","content":"[线条、填充样式颜色API](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Applying_styles_and_colors)\r\n[圆弧 API](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/arc)\r\n"},{"name":"html","outline":"[\"canvas\",\"画圆 画弧\",\"画圆弧线条。实现进度条\"]","content":"\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\nctx.strokeStyle = 'red'\nctx.lineWidth = 6;\nctx.lineCap = \"round\"; // 末端样式\nctx.beginPath();\n// 右边x轴开始画，也就是参数所示，画的起始点是 x100, y50\n// 参数依次是：圆心x, 圆心y, r, 起始弧度, 结束弧度, 默认顺时针\nctx.arc(50, 50, 50, 0.3 * Math.PI, 1.6 * Math.PI);\nctx.stroke();\n\r\n"},{"name":"html","outline":"[\"canvas\",\"toBlob\"]","content":"转 blob 后可直接上传到服务器\r\n更多见 [h5 文件系统 FileSystem API](index.html#/1/29)\r\n"},{"name":"html","outline":"[\"canvas\",\"裁图实现\"]","content":"\nlet cvs = document.createElement('canvas')\nlet ctx = cvs.getContext('2d')\n// 裁图选择框大小\ncvs.width = selectRectWdith\ncvs.height = selectRectHeight\n// 裁图，x, y 参数用来隐藏左上区域\nctx.drawImage(img, -10, -40)\r\n"},{"name":"html","outline":"[\"canvas\",\"toDataURL - base64\"]","content":"img.src = canvas.toDataURL()\r\n"},{"name":"html","outline":"[\"ie678 实现支持 html5 标签\"]","content":"实现\r\ndocument.createElement(\"header\");\n// 此操作便能使 header 变成真正的标签。注意，生成的标签默认是inline\r\n使用\r\n<!--[if lte IE 8]>\n(function () {\n    var a = ['header', 'section', 'footer', 'aside'];\n    for (var i = a.length; i--;) document.createElement(a[i]);\n})();\n<![endif]-->\r\n"},{"name":"html","outline":"[\"input textear\"]","content":""},{"name":"html","outline":"[\"input textear\",\"input [type=text]、textarea\"]","content":""},{"name":"html","outline":"[\"input textear\",\"input [type=text]、textarea\",\"css\"]","content":""},{"name":"html","outline":"[\"input textear\",\"input [type=text]、textarea\",\"css\",\"-webkit-text-fill-color\"]","content":"input {\n    -webkit-text-fill-color: #333;    \n}\n\r\n同时覆盖 placeholder、color 颜色，那不是没什么用吗。。\r\n"},{"name":"html","outline":"[\"input textear\",\"input [type=text]、textarea\",\"css\",\"控制 placeholder 颜色\"]","content":"input::placeholder {\n    color:#aaa;\n}\r\n"},{"name":"html","outline":"[\"input textear\",\"input [type=text]、textarea\",\"css\",\"去掉红色波浪线\"]","content":"<textarea spellcheck=\"false\"></textarea>\r\n"},{"name":"html","outline":"[\"input textear\",\"问题\"]","content":""},{"name":"html","outline":"[\"input textear\",\"问题\",\"ios disabled=\\\"disabled\\\" 淡灰 不可控 问题\"]","content":"涉及得元素控件：input [type=text]、textarea\r\ncss color 颜色无效。网上 opacity 也无法理想解决\r\n**理想解决：** 使用 readonly=\"readonly\" 代替\r\n"},{"name":"html","outline":"[\"input textear\",\"[type=file]\"]","content":"[input type=\"file\" | MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-capture)\r\n"},{"name":"html","outline":"[\"input textear\",\"[type=file]\",\"移动端调用设备\"]","content":"<!-- 文件选择 -->\n<input type=\"file\" accept=\"image/*\">\n<!-- 拍照 -->\n<input type=\"file\" accept=\"image/*\" capture=\"camera\">\n<!-- 录像 -->\n<input type=\"file\" accept=\"video/*\" capture=\"camcorder\">\n<!-- 录音 -->\n<input type=\"file\" accept=\"audio/*\" capture=\"microphone\">\r\n"},{"name":"html","outline":"[\"input textear\",\"[type=file]\",\"js\"]","content":"编程式调用情况，input file 必须加到页面中\r\nlet file = document.createElement('input')\nfile.type = 'file'\n\n// ie6+包括ie11，还有部分移动端，比如iPhone，file 元素必须加到页面中\nfile.style.display = 'none'\ndocument.body.appendChild(file)\n\nfile.onchange = () => {\n  this.upload(file.files[0]).then(url => {\n    url && this.imgs.push(url)\n  })\n}\nfile.click()\r\n"},{"name":"html","outline":"[\"lang 语言设置\"]","content":"一般还是不加吧\r\n简体中文页面：html lang=zh-cmn-Hans\r\n繁体中文页面：html lang=zh-cmn-Hant\r\n英语页面：html lang=en\r\n"},{"name":"html","outline":"[\"script\"]","content":""},{"name":"html","outline":"[\"script\",\"script节点引入-带编码\"]","content":"<script type=\"text/javascript\" charset=\"utf-8\" src=\"./zh_CN.js\"></script>\r\n"},{"name":"html","outline":"[\"script\",\"标签位置\"]","content":"挨着 body 结束标签，让页面更快展示\r\n<html>\n    <head></head>\n    <body>\n    <p> 页面内容 <p/>\n        <script src=\"vendor.js\" charset=\"utf-8\"></script>\n        <script src=\"pageA.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\r\n"},{"name":"html","outline":"[\"script\",\"script 引用的js报错不会影响下一个script 执行\"]","content":""},{"name":"html","outline":"[\"script\",\"标签属性\"]","content":""},{"name":"html","outline":"[\"script\",\"标签属性\",\"src\"]","content":"js文件路径，可以不是.js后缀。但MIME类型必须正确的。\n也就是说，不管是什么文件，什么后缀，只要返回javascript的文本即可\r\n"},{"name":"html","outline":"[\"table\"]","content":""},{"name":"html","outline":"[\"table\",\"table-layout 可控 w h\"]","content":"auto：默认，会因为内容的原因，wh不可控\nfixed：实现可控wh\r\ntable{\n    table-layout: fixed;\n}\r\n"},{"name":"html","outline":"[\"table\",\"caption 表格标题\"]","content":""},{"name":"html","outline":"[\"table\",\"col、colgroup：控制列\"]","content":"常用属性：span、width  \r\nspan：控制多列\r\n<table>\n    <colgroup>\n        <col>\n        <col width=\"100\">\n        <col width=\"160\">\n    </colgroup>\n    <thead>\n    <tr>\n        <th>题型</th>\n        <th>数量</th>\n        <th>分值(总分:<b>100</b>分)</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>选择题</td>\n        <td>\n            <div class=\"score-ipt\">\n                <a class=\"mnus\"></a>\n                <span>5</span>\n                <a class=\"plus\"></a>\n            </div>\n        </td>\n        <td>\n            <div class=\"score-ipt\">\n                <a class=\"mnus\"></a>\n                <span>5</span>\n                <a class=\"plus\"></a>\n            </div>\n        </td>\n    </tr>\n    </tbody>\n</table>\r\n"},{"name":"html","outline":"[\"title 页面标题设置\"]","content":"通过 title 标签设置\r\n<!doctype html>\n<html>\n<head>\n    <title>页面标题</title>\n</head>\n<body>\n<h1>一级大标题</h1>\n<p>我是一句话</p>\n</body>\n</html>\r\n"},{"name":"html","outline":"[\"video\"]","content":"[HTMLVideoElement](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLVideoElement)\r\n[HTMLMediaElement](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement)\r\n[\\<video\\>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video)\r\n[HTML5的Video标签的属性,方法和事件汇总](https://www.cnblogs.com/qq984064199/p/6244284.html)\r\n"},{"name":"html","outline":"[\"可编辑 contenteditable\"]","content":"<div contenteditable></div>\r\n"},{"name":"html","outline":"[\"可编辑 contenteditable\",\"回车换行 增加的元素区别\"]","content":"ie 是 增加子p元素，其他增加 子div\r\n"},{"name":"html","outline":"[\"可编辑 contenteditable\",\"兼容性\"]","content":"all浏览器 支持，但有区别。\r\n"},{"name":"html","outline":"[\"可编辑 contenteditable\",\"兼容性\",\"元素文档位置改变操作\"]","content":"**Firefox**\r\n获焦 后，移动 文本编辑元素，焦点(光标)将停留 原地\n再次执行 此 文本编辑元素 的 获焦\\失焦 操作 都将无效\n解决方案：移动前先失焦\n强调：只有文本编辑元素才这样，input输入框不会\r\n**其他浏览器**\r\n移动后会自动失焦\r\n"},{"name":"html","outline":"[\"命名实体\"]","content":""},{"name":"html","outline":"[\"命名实体\",\"html空格\"]","content":"&nbsp;\r\n`&nbsp;`：一个 表示一个空格\r\nhtml 中的 文本 的 实质  换行符、空格符\n换行符： 会被浏览器 编译成 单个空格。\n每行文本 两头 连续的空格： 会被 清除\r\n在文本 前头 连续空格中 使用 `&nbsp;`后\n`&nbsp;`后面的 实质空格符 不会被清掉\n`&nbsp;`前面的 实质空格符会被 清除\r\n兼容性：上面的讲法 兼容all浏览器 \r\n"},{"name":"html","outline":"[\"移动端web缩放控制\"]","content":""},{"name":"html","outline":"[\"移动端web缩放控制\",\"简单介绍\"]","content":"完整\r\n<meta name=\"viewport\" content=\"height=device-height,width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no\" /> \n\r\n常用\r\n<meta content=\"width=device-width,initial-scale=1,user-scalable=no\" name=\"viewport\"/>\r\n**width,height**\n指定视区的逻辑宽度和高度。假如大于浏览器显示区的逻辑高宽，内容将放大指定倍数来显示。小于情况将等于浏览器显示区逻辑高宽。\n值可以是具体的像素值；\n也可以是一些特殊字指令符，比如device-width、device-heigh，如果不给，默认值就是这两个\r\n经测试width、height可以不指定。将等于浏览器显示区的逻辑高宽\r\n"},{"name":"html","outline":"[\"移动端web缩放控制\",\"ios9以下系统同时展示两个webview有bug，高宽超出\"]","content":"当页面中同时放两个webview时，指定`width=device-width`，将大于webview的逻辑宽度，像是设备的逻辑宽度来算。  \n**解决：** 去掉width，或者指定为0即可，即如下所示\r\n<meta content=\"initial-scale=1,user-scalable=no\" name=\"viewport\"/>\n或者\n<meta content=\"width=0,initial-scale=1,user-scalable=no\" name=\"viewport\"/>\r\n20170720更新：  \n不到万不得已，不去掉width，也不指定为0，否则ios10会出现 ios click 300ms延迟。  其他低版本未测，没有手机。。\r\n"},{"name":"html","outline":"[\"自定义标签\"]","content":"自定义标签名字的w3c规范，小写，并且包含一个短杠\r\n"},{"name":"android","outline":"[\"使用 webview - java\"]","content":"  import android.support.v7.app.AppCompatActivity;\n  import android.os.Bundle;\n  //import android.webkit.JavascriptInterface;\n  //import android.webkit.WebChromeClient;\n  import android.webkit.WebSettings;\n  import android.webkit.WebChromeClient;\n  import android.webkit.WebView;\n  import android.webkit.WebViewClient;\n\n  setContentView(R.layout.activity_main);\n\n  WebView webview = (WebView) findViewById(R.id.webView1);\n  webview.setWebChromeClient(new WebChromeClient());\n  webview.setWebViewClient(new WebViewClient());\n  WebView.setWebContentsDebuggingEnabled(true);\n\n  WebSettings webSettings = webview.getSettings();\n  webSettings.setJavaScriptEnabled(true);\n\n  // WebSettings settings = webView.getSettings();\n  // settings.setJavaScriptEnabled(true);\n  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN) {\n      webSettings.setAllowFileAccessFromFileURLs(true);\n  }\n\n  webview.loadUrl(\"http://192.168.1.222:8080\");\n  // webview.loadUrl(\"file:///android_asset/index.html\");\n  // webview.loadUrl(\"http://baidu.com\");\r\n"},{"name":"cmd 命令行","outline":"[\"打开浏览器 并指定网址\"]","content":"explorer http://google.com\r\n"},{"name":"cmd 命令行","outline":"[\"代理\"]","content":"这只是临时设置，关闭cmd窗口则失效\r\n一般只需：  \r\nset http_proxy=127.0.0.1:10086\r\n带用户名密码的：\r\nset http_proxy=http://proxy.com:port/\nset http_proxy_user=username\nset http_proxy_pass=password\r\n"},{"name":"cmd 命令行","outline":"[\"通过 cmd 调用 PowerShell 并执行命令\"]","content":"start powershell \"Start-Process node \"bin/www\" -Verb runas;explorer http://localhost:3003\"\r\n"},{"name":"cmd 命令行","outline":"[\"定时器\"]","content":"cmd 并没有提供定时器方法，但还是有办法实现\r\n使用 ping：用一个没法ping通的ip，并设置最大等待时间  \r\necho 60秒后执行\nping 1.1.1.1 -n 1 -w 60000 > nul\r\n1.1.1.1 绝大多数情况是ping不同的，但也有例外。一些比较严谨的情况谨慎使用\r\n"},{"name":"cmd 命令行","outline":"[\"同时运行多个cmd，并执行命令运行\"]","content":"关于双引号可有可没有，但意义不一样：\r\n双引号可让命令完全为新弹出的命令\r\n不用双引号，&后面的命令为当前窗口，非新弹出的窗口\r\n其中 /k 表示运行结束不关闭，可改成 /c 运行结束关闭  \n如果不加start 将只能执行第一个\r\nstart cmd /k \"cd/d d:\\&echo xx&&pause&&ping 172.30.218.1&&ping 172.30.218.111\"\nstart cmd /k \"cd/d d:\\&echo xxx&&pause&&ping 192.168.91.1\"\r\npageage.json 应用\r\n{\n  \"name\": \"project\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"start cmd /k \\\"npm run build.ios\\\"&&npm run build.android\",\n    \"build.dev\": \"start cmd /k \\\"npm run build.dev.ios\\\"&&npm run build.dev.android\",\n  }\n}\n\r\n"},{"name":"dotnet-c#","outline":"[\".net 截图方案\"]","content":"相关文章 [Headless Chrome入门](https://www.jianshu.com/p/aec4b1216011)\r\n"},{"name":"dotnet-c#","outline":"[\".net 截图方案\",\"Selenium 方式\"]","content":"支持 .Net framework 4.5 \r\nusing OpenQA.Selenium;\nusing OpenQA.Selenium.Chrome;\n\nvar options = new ChromeOptions();\noptions.AddArgument(\"--headless\");\noptions.AddArgument(\"--window-size=1080,1920\");\n//options.AddArguments(new List<string>() { \"headless\", \"screensho\", \"window-size=1080,1920\" });\n// var chrome = new ChromeDriver(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location), options);\nvar chrome = new ChromeDriver(options);\nchrome.Url = @\"http://192.168.1.222:8081/?id=asd\";\nITakesScreenshot screenshotDriver = chrome as ITakesScreenshot;\nScreenshot screenshot = screenshotDriver.GetScreenshot();\nscreenshot.SaveAsFile(\"./test.png\");\nchrome.Quit();\r\n"},{"name":"dotnet-c#","outline":"[\".net 截图方案\",\"PuppeteerSharp 方式\"]","content":"只支持 .Net framework 4.6+\r\nawait new BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision);\n\nvar url = \"http://192.168.1.222:8081/?id=asd\";\nvar file = \".\\\\somepage.jpg\";\n\nvar launchOptions = new LaunchOptions()\n{\n    Headless = true\n};\n\nusing (var browser = await Puppeteer.LaunchAsync(launchOptions))\n    //await Page.SetViewport(new ViewPortOptions { Width = 50, Height = 50 });\nusing (var page = await browser.NewPageAsync())\n{\n    await page.SetViewportAsync(new ViewPortOptions { Width = 1080, Height = 1920 });\n    await page.GoToAsync(url);\n    await page.ScreenshotAsync(file);\n}\r\n"},{"name":"flutter","outline":"[\"安装\"]","content":""},{"name":"flutter","outline":"[\"安装\",\"windows\"]","content":""},{"name":"flutter","outline":"[\"安装\",\"windows\",\"配置相关环境变量\"]","content":"可以配置到用户变量中\r\n**PATH** 新增 `D:\\flutter\\bin` (下载到的 flutter 解压到 D 盘情况)\r\n**ANDROID_HOME** sdk 找不到情况才需要配。`ANDROID_HOME=D:\\Android\\sdk`\r\n"},{"name":"linux","outline":"[\"软件工具\"]","content":""},{"name":"linux","outline":"[\"软件工具\",\"[pm2](https://github.com/Unitech/pm2) 多进程运行\"]","content":"pm2 start http-server -- /usr/website\r\n"},{"name":"linux","outline":"[\"nodejs 环境变量\"]","content":"[ubuntu安装及配置nodejs](https://www.jianshu.com/p/4125b3672baf)\r\nexport NODE_HOME=/usr/local/nodejs  \nexport PATH=$PATH:$NODE_HOME/bin  \nexport NODE_PATH=$NODE_HOME/lib/node_modules\r\n软链接方式：\r\nsudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/node\nsudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/npm\r\n"},{"name":"linux","outline":"[\"linux 安装 npm\"]","content":"curl http://npmjs.org/install.sh | sudo sh\r\n"},{"name":"linux","outline":"[\"linux 安装 curl\"]","content":"sudo apt-get install curl\r\n"},{"name":"linux","outline":"[\"命令行快捷键\"]","content":"https://www.cnblogs.com/aslongas/p/5899586.html\r\nctrl+a   ctrl+e   分别代表把管标移动到最前和最后\r\nctrl+u   ctrl+k   分别代表光标处往前和光标处往后删除\r\n移动光标\nCtrl – a ：移到行首\nCtrl – e ：移到行尾\nCtrl – b ：往回(左)移动一个字符\nCtrl – f ：往后(右)移动一个字符\nAlt – b ：往回(左)移动一个单词\nAlt – f ：往后(右)移动一个单词\nCtrl – xx ：在命令行尾和光标之间移动\nM-b ：往回(左)移动一个单词\nM-f ：往后(右)移动一个单词\r\n"},{"name":"linux","outline":"[\"root 用户切换\"]","content":"设置密码\r\nsudo passwd root\r\n切换\r\nsu root\r\nxshell 无法使用 root 登录问题\r\n修改 `/etc/ssh/sshd_config` 文件，把 `PermitRootLogin Prohibit-password` 添加#注释掉\r\n新添加：`PermitRootLogin yes`\r\n重启ssh服务 `/etc/init.d/ssh restart`\r\n"},{"name":"linux","outline":"[\"Linux环境变量和符号链接\"]","content":"https://www.jianshu.com/p/ac17d8a3d0c4\r\n"},{"name":"linux","outline":"[\"nginx 部署\"]","content":"此处使用的系统是 Ubuntu Server 16.04.6 LTS 64位\r\n参考文档\r\n[Ubuntu Server 16.04.1 LTS 64位安装 Nginx 以及简单应用](https://blog.csdn.net/niceliusir/article/details/81048373)\r\n[二进制安装官方配置文档](https://nginx.org/en/docs/configure.html)\r\n[Nginx与前端开发](https://www.qdskill.com/information/8426.html)\r\n[前端必备！最全nginx技术分析 - 前端之巅](https://mp.weixin.qq.com/s/wecUdGnuHdZOs3t7zc16jw)\r\n"},{"name":"linux","outline":"[\"nginx 部署\",\"编译安装步骤\"]","content":""},{"name":"linux","outline":"[\"nginx 部署\",\"编译安装步骤\",\"下载\"]","content":"[从官网拿最新的下载地址](https://nginx.org/en/download.html)\r\n# 下载\nwget https://nginx.org/download/nginx-1.14.2.tar.gz\n# 解压缩\ntar -xzvf nginx-1.14.2.tar.gz\n# 重命名\nmv nginx-1.14.2 nginx\r\n"},{"name":"linux","outline":"[\"nginx 部署\",\"编译安装步骤\",\"编译安装\"]","content":"# 配置（这条命令在解压后的Nginx目录下执行，/usr/local/nginx 为安装路径）(可能需要安装 gcc)\nsudo ./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module\n# 编译 (可能需要安装 make)\nsudo make\n# 安装\nsudo make install\r\n"},{"name":"linux","outline":"[\"nginx 部署\",\"依赖库 zlib, pcre, openssl\"]","content":"[ubuntu下安装nginx时依赖库zlib，pcre，openssl安装方法](https://blog.csdn.net/z920954494/article/details/52132125)\r\nhttp_rewrite_module 需要 PCRE library\r\nsudo apt-get install libpcre3 libpcre3-dev\r\nhttp_ssl_module 需要 OpenSSL library\r\nsudo apt-get install openssl libssl-dev\r\n"},{"name":"linux","outline":"[\"nginx 部署\",\"可能需要\"]","content":"安装编译工具\r\n# 安装 gcc，编译器\nsudo apt install gcc\n# 安装 make，编译执行\nsudo apt install make\r\n新建用户和用户组\r\n/usr/sbin/groupadd -f www\n/usr/sbin/useradd -g www www\r\n"},{"name":"linux","outline":"[\"nginx 部署\",\"多个location指向不同的本地目录\"]","content":"一个server中配置多个location指向不同的本地目录\r\n参考文档：[Nginx中一个server配置多个location | 茶瓯葱丝](http://daimin.github.io/posts/Nginx-zhong-yi-ge-server-pei-zhi-duo-ge.html)\r\nlocation / {\n    root   E:/github/my-note-build/dist;\n    index  index.html index.htm;\n}\n# 其他目录需使用别名\nlocation /docs {\n    alias   D:/_work/oa-mobile/projects/_docs/dist;\n    index  index.html index.htm;\n}\r\n"},{"name":"linux","outline":"[\"nginx 部署\",\"将所有请求指向一个页面\"]","content":"当然是404情况才指向此页面\r\n有两种方式\r\n# 方式 1，通过 try_files\nlocation / {\n    root   E:/github/my-note-build/dist;\n    try_files $uri $uri/ /index.html;\n}\n\n# 方式 2，通过重定向 404\nerror_page 404 =200 /index.html;\r\n"},{"name":"linux","outline":"[\"nginx 部署\",\"nginx.confg\"]","content":"位置：nginx/conf/nginx.conf\r\n[nginx 常见正则匹配符号表示](https://www.cnblogs.com/netsa/p/6383094.html)\r\n~ 为区分大小写匹配\r\n~* 为不区分大小写匹配\r\n!~和!~*分别为区分大小写不匹配及不区分大小写不匹配\r\n\nuser  www www;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    # 设置mime类型，类型由mime.type文件定义\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    # 设定日志格式\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    # sendfile指令指定Nginx是否调用sendfile函数（zero copy方式）来输出文件，对于普通应用，必须设定为on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的uptime\n    sendfile        on;\n    #tcp_nopush     on;\n\n    # 设置超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    gzip  on; # 开启gzip压缩\n\n    server {\n        listen       80;  # Nginx的监听端口\n        server_name  localhost;  # 访问Nginx服务器的域名\n\n        # 编码设置\n        #charset koi8-r;\n\n        # 设定虚拟主机的访问日志\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html; # 前端项目入口文件的路径\n            index  index.html index.htm; # 前端入口文件为index.html\n        }\n\n        location /api {  # 凡是以/api开头的http请求都会被下面的服务器处理\n            proxy_pass  https://127.0.0.1:3000;  # 被代理的服务器的域名\n            proxy_redirect     off;\n            proxy_set_header   Host             $host;\n            proxy_set_header   X-Real-IP        $remote_addr;\n            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n        }\n\n        # 静态文件交给Nginx直接处理\n        #location ~* ^.+\\.(css|js|txt|swf|mp4)$ {\n        #location ~ /public { # 这样应该更好 /public 下是所有的静态资源\n        #    root E:/web/public; # 注意，不能是反斜杠(\\)\n        #    access_log off;\n        #    expires 24h;\n        #}\n\n        error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n    # 多个server，可实现同一个端口，多个域名\n    #server {\n    #    listen       80;\n    #    #域名\n    #    server_name  blog.huruji3.com;\n    #    location / {\n    #        #node.js应用的端口\n    #        proxy_pass http://127.0.0.1:3001;\n    #        root blog;\n    #    }\n    #}\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n\r\n"},{"name":"linux","outline":"[\"nodejs 部署\"]","content":""},{"name":"linux","outline":"[\"nodejs 部署\",\"安装\"]","content":""},{"name":"linux","outline":"[\"nodejs 部署\",\"安装\",\"简单安装(使用编译好的二进制包)\"]","content":"[ubuntu安装及配置nodejs](https://www.jianshu.com/p/4125b3672baf)\r\n[Linux(ubuntu16.04)下安装nodejs及配置环境变量](https://blog.csdn.net/yuwujian1992/article/details/74075099)\r\n[从官网拿最新的下载地址](https://nodejs.org/en/download/)\r\n# 下载\nwget -P /home/jony https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-x64.tar.xz\n# 解压缩\nxz -d node-v10.15.3.tar.xz\ntar -xvf node-v10.15.3.tar\n# 重命名\nmv node-v10.15.3-linux-x64 nodejs\n\n\r\n"},{"name":"linux","outline":"[\"nodejs 部署\",\"安装\",\"简单安装(使用编译好的二进制包)\",\"设置全局访问\"]","content":"**环境变量方式**\r\n# 要修改的配置文件，二选一，root 用户肯定是全局配置，其他用户全局配置是否有效，待测\nvim /etc/profile  #全局环境变量配置文件\nvim ~/.bashrc  #当前用户环境变量配置文件\n\n#node\nexport NODE_HOME=/opt/nodejs\nexport PATH=$NODE_HOME/bin:$PATH\n\n#npm\nexport NODE_PATH=$NODE_HOME/lib/node_modules\n\n# 二选一\nsource /etc/profile\nvim ~/.bashrc\r\n**软连接方式** - 不推荐，安装的全局软件又要单独设置\r\nsudo ln -s /usr/local/nodejs/bin/node /usr/local/bin/node\nsudo ln -s /usr/local/nodejs/bin/npm /usr/local/bin/npm\r\n"},{"name":"linux","outline":"[\"nodejs 部署\",\"安装\",\"编译安装步骤 (编译时间太长，不推荐。。。直接使用二进制包吧)\"]","content":""},{"name":"linux","outline":"[\"nodejs 部署\",\"安装\",\"编译安装步骤 (编译时间太长，不推荐。。。直接使用二进制包吧)\",\"下载\"]","content":"[从官网拿最新的下载地址](https://nodejs.org/en/download/)\r\n# 下载\nwget https://nodejs.org/dist/v10.15.3/node-v10.15.3.tar.gz\n# 解压缩\ntar -xzvf node-v10.15.3.tar.gz\n# 重命名\nmv node-v10.15.3 nodejs\r\n"},{"name":"linux","outline":"[\"nodejs 部署\",\"安装\",\"编译安装步骤 (编译时间太长，不推荐。。。直接使用二进制包吧)\",\"编译安装\"]","content":"# 可能需要安装\n# sudo apt-get install gcc g++ make python\n\n# 配置（这条命令在解压后的nodejs目录下执行，/usr/local/nodejs/ 为安装目录）\nsudo ./configure --prefix=/usr/local/nodejs\n# 编译\nsudo make\n# 安装\nsudo make install\r\n"},{"name":"linux","outline":"[\"nodejs 部署\",\"使用 pm2 管理 node 服务\"]","content":"[pm2 进程管理工具](https://github.com/Unitech/pm2) - 生产环境用\r\n适用于网站访问量比较大,需要完整的监控界面\r\n支持异常自动重启\r\n运行管理多个进程程序\r\n除了nodejs，还[支持其他语言程序](https://pm2.io/doc/en/runtime/guide/process-management/?utm_source=github#manage-any-application-type) \r\n# 运行js\npm2 start app.js\n# 支持命令\npm2 start http-server -- /usr/website\r\n"},{"name":"linux","outline":"[\"Shadowsocks 部署\"]","content":"http://blog.csdn.net/qq_34049853/article/details/76039550\r\n"},{"name":"linux","outline":"[\"Shadowsocks 部署\",\"ubuntu 安装\"]","content":"apt install python-gevent python-pip python-m2crypto\n\npip install shadowsocks\n\r\n"},{"name":"linux","outline":"[\"Shadowsocks 部署\",\"直接运行\"]","content":"ssserver -p 3389 -k NmVhMTMyNT -m aes-256-cfb start \r\n"},{"name":"linux","outline":"[\"Shadowsocks 部署\",\"config.json 方式\"]","content":"/etc/shadowsocks/config.json\r\n{\n  \"server\": \"0.0.0.0\", // 不在本机部署才需设置？\n  \"server_port\":3389,\n  \"password\":\"xx\",\n  \"timeout\":300,\n  \"method\":\"aes-256-cfb\",\n  \"fast_open\":false,\n  \"workers\":1\n}\r\n运行\r\nssserver -c /etc/shadowsocks/config.json start\r\n加 -d 后台运行\r\nssserver -c /etc/shadowsocks/config.json -d start\r\n"},{"name":"linux","outline":"[\"Shadowsocks 部署\",\"开机启动\"]","content":"[涉及开机启动的文章](http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html)\r\n[systemctl 命令](http://man.linuxde.net/systemctl)\r\n**创建后台服务文件**\r\n/etc/systemd/system/shadowsocks.service\r\n[Unit]\nDescription=Shadowsocks\n\n[Service]\nTimeoutStartSec=0\nExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json\n\n[Install]\nWantedBy=multi-user.target\r\n**开机服务启动命令**\r\n[systemctl 命令](http://man.linuxde.net/systemctl)\r\n启动\r\n# 激活\nsystemctl enable shadowsocks\n# 启动\nsystemctl start shadowsocks\n# 重启\nsystemctl restart shadowsocks\r\n查看状态\r\n# 能看到部分日志\nsystemctl status shadowsocks -l\r\n查看所有日志  \n通过 journalctl + 进程id 查询 方式查询  \n贴上一篇文章：[如何使用Journalctl查看并操作Systemd日志](https://blog.csdn.net/zstack_org/article/details/56274966)\r\n# 搜索 ssserver 进程id\nps -aux | grep ssserver\n\n# 查看 id 为 21779，今天的日志\njournalctl _PID=21779 --since today\n# 昨天\njournalctl _PID=21779 --since yesterday\n# 最近50条\njournalctl _PID=21779 -n 50\r\n"},{"name":"linux","outline":"[\"vim 命令\"]","content":"[vim常用命令总结](https://www.cnblogs.com/yangjig/p/6014198.html)\r\n"},{"name":"linux","outline":"[\"vim 命令\",\"保存和退出\"]","content":":w 保存  \n:q 退出  \nZZ :wq 保存退出  \nZQ | :q! 不保存退出  \n:w filename 另存为\r\n"},{"name":"linux","outline":"[\"vim 命令\",\"撤销反撤销\"]","content":"普通模式下\r\n撤销 `u`\r\n反撤销 `ctrl + r`\r\n"},{"name":"linux","outline":"[\"_常用命令汇总\"]","content":""},{"name":"linux","outline":"[\"_常用命令汇总\",\"搜索\"]","content":"find / -name ssserver\r\n"},{"name":"linux","outline":"[\"_常用命令汇总\",\"文件夹 - 创建\"]","content":"在当前目录创建一个 test 文件\r\nmkdir test\r\n"},{"name":"linux","outline":"[\"_常用命令汇总\",\"文件夹 - 重命名\"]","content":"mv nginx-1.14.2 nginx # 将 nginx-1.14.2 命名为 nginx\r\n"},{"name":"linux","outline":"[\"_常用命令汇总\",\"删除\"]","content":"支持文件和文件夹\r\nrm -rf /var/www/nodercms\nrm -rf /var/www/nodercms-old\nrm -rf /var/www/nodercms.tar\r\n-r 就是向下递归，不管有多少级目录，一并删除\n-f 就是直接强行删除，不作任何提示的意思\r\n"},{"name":"linux","outline":"[\"_常用命令汇总\",\"进程、端口\"]","content":"[Linux查看端口、进程情况及kill进程](https://www.cnblogs.com/liuzhengliang/p/4609632.html)\r\n# 查看进程，过滤 ssserver 关键字\nps -aux | grep ssserver\n\n# 查看端口，过滤 27017 的端口\nnetstat -lanp | grep \"27017\"\r\n结束进程\r\nkill 1001 # 1001 为 pid\r\n"},{"name":"linux","outline":"[\"_常用命令汇总\",\"tar 解压缩\"]","content":"不同的文件类型参数不同\r\nxz -d node-v10.15.3.tar.xz\ntar -xvf node-v10.15.3.tar\ntar -xzvf node-v10.15.3.tar.gz\r\n"},{"name":"linux","outline":"[\"一些问题\"]","content":"[Ubuntu Server 命令行下的中文乱码(菱形图标）的解决方案](https://blog.csdn.net/guozhiyingguo/article/details/52852337)\r\n"},{"name":"linux","outline":"[\"工具使用\"]","content":""},{"name":"linux","outline":"[\"工具使用\",\"wget 下载工具\"]","content":"# 默认下载到当前目录\nwget http://nginx.org/download/nginx-1.14.0.tar.gz\r\n与 curl 区别：\ncurl由于可自定义各种请求参数所以在模拟web请求方面更擅长；wget由于支持ftp和Recursive所以在下载文件方面更擅长。类比的话curl是浏览器，而wget是迅雷9。\r\n"},{"name":"linux","outline":"[\"工具使用\",\"gcc 编译工具\"]","content":"安装\r\nsudo apt install gcc\r\n查看版本\r\ngcc --version\r\n"},{"name":"linux","outline":"[\"工具使用\",\"apt 包管理器\"]","content":""},{"name":"linux","outline":"[\"系统目录说明\"]","content":"[Linux系统目录详解](https://blog.csdn.net/longxu0872/article/details/71168340)\r\n/bin ：获得最小的系统可操作性所需要的命令\r\n/boot ：内核和加载内核所需的文件\r\n/dev ：终端、磁盘、调制解调器等的设备项\r\n/etc ：关键的启动文件和配置文件\r\n/home ：用户的主目录\r\n/lib ：C编译器的库和部分C编译器\r\n/media ：可移动介质上文件系统的安装点\r\n/opt ：可选的应用安装包\r\n/proc ：所有正在运行进程的映像\r\n/root ：超级用户的主目录\r\n/sbin ：引导、修复或者恢复系统的命令\r\n/tmp ：每次重新引导就消失的临时文件\r\n/usr ：次要文件和命令的层次结构\r\n/usr/bin ：大多数命令和可执行文件\r\n/usr/include ：编译C程序的头文件\r\n/usr/lib ：库，供标准程序使用的支持文件\r\n/usr/local ：本地软件（主要存放那些手动安装的软件，即不是通过“新立得”或apt-get安装的软件。它和/usr目录具有相类似的目录结构。让软件包管理器来管理/usr目录，而把自定义的脚本(scripts)放到/usr/local目录下面）\r\n/usr/local/bin ：本地的可执行文件\r\n/usr/local/etc ：本地系统配置文件和命令\r\n/usr/local/lib ：本地的支持文件\r\n/usr/local/sbin ：静态链接的本地系统维护命令\r\n/usr/local/src ：/usr/local/*的源代码\r\n/usr/man ：联机用户手册\r\n/usr/sbin不太关键的系统管理命令和修复命令\r\n/usr/share ：多种系统共同的东西（只读）\r\n/usr/share/man ：练级用户手册\r\n/usr/src ：非本地软件包的源代码\r\n/var ：系统专用数据和配置文件\r\n/var/adm ：各种不同的东西\r\n/var/log ：各种系统日志文件\r\n/var/spool ：供打印机、邮件等使用的假脱机目录\r\n/var/tmp ：更多的临时空间（在重新引导之后，文件予以保留）\r\n"},{"name":"nodejs","outline":"[\"require 模块\"]","content":""},{"name":"nodejs","outline":"[\"require 模块\",\"**模块定义\\\\导出**\"]","content":"导出1：直接导出模块\r\n// math.js\nvar math={\n  add:function(){\n    var sum = 0,\n      i = 0,\n      args = arguments,\n      l = args.length;\n    while (i < l) {\n      sum += args[i++];\n    }\n    return sum;\n  }\n};\nmodule.exports=math;\r\n导出2：自定义导出\r\n// math.js\nexports.add = function () {\n  var sum = 0,\n    i = 0,\n    args = arguments,\n    l = args.length;\n  while (i < l) {\n    sum += args[i++];\n  }\n  return sum;\n};\r\n**使用：**\r\n上面两个例子的效果一致\r\n// program.js\nvar math = require('math');\nmath.add(val, 1);\r\n"},{"name":"nodejs","outline":"[\"require 模块\",\"require自动寻找特性\"]","content":"不指明路径的直接模块调用，比如 require('gulp')，将自动在 node_modules中寻找。\r\n目录级别不影响。即可以是node_modules同级，也可以是某子级\r\n"},{"name":"nodejs","outline":"[\"获取本机 IP\"]","content":"function getIPAdress(){  \n  var interfaces = require('os').networkInterfaces();  \n  for(var devName in interfaces){  \n    var iface = interfaces[devName];  \n    for(var i=0;i<iface.length;i++){  \n      var alias = iface[i];  \n      if(alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal){  \n        return alias.address;  \n      }  \n    }  \n  }  \n}\r\n"},{"name":"nodejs","outline":"[\"Nodejs 实现windows后台运行\"]","content":"首先需要到http://nssm.cc/download/?page=download 下载 nssm\r\n下下来之后是压缩包形式的，解压之后 ctrl + R 进入cmd 命令行界面\r\n在命令行模式下进入到nssm的目录， 注意是32位或64位的系统进入相应的目录。\r\n之后运行：\r\nnssm install NodeJS “\\node.exe” “\\server.js” net start NodeJS\nnssm install NodeJS（安装后的服务名称） “(node.exe安装的地址)\\node.exe” “（要启动的JS文件）\\server.js” net start NodeJS（安装后的服务名称）\r\n最后要卸载服务用 nssm remove NodeJS（安装后的服务名称)\r\n"},{"name":"nodejs","outline":"[\"node 实用模块\"]","content":""},{"name":"nodejs","outline":"[\"node 实用模块\",\"node-portfinder 自动获取可用端口\"]","content":"[node-portfinder](https://github.com/indexzero/node-portfinder)\r\n"},{"name":"nodejs","outline":"[\"node 实用模块\",\"node-ip 可获取本机ip地址\"]","content":"https://github.com/indutny/node-ip\r\nip.address() // 可局域网访问的本机ip\r\n"},{"name":"nodejs","outline":"[\"node 实用模块\",\"cli 参数获取\"]","content":"[yargs](https://github.com/yargs/yargs)\r\n"},{"name":"nodejs","outline":"[\"node 实用模块\",\"终端相关\"]","content":""},{"name":"nodejs","outline":"[\"node 实用模块\",\"终端相关\",\"加载指示图标动画\"]","content":"https://github.com/sindresorhus/ora\r\n"},{"name":"nodejs","outline":"[\"node 实用模块\",\"终端相关\",\"输出文本样式颜色控制\"]","content":"https://github.com/chalk/chalk\r\n"},{"name":"nodejs","outline":"[\"node 实用模块\",\"node-notifier\"]","content":"似乎可以控制 vscode 弹消息框\r\n"},{"name":"nodejs","outline":"[\"node 实用模块\",\"opn 打开其他程序\"]","content":"const opn = require('opn')\nopn(`http://${host}:${port}`, {app: ['chrome']})\r\n"},{"name":"nodejs","outline":"[\"node 实用模块\",\"chokidar\"]","content":"https://github.com/paulmillr/chokidar\r\n基于node.JS的监听文件夹改变模块\r\n一般前端环境框架直接有依赖安装\r\n"},{"name":"nodejs","outline":"[\"npm 使用\"]","content":""},{"name":"nodejs","outline":"[\"npm 使用\",\"切换仓库\"]","content":"[NPM 切换仓库](https://www.jianshu.com/p/c5609434cd60)\r\nnpm config ls\n\n# https://registry.npmjs.org 原仓库\n# https://registry.npm.taobao.org 淘宝\n\nnpm config get registry\nnpm config set registry https://registry.npm.taobao.org # 设置淘宝仓库\r\n"},{"name":"nodejs","outline":"[\"npm 使用\",\"更新所有包\"]","content":"# 先更新 package.json 版本\nnpm update local # 更新所有本地包\nnpm update global # 全局包\r\n"},{"name":"nodejs","outline":"[\"path\"]","content":""},{"name":"nodejs","outline":"[\"path\",\"路径信息\"]","content":"let info = path.parse('./dir/index.js')\n\ninfo.ext // 扩展名，如果是目录，则为空字符串\n\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\"]","content":""},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"文件列表(包括文件夹)\"]","content":""},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"文件列表(包括文件夹)\",\"原生 readdir：只能当前目录，不寻找下级\"]","content":"let dirList = fs.readdirSync('./dir')\n// 返回值示例：\n// [\".DS_Store\",\"Update.exe\",\"version\",\"views_resources_200_percent.pak\",\"xinput1_3.dll\"]\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"文件列表(包括文件夹)\",\"读取指定目录下的所有文件，支持过滤\"]","content":"使用 [recursive-readdir](https://github.com/jergason/recursive-readdir)，但不会列出文件夹\r\n需列出文件夹使用：[readdir-enhanced](https://github.com/bigstickcarpet/readdir-enhanced)\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"判断是不是[文件/目录]\"]","content":"fs.statSync(path).isDirectory() // 是不是目录，即路径最终指向的是文件夹\nfs.statSync(path).isFile() // 是不是文件\r\n当然，也可用来判断文件目录是否存在，但不推荐。**判断是否存在，推荐用 `fs.access`**\r\nfs.stat 用来获取文件状态\r\nvar fs = require(\"fs\");\n/*\n    读取文件的状态；\n    fs.stat(path,callback);\n    callback有两个参数；err，stats；stats是一个fs.Stats对象；\n    如果发生错误err.code是常见错误之一；\n 不建议在调用 fs.open() 、fs.readFile() 或 fs.writeFile() 之前使用 fs.stat() 检查一个文件是否存在。 作为替代，用户代码应该直接打开/读取/写入文件，当文件无效时再处理错误。\n 如果要检查一个文件是否存在且不操作它，推荐使用 fs.access()。\n */\nfs.stat(\"./wenjian.txt\",function(err,stats){\n    console.log(err);\n    console.log(stats);\n//    获取文件的大小；\n    console.log(stats.size);\n//    获取文件最后一次访问的时间；\n    console.log(stats.atime.toLocaleString());\n//    文件创建的时间；\n    console.log(stats.birthtime.toLocaleString());\n//    文件最后一次修改时间；\n    console.log(stats.mtime.toLocaleString());\n//    状态发生变化的时间；\n    console.log(stats.ctime.toLocaleString())\n//判断是否是目录；是返回true；不是返回false；\n    console.log(stats.isFile())\n//    判断是否是文件；是返回true、不是返回false；\n    console.log(stats.isDirectory())\n})\n// --------------------- \n// 作者：sunlizhen \n// 来源：CSDN \n// 原文：https://blog.csdn.net/sunlizhen/article/details/78016202 \n// 版权声明：本文为博主原创文章，转载请附上博文链接！\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"判断[文件/目录]是否存在 - fs.access(path[, mode], callback)\"]","content":"var fs = require(\"fs\");\n/*\n-----判断文件和目录是否存在；\nfs.access(path[, mode], callback);\npath:判断的文件名；\ncallback：回调函数；\n */\nfs.access(\"./wenjian.txt\",function(err){\n//    文件和目录不存在的情况下；\n    if(err.code == \"ENOENT\"){\n        console.log(\"文件和目录不存在\")\n    }\n})\n/*\n 不建议在调用 fs.open() 、 fs.readFile() 或 fs.writeFile() 之前使用 fs.access() 检查一个文件的可访问性\n */\n//不建议使用：\nfs.access(\"./wenjian.txt\",function(err){\n    if(!err){\n        console.log(\"文件已经存在\");\n        return;\n    }\n    fs.open(\"./wenjian.txt\",function(err){\n        console.log(err)\n    })\n})\n//推荐使用；\nfs.open(\"./wenjian.txt\",function(err,fd){\n    cnsole.log(err)\n})\n// --------------------- \n// 作者：sunlizhen \n// 来源：CSDN \n// 原文：https://blog.csdn.net/sunlizhen/article/details/78016157 \n// 版权声明：本文为博主原创文章，转载请附上博文链接！\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"判断[文件/目录]是否存在\"]","content":" `fs.exists(path)` **nodejs 9.0弃用**\r\n对应的同步方法 `fs.existsSync(path)` ，这个还可以用\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"读取文件 fs.readFile\"]","content":"读取不存在文件会报错\r\nfs.readFile(file[, options], callback)\nfs.readFileSync(file[, options])\n\n// 默认获取二进制数据。参数设置为utf8将获取文本数据\nfs.readFile('note_data/index.html', 'utf8', function (err, data) {\n    if (err) {\n      console.log(err)\n      return\n    }\n    console.log(arguments);\n});\n\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"改名(文件名，目录名)\"]","content":"fs.rename(oldPath, newPath, callback)\nfs.renameSync(oldPath, newPath)\r\noldPath, newPath必须相同级数，可以完全一样，只能修改末级\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"删除\"]","content":""},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"删除\",\"标准删\"]","content":"只能删除文件\r\nfs.unlink(path, callback)\nfs.unlinkSync(path)\r\nfs.unlink('/tmp/hello.txt', function (err) {\n    if (err) throw err;\n    console.log('successfully deleted /tmp/hello');\n});\n\r\n只能删除空目录\r\nfs.rmdir(path, callback)\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"删除\",\"递归删：第三方扩展\"]","content":"删除指定目录下的所有文件和目录\r\n使用 [fs-extra](https://github.com/jprichardson/node-fs-extra) ，或者使用 [rimraf](https://github.com/isaacs/rimraf)\r\nfs-extra 的 [remove-sync](https://github.com/jprichardson/node-fs-extra/blob/master/docs/remove-sync.md) 示例\r\nconst fs = require('fs-extra')\n\n// remove file\nfs.removeSync('/tmp/myfile')\n\nfs.removeSync('/home/jprichardson') // I just deleted my entire HOME directory.\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"创建目录\"]","content":"fs.mkdir(path[, mode], callback)  \nfs.mkdirSync(path[, mode])\r\n只能在已存在的目录下创建，越级创建将报错\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"写/创建 文件\"]","content":"将内容写入文件。\r\n有文件将直接替换现有内容，没有将创建新的并写入。\r\n路径不存在将无法写入\r\n语法\r\nfs.writeFile(file, data[, options], callback)\nfs.writeFileSync(file, data[, options])\r\n例子\r\nfs.writeFile('note_data/hello.txt', 'hello','utf8', function(err) {\n  if(err) throw err;\n  console.log('File write completed');\n});\r\n或直接使用 fs-extra 的 [outputFileSync](hhttps://github.com/jprichardson/node-fs-extra/blob/master/docs/outputFile-sync.md)、[outputJsonSync](https://github.com/jprichardson/node-fs-extra/blob/master/docs/outputJson-sync.md)，路径不存在也能进行写入\r\nfs.outputJsonSync(path.resolve(outputPath, 'data-demo-list.json'), worksList)\r\n"},{"name":"nodejs","outline":"[\"文件系统 - fs\",\"copy\"]","content":"使用 [fs-extra](https://github.com/jprichardson/node-fs-extra)\r\n[copy 文档](https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md)\r\n[copySync 文档](https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy-sync.md)\r\ncopySync 示例\r\nconst fs = require('fs-extra')\n\n// copy file\nfs.copySync('/tmp/myfile', '/tmp/mynewfile')\n\n// copy directory, even if it has subdirectories or files\nfs.copySync('/tmp/mydir', '/tmp/mynewdir')\n\n// 支持过滤\nconst filterFunc = (src, dest) => {\n  // your logic here\n  // it will be copied if return true\n}\nfs.copySync('/tmp/mydir', '/tmp/mynewdir', { filter: filterFunc })\r\n"},{"name":"nodejs","outline":"[\"服务端部署\"]","content":""},{"name":"nodejs","outline":"[\"服务端部署\",\"node 服务启动框架\"]","content":"https://blog.csdn.net/maquealone/article/details/79550120\r\nhttps://www.cnblogs.com/zhoujie/p/nodejs4.html\r\nhttps://www.cnblogs.com/chris-oil/p/6239097.html\r\n"},{"name":"nodejs","outline":"[\"服务端部署\",\"node 服务启动框架\",\"[pm2 进程管理工具](https://github.com/Unitech/pm2) - 生产环境\"]","content":"适用于网站访问量比较大,需要完整的监控界面\r\n支持异常自动重启\r\n运行管理多个进程程序\r\n除了nodejs，还[支持其他语言程序](https://pm2.io/doc/en/runtime/guide/process-management/?utm_source=github#manage-any-application-type) \r\n# 运行js\npm2 start app.js\n# 支持命令\npm2 start http-server -- /usr/website\r\n"},{"name":"nodejs","outline":"[\"服务端部署\",\"node 服务启动框架\",\"[pm2 进程管理工具](https://github.com/Unitech/pm2) - 生产环境\",\"使用配置文件启动\"]","content":"[参考文档](https://www.cnblogs.com/chyingp/p/pm2-documentation.html)\r\npm2.config.json\r\n{\n  \"name\"        : \"nginx\", // 应用名称\n  \"script\"      : \"./nginx.exe\", // 实际启动脚本\n  \"cwd\"         : \"./\", // 当前工作路径\n  \"watch\": [ // 监控变化的目录，一旦变化，自动重启\n    \"conf\"\n  ],\n  \"ignore_watch\" : [ // 从监控目录中排除\n    \"node_modules\", \n    \"logs\",\n    \"public\"\n  ],\n  \"watch_options\": {\n    \"followSymlinks\": false\n  },\n  \"error_file\" : \"./logs/app-err.log\", // 错误日志路径\n  \"out_file\"   : \"./logs/app-out.log\", // 普通日志路径\n  \"env\": {\n      \"NODE_ENV\": \"production\" // 环境参数，当前指定为生产环境\n  }\n}\r\n"},{"name":"nodejs","outline":"[\"服务端部署\",\"node 服务启动框架\",\"nodemon - 开发环境\"]","content":"支持修改自动重启\r\n"},{"name":"nodejs","outline":"[\"服务端部署\",\"node 服务启动框架\",\"其他启动框架\"]","content":"supervisor 是开发环境用。Python(2.4+) 开发的\r\nforever 管理多个站点，每个站点访问量不大，不需要监控。\r\nnode-dev\r\n"},{"name":"nodejs-express","outline":"[\"文件上传\"]","content":"[multer 文档](https://www.npmjs.com/package/multer)\r\n此处为单文件上传，一次性多次文件待探索\r\nvar express = require('express')\nvar router = express.Router()\nvar multer = require('multer')\nvar upload = multer({ dest: 'e:/uploads/' })\n\n// upload.single('avatar') 这个 avatar 对应 input 的 name 值，如：<input name=\"avatar\" type=\"file\"/>。否则报错\nrouter.post('/file', upload.single('file'), function (req, res) {\n  res.send({\n    'status': 200,\n    'message': 'ok',\n    'result': {}\n  })\n})\n\nmodule.exports = router\n\r\n"},{"name":"nodejs-express","outline":"[\"路由 post 参数获取\"]","content":"[req.body 说明 - express4 api 中文手册](http://www.expressjs.com.cn/4x/api.html#req.body)\r\nvar app = require('express')();\nvar bodyParser = require('body-parser');\nvar multer = require('multer');\n\napp.use(bodyParser.json()); // for parsing application/json\napp.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded\napp.use(multer()); // for parsing multipart/form-data\n\napp.post('/', function (req, res) {\n  console.log(req.body); // 获取\n  res.json(req.body);\n})\r\n"},{"name":"postcss","outline":"[\"插件\"]","content":""},{"name":"postcss","outline":"[\"插件\",\"去掉斜杠注释 : [postcss-inline-comment](https://github.com/moczolaszlo/postcss-inline-comment)\"]","content":"// postcss.config.js\n\nmodule.exports = {\n    plugins: [\n        require('postcss-inline-comment')\n    ]\n}\n\r\n"},{"name":"postcss","outline":"[\"插件\",\"px 转 rem : [postcss-pxtorem](https://github.com/cuth/postcss-pxtorem)\"]","content":""},{"name":"postcss","outline":"[\"插件\",\"@import 导入控制 : postcss-smart-import\"]","content":"webpack 中有部分说明 > [css模块导入依赖控制（webpack 中使用postcss 导入依赖问题）](http://192.168.1.222:8800/note/#17/26)\r\n"},{"name":"reactjs","outline":"[\"css 方案\"]","content":"https://github.com/css-modules/css-modules\r\nhttps://www.styled-components.com/\r\n"},{"name":"reactjs","outline":"[\"jsx\"]","content":"循环\r\nvar MyComponent = Vue.extend({\n  data () {\n    return {\n      list: ['1', '2']\n    }\n  },\n  methods: {\n    testfn () {\n      console.log(this)\n    }\n  },\n  render () {\n    let ls = [<li>{this.name}</li>]\n    this.list.forEach(v => {\n      ls.push(<li>{v}</li>)\n    })\n    return (\n      <div className=\"top-list-select\">\n        <ul className=\"l-mu\">\n          {ls}\n        </ul>\n\n      </div>\n    )\n  }\n})\n\r\n"},{"name":"reactjs","outline":"[\"学习\"]","content":""},{"name":"reactjs","outline":"[\"学习\",\"组件 & Props\"]","content":""},{"name":"reactjs","outline":"[\"学习\",\"组件 & Props\",\"props：组件的标签属性。只读\"]","content":"function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nconst element = <Welcome name=\"Sara\" />;\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\r\n[还可传递组件或元素](https://doc.react-china.org/docs/composition-vs-inheritance.html#%E5%8C%85%E5%90%AB%E5%85%B3%E7%B3%BB)\r\nprops.children 获取所有组件\r\n"},{"name":"reactjs","outline":"[\"学习\",\"组件 & Props\",\"组件可嵌套\"]","content":""},{"name":"reactjs","outline":"[\"学习\",\"State & 生命周期\"]","content":""},{"name":"reactjs","outline":"[\"学习\",\"State & 生命周期\",\"数据响应使用 State 实现，而非 Props\"]","content":""},{"name":"reactjs","outline":"[\"学习\",\"可使用 render 进行渲染\"]","content":"function tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(\n    element,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\r\nrender 的参数 1 可直接写标签\r\nReactDOM.render(\n    <Clock date={new Date()} />,\n    document.getElementById('root')\n);\r\n"},{"name":"reactjs","outline":"[\"学习\",\"可使用 render 进行渲染\",\"组件生命周期\"]","content":"class Clock extends React.Component {\n\n  // 组件输出到 DOM 后执行\n  componentDidMount() {\n\n  }\n\n  // 组件从 DOM 移出后执行\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div></div>\n    );\n  }\n}\r\n"},{"name":"reactjs","outline":"[\"学习\",\"可使用 render 进行渲染\",\"state 设置\"]","content":"class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    // 新增状态，初始值\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    // 更新状态\n    // 设置 date 属性\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\r\n"},{"name":"reactjs","outline":"[\"学习\",\"函数组件、类组件\"]","content":"function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\r\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\r\n"},{"name":"reactjs","outline":"[\"学习\",\"函数组件、类组件\",\"区别\"]","content":"类组件有很多其他特性。例如局部状态、生命周期钩子\r\n"},{"name":"reactjs","outline":"[\"学习\",\"事件处理\"]","content":""},{"name":"reactjs","outline":"[\"学习\",\"事件处理\",\"事件处理函数中的 this 不会返回组件实例\"]","content":"三种方式解决\r\n"},{"name":"reactjs","outline":"[\"学习\",\"事件处理\",\"1 使用 bind\"]","content":"一般在构造函数 constructor 中\r\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\r\n也可直接将bing 写在 JSX 中。不过每次子元素被初始都会绑定一次\r\n"},{"name":"reactjs","outline":"[\"学习\",\"事件处理\",\"2 类方法使用箭头函数。建议方式\"]","content":"class LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.\n  // Warning: this is *experimental* syntax.\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\r\n"},{"name":"reactjs","outline":"[\"学习\",\"事件处理\",\"3 JSX 中使用箭头函数\"]","content":"class LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // This syntax ensures `this` is bound within handleClick\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\r\n"},{"name":"reactjs","outline":"[\"学习\",\"状态提升：父子组件的通讯\"]","content":"子组件向父组件传值。\r\n通过 props 给子组件传一个函数，子组件特定条件调用此函数传值即可\r\n"},{"name":"reactjs","outline":"[\"学习\",\"组合 VS 继承\"]","content":"包含关系，有点类 Vue 的分发内容。本质其实是通过 props 传递元素或组件\r\nprops.children 可获取父组件包含的所有子元素组件\r\n"},{"name":"reactjs","outline":"[\"环境\"]","content":""},{"name":"reactjs","outline":"[\"环境\",\"1 可控的定制化\"]","content":""},{"name":"reactjs","outline":"[\"环境\",\"1 可控的定制化\",\"相关包\"]","content":"yarn add react react-dom babel-preset-react\r\n"},{"name":"reactjs","outline":"[\"环境\",\"1 可控的定制化\",\".babelrc 文件，常用配置。使支持 jsx\"]","content":"{\n  \"presets\": [\n    \"env\",\n    \"react\"\n  ],\n  \"plugins\": [\n    \"transform-runtime\",\n    \"syntax-dynamic-import\"\n  ]\n}\n\r\n"},{"name":"reactjs","outline":"[\"环境\",\"2 [使用官方 create-react-app](http://github.com/facebookincubator/create-react-app)\"]","content":""},{"name":"sass","outline":"[\"文件编码问题\"]","content":"文件编码必须 utf-8 有 rom。否则中文无法编译\r\n"},{"name":"sass","outline":"[\"混合(mixin)\"]","content":"声明 简单声明 css块 css块声明 功能块声明\r\n简单声明一些公用样式块\r\n"},{"name":"sass","outline":"[\"混合(mixin)\",\"声明\"]","content":"@mixin center-block {\n    margin-left:auto;\n    margin-right:auto;\n}\r\n"},{"name":"sass","outline":"[\"混合(mixin)\",\"带参声明\"]","content":"@mixin opacity($opacity:50) {\n  opacity: $opacity / 100;\n  filter: alpha(opacity=$opacity);\n}\r\n"},{"name":"sass","outline":"[\"混合(mixin)\",\"使用\"]","content":".demo{\n    @include center-block;\n}\r\n"},{"name":"sass","outline":"[\"跳出嵌套选择器\"]","content":".test{\n    @at-root{\n        body{\n           background-color: #f8f8f8;\n       }\n    }    \n}\n\n// 编译后\nbody{\n   background-color: #f8f8f8;\n}\r\n"},{"name":"svg","outline":"[\"path画弧\"]","content":"[MDN参考](https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths)\r\n"},{"name":"svg","outline":"[\"path画弧\",\"几个问题，快速了解\"]","content":""},{"name":"svg","outline":"[\"path画弧\",\"几个问题，快速了解\",\"起点是指的圆的起点？还是画弧的起点？\"]","content":"是画弧的起点\r\n"},{"name":"svg","outline":"[\"path画弧\",\"几个问题，快速了解\",\"起点是指令M的起点？还是指令A有起点?\"]","content":"起点通过M指令指指定，指令A只能指定终点\r\n"},{"name":"svg","outline":"[\"path画弧\",\"指令A\"]","content":"可以这样理解，起点，终点的连线将指定半径的圆切成两半，取需要的那一半的弧线。  \n这里的**起点通过M指令指定**，否则默认0，即左上角\r\n半径：\r\n有两个参数，分别是x轴半径和y轴半径\r\n旋转角度 ：\r\n以角度为单位，非弧度。\r\n并非整个弧的旋转，起点终点不动，决定最终弧线大小方向。正圆情况此参数看不出来效果\r\n整个弧的旋转使用rotate属性\r\n角度大小 ：\r\n0，小角度弧；1，大角度弧 \r\n理解，即起点，终点的连线将圆切成两半，小的那半就是小角度弧了\r\n弧线方向 ：  \r\n0，起点到终点；1，终点到起点  \r\n都是逆时针（什么是逆时针，即往左旋转）  \r\n  也可以看成都是起点到终点  \r\n0，逆时针，1，顺时针\r\n终点xy：\r\n"},{"name":"svg","outline":"[\"path画弧\",\"例子\"]","content":"例子使用了2个指令，M指令，A指令\r\n<path fill=\"none\" \nstroke=\"#fc4\" stroke-linecap=\"round\" stroke-width=\"4\" \nd=\"M30 6 A 24 24, 0, 1, 1, 6.364 34.167\" \ntransform=\"rotate(225, 30 30)\"></path>\r\n"},{"name":"svg","outline":"[\"svg 文件模版\"]","content":"精简版\r\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <rect x=\"10\" y=\"10\" width=\"30\" height=\"30\" stroke=\"black\" fill=\"transparent\" stroke-width=\"5\"/>\n</svg>\r\n较完整版？\r\n<?xml version=\"1.0\" standalone=\"no\"?>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <rect x=\"10\" y=\"10\" width=\"30\" height=\"30\" stroke=\"black\" fill=\"transparent\" stroke-width=\"5\"/>\n</svg>\r\n"},{"name":"svg","outline":"[\"常用\"]","content":""},{"name":"svg","outline":"[\"旋转\"]","content":""},{"name":"svg","outline":"[\"旋转\",\"介绍\"]","content":"只能写在属性中，不能写在css中\r\n语法：\nrotate(angle[ x y])\r\n例子\r\n<text x=\"29.2\" y=\"121.8\" font-size=\"10\" text-anchor=\"middle\" fill=\"#fff\" transform=\"rotate(252.8,29.2,121.8)\" style=\"font-weight:bold;\">谢谢参与</text>\r\n"},{"name":"svg","outline":"[\"旋转\",\"自定义点旋转\"]","content":"通过 rotate 的 x y 参数控制，默认值0 0，即左上角\r\n"},{"name":"svg","outline":"[\"颜色继承 css\"]","content":"继承 css 字体颜色\r\n`fill=\"currentColor\"` `stroke=\"currentColor\"`\r\n<style>\n    .box {\n        color: 'red'\n    }\n</style>\n<div class=\"box\">\n    <svg\n        viewBox=\"0 0 1024 1024\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <path\n            fill=\"currentColor\"\n            d=\"M965.97 1013.76c13.65 13.65 34.13 13.65 47.78 0 13.65-13.65 13.65-34.13 0-47.78l-167.25-167.25c75.09-88.74 119.46-197.97 119.46-317.44C965.97 215.04 747.52 0 481.28 0 215.04 0 0 215.04 0 481.28s215.04 481.28 481.28 481.28c78.50 0 150.18-17.06 218.45-51.2 17.06-6.82 23.89-27.30 13.65-44.37-6.82-17.06-27.30-23.89-44.37-13.65-58.02 30.72-122.88 44.37-187.73 44.37-228.69 0-416.42-187.73-416.42-416.42 0-228.69 187.73-416.42 416.42-416.42 228.69 0 416.42 187.73 416.42 416.42 0 102.4-34.13 194.56-98.98 269.65-10.24 10.24-20.48 23.89-34.13 34.13-6.82 6.82-10.24 13.65-10.24 20.48 0 10.24 3.41 17.06 10.24 27.30\"></path>\n    </svg>\n</box>\n\r\n"},{"name":"typescript","outline":"[\"入门\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"术语，专业词汇\"]","content":"索引签名\r\n调用签名\r\n"},{"name":"typescript","outline":"[\"入门\",\"lint 使用 TSLint\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"枚举\"]","content":"可以用作类型，限定传入的值\r\n/** 定义 */\n// 默认数字，0起始，可设置\nenum Direction {\n    Up = 1,\n    Down,\n    Left,\n    Right\n}\n// 自定义值\nenum BooleanLikeHeterogeneousEnum {\n    No = 0,\n    Yes = \"YES\",\n}\n\n/** 使用 */\n// 就像调一个对象的成员\nconsole.log(Direction.Down) // 2\n// 用作类型\nfunction respond(recipient: string, message: Direction): void {\n    // ...\n}\nrespond(\"Princess Caroline\", Direction.Up)\r\n"},{"name":"typescript","outline":"[\"入门\",\"接口\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"接口\",\"快速使用\"]","content":"**对象类型**。定义对象结构\r\n**函数类型**\r\n**可索引类型**。键值对，包括数组\r\n**类类型**\r\n接口可继承，还可继承类\r\n/** 1 对象类型 */\ninterface SquareConfig {\n  // ? 符号将设置属性为可选，但并不等于 `color: string | undefined;`(依然必选)\n  color?: string;\n  width?: number;\n  // 只读\n  readonly x: number;\n  // 函数类型。`: boolean;`部分为返回值\n  cb (source: string, subString: string): boolean;\n  // 函数类型 加 ? 符号\n  // cb? (source: string, subString: string): boolean;\n  // 函数类型 写法2\n  // cb: (source: string, subString: string) => boolean;\n}\n// 用于函数参数\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  console.log(config.cb('abc', 'a'))\n  return {\n    color: 'red',\n    area: 1\n  }\n}\n\nlet mySquare = createSquare({ color: \"red\", x: 2, cb: () => true });\n\n\n/** 2 函数类型，单个函数 */\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n\n/** 3 可索引类型 */\n// 定义键和值的类型\n\n// 数组\ninterface StringArray {\n  // 这个 index 名字单纯描述，没有实际意义\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = [\"Bob\", \"Fred\"];\n\nlet myStr: string = myArray[0];\n\n// 对象。实现定义多个指定类型的键值对象\nclass Animal {\n    name: string = 'a';\n}\nclass Dog extends Animal {\n    breed: string = 'b';\n}\ninterface NotOkay {\n    [x: string]: Animal;\n    [x: number]: Dog;\n}\nlet myNotOkay: NotOkay;\nmyNotOkay = {\n    a: new Animal(),\n    b: new Animal(),\n    3: new Dog()\n};\nconsole.log(myNotOkay)\n\n/** 4 用于类：implements 关键字 */\ninterface ClockInterface {\n    currentTime: Date;\n}\nclass Clock implements ClockInterface {\n    currentTime: Date;\n    constructor(h: number, m: number) { }\n}\r\n"},{"name":"typescript","outline":"[\"入门\",\"接口\",\"实现任意数量的其它属性\"]","content":"对象结构 + 可索引类型\r\ninterface SquareConfig {\n    color?: string;\n    width?: number;\n    [propName: string]: any;\n}\r\n"},{"name":"typescript","outline":"[\"入门\",\"接口\",\"问题解答\"]","content":"**接口到底是干嘛的**：指明对象结构，包括数组，也包括类。\r\n**接口，所有类型的类**：某种程度上相当于不能写实现的类，但也可以用来指定类的接口，所以，说接口是所有类型的类不为过\r\n接口语法\r\ninterface NumberDictionary {\n  // 索引签名\n  // 其他属性值类型必须与索引值类型相同\n  [index: string]: number;\n  // \n  length: number;\n  name: number;\n}\n\n\n// 函数类型\ninterface SearchFunc {\n  // 调用签名\n  (source: string, subString: string): boolean; // 有返回值\n}\n\n// 函数类型2\ninterface ClockInterface {\n  setTime(d: Date);// 没有返回值\n}\n\n// 构造器签名。\ninterface ClockConstructor {\n  new (hour: number, minute: number): void;\n}\n\r\n可用于函数参数，此参数是对象或者数组\r\n接口还可以声明函数类型：\r\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\r\n类类型，定契约，实现接口。指定类结构。需借助 implements 关键字\r\ninterface ClockInterface {\n    currentTime: Date;\n    setTime(d: Date);\n}\n\nclass Clock implements ClockInterface {\n    currentTime: Date;\n    setTime(d: Date) {\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) { }\n}\r\n构造器类型\r\ninterface ClockConstructor {\n  new(hour: number, minute: number): ClockInterface;\n}\ninterface ClockInterface {\n  tick(): void;\n}\nclass DigitalClock {\n  constructor(h: string) { }\n  tick() { }\n}\n\n// 只有这样才能检测构造器是否符合\nlet analogClock: ClockConstructor = DigitalClock\n\n// 这样无法检测，编译通过\nnew DigitalClock('1')\n\r\n"},{"name":"typescript","outline":"[\"入门\",\"class\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"class\",\"快速使用\"]","content":"class Animal {\n  // 公共修饰符。可不指定，默认就是\n  public name: string;\n  // 私有修饰符，类内部访问。派生类内部也不能访问\n  private name2: string;\n  // 私有修饰符，类内部访问。派生类内部可访问\n  protected name3: string = 'Animal3';\n  // 只读修饰符\n  // 只读属性必须在声明时或构造函数里被初始化\n  readonly name4: string = \"Animal4\";\n  // 可使用 ? 符号，相当于 string | undefined\n  name5?: string;\n\n  constructor(theName: string) { this.name = theName; this.name2 = theName; }\n  move(distanceInMeters: number = 0) {\n    console.log(`Animal moved ${distanceInMeters}m.`);\n  }\n}\n\n// 继承\nclass Dog extends Animal {\n  bark() {\n    console.log('Woof! Woof!');\n  }\n}\n\nconst dog = new Dog('旺财');\ndog.bark();\ndog.move(10);\ndog.bark();\r\n"},{"name":"typescript","outline":"[\"入门\",\"class\",\"typeof + class\"]","content":"typeof Greeter，取Greeter类的类型，而不是实例的类型\r\nclass Greeter {\n  greeting: string;\n  constructor () {\n    this.greeting = ''\n  }\n  greet() {\n  }\n}\n\nlet greeterMaker: typeof Greeter = Greeter;\r\n"},{"name":"typescript","outline":"[\"入门\",\"class\",\"静态成员\"]","content":"用其他变量修改静态成员，修改的是否是同一个\r\nclass Greeter {\n  static standardGreeting = \"Hello, there\";\n  greeting: string;\n  constructor () {\n    this.greeting = ''\n  }\n  greet() {\n      if (this.greeting) {\n          return \"Hello, \" + this.greeting;\n      }\n      else {\n          return Greeter.standardGreeting;\n      }\n  }\n}\n\nlet greeter1: Greeter;\ngreeter1 = new Greeter();\nconsole.log(greeter1.greet());\n\n// 将类赋给另一个变量，并进行修改\nlet greeterMaker: typeof Greeter = Greeter;\ngreeterMaker.standardGreeting = \"Hey there!\";\nlet greeter2: Greeter = new greeterMaker();\nconsole.log(greeter2.greet()); // \"Hey there!\"\nconsole.log(greeter1.greet()); // \"Hey there!\"\n// 结论：同一个\r\n"},{"name":"typescript","outline":"[\"入门\",\"class\",\"private protected 区别\"]","content":"class Person {\n  protected protectedName: string;\n  private privateName: string = 'man';\n  constructor(name: string) { this.protectedName = name; }\n}\n\nclass Employee extends Person {\n  private department: string;\n\n  constructor(name: string, department: string) {\n    super(name)\n    this.department = department;\n  }\n\n  public getElevatorPitch() {\n    console.log(this.privateName) // 错误 private 不能在派生类中访问\n    return `Hello, my name is ${this.protectedName} and I work in ${this.department}.`;\n  }\n}\n\nlet howard = new Employee(\"Howard\", \"Sales\");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.protectedName); // 错误 protected 可在派生类中访问，但不能在外部访问\r\n"},{"name":"typescript","outline":"[\"入门\",\"class\",\"存取器\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"推断类型\"]","content":"按上下文归类\r\n// myAdd has the full function type\nlet myAdd = function(x: number, y: number): number { return x + y; };\n\n// The parameters `x` and `y` have the type number\nlet myAdd: (baseValue: number, increment: number) => number =\n    function(x, y) { return x + y; };\r\n"},{"name":"typescript","outline":"[\"入门\",\"函数：也需要当做类型\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"函数：也需要当做类型\",\"快速使用\"]","content":"/** 直接使用 */\nfunction buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + \" \" + restOfName.join(\" \");\n}\nlet employeeName = buildName(\"Joseph\", \"Samuel\", \"Lucas\", \"MacKinzie\");\n\n/** 定义函数类型 */\nlet myAdd: (x: number, y: number) => number // 定义\nmyAdd = function(x: number, y: number): number { return x + y; }; // 赋值\n\n/** 可选参数 */\nfunction buildName(firstName: string, lastName?: string) {\n    if (lastName) return firstName + \" \" + lastName;\n    else return firstName;\n}\nlet result1 = buildName(\"Bob\");  // works correctly now\r\n"},{"name":"typescript","outline":"[\"入门\",\"函数：也需要当做类型\",\"this 参数 - this parameters\"]","content":"提供显示指定 this 类型\r\n"},{"name":"typescript","outline":"[\"入门\",\"泛型\"]","content":"实现接口函数的类型变动\r\n\n/** 用于函数 */\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n/** 用于类 */\nclass GenericNumber<T> {\n  zeroValue: T;\n  add (x: T, y: T): {x: T, y: T} { return {x, y}};\n  constructor (v: T) {\n    this.zeroValue = v\n  }\n}\nlet myGenericNumber = new GenericNumber<number>(0);\n\n/** 数组泛型 */\n// 写法1\nfunction loggingIdentity<T>(arg: T[]): T[] {\n    console.log(arg.length);  // Array has a .length, so no more error\n    return arg;\n}\n// 写法2\nfunction loggingIdentity<T>(arg: Array<T>): Array<T> {\n    console.log(arg.length);  // Array has a .length, so no more error\n    return arg;\n}\n\n/** 泛型约束: 确保拥有某属性 */\n// 例子确保有用 length\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);  // Now we know it has a .length property, so no more error\n    return arg;\n}\n\n/** 泛型约束: 确保 K 是 T 的键 */\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key];\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 };\n\ngetProperty(x, \"a\"); // okay\ngetProperty(x, \"m\"); // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.\n\n/** 使用类类型 */\n// 方式1\nfunction create<T>(c: {new(): T; }): T {\n  return new c();\n}\n// 方式2\nfunction create<T>(c: new() => T ): T {\n  return new c();\n}\r\n"},{"name":"typescript","outline":"[\"入门\",\"装饰器\"]","content":"初步了解\r\n**类的装饰器** 可修改类\r\n**方法装饰器** 可直接操作属性描述符，当然也可以修改类\r\n属性描述符的更多信息：\r\n[JavaScript 数据类型和数据结构 - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures)\r\n[Object.defineProperty() - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\r\n"},{"name":"typescript","outline":"[\"入门\",\"基础类型\"]","content":"/*** 数组，两种方式 */\nlet list: number[] = [1, 2, 3]; // 声明一个值是 number 类型的数组\nlet list: Array<number> = [1, 2, 3];\nlet list: string[] = ['bar', 'foo'];// 声明一个值是 string 类型的数组\n\n/*** Declare a tuple type */\n// 多种类型，顺序也必须匹配\nlet x: [string, number];\n// Initialize it\nx = ['hello', 10]; // OK\n// Initialize it incorrectly\nx = [10, 'hello']; // Error\r\n"},{"name":"typescript","outline":"[\"入门\",\"符号解释\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"符号解释\",\"! 符号 类型断言\"]","content":"从类型里去除了 null和 undefined\r\nfunction fixed(name: string | null): string {\n  function postfix(epithet: string) {\n    return name!.charAt(0) + '.  the ' + epithet; // ok\n  }\n  name = name || \"Bob\";\n  return postfix(\"great\");\n}\r\n"},{"name":"typescript","outline":"[\"入门\",\"符号解释\",\"<> 尖括号\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"符号解释\",\"<> 尖括号\",\"1. 类型断言\"]","content":"也就是类型转换，你能确定是什么类型的情况\r\n// 示例1\nlet strLength: number = (<string>someValue).length;\n\n// 示例2 还能转换函数\nenum EventType { Mouse, Keyboard }\ninterface Event { timestamp: number; }\ninterface MouseEvent extends Event { x: number; y: number }\nlistenEvent(EventType.Mouse, <(e: Event) => void>((e: MouseEvent) => console.log(e.x + ',' + e.y)));\r\n"},{"name":"typescript","outline":"[\"入门\",\"符号解释\",\"<> 尖括号\",\"2. 泛型\"]","content":"实现类型统一\r\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\nlet output = identity<string>(\"myString\"); \nlet output = identity(\"myString\");  // type of output will be 'string'\r\n"},{"name":"typescript","outline":"[\"入门\",\"符号解释\",\"单个 & 符号\"]","content":"高级类型 -> 交叉类型: 同时拥有多种类型成员\r\n// 同时有用 string number 类型的属性方法\n// 断言语法使用\nlet result = <string & number>{}; \nconsole.log(result.toString())\n\n// 声明语法使用\nlet re: string & number\nre = <string & number>10\nconsole.log(re)\r\n"},{"name":"typescript","outline":"[\"入门\",\"符号解释\",\"单个 | 符号\"]","content":"高级类型 -> 联合类型：几种类型之一\r\n/**\n * Takes a string and adds \"padding\" to the left.\n * If 'padding' is a string, then 'padding' is appended to the left side.\n * If 'padding' is a number, then that number of spaces is added to the left side.\n */\nfunction padLeft(value: string, padding: string | number) {\n    // ...\n}\nlet indentedString = padLeft(\"Hello world\", true); // errors during compilation\r\n"},{"name":"typescript","outline":"[\"入门\",\"高级类型\"]","content":""},{"name":"typescript","outline":"[\"入门\",\"高级类型\",\"自定义类型保护，解决多次断言问题\"]","content":"interface Fish {\n  swim();\n  layEggs();\n}\ninterface Bird {\n  fly();\n  layEggs();\n}\n\n// 定义一个类型保护，这样就不用多次使用断言了\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (<Fish>pet).swim !== undefined;\n}\n\nfunction getSmallPet(): Fish | Bird {\n  // ...\n}\nlet pet = getSmallPet();\n\nif (isFish(pet)) {\n  pet.swim();\n}\nelse {\n  pet.fly();\n}\n\r\n"},{"name":"typescript","outline":"[\"入门\",\"高级类型\",\"typeof 类型保护，无需为原始类型定义类型保护\"]","content":"这些* typeof类型保护*只有两种形式能被识别： `typeof v === \"typename\"`和 `typeof v !== \"typename\"`，  \n\"typename\"必须是 \"number\"， \"string\"， \"boolean\"或 \"symbol\"。  \n但是TypeScript并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。\r\nfunction padLeft(value: string, padding: string | number) {\n    if (typeof padding === \"number\") {\n        return Array(padding + 1).join(\" \") + value;\n    }\n    if (typeof padding === \"string\") {\n        return padding + value;\n    }\n    throw new Error(`Expected string or number, got '${padding}'.`);\n}\r\n"},{"name":"typescript","outline":"[\"入门\",\"高级类型\",\"instanceof 类型保护，无需为某类实例定义类型保护\"]","content":"interface Padder {\n    getPaddingString(): string\n}\n\nclass SpaceRepeatingPadder implements Padder {\n    constructor(private numSpaces: number) { }\n    getPaddingString() {\n        return Array(this.numSpaces + 1).join(\" \");\n    }\n}\n\nclass StringPadder implements Padder {\n    constructor(private value: string) { }\n    getPaddingString() {\n        return this.value;\n    }\n}\n\nfunction getRandomPadder() {\n    return Math.random() < 0.5 ?\n        new SpaceRepeatingPadder(4) :\n        new StringPadder(\"  \");\n}\n\n// 类型为SpaceRepeatingPadder | StringPadder\nlet padder: Padder = getRandomPadder();\n\nif (padder instanceof SpaceRepeatingPadder) {\n    padder; // 类型细化为'SpaceRepeatingPadder'\n}\nif (padder instanceof StringPadder) {\n    padder; // 类型细化为'StringPadder'\n}\r\n"},{"name":"typescript","outline":"[\"入门\",\"高级类型\",\"类型别名\"]","content":"可以给类型自定义名字，甚至是联合类型\r\ntype Name = string;\ntype NameResolver = () => string;\ntype NameOrResolver = Name | NameResolver;\nfunction getName(n: NameOrResolver): Name {\n    if (typeof n === 'string') {\n        return n;\n    }\n    else {\n        return n();\n    }\n}\r\n"},{"name":"typescript","outline":"[\"入门\",\"高级类型\",\"字符串字面量类型\"]","content":"用字符串作为类型，结合联合类型，实现给此类型的值限定一组字符串\r\ntype Easing = \"ease-in\" | \"ease-out\" | \"ease-in-out\";\nclass UIElement {\n    animate(dx: number, dy: number, easing: Easing) {\n        if (easing === \"ease-in\") {\n            // ...\n        }\n        else if (easing === \"ease-out\") {\n        }\n        else if (easing === \"ease-in-out\") {\n        }\n        else {\n            // error! should not pass null or undefined.\n        }\n    }\n}\nlet button = new UIElement();\nbutton.animate(0, 0, \"ease-in\");\nbutton.animate(0, 0, \"uneasy\"); // error: \"uneasy\" is not allowed here\r\n还能用作函数，限定函数传值\r\nfunction createElement(tagName: \"img\"): HTMLImageElement;\nfunction createElement(tagName: \"input\"): HTMLInputElement;\n// ... more overloads ...\nfunction createElement(tagName: string): Element {\n  return document.createElement(tagName)\n}\ncreateElement(\"img\") // ok\ncreateElement(\"div\") // error. 只能 img 和 input\r\n"},{"name":"typescript","outline":"[\"入门\",\"高级类型\",\"数字字面量类型\"]","content":"还可用数字作为类型，用法跟字符串类型类似\r\nfunction rollDie(): 1 | 2 | 3 | 4 | 5 | 6 {\n    // ...\n}\r\n"},{"name":"typescript","outline":"[\"环境\"]","content":""},{"name":"typescript","outline":"[\"环境\",\"简单环境 &webpack\"]","content":"cnpm i -D webpack webpack-cli webpack-dev-server ts-loader typescript\r\n"},{"name":"typescript","outline":"[\"环境\",\"简单环境 &webpack\",\"tsconfig.json\"]","content":"{\n  \"compilerOptions\": {\n    // 与 Vue 的浏览器支持保持一致\n    \"target\": \"es5\",\n    // 这可以对 `this` 上的数据属性进行更严格的推断\n    \"strict\": true,\n    \"sourceMap\": true,\n    // 如果使用 webpack 2+ 或 rollup，可以利用 tree-shake:\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\"\n  },\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n\r\n"},{"name":"typescript","outline":"[\"环境\",\"简单环境 &webpack\",\"webpack.config.js\"]","content":"module.exports = {\n  mode: \"development\",\n  devtool: \"inline-source-map\",\n  entry: \"./src/app.ts\",\n  output: {\n    filename: \"bundle.js\"\n  },\n  resolve: {\n    // Add `.ts` and `.tsx` as a resolvable extension.\n    extensions: [\".ts\", \".tsx\", \".js\"]\n  },\n  module: {\n    rules: [\n      // all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`\n      { test: /\\.tsx?$/, loader: \"ts-loader\" }\n    ]\n  }\n};\r\n"},{"name":"vue","outline":"[\"实例挂载\"]","content":""},{"name":"vue","outline":"[\"实例挂载\",\"$mount 多次调用不会更改挂载元素，也不会发生重新挂载\"]","content":""},{"name":"vue","outline":"[\"实例挂载\",\"实例未挂载，其子组件不会初始\"]","content":"main.js\r\nimport Vue from 'vue'\nimport App from './app.vue'\n\nnew Vue({\n  // el: '#app', // 不挂在元素\n  created () {\n    console.log('created') // 触发\n  },\n  mounted () {\n    console.log('mounted') // 不触发\n  },\n  router,\n  template: '<app/>',\n  components: {\n    App\n  }\n})\n\r\nApp.vue\r\n<template>\n  <div>App</div>\n</template>\n\n<script>\nexport default {\n  beforeCreate () {\n    console.log('app beforeCreate') // 不触发\n  },\n  created () {\n    console.log('app created') // 不触发\n  },\n  mounted () {\n    console.log('app mounted') // 不触发\n  }\n}\n</script>\n\r\n"},{"name":"vue","outline":"[\"计算属性可进行设置操作\"]","content":"计算属性返回的如果是对象引用，那么，可通过次计算属性设置其成员值\r\n"},{"name":"vue","outline":"[\"keep-alive 缓存\"]","content":"`<router-view></router-view>` 也是支持的\r\n父组件的销毁同样会销毁 keep-alive 的子组件\r\n"},{"name":"vue","outline":"[\"css scoped 后代选择器注意\"]","content":"scoped 不会影响到子组件。  \n所以，如果子组件css写在父组件css中，父组件使用scoped，css就会无效\r\n这种转换结果看上去总觉得不够好\r\n<style scoped>\n.example span{\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">\n    <span>hi</span>\n  </div>\n</template>\n\r\n转换结果：\r\n<style>\n.example span[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div data-v-4c878eb4=\"\" class=\"example\"><span data-v-4c878eb4=\"\">hi</span></div>\n</template>\r\n"},{"name":"vue","outline":"[\"JSX\"]","content":"[使用文档](https://github.com/vuejs/babel-plugin-transform-vue-jsx#usage)\r\n"},{"name":"vue","outline":"[\"JSX\",\"循环\"]","content":"var MyComponent = Vue.extend({\n  data () {\n    return {\n      list: ['1', '2']\n    }\n  },\n  methods: {\n    testfn () {\n      console.log(this)\n    }\n  },\n  render () {\n    let ls = [<li>{this.name}</li>]\n    this.list.forEach(v => {\n      ls.push(<li>{v}</li>)\n    })\n    return (\n      <div class=\"top-list-select\">\n        <ul class=\"l-mu\">\n          {ls}\n        </ul>\n\n      </div>\n    )\n  }\n})\n\r\n"},{"name":"vue","outline":"[\"JSX\",\"class 标签属性操作\"]","content":"<dl class=\"m-group\">2</dl>\r\nlet isFold = 1\nreturn <dl class={['m-group', {fold: isFold}]}>2</dl>\r\n"},{"name":"vue","outline":"[\"JSX\",\"依然支持指令\"]","content":"包括集成指令、自定义指令\r\n<div class=\"select-box-p\" v-show={this.isMultiple}></div>\r\n"},{"name":"vue","outline":"[\"JSX\",\"slot\"]","content":"export default {\n  render () {\n    return (\n      <div>{this.$slots.default}</div>\n    )\n  }\n}\r\n"},{"name":"vue","outline":"[\"vue 单文件 + webpack\"]","content":""},{"name":"vue","outline":"[\"vue 单文件 + webpack\",\"相关包\"]","content":"vue vue-loader vue-template-compiler\r\n有时候会漏掉 `vue-template-compiler` 。。。\r\n"},{"name":"vue","outline":"[\"vue 单文件 + webpack\",\"css 导入先后：js 与 style 方式\"]","content":"js：import 方式\r\nstyle：style 嵌入方式\r\n单文件中同时使用这两种方式，无论style 位置，**js 将先导入，然后才是 style**，符合预想\r\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <h2>Essential Links</h2>\n  </div>\n</template>\n\n<script>\nimport '../assets/comm.css'\nexport default {\n  name: 'hello',\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    }\n  }\n}\n</script>\n\n<style scoped>\nh1, h2 {\n  font-weight: normal;\n}\n</style>\r\n"},{"name":"vue","outline":"[\"vue 单文件 + webpack\",\"js(import) css 是否归 vue-loader 管 / 异步单文件 js(import) css提取\"]","content":"js(import) 方式不归 vue-loader 管。vue-loader 只管 style。\r\n而且，**外界的css提取依然可以影响**\r\n但，**异步**情况特殊，外css提取，vue-loadert提取都无法生效。\r\n也就是说，异步包无法提取css？？不，可以提取，但只能提取 js(import) 方式，通过 `CommonsChunkPlugin` 开启 `children:true`。\n将多处异步包中调用模块提取到父 chunk 中，然后css提取便生效\r\n也就是说，异步包的 style 方式固定无法提取\r\n"},{"name":"vue","outline":"[\"vue 单文件 + webpack\",\"js(import)导入 css，实现不重复\"]","content":"**懒加载单文件模块，单文件中 js 方式导入 css，多处导入实现不重复方式：**\r\n入口js 文件导入一次后，多处**异步**单文件中的相同导入不会重复生成\r\n通过 `CommonsChunkPlugin`，开启 `children:true`\r\n"},{"name":"vue","outline":"[\"vue 单文件 + webpack\",\"某种情况下说，vue-loader 的提取没有意义\"]","content":""},{"name":"vue","outline":"[\"vue 单文件 + webpack\",\"vue-loader webpack 配置\"]","content":"{\n    test: /\\.vue$/,\n    loader: 'vue-loader',\n    options: {\n        loaders: {\n            js: {\n                loader: 'babel-loader',\n                include: [\n                    path.resolve(__dirname, \"src\")\n                ],\n            },\n            // 带提取\n            css: ExtractTextPlugin.extract({\n                fallback: 'style-loader',\n                use: [{\n                    loader: 'css-loader',\n                    options: {\n                        importLoaders: 1,\n                        sourceMap: true,\n\n                    }\n                }, {\n                    loader: 'postcss-loader',\n                    options: {\n                        sourceMap: 'inline'\n                    }\n                }]\n            }),\n            // 不提取\n            // css: {\n            //     use: [{\n            //         loader: 'style-loader'\n            //     }, {\n            //         loader: 'css-loader', options: {\n            //             importLoaders: 1,\n            //             sourceMap: true\n            //         }\n            //     }, {\n            //         loader: 'postcss-loader',\n            //         options: {\n            //             sourceMap: 'inline',\n            //             // parser\n            //         }\n            //     }]\n            // }\n\n            scss: ExtractTextPlugin.extract({\n                fallback: 'style-loader',\n                use: [{\n                    loader: 'css-loader',\n                    options: {\n                        importLoaders: 1,\n                        sourceMap: true,\n\n                    }\n                }, {\n                    loader: 'sass-loader',\n                    options: {\n                        sourceMap: true,\n                        includePaths: ['E:/_work/mobile_webview/smallpitch.webview/src/modules/base-libs/css']\n                    }\n                }]\n            }),\n\n        }\n    }\n}\r\n"},{"name":"vue","outline":"[\"vue 单文件 + webpack\",\"vue-loader webpack 配置 css loader 写法2\"]","content":"上面不提取写法似乎有问题。待详细测试\r\n{\n  test: /\\.vue$/,\n  loader: 'vue-loader',\n  options: {\n    loaders: {\n      js: {\n        loader: 'babel-loader',\n        include: [\n          resolve(\"src\")\n        ],\n      },\n      postcss: 'vue-style-loader!css-loader?sourceMap=true!postcss-loader?sourceMap=true',\n      scss: 'vue-style-loader!css-loader?sourceMap=true!sass-loader?sourceMap=true'\n    }\n  }\n}\r\n"},{"name":"vue","outline":"[\"事件\"]","content":""},{"name":"vue","outline":"[\"事件\",\"模板中 event 获取\"]","content":"$event\r\n<input type=\"number\" :value=\"book.number\" @input=\"updateNumber($event.target,book)\">\r\n"},{"name":"vue","outline":"[\"单文件组件\"]","content":""},{"name":"vue","outline":"[\"单文件组件\",\"关于 export default 是否与 es6 常规相符\"]","content":"组件中 `export default` 与es6常规相符合，即模块只会被创建执行一次，并且在一个函数域中。  \n组件多个调用情况，下例中的data变量将被共享\r\n而且 template 最终应该是被解析成组件 render 函数选项\r\n<template>\n<div>{{num}}</div>\n</template>\n\n<script>\n  let data = {\n    num: 1\n  }\n  export default {\n    name: 'comp',\n    data () {\n      return data\n    },\n    created () {\n      data.num++\n    }\n  }\n</script>\n\r\n"},{"name":"vue","outline":"[\"各种问题\"]","content":""},{"name":"vue","outline":"[\"各种问题\",\"vue-loader 问题\"]","content":""},{"name":"vue","outline":"[\"各种问题\",\"vue-loader 问题\",\"使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件\"]","content":""},{"name":"vue","outline":"[\"各种问题\",\"vue 单文件问题\"]","content":""},{"name":"vue","outline":"[\"各种问题\",\"vue 单文件问题\",\"style 部分无法热更新\"]","content":"使用 vue.esm.js 即可\r\n"},{"name":"vue","outline":"[\"各种问题\",\"vue 单文件问题\",\"js import 方式导入的 css 无效。异步单文件情况\"]","content":"强调，跟提取无关，包括外提取、vue-loader 提取，跟异步有关。  \n首先异步包 css 无法被提取。不管是 vue-loader 还是外 css loader 提取，提取都无效。  \n而且单文件 js(import) 归外 css loader 管，如果没有设置 style-loader，将不会被增加。\r\n注：style 方式正常\r\n解决，增加`fallback: 'style-loader'`。\r\n总之，`fallback: 'style-loader'`可用来处理异步包中的 js(import) 导入的css\r\nrules: [{\n  test: /\\.css$/,\n  use: ExtractTextPlugin.extract({\n    fallback: 'style-loader',\n    use: ['css-loader','postcss-loader']\n  }),\n}]\r\n"},{"name":"vue","outline":"[\"各种问题\",\"runtime-only 报错\"]","content":"错误信息：`[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.`\r\n不使用 template 选项。或者使用 `vue.esm.js`\r\nimport App from './App.vue'\n\n// 正确方式：没有 template\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')\n\n// 错误方式\nnew Vue({\n  template: '<App/>',\n  components: {\n    App\n  }\n}).$mount('#app')\n\r\n"},{"name":"vue","outline":"[\"实例中 Vue 构造器获取\"]","content":"`this.$root.constructor`\r\n单文件组件有时可能需要使用 Vue 构造器对象，来使用部分全局 API。\r\nexport default {\n  mounted () {\n    // 正确方式\n    console.log(this.$root.constructor)\n    // 错误方式，获取的是 VueComponent 组件构造器\n    console.log(this.constructor)\n\n  }\n}\r\n"},{"name":"vue","outline":"[\"插件编写\"]","content":"简单3步。详情看[官方文档](https://cn.vuejs.org/v2/guide/plugins.html)。下例为添加内部的实例方法\r\n1 编写\r\n// ./modules/msg-mobile/simple-msg-vue.js\n\nimport simpleMsg from './simple-msg'\nexport default {\n  install (Vue) {\n    Vue.prototype.$simpleMsg = function (msg) {\n      simpleMsg(msg)\n    }\n  }\n}\n\r\n2 注册\r\n// main.js\nimport simpleMsg from './modules/msg-mobile/simple-msg-vue'\nVue.use(simpleMsg)\r\n3 插件使用\r\nexport default {\n  mounted () {\n    this.$simpleMsg('mounted 执行')\n  }\n}\r\n"},{"name":"vue","outline":"[\"数据响应\"]","content":""},{"name":"vue","outline":"[\"数据响应\",\"组件之间响应传值\"]","content":""},{"name":"vue","outline":"[\"数据响应\",\"组件之间响应传值\",\"可借助引用类型特性\"]","content":"比如传一个响应数据对象到某子组件。\n当然，子组件中直接的覆盖操作是不允许的。\n但对响应对象的成员修改是能触发所有相关组件的响应更新的\r\n"},{"name":"vue","outline":"[\"数据响应\",\"展示页，编辑组件。技巧\"]","content":"一个页面，实现展示+编辑\r\n虽然数据一样，但不能同时共享一份。因为当用于选择取消编辑便回不去了，后果很严重\r\n展示页 可弄两份数据，一份源数据，再copy一份。将copy数据传入编辑页，再利用引用类型特性，编辑页对copy数据修改会同步到展示页。\r\nvm.$set(vm.d, 'list', list)\r\n"},{"name":"vue","outline":"[\"数据响应\",\"object 增删改\"]","content":""},{"name":"vue","outline":"[\"数据响应\",\"object 增删改\",\"增\"]","content":"**1 根成员增加**\r\n根成员只能在 data 中以声明方式增加\r\nnew Vue({\n    data: {\n        msg: 'hello'\n    }\n})\r\n**2 后代成员增加**\r\nvm.$set(vm.d, 'list', list)\r\n"},{"name":"vue","outline":"[\"数据响应\",\"object 增删改\",\"删\"]","content":"**1 根成员是否可以删除？还没试**\r\n**2 后代成员删除**\r\nvm.$delete(target, key)\r\n**注意：使用自带 delete：此方式无法触发更新**\r\n"},{"name":"vue","outline":"[\"数据响应\",\"object 增删改\",\"改\"]","content":"**成员修改**\n一般赋值操作即可\r\n**自身替换**\n直接赋值替换即可，后代成员都可享受响应更新\r\n"},{"name":"vue","outline":"[\"数据响应\",\"array 增删改\"]","content":""},{"name":"vue","outline":"[\"数据响应\",\"array 增删改\",\"增\"]","content":"可通过 object 的方式，也支持 Array 原生方法\r\n"},{"name":"vue","outline":"[\"数据响应\",\"array 增删改\",\"删\"]","content":"待实践\r\n"},{"name":"vue","outline":"[\"数据响应\",\"array 增删改\",\"改\"]","content":"一般方式即可\r\n"},{"name":"vue","outline":"[\"数据响应\",\"array 增删改\",\"数组替换、数组清空\"]","content":"vm.arr = newArr // 直接替换\n\nvm.arr = [] // 清空\r\n"},{"name":"vue","outline":"[\"数据响应\",\"数据响应举例。watch 监听问题\"]","content":""},{"name":"vue","outline":"[\"数据响应\",\"数据响应举例。watch 监听问题\",\"会触发更新，并且重新绑定情况\"]","content":"给已绑定字段重新赋值，会触发重新绑定，字段子成员都会重新绑定\r\n测试例子\r\nexport default {\n  data () {\n    // 这里声明的所有属性都将绑定\n    return {\n      a: {\n        b: {\n          c: 123\n        }\n      }\n    }\n  },\n  created () {\n\n  },\n  methods: {\n    test () {\n      // 触发更新，子成员全部重新绑定\n      // 同时触发下面的 watch 更改\n      this.a = {\n        d: {\n          e: 123\n        }\n      }\n    }\n  },\n  components: {\n  },\n  watch: {\n    'a.b' (v) {\n      console.log('更改 a.b', v) // '更改 a.b', undefined\n    }\n  }\n}\r\n"},{"name":"vue","outline":"[\"数据响应\",\"数据响应举例。watch 监听问题\",\"不会触发更新情况\"]","content":"export default {\n  data () {\n    return {\n      a: {\n        b: {\n          c: 123\n        }\n      }\n    }\n  },\n  created () {\n\n  },\n  methods: {\n    test () {\n      // 新增成员不会触发更新。\n      this.a.d = 123\n      // 需借助 this.$set()\n      this.$set(thia.a, 'd', 123) // 绑定，并触发更新\n    }\n  },\n  components: {\n  }\n}\r\n"},{"name":"vue","outline":"[\"标签属性\"]","content":""},{"name":"vue","outline":"[\"标签属性\",\"不带值的标签属性可解析为 true\"]","content":"foo.vue\r\n<template>\n  <bar-component group></bar-component>\n</template>\r\nbar-component.vue\r\n<template>\n  <div>bar</div>\n</template>\n<script>\nexport default {\n  props: {\n    group: {\n      type: Boolean\n    }\n  },\n  created () {\n    console.log(this.group) // true\n  }\n}\n<script>\r\n"},{"name":"vue","outline":"[\"模板中的函数与过滤器\"]","content":"不相关的值变动也会触发。尽量少在模版中写函数？或者过滤器？\r\n**例子：**\r\n<div v-html=\"handle(latex)\"></div>\n<div>{{msg}}</div>\r\n只改变 msg，也会重新触发 handle，即使使用过滤器也一样\r\n"},{"name":"vue","outline":"[\"注意事项\"]","content":""},{"name":"vue","outline":"[\"注意事项\",\"在组件编写时就应该考虑组件被复用情况的更新\"]","content":"很多情况，可能会将逻辑处理写在生命周期中，组件被复用可能无法更新，此时不要去尝试手动重新加载当前组件(试图重走一遍生命周期)。\r\n"},{"name":"vue","outline":"[\"状态共享的其他方式\"]","content":"也就是非 vuex 的方式\r\n"},{"name":"vue","outline":"[\"状态共享的其他方式\",\"使用根实例 $root。子组件内依然可享受数据绑定更新\"]","content":""},{"name":"vue","outline":"[\"状态共享的其他方式\",\"局部使用 Vue 实例，实现局部共享\"]","content":"hello-state.js\r\nimport Vue from 'vue'\n\nexport default {\n  data: null,\n  create () {\n    this.data = new Vue({\n      data: {\n        test: 1\n      }\n    })\n  },\n  destroy () {\n    this.data.destroy()\n    this.data = null\n  }\n}\r\ndemo.vue\r\n<template>\n  <div>\n    <div class=\"test\">hello word, {{ data }}</div>\n    <button @click=\"onChangeOtherState\">改变额外的状态</button>\n  </div>\n</template>\n\n<script>\nimport helloState from './hello-state.js'\nexport default {\n  computed: {\n    data () {\n      return helloState.data.test\n    }\n  },\n  beforeCreate () {\n    helloState.create()\n  },\n  destroyed () {\n    helloState.destroy()\n  },\n  methods: {\n    onChangeOtherState () {\n      helloState.data.test = helloState.data.test === 'bar' ? 'foo' : 'bar'\n    }\n  }\n}\n</script>\r\n"},{"name":"vue","outline":"[\"生命周期\"]","content":"[官方文档很详细](https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90)\r\n"},{"name":"vue","outline":"[\"生命周期\",\"beforeCreate\"]","content":"在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\r\n此时 data 属性还没绑定监听，也不能操作\r\n"},{"name":"vue","outline":"[\"生命周期\",\"created 此时可以操作属性\"]","content":"组件实例创建完成，属性已绑定，属性的操作会触发更新，所以此时可以操作属性了。\r\n但不能操作DOM元素，DOM还未生成，$el属性还不存在\r\n"},{"name":"vue","outline":"[\"生命周期\",\"beforeMount\"]","content":"在挂载开始之前被调用：相关的 render 函数首次被调用。\r\n"},{"name":"vue","outline":"[\"生命周期\",\"mounted 此时可以操作元素，$el已存在\"]","content":"如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。\r\n注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted：\r\nmounted: function () {\n  this.$nextTick(function () {\n    // Code that will run only after the\n    // entire view has been rendered\n  })\n}\r\n"},{"name":"vue","outline":"[\"生命周期\",\"beforeUpdate\"]","content":"组件更新之前\r\n"},{"name":"vue","outline":"[\"生命周期\",\"updated\"]","content":"组件更新之后\r\n"},{"name":"vue","outline":"[\"生命周期\",\"activated\"]","content":"keep-alive, 组件被激活前\r\n"},{"name":"vue","outline":"[\"生命周期\",\"deactivated\"]","content":"keep-alive, 组件被激活后\r\n"},{"name":"vue","outline":"[\"生命周期\",\"beforeDestroy\"]","content":"实例被销毁前\r\n"},{"name":"vue","outline":"[\"生命周期\",\"destroyed\"]","content":"实例被销毁后\r\n"},{"name":"vue-router","outline":"[\"简单示例\"]","content":"import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n// 很久没用 router 写代码是，总是忘记这一步。。。\nVue.use(VueRouter)\n\nconst Foo = { template: '<div>foo</div>' }\nconst Bar = { template: '<div>bar</div>' }\n\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  // 根实例用可实现替换绑定的元素\n  template: `<div>\n    <h1>Hello App!</h1>\n    <p>\n      <!-- 使用 router-link 组件来导航. -->\n      <!-- 通过传入 \\`to\\` 属性指定链接. -->\n      <!-- <router-link> 默认会被渲染成一个 \\`<a>\\` 标签 -->\n      <router-link to=\"/foo\">Go to Foo</router-link>\n      <router-link to=\"/bar\">Go to Bar</router-link>\n    </p>\n    <!-- 路由出口 -->\n    <!-- 路由匹配到的组件将渲染在这里 -->\n    <router-view></router-view>\n  </div></div>\n`\n})\r\n"},{"name":"vue-router","outline":"[\"微信浏览器浏览历史支持带井号链接\"]","content":"左上角的返回箭头也支持浏览井号历史\r\n所以能很好支持 vue-router\r\n"},{"name":"vue-router","outline":"[\"导航守卫\"]","content":""},{"name":"vue-router","outline":"[\"导航守卫\",\"跳转权限控制 - 实现未登录\"]","content":"\nwindow.GLOBAL_PARAMS = {\n  isLogged: 1\n}\n\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== 'Login' && !window.GLOBAL_PARAMS.isLogged) {\n    next({name: 'Login'}) // 实现中断，不会在触发后面的钩子，重新从 beforeEach 开始\n  } else {\n    preloaderFull.show({time: 200})\n    document.title = to.meta.title\n    next()\n  }\n})\r\n"},{"name":"vue-router","outline":"[\"导航守卫\",\"beforeRouteUpdate 使用注意，状态更新\"]","content":"beforeRouteUpdate (to, from, next) {\n  next()\n  // 此时部分状态可能未更新，比如路由的 params 转 props\n  // ...\n\n  this.$nextTick(function () {\n    // 状态已更新：路由的 params 成功转成 props\n  })\n}\r\n"},{"name":"vue-router","outline":"[\"编程式导航\"]","content":""},{"name":"vue-router","outline":"[\"编程式导航\",\"介绍\"]","content":"通过 js 主动进行路由跳转。通过参数指定路由，url 会发生改变，并发生相关组件的切换\r\n"},{"name":"vue-router","outline":"[\"编程式导航\",\"使用\"]","content":"参数与路由定义有关\r\n**通过 path 选择路由**\r\nrouter.push({ path: 'home' })\n// 可简写为\nrouter.push('home')\r\n**通过 name 选择路由**\r\nrouter.push({ name: 'user'})\n\r\n**带参**\r\n// 动态路由形式带参。详见[动态路由]\nrouter.push({ name: 'user', params: { userId: 123 }})\n\n// 带查询参数，变成 /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\r\n"},{"name":"vue-router","outline":"[\"编程式导航\",\"问题解决\"]","content":""},{"name":"vue-router","outline":"[\"设置 title\"]","content":"vue router 设置 title\r\n// 路由全局钩子\nrouter.beforeEach((to, from, next) => {\n  document.title = to.meta.title\n  next()\n})\n\n\n// 路由定义\n{\n    path: '',\n    component: Home,\n    name: 'home',\n    meta: {title: 'Home'}\n}\r\n"},{"name":"vue-router","outline":"[\"路由传参\"]","content":""},{"name":"vue-router","outline":"[\"路由传参\",\"通过 params\"]","content":"<router-link :to=\"{name:'Agent', params: { phone: item.phone }}\">go</router-link>\r\n"},{"name":"vue-router","outline":"[\"路由传参\",\"接收获取\"]","content":"console.log(vm.$route.params.phone)\r\n"},{"name":"vue-router","outline":"[\"路由传参\",\"可表现在路由上，也就是所谓的动态路由\"]","content":"当然，也可不表现，或只表现指定参数。  \n另外，使用 `query` 传参必定会表现在路由上\r\n{\n  name: 'Agent',\n  path: '/publisher/agent/:phone',\n  meta: {title: '代理商'},\n  component: Agent\n}\r\n"},{"name":"vue-router","outline":"[\"路由对象，信息对象\"]","content":"可通过实例获取\r\n`vm.$router`  \r\n`vm.$route`\r\n"},{"name":"vue-router","outline":"[\"路由跳转后会销毁组件实例\"]","content":""},{"name":"vue-router","outline":"[\"问题\"]","content":""},{"name":"vue-router","outline":"[\"问题\",\"路由参数改变不发生跳转\"]","content":"当路由只有参数改变情况不发生跳转，包括直接修改地址栏。\r\n需借助实例的 beforeRouteUpdate 钩子\r\nexport default {\n  data () {\n    return { }\n  },\n  mounted () {\n    this.loadData()\n  },\n  switchBook (e) {\n    let {target} = e\n    if (target.classList.contains('next')) {\n      let {index, $router} = this\n      index++\n      $router.push('/user/booksinfo/index/' + index)\n    } else {\n      let {index, $router} = this\n      index--\n      $router.push('/user/booksinfo/index/' + index)\n    }\n  },\n  methods: {\n    loadData () {\n      let index = this.index = this.$route.params.index * 1\n      // 某 ajax 逻辑\n    }\n  },\n  beforeRouteUpdate (to, from, next) {\n    // 在当前路由改变，但是该组件被复用时调用\n    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n    // 可以访问组件实例 `this`\n    next()\n    this.loadData()\n  }\n}\r\n"},{"name":"vue-router","outline":"[\"问题\",\"vue-router 重定向操作注意\"]","content":"重定向操作尽量不在路由守卫中控制，会有bug，可能不会触发 `router.afterEach` 事件\r\n通过配置 routes 实现。\r\nexport default [\n  {\n    path: '/edit-lectures',\n    name: 'EditLectures',\n    meta: {title: '开课编辑', zIndex: 1},\n    component: CreateLectures,\n    redirect: to => {\n      // 没数据情况进行重定向\n      if (to.name === 'EditLectures') { // 编辑情况\n        if (to.params.id === undefined) {\n          return {name: 'LecturesManage'}\n        }\n      }\n    }\n  }\n]\n\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\"]","content":""},{"name":"vuex","outline":"[\"vuex 简单总结\",\"获取状态\"]","content":"组件中的计算属性，通过辅助函数 mapState mapGetters  更方便\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\",\"修改状态\"]","content":"首先通过 Mutation、Action 选项定义修改的事件函数，然后组件中调用执行，比如 `store.commit('increment')` 、`store.dispatch('increment')`\r\n可通过辅助函数 mapMutations、mapActions 快捷绑定成组件方法\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\",\"新加状态\"]","content":"后期添加可响应的状态，遵守 Vue 的响应规则\r\n依然在 Mutation、Action 中进行\r\n使用 Vue.set(obj, 'newProp', 123), 或者\r\n以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：\r\n  state.obj = { ...state.obj, newProp: 123 }\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\",\"State\"]","content":"相对于 data\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\",\"Getter\"]","content":"其实就是 State 的计算属性或者方法函数\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\",\"Mutation\"]","content":"相当于事件声明，同步修改 State。为什么必须同步，为了状态可跟踪\r\n组件中触发 `store.commit('increment')`\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\",\"Action\"]","content":"Mutation 扩展，实现异步\r\n组件中触发 `store.dispatch('increment')`\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\",\"Module\"]","content":"命名空间，模块嵌套\r\n"},{"name":"vuex","outline":"[\"vuex 简单总结\",\"都有对应的辅助函数\"]","content":"方便在组件中使用\r\n"},{"name":"web 相关","outline":"[\"url\"]","content":""},{"name":"web 相关","outline":"[\"url\",\"http: 可以省略\"]","content":"http://192.168.1.222:9999/1.jpg   \n省略后：  \n//192.168.1.222:9999/1.jpg\r\n"},{"name":"其他","outline":"[\"easy-mock 接口使用\"]","content":""},{"name":"其他","outline":"[\"easy-mock 接口使用\",\"webpack 代理 devServer.proxy 无法使用 easy-mock 问题解决\"]","content":"手动增加可访问的 cookie、host 请求头信息\r\ndevServer: {\n  contentBase: path.resolve(__dirname, 'dist'),\n  host: '192.168.1.222',\n  port: 3001,\n  inline: true,\n  hot: true,\n  hotOnly: false,\n  proxy: {\n    \"/Publisher\": {\n      target: \"http://www.easy-mock.com/mock/59c46dbfe0dc663341b4084a/example\",\n\n      onProxyRes: function(proxyRes, req, res){\n      },\n      onProxyReq: function(proxyReq, req, res){\n        proxyReq.setHeader('Cookie','Cookie:easy-mock_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI1OWM0NmRiZmUwZGM2NjMzNDFiNDA4NTIiLCJleHAiOjE1MDcyNTQ5NzUsImlkIjoiNTljNDZkYmZlMGRjNjYzMzQxYjQwODQ5IiwiaWF0IjoxNTA2MDQ1Mzc1fQ.45-Ow-W-lcq1oxIn-japLDd95lSAZMnnBuaCDhTZULA')\n        proxyReq.setHeader('Host','www.easy-mock.com')\n      }\n    }\n  }\n}\r\n"},{"name":"其他","outline":"[\"glob 路径匹配\"]","content":""},{"name":"其他","outline":"[\"glob 路径匹配\",\"glob 介绍\"]","content":"[英文](https://github.com/isaacs/node-glob)\r\n[中文](http://www.jianshu.com/p/ce7cf53274bb)\r\n"},{"name":"其他","outline":"[\"glob 路径匹配\",\"监听所有目录，所有文件\"]","content":"'./src/**'\r\n"},{"name":"其他","outline":"[\"gzip ，服务端可配置压缩\"]","content":"https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/\r\n浏览器会自动解压缩  \r\njs，css 一般被压缩。html 文件不压缩\r\n"},{"name":"其他","outline":"[\"浏览器 url 打开桌面应用 - win系统\"]","content":"注册表文件 - 教学易.reg\r\nWindows Registry Editor Version 5.00 \n[HKEY_CLASSES_ROOT\\eclassedu]\n@=\"\"\n\"URL Protocol\"=\"\"\n\n[HKEY_CLASSES_ROOT\\eclassedu\\DefaultIcon]\n@=\"\"\n\n[HKEY_CLASSES_ROOT\\eclassedu\\Shell]\n\n[HKEY_CLASSES_ROOT\\eclassedu\\Shell\\open]\n\n[HKEY_CLASSES_ROOT\\eclassedu\\Shell\\open\\command]\n@=\"\\\"D:\\\\Program Files (x86)\\\\教学易\\\\Eclassedu.exe\\\"\"\r\n"},{"name":"其他","outline":"[\"浏览器缓存\"]","content":"Js css文件即使更改，也将优先使用缓存。\r\n发现Html文件每次请求都没使用缓存\r\n"},{"name":"其他","outline":"[\"浏览器跨域解决\"]","content":""},{"name":"其他","outline":"[\"浏览器跨域解决\",\"jsonp\"]","content":"原理：通过 scrpt 标签执行js\r\n"},{"name":"其他","outline":"[\"浏览器跨域解决\",\"domain\"]","content":"仅限于同一主域名情况\r\n比如 \none.web.com、two.web.com，互相交互的页面设置为：`document.domain = 'web.com'。`\n便能跨域通讯，包括 ajax、iframe之间\r\n"},{"name":"其他","outline":"[\"浏览器跨域解决\",\"h5 ajax 跨域，白名单机制\"]","content":""},{"name":"其他","outline":"[\"浏览器跨域解决\",\"h5 ajax 跨域，白名单机制\",\"服务端设置例子\"]","content":"PHP\r\n<?php header(\"Access-Control-Allow-Origin:*\"); // 所有\n\n<?php header(\"Access-Control-Allow-Origin:https://www.google.com\"); // 单个\r\n"},{"name":"其他","outline":"[\"浏览器跨域解决\",\"h5 ajax 跨域，白名单机制\",\"多个域名需特殊处理\"]","content":"语法不支持多个，所以需特殊处理\r\napp.all('*', function(req, res, next) {\n    if( req.headers.origin == 'https://www.google.com' || req.headers.origin == 'https://www.baidu.com' ){\n        res.header(\"Access-Control-Allow-Origin\", req.headers.origin);\n        res.header('Access-Control-Allow-Methods', 'POST, GET');\n        res.header('Access-Control-Allow-Headers', 'X-Requested-With');\n        res.header('Access-Control-Allow-Headers', 'Content-Type');\n    }\n    next();\n});\n\r\n"},{"name":"其他","outline":"[\"浏览器跨域解决\",\"h5 ajax 跨域，白名单机制\",\".net\"]","content":"1、直接在iis中的HTTP响应标头中增加\r\n2、或者web.config中，见下\r\n<system.webServer>\n    <httpProtocol>\n        <customHeaders>\n            <add name=\"Access-Control-Allow-Origin\" value=\"*\" />\n        </customHeaders>\n    </httpProtocol>\n</system.webServer>\r\n3 、\r\nHttpContext.Current.Response.AddHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n"},{"name":"其他","outline":"[\"浏览器跨域解决\",\"postMessage\"]","content":"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\r\nie8+ 支持  \nie67 使用Flash LocalConnection  \nie8、ie9 需使用 XDomainRequest 创建ajax对象才能使用 postMessage\r\n"},{"name":"其他","outline":"[\"移动端兼容问题解决\"]","content":""},{"name":"其他","outline":"[\"移动端兼容问题解决\",\"ios 移动端 click 300ms 延迟解决\"]","content":"文本框点击获焦也会出现延迟\r\n**解决：**\r\nhead 中添加如下代码即可\r\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\"/>\r\n强调，必须带有`width=device-width`  \n此方式也会禁止双击放大。是双击，非双指\r\n当前测试系统为ios10，由于条件问题，其他低版本系统未测\r\nqq 浏览器依旧有延迟，微信浏览器没问题\r\n"},{"name":"其他","outline":"[\"移动端兼容问题解决\",\"ios 移动端 css 伪类 :active 无效\"]","content":"解决：\r\nif(isMobileIOS){\n  document.body.ontouchstart=function () { };\n}\r\n"},{"name":"其他","outline":"[\"移动端兼容问题解决\",\"android webview 初始body 为0 问题\"]","content":""},{"name":"其他","outline":"[\"移动端兼容问题解决\",\"android webview 界面残留，界面闪烁\"]","content":"关闭硬件加速\r\n"},{"name":"其他","outline":"[\"移动端兼容问题解决\",\"打电话\"]","content":"<a href=\"tel:13670026449\">客服热线</a>\r\nandroid 支持。ios 微信网页也支持，其他未测\r\n[Android网页中tel等协议参考](http://www.cnblogs.com/softwarelanguagebs/p/5490837.html)\r\n[ios 参考](http://lucaslz.com/2016/08/24/tips/callphone-sendmessage-composeemail/)\r\n"},{"name":"其他","outline":"[\"移动端兼容问题解决\",\"qq 7.2 内置浏览器，focus 不弹键盘(模拟click)\"]","content":"使用内置 click，没有此问题，但会延迟 300ms\r\nqq 浏览器，初始执行 focus 获焦情况(此时不会弹键盘，移动端都不会)，再次通过点击事件(非输入框)然后执行 focus，依然不会弹键盘，其他浏览器没有问题。\r\n解决：先 blur 失焦，后获 focus 焦点。终极解决办法，自己写键盘\r\n"},{"name":"其他","outline":"[\"移动端兼容问题解决\",\"部分 Android 机 window.innerWidth 延迟\"]","content":"**问题：**  \n实现 rem 适配，初始需获取 window.innerWidth 宽度偏大。猜测是 meta name=\"viewport\" 延迟生效了\r\n**解决：**\n使用 `window.screen.width` 屏幕宽度代替\r\n"},{"name":"功能代码临时记录","outline":"[\"递归\"]","content":""},{"name":"功能代码临时记录","outline":"[\"递归\",\"带级数的递归\"]","content":"1\r\nfunction handle(itms,lv) {\n\n    each(itms,function (itm) {\n        if(lv<level){\n            itm.classList.remove('fold')\n        }else{\n            itm.classList.add('fold')\n        }\n        let child = itm.children\n        handle((child[1]||child[0]).children,lv+1)\n    })\n}\n\nhandle(items,1)\r\n"},{"name":"单元测试","outline":"[\"karma 中使用 Chrome Headless\"]","content":"需安装 `karma-chrome-launcher` 插件，之前一直有装，只是使用的是有头版。\r\nmodule.exports = function(config) {\n  config.set({\n    // browsers: ['Chrome'], // 有头\n    browsers: ['ChromeHeadless'] // 无头\n  })\n}\r\n"},{"name":"单元测试","outline":"[\"入门、工具列表...\"]","content":""},{"name":"单元测试","outline":"[\"入门、工具列表...\",\"工具列表\"]","content":"测试管理工具：[Karma](http://karma-runner.github.io/1.0/index.html)\r\n测试框架：[Mocha](https://mochajs.org/)\r\n断言库：Jest、Jasmine、[chai.js](http://chaijs.com/guide/)\r\n接口模拟 [easy mock](https://www.easy-mock.com/) 似乎无法本地代理此模拟接口\r\nreactjs 测试： [enzyme](http://airbnb.io/enzyme/)\r\nweb app|站点 测试：[Nightwatch.js](http://nightwatchjs.org/)\r\n可以这么组合：karma + Mocha + chai.js、Karma + Jasmine\r\n"},{"name":"单元测试","outline":"[\"入门、工具列表...\",\"好处\"]","content":"放心大胆重构：代码重构时可保证安全性，即保证功能完整\r\n测试用例相当于API文档\r\n迫使编写更易于维护的代码：因为需尽量做到让编写的每个单元都可单独测试\r\n"},{"name":"单元测试","outline":"[\"入门、工具列表...\",\"webdriver 实验\"]","content":"[可模拟浏览器点击的测试框架：selenium-webdriver](https://www.npmjs.com/package/selenium-webdriver)\r\nhttp://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_WebElement.html\r\nvar webdriver = require('selenium-webdriver'),\n    By = webdriver.By,\n    until = webdriver.until;\n\nvar driver = new webdriver.Builder()\n    .forBrowser('firefox')\n    .build();\n\ndriver.get('https://www.baidu.com/');\ndriver.findElement(By.id('kw')).sendKeys('123');\ndriver.findElement(By.id('su')).click();\ndriver.wait(until.titleIs('百度一下，你就知道'), 1000);\ndriver.quit();\r\n"},{"name":"单元测试","outline":"[\"入门、工具列表...\",\"参考学习\"]","content":"[为什么要做测试？karma的使用](https://www.douban.com/note/334051223/)\r\nhttps://github.com/tmallfe/tmallfe.github.io/issues/37\r\nhttp://www.jianshu.com/p/6726c0410650\r\nhttp://taobaofed.org/blog/2016/01/08/karma-origin/\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\"]","content":""},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"需要安装的包\"]","content":"webpack\r\nbabel-core babel-loader babel-plugin-external-helpers babel-plugin-transform-runtime babel-preset-env\r\n相关测试包：  \nchai karma karma-chai karma-chai-dom karma-phantomjs-launcher karma-chrome-launcher karma-mocha karma-sourcemap-loader karma-webpack mocha\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"增加 dom 测试：karma-chai-dom 包\"]","content":"karma-chai-dom 包下载后即支持：[语法文档](http://chaijs.com/plugins/chai-dom/)\r\n而且直接支持浏览器的 dom 操作\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"给 webpack 增加 sourcemap：karma-sourcemap-loader 包\"]","content":"[karma-webpack 文档](https://www.npmjs.com/package/karma-webpack) 中有说明\r\nkarma.conf.js 中需要的配置，2个地方：preprocessors、webpack.devtool\r\nmodule.exports = function(config) {\n  config.set({\n    preprocessors: {\n      './test/*.js':['webpack', 'sourcemap']\n    },\n    webpack:{\n      devtool: 'inline-source-map'\n    }\n  })\n}\n\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"karma.conf.js 配置参考，可直接用\"]","content":"let path = require('path')\n\nmodule.exports = function(config) {\n  config.set({\n    frameworks: ['mocha','chai-dom','chai'],\n    files: [\n      './test/*.js'\n    ],\n    preprocessors: {\n      './test/*.js':['webpack', 'sourcemap']\n    },\n    webpack:{\n      module: {\n        //加载器配置\n        rules: [\n          {\n            test: /\\.js$/,\n            include:[\n              path.resolve(__dirname, 'src'),\n              path.resolve(__dirname,'test')\n            ],\n            // exclude: /node_modules/,\n            loader: 'babel-loader',\n            options: {\n                \"presets\": [\n                    \"env\"\n                ],\n                \"plugins\": [\n                    \"transform-runtime\"\n                ]\n            }\n          }\n        ]\n      },\n      devtool: 'inline-source-map'\n    },\n    webpackMiddleware: {\n      noInfo: true\n    },\n    browsers: ['Chrome'/*, 'PhantomJS'*/],\n  })\n}\n\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"测试用例语法：mocha + chai\"]","content":""},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"测试用例语法：mocha + chai\",\"dom 测试, 完全的浏览器 dom api\"]","content":"当然，也有断言语法\r\n\ndescribe('fullPreloader 功能测试', function () {\n\n  it('第一次调用 close，是否报错', function() {\n\n    fullPreloader.close()\n\n  })\n  //\n  it('执行 show，是否增加 show', function() {\n\n    fullPreloader.show()\n\n    let elem = document.querySelector('.preloader-full')\n\n    elem.should.have.class('show')\n\n\n  })\n})\n\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"测试用例语法：mocha + chai\",\"异步测试\"]","content":"需在回调中执行 done，通知测试结束\r\ndescribe('天气信息获取', function () {\n\n  it('天气信息获取', function(done) {\n    weatherInfoLoad(function (d) {\n      console.log(d)\n      done()\n    })\n  })\n})\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"更详细的测试后报告 [karma-spec-reporter](https://www.npmjs.com/package/karma-spec-reporter)\"]","content":"先安装插件：karma-spec-reporter\r\n再配置：karma.conf.js\r\nmodule.exports = function (config) {\n  config.set({\n      reporters: [\"spec\"]\n      plugins: [\"karma-spec-reporter\"],\n\n  })\n}\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"开始测试\"]","content":""},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"开始测试\",\"cli\"]","content":"package.json\r\n{\n  \"scripts\": {\n    \"test\": \"karma start\"\n  }\n}\r\nnpm run test\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"开始测试\",\"Node.js API\"]","content":"[文档](https://karma-runner.github.io/1.0/dev/public-api.html)\r\nconst karma = require('karma')\nconst cfg = karma.config;\nconst path = require('path');\nconst karmaConfig = cfg.parseConfig(path.resolve('../karma.conf.js'));\n\nvar Server = karma.Server\nvar server = new Server(karmaConfig, function(exitCode) {\n  console.log('Karma has exited with ' + exitCode)\n  process.exit(exitCode)\n})\n\nserver.start()\n\r\n"},{"name":"单元测试","outline":"[\"20170828 环境搭建总结，测试开始：带dom测试\",\"常用插件\"]","content":"karma.conf.js\r\nmodule.exports = function (config) {\n    config.set({\n        plugins: [\n            \"karma-webpack\",\n            \"karma-chai\",\n            \"karma-chai-dom\",\n            'karma-coverage',\n            \"karma-spec-reporter\",\n            \"karma-sourcemap-loader\",\n            \"karma-mocha\",\n            // 'karma-phantomjs-launcher',\n            \"karma-chrome-launcher\"\n        ]\n    })\n}\n\r\n"},{"name":"单元测试","outline":"[\"config 选项\"]","content":""},{"name":"单元测试","outline":"[\"config 选项\",\"plugins\"]","content":"此选项可选： \r\n给值：只加载指定插件  \r\n不给值：加载所有插件\r\nkarma.conf.js\r\nmodule.exports = function (config) {\n    config.set({\n        plugins: [\n            \"karma-webpack\",\n            \"karma-chai\",\n            \"karma-chai-dom\",\n            'karma-coverage',\n            \"karma-spec-reporter\",\n            \"karma-sourcemap-loader\",\n            \"karma-mocha\",\n            // 'karma-phantomjs-launcher',\n            \"karma-chrome-launcher\"\n        ]\n    })\n}\n\r\n"},{"name":"单元测试","outline":"[\"jasmine\"]","content":""},{"name":"单元测试","outline":"[\"jasmine\",\"beforeEach、beforeAll\"]","content":"var i = 0\ndescribe('test-foo', function () {\n  // 每次 it 都会执行\n  // 只限于当前 describe\n  beforeEach(function () {\n    console.log('beforeEach', i++)\n  });\n\n  // 只执行一次\n  beforeAll(function () {\n    console.log('beforeAll')\n  });\n\n\n  it('it1', function () {\n\n\n  })\n\n  it('it2', function () {\n\n  })\n})\n\ndescribe('test-bar', function () {\n  it('it3', function () {\n\n  })\n})\n\r\n"},{"name":"单元测试","outline":"[\"jest 测试框架\"]","content":""},{"name":"单元测试","outline":"[\"jest 测试框架\",\"nodejs 测试问题\"]","content":""},{"name":"单元测试","outline":"[\"jest 测试框架\",\"nodejs 测试问题\",\"会根据 `.babelrc` 文件进行 babel 转化\"]","content":"[使用 babel - 官方解释](https://facebook.github.io/jest/docs/zh-Hans/getting-started.html#%E4%BD%BF%E7%94%A8-babel)\r\n**解决**\r\n更改 pageage.json\r\n// package.json\n{\n  \"jest\": {\n    \"transform\": {}\n  }\n}\r\n使用配置文件\r\n// jest.config\nmodule.exports = {\n  name: \"my-project\",\n  transform: {},\n  testEnvironment: \"node\"\n}\r\n"},{"name":"单元测试","outline":"[\"jest 测试框架\",\"--watch 模式\"]","content":"很聪明，只会测试更改的文件\r\n当然，`--watchAll` 就会测试所有了\r\n"},{"name":"单元测试","outline":"[\"jest 测试框架\",\"使用指定的 babel.config\"]","content":"jest-preprocess.js\r\nconst babelOptions = {\n  \"presets\": [\n    [\"@babel/preset-env\", {\n      // \"modules\": 'auto',\n      // \"useBuiltIns\": \"usage\",\n      // \"targets\": {\n      //   \"browsers\": [\"> 1%\", \"last 2 versions\", \"not ie <= 8\"]\n      // }\n    }]\n  ],\n  \"plugins\": [\n    \"@babel/plugin-transform-runtime\",\n    \"@babel/plugin-syntax-dynamic-import\",\n    // \"transform-vue-jsx\"\n  ]\n};\n\nmodule.exports = require('babel-jest').createTransformer(babelOptions);\n\r\njest.config.js\r\nmodule.exports = {\n  verbose: true,\n  'rootDir': '../',\n  testMatch: ['<rootDir>/test/**/*.test.js'],\n  // 'testRegex': [\n  //   '/test/unit/.+(test|spec)\\\\.[jt]sx?$'\n  // ],\n  testPathIgnorePatterns: ['/src/', 'node_modules'],\n  'moduleNameMapper': {\n    // 同步 webpack 别名\n    '@/(.*)$': '<rootDir>/src/$1'\n  },\n\n  transform: { '^.+\\\\.js$': '<rootDir>/test/jest-preprocess.js' },\n}\r\n"},{"name":"单元测试","outline":"[\"mocha API 使用\"]","content":""},{"name":"单元测试","outline":"[\"mocha API 使用\",\"异步测试\"]","content":"**可利用此方式查看输出到测试浏览器中的对象：** 测试执行完后，测试浏览器输出的对象被销毁，无法查看，可通过此方式暂停运行，查看输出的对象\r\n默认超时时间为2s，超时后自动执行done。超时时间可设置\r\ndescribe('加法函数的测试', function() {\n  it('测试应该5000毫秒后结束', function(done) {\n    this.timeout(5000);//设置超时时间为5s\n    var x = true;\n    var f = function() {\n      x = false;\n      expect(x).to.be.not.ok;\n      done(); // 通知Mocha测试结束\n    };\n    setTimeout(f, 4000);\n  });\n});\r\n"},{"name":"单元测试","outline":"[\"mocha API 使用\",\"only\"]","content":"describe('Array', function() {\n  describe.only('#indexOf()', function() {\n    it.only('should return -1 unless present', function() {\n      // ...\n    });\n  });\n});\r\n"},{"name":"单元测试","outline":"[\"思想\"]","content":"确保所有组件功能的完整。不再担心某次调整而坏了全局\r\n只测试功能接口。没必要测试内部所有实现\r\n"},{"name":"单元测试","outline":"[\"环境：karma + mocha + chai\"]","content":""},{"name":"单元测试","outline":"[\"环境：karma + mocha + chai\",\"这里涉及的工具库：\"]","content":"karma：测试管理工具\r\nmocha：测试框架\r\nchai：断言库\r\nwebpack：实现 es6 语法转换\r\n"},{"name":"单元测试","outline":"[\"环境：karma + mocha + chai\",\"需要安装的包\"]","content":"测试相关：  \nmocha karma-mocha chai karma-chai \r\n测试浏览器环境：  \nkarma-chrome-launcher karma-phantomjs-launcher\r\nes6 转换相关：  \nwebpack  \nbabel-core babel-loader babel-preset-env [karma-webpack](https://www.npmjs.com/package/karma-webpack)\r\n"},{"name":"单元测试","outline":"[\"环境：karma + mocha + chai\",\"karma.config.js 参考\"]","content":"这里说明一下，并不需要设置 plugins 选项\r\n// Karma configuration\n\nlet path = require('path')\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['mocha','chai'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n      './test/*.js'\n    ],\n\n\n    // list of files to exclude\n    // exclude: [\n    //   'You can use glob patterns, eg. \"js/*.js\" or \"test/**/*Spec.js\".',\n    //   'You can use glob patterns, eg. \"js/*.js\" or \"test/**/*Spec.js\".'\n    // ],\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {\n        './test/*.js':['webpack']\n    },\n\n    webpack:{\n      module: {\n        //加载器配置\n        rules: [\n          {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel-loader',\n            options: {\n              \"presets\": [\"env\"],\n            }\n          }\n        ]\n      },\n    },\n    webpackMiddleware: {\n      noInfo: true\n    },\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress'],\n\n    // web server port\n    port: 9876,\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['Chrome', 'PhantomJS'],\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity\n  })\n}\n\r\n"},{"name":"单元测试","outline":"[\"环境：karma + mocha + chai\",\"问题解决，注意项：\"]","content":""},{"name":"单元测试","outline":"[\"环境：karma + mocha + chai\",\"问题解决，注意项：\",\"karma 有依赖缺失问题：\"]","content":"勿使用淘宝镜像命令 cnpm 安装。  **可使用 yarn**，速度也很快\r\n"},{"name":"单元测试","outline":"[\"环境：karma + mocha + chai\",\"test.js 代码说明范例\"]","content":"import {isNum,isString} from '../src/index'\n\ndescribe('index.js的测试', function () {\n    it('1应该是数字', function() {\n        // expect(isNum(1)).to.be.true\n        isNum(1).should.equal(true)\n    })\n    it('\"1\" 应该是字符', function() {\n        // expect(isString('1')).to.be.true\n        isString('1').should.equal(true)\n    })\n})\n\r\n"},{"name":"工具","outline":"[\"ie6 官方调试工具\"]","content":"[Superpreview](https://www.microsoft.com/en-us/download/details.aspx?id=2020)\r\n"},{"name":"工具","outline":"[\"npm\"]","content":""},{"name":"工具","outline":"[\"npm\"]","content":""},{"name":"工具","outline":"[\"npm\",\"npm 项目路径最好不要包含$符号\"]","content":"即文件夹最好不用$命名，因为$为命令关键字\r\n"},{"name":"工具","outline":"[\"npm\",\"通过 npm 执行package.json准备的命令\"]","content":"scripts 字段\r\nnpm run dev\r\n部分命令无需加 run，比如start，可直接\r\nnpm start\r\n"},{"name":"工具","outline":"[\"npm\",\"查看创库源地址\"]","content":"npm config get registry\r\n"},{"name":"工具","outline":"[\"npm\",\"关于加速\"]","content":""},{"name":"工具","outline":"[\"npm\",\"关于加速\",\"使用淘宝镜像\"]","content":"npm config set registry https://registry.npm.taobao.org\r\n源镜像地址：https://registry.npmjs.org/\r\nnpm config set registry https://registry.npmjs.org/\r\n"},{"name":"工具","outline":"[\"npm\",\"关于加速\",\"或者安装 cnpm 命令\"]","content":"npm install -g cnpm --registry=https://registry.npm.taobao.org\r\n"},{"name":"工具","outline":"[\"npm\",\"发布包\"]","content":"首先关联账号\r\nnpm adduser\r\n发布  \r\n当前所在文件夹  \r\n不加点也行\r\nnpm publish .\r\n"},{"name":"工具","outline":"[\"npm\",\"更新发布包\"]","content":"跟[发布包](#发布包)一样，也是通过`npm publish`命令，只是要修改版本\r\n"},{"name":"工具","outline":"[\"npm\",\"package.json\"]","content":""},{"name":"工具","outline":"[\"npm\",\"package.json\",\"命令创建 package.json 文件\"]","content":"将在命令运行目录创建\r\nnpm init\r\n"},{"name":"工具","outline":"[\"npm\",\"package.json\",\"main字段\"]","content":"nodejs 在 require 模块时，将以此字段指向的js文件作为入口\r\n{\n    \"main\":\"./lib/app.js\"\n}\r\n"},{"name":"工具","outline":"[\"npm\",\"package.json\",\"scripts字段：脚本执行\"]","content":"可直接运行非全局的模块命令。  \n因为默认会在`./node_modules/.bin`中寻找命令。但也只限于与`package.json`同级的`node_modules`中寻找。\r\n假如是某其他文件夹的`package.json`，需指定命令的绝对路径：\r\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^15.6.1\",\n    \"react-dom\": \"^15.6.1\"\n  },\n  \"devDependencies\": {\n    \"react-scripts\": \"1.0.7\"\n  },\n  \"scripts\": {\n    \"start\": \"E:/_work/node_modules/.bin/react-scripts start\"\n  }\n}\n\r\n"},{"name":"工具","outline":"[\"npm\",\"参考网址\"]","content":"http://www.cnblogs.com/penghuwan/p/6973702.html#_label4\r\n"},{"name":"工具","outline":"[\"npm\",\"更新 npm 工具\"]","content":"npm install npm@latest -g\r\n"},{"name":"工具","outline":"[\"npm\",\"更新本地包\"]","content":"npm update\r\n"},{"name":"工具","outline":"[\"npm\",\"查看过时本地包\"]","content":"npm outdated\r\n"},{"name":"工具","outline":"[\"npm\",\"查看本地包列表\"]","content":"npm ls\r\n"},{"name":"工具","outline":"[\"postman\"]","content":"接口测试\r\nchrome 应用\r\n"},{"name":"工具","outline":"[\"yarn\"]","content":""},{"name":"工具","outline":"[\"yarn\",\"更新所有包\"]","content":"yarn upgrade --latest\r\n"},{"name":"工程-eslint-webpack 配置","outline":"[\"webpack 配置\"]","content":"[eslint 官网](https://eslint.org/)\r\n此处使用 [standard](https://github.com/standard/standard/blob/master/docs/README-zhcn.md) 规范\r\n"},{"name":"工程-eslint-webpack 配置","outline":"[\"1. 首先要有 webpack 环境\"]","content":""},{"name":"工程-eslint-webpack 配置","outline":"[\"2. eslint 相关包\"]","content":"eslint eslint-config-standard eslint-friendly-formatter eslint-plugin-html eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-standard eslint-loader babel-eslint\r\n"},{"name":"工程-eslint-webpack 配置","outline":"[\"3. eslint-loader 配置\"]","content":"module: {\n  //加载器配置\n  rules: [\n    {\n      test: /\\.(js|vue)$/,\n      loader: 'eslint-loader',\n      enforce: 'pre',//必须保证先执行此 loader ，所以加了此字段\n      include: [resolve('../src'), resolve('../test')],\n      options: {\n        formatter: require('eslint-friendly-formatter')\n      }\n    }\n  ]\n},\r\n"},{"name":"工程-eslint-webpack 配置","outline":"[\"4. 项目根目录加入配置文件: `.eslintrc.js` `.eslintignore`\"]","content":""},{"name":"工程-eslint-webpack 配置","outline":"[\"4. 项目根目录加入配置文件: `.eslintrc.js` `.eslintignore`\",\".eslintrc.js 规范检查核心配置\"]","content":"// http://eslint.org/docs/user-guide/configuring\n\nmodule.exports = {\n  root: true,\n  parser: 'babel-eslint',\n  parserOptions: {\n    sourceType: 'module'\n  },\n  env: {\n    browser: true,\n  },\n  // https://github.com/standard/standard/blob/master/docs/RULES-en.md\n  extends: 'standard',\n  // required to lint *.vue files\n  plugins: [\n    'html'\n  ],\n  // add your custom rules here\n  'rules': {\n    // allow paren-less arrow functions\n    'arrow-parens': 0,\n    // allow async-await\n    'generator-star-spacing': 0,\n    // allow debugger during development\n    'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0\n  }\n}\n\r\n"},{"name":"工程-eslint-webpack 配置","outline":"[\"4. 项目根目录加入配置文件: `.eslintrc.js` `.eslintignore`\",\".eslintignore 检查排除\"]","content":"build/*.js\nconfig/*.js\nsrc/lib/*.js\n*.config.js\ndist/*\nkarma.conf.js\r\n"},{"name":"工程-eslint-webpack 配置","outline":"[\"4. 大功告成~\"]","content":"就是这么简单\r\n"},{"name":"工程-eslint-webpack 配置","outline":"[\"附：编辑器编码规范配置\"]","content":"放根目录。使用编辑器格式化代码时，会根据此配置文件格式化\r\n[.editorconfig](http://editorconfig.org/)\r\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\r\n"},{"name":"工程-gulp","outline":"[\"postcss\"]","content":""},{"name":"工程-gulp","outline":"[\"postcss\",\"涉及到的包\"]","content":"gulp gulp-postcss\r\n"},{"name":"工程-gulp","outline":"[\"插件\"]","content":""},{"name":"工程-gulp","outline":"[\"插件\",\"css 压缩：gulp-clean-css\"]","content":""},{"name":"工程-gulp","outline":"[\"插件\",\"文件重命名：gulp-rename\"]","content":"比如给压缩文件加`.min`\r\nreturn gulp.src('src/**/*.css')\n    .pipe(postcss(postPlugins))\n    .pipe(gulp.dest('dist'))\n    .pipe(cleanCSS())\n    .pipe(rename({suffix:'.min'}))\n    .pipe(gulp.dest('dist'));\r\n"},{"name":"工程-gulp","outline":"[\"改变输出路径\"]","content":"通过 [gulp-rename](https://github.com/hparra/gulp-rename)\r\nrename({dirname: ''})\r\n"},{"name":"工程-rollup","outline":"[\"只能使用 import 导入模块，但可通过插件改变\"]","content":"通过 rollup-plugin-commonjs 插件使支持 require 模块\r\n"},{"name":"工程-rollup","outline":"[\"外部模块不会解析成es5\"]","content":"需借用 [rollup-plugin-babel](#rollup-plugin-babel) 插件\r\n"},{"name":"工程-rollup","outline":"[\"插件\"]","content":""},{"name":"工程-rollup","outline":"[\"插件\",\"rollup-plugin-node-resolve 打包外部模块\"]","content":"允许将外部模块编译进来，比如把 node_modules 中的模块。当然，也可以自定义的模块。  \n只需指定一个文件夹名称，似乎会寻找硬盘的所有位置，很强大（指定路径将无效）\r\nplugins: [\n  resolve({\n    customResolveOptions: {\n      moduleDirectory: ['node_modules','github']\n    }\n  })\n]\r\n"},{"name":"工程-rollup","outline":"[\"插件\",\"rollup-plugin-commonjs\"]","content":"使支持 require 模块。否则只能 import 模块\r\n"},{"name":"工程-rollup","outline":"[\"插件\",\"rollup-plugin-babel\"]","content":"解析成es5代码。目前所知，必须使用`.babelrc`配置文件\r\nexport default {\n    plugins: [\n        babel({\n            // 使用数组，排除多个目录或文件\n            exclude: ['node_modules/**','./src/katex.min.js'],\n        })\n    ]\n}\n\r\n"},{"name":"工程-rollup","outline":"[\"插件\",\"rollup-plugin-uglify\"]","content":"代码压缩\r\nconst uglify = require('rollup-plugin-uglify');\n\nexport default {\n    plugins: [\n        uglify()\n    ]\n}\r\n"},{"name":"工程-rollup","outline":"[\"rollup.config\"]","content":"目前常用：\r\n`cjs`: 打包成nodejs模块\r\n`iife`: \r\n构建成可通过 `&lt;script&gt;` 标签使用的js。\r\n不能直接构建导出的模块\r\n`umd`: \r\nbrowser(AMD+全局) + nodejs\r\n需与moduleName选项一起使用\r\n可直接构建模块\r\n"},{"name":"工程-rollup","outline":"[\"加 banner 注释\"]","content":"需自己拼 \r\n// generate code and a sourcemap\nconst { code, map } = await bundle.generate(outputOptions);\n\n\r\n"},{"name":"工程-rollup","outline":"[\"0 快速使用-node API\"]","content":""},{"name":"工程-rollup","outline":"[\"0 快速使用-node API\",\"涉及到的包\"]","content":"babel-plugin-external-helpers\r\nrollup rollup-plugin-commonjs rollup-plugin-babel\r\n"},{"name":"工程-rollup","outline":"[\"0 快速使用-node API\",\"options\"]","content":"const rollup = require('rollup');\nconst commonjs = require('rollup-plugin-commonjs');\nconst babel = require('rollup-plugin-babel');\n\n// see below for details on the options\nconst inputOptions = {\n  input: './src/index.js',\n  plugins: [\n    babel({\n      include: ['./src/**']\n    }),\n    commonjs()\n  ]\n};\nconst outputOptions = {\n  format: 'cjs',\n  // format: 'umd',\n  // name: 'mccard',\n  file: 'dist/index.cjs.js'\n};\n\r\n"},{"name":"工程-rollup","outline":"[\"0 快速使用-node API\",\".babelrc\"]","content":"{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"modules\": false\n      }\n    ]\n  ],\n  \"plugins\": [\n    \"external-helpers\"\n  ]\n}\r\n"},{"name":"工程-rollup","outline":"[\"0 快速使用-node API\",\"rollup.rollup 使用\"]","content":"async function build() {\n  // create a bundle\n  const bundle = await rollup.rollup(inputOptions);\n\n  // generate code and a sourcemap\n  const { code, map } = await bundle.generate(outputOptions);\n\n  // or write the bundle to disk\n  await bundle.write(outputOptions);\n}\n\nbuild()\n\r\n"},{"name":"工程-rollup","outline":"[\"0 快速使用-node API\",\"rollup.watch 使用\"]","content":"let watchOptions = Object.assign(inputOptions, {\n\n  output: [outputOptions],\n  watch: {\n    include:'./src/**'\n  }\n});\n\nconst watcher = rollup.watch(watchOptions);\n\nwatcher.on('event', event => {\n  // event.code can be one of:\n  //   START        — the watcher is (re)starting\n  //   BUNDLE_START — building an individual bundle\n  //   BUNDLE_END   — finished building a bundle\n  //   END          — finished building all bundles\n  //   ERROR        — encountered an error while bundling\n  //   FATAL        — encountered an unrecoverable error\n  console.log(event)\n  console.log(event.code)\n});\n\n// stop watching\n// watcher.close();\r\n"},{"name":"工程-rollup","outline":"[\"使支持 Promise\"]","content":"在使用 Promise 等高级特性情况，会自动生成 Promise 实现。默认不生成\r\n关键设置\r\nlet inputOptions = {\n  plugins: [\n    babel({\n      // 关键\n      plugins: ['transform-runtime'],\n      runtimeHelpers:true\n\n    }),\n  ],\n};\r\n完整示例\r\nconst commonjs = require('rollup-plugin-commonjs');\nconst babel = require('rollup-plugin-babel');\nconst resolve = require('rollup-plugin-node-resolve');\n\nconst bundle = await rollup.rollup({\n  input: './src/index.js',\n  plugins: [\n    babel({\n      plugins: ['transform-runtime'],\n      runtimeHelpers:true\n    }),\n    resolve({\n      customResolveOptions: {\n        moduleDirectory: 'node_modules'\n      }\n    }),\n    commonjs(),\n    // uglify()\n  ]\n});\n\n  await bundle.write({\n    format: 'cjs',\n    name: 'corejs',\n    file: './dist/index.cjs.js', // equivalent to --output\n\n    sourcemap: true\n  });\r\n"},{"name":"工程-rollup","outline":"[\"问题\"]","content":""},{"name":"工程-rollup","outline":"[\"问题\",\"用 babel 解析部分 es5 语法都会报错\"]","content":"对于已经解析过的一定要排除出去，否则可能会报错\r\nconst bundle = await rollup.rollup({\n  input: './src/index.js',\n  plugins: [\n    babel({\n      exclude: ['../../node_modules/**','./modules/weather/index.js'],\n    })\n  ]\n});\r\n"},{"name":"工程-webpack","outline":"[\"config 选项\"]","content":""},{"name":"工程-webpack","outline":"[\"config 选项\",\"output\"]","content":""},{"name":"工程-webpack","outline":"[\"config 选项\",\"output\",\"output.publicPath\"]","content":"[output.publicPath API 参考](https://doc.webpack-china.org/configuration/output#output-publicpath)\r\n输出还是按照 output.path 输出，只是更正全局资源引用路径。否则引用将相对 output.path \r\n部分 loader 有单独的 publicPath，这个只是在全局的基础上追加，比如 file-loader \r\n"},{"name":"工程-webpack","outline":"[\"config 选项\",\"output\",\"output.filename\"]","content":""},{"name":"工程-webpack","outline":"[\"config 选项\",\"output\",\"output.filename\",\"除了设置名称，还可以设置输出路径\"]","content":"部分loader，比如 file-loader 的 name，还有 HtmlWebpackPlugin 的 filename 也有此特性\r\n"},{"name":"工程-webpack","outline":"[\"config 选项\",\"output\",\"output.filename\",\"[hash]\"]","content":"每次构建都会生成一个跟之前不一样的，唯一的 hash，所有输出的文件共用同一个 hash\r\n"},{"name":"工程-webpack","outline":"[\"config 选项\",\"output\",\"output.filename\",\"[chunkhash]\"]","content":"建议用这个，根据 chunk 生成，chunk 改变才改变\r\n但，使用 devServer 构建情况，不能用这个，否则报错\r\nfilename: \"[name].[hash].bundle.js\"\r\n"},{"name":"工程-webpack","outline":"[\"config 选项\",\"modules 指定模块寻找，支持 nodejs require 机制\"]","content":"文件夹名称：支持往上寻找\r\n相对路径\r\n绝对路径\r\n文件夹名称、相对路径 问题：\n**一个 chunk 中可能会打包出多个相同模块**。  \n比如一个js中有2个vue框架。因为其他项目的 vue 引用会捆绑自己的 `node_modules`，并且独立生成。但如果使用同一个 `node_modules`(绝对路径) 就不会有此问题\r\nwebpack.config.js\r\nmodules: [\n    // 其他不同路径的独立项目打包时会使用它们自己的的 node_modules\n    // \"node_modules\",\n\n    // 只使用当前项目的 node_modules，其他不同路径的独立项目打包时也会使用此node_modules\n    path.resolve(__dirname,'node_modules'),\n\n    'E:/Dropbox/github/cqlql.github.io/libr',\n    'E:/Dropbox/github/cqlql.github.io/js/modules',\n    'E:/Dropbox/github/cqlql.github.io/css/modules'\n\n],\r\n调用\r\nimport click from 'dom/click';  // E:/Dropbox/github/cqlql.github.io/js/modules/dom/click.js\nimport prism from 'prism/prism';  // E:/Dropbox/github/cqlql.github.io/libr/prism/prism.js\r\n"},{"name":"工程-webpack","outline":"[\"css 提取、css loader 相关\"]","content":""},{"name":"工程-webpack","outline":"[\"css 提取、css loader 相关\",\"css 提取。生产可用\"]","content":"简单三步\r\n// 1\nlet ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n  plugins: [\n    // 2\n    new ExtractTextPlugin('css/[name].css'),\n  ],\n  module:{\n    rules:[{\n      test: /\\.(css|pcss)$/,\n      // 3\n      use: ExtractTextPlugin.extract({\n\n        // 超有用，不要漏了。\n        // 解决某些地方没法提取问题\n        // 比如异步 vue 单文件中 js(import) 方式导入的 css，外界的配置没法提取，又不能像 style 方式那样对待，最终无效。此方式便能解决\n        fallback: 'style-loader',\n\n        use: ['css-loader?sourceMap=true', 'postcss-loader?sourceMap=inline']\n      })\n    }]\n  }\n}\r\n"},{"name":"工程-webpack","outline":"[\"css 提取、css loader 相关\",\"不提取\"]","content":"module.exports = {\n  module:{\n    rules:[{\n      test: /\\.(css|pcss)$/,\n      // 不提取\n      use: ['style-loader','css-loader?sourceMap=true', 'postcss-loader?sourceMap=inline']\n    }]\n  }\n}\r\n"},{"name":"工程-webpack","outline":"[\"Nodejs API\"]","content":"let webpack = require('webpack');\n\nwebpack(require('./webpack.config')(),function (err, stats) {\n  if (err) {\n    console.error(err.stack || err);\n    if (err.details) {\n      console.error(err.details);\n    }\n    return;\n  }\n\n  // const info = stats.toJson();\n  const info =stats.toString({\n    // chunks: true,\n    // Add console colors\n    colors: true\n  });\n\n  if (stats.hasErrors()) {\n    console.error(info.errors);\n  }\n\n  if (stats.hasWarnings()) {\n    console.warn(info.warnings)\n  }\n\n  console.log(info)\n})\r\n"},{"name":"工程-webpack","outline":"[\"webpack-dev-server\"]","content":""},{"name":"工程-webpack","outline":"[\"webpack-dev-server\",\"代理\"]","content":"开发用。实现无需本机部署服务端环境，使用其他服务端接口\r\ndevServer: {\n  proxy: {\n    \"/note\": {\n      // /note 相当于请求 http://192.168.1.222:8800/note\n      target: \"http://192.168.1.222:8800\"\n\n      // 使用 pathRewrite 后： /note 相当于请求 http://192.168.1.222:8800\n      pathRewrite: {\"^/note\" : \"\"},\n\n      // 设置Host头，部分特殊服务器情况使用\n      onProxyReq: function(proxyReq, req, res){\n          proxyReq.setHeader('Host','parent.shendupeiban.com')\n      }\n    }\n  }\n}\n\r\n"},{"name":"工程-webpack","outline":"[\"webpack-dev-server\",\"Node API\"]","content":"webpack.config.js 必须根目录\r\nrequire('webpack-dev-server/bin/webpack-dev-server');\n\r\n"},{"name":"工程-webpack","outline":"[\"事件\"]","content":""},{"name":"工程-webpack","outline":"[\"事件\",\"编译事件\"]","content":"[事件列表](https://webpack.js.org/api/compiler/#event-hooks)\r\n"},{"name":"工程-webpack","outline":"[\"事件\",\"编译事件\",\"每次编译后触发\"]","content":"compiler.plugin('compilation', function (compilation) {\n\n})\r\n上例的 **compiler 对象获取：**\r\n1 通过 webpack 返回\r\nvar compiler = webpack(webpackConfig)\r\n2 通过插件\r\nmy-plugin.js\r\nfunction MyPlugin(options) {\n  // Configure your plugin with options...\n}\n\nMyPlugin.prototype.apply = function(compiler) {\n  compiler.plugin(\"compilation\", function(compilation) {\n    console.log(\"The compiler is starting a new compilation...\");\n  });\n};\n\nmodule.exports = MyPlugin;\r\nwebpack.config.js\r\nplugins: [\n  new MyPlugin({\n    options: 'nada'\n  })\n]\r\n"},{"name":"工程-webpack","outline":"[\"事件\",\"编译事件\",\"html-webpack-plugin 插件的编译后事件\"]","content":"需配合 compilation 事件使用\r\n[文档有说明](https://www.npmjs.com/package/html-webpack-plugin#events)\r\n\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\r\n"},{"name":"工程-webpack","outline":"[\"使用经验\"]","content":""},{"name":"工程-webpack","outline":"[\"webpack 使用经验记录\"]","content":""},{"name":"工程-webpack","outline":"[\"webpack 使用经验记录\",\"css模块导入依赖控制（webpack 中使用postcss 导入依赖问题）\"]","content":"**问题1**  \r\n直接在 entry 指定css文件，依赖顺序无法控制，极不稳定，会出现基础css在编译后跑到后面去\r\njs 中 require css问题依旧\r\n**解决**  \n在css中 `@import` 问题解决，但有另一个问题\r\n但产生  \n**问题2：**  \ncss 中的`@import` 模块没法在 `resolve.modules` 指定的路径中寻找模块\n(记得过去是可以的，不清楚是不是更新后有所调整)\r\n**解决**  \n使用 `postcss-smart-import` 插件，`path` 属性中指定属性\r\nmodule.exports = {\n  plugins: [\n    require('postcss-smart-import')({\n      path: ['E:/_work/Dropbox/github/modules/base-libs/css']\n    })\n  ]\n}\n\r\n"},{"name":"工程-webpack","outline":"[\"webpack 使用经验记录\",\"可按需引入构建的包\"]","content":"之前出现这样的现象，通过`CommonsChunkPlugin`打出的某独立包某页面并不需要，但不引入却会报错。那时误以为，`CommonsChunkPlugin`打出的包都是关联的，所有页面必须全部引入，其实不是。\r\n**发现原因：**  \n之前要引入所有包，是因为 `CommonsChunkPlugin` > `names`数组头居然生成了其他模块，关键我并没有指定这种模块(其实生成的这种不相干的模块应该生成到尾部才是。。。)。即某个生成的模块还包含其他模块，而这个其他模块某页面是必须的。  \n解决很简单，2种方案：  \r\n1. 可以查看源码，把这个多出来的模块固定打入某个公共包\n2. `names`数组头尾都放公共包\r\n问题代码：\r\nmodule.exports ={\n    entry:{\n        common: ['zoom-touch', 'Popup', 'vue', 'common-mobile', 'slider-one-load','msg-mobile','string-handle',\"j/common.js\"],\n\n        // click-vue 生成进来了，明明没有指定。这个模块所有页面都会用，预想是生成进 names 数组尾部才是，即common中。\n        // 结论：`CommonsChunkPlugin` > `names` 头尾都不干净，中间才干净。或者内部依赖问题所致\n        katex:[ 'katexcss','katex', './src/js/modules/latexParse.js']\n    },\n    plugins:[\n        new webpack.optimize.CommonsChunkPlugin({           \n            names:['katex','common']\n        })\n    ]    \n}\n\n\n\n\r\n"},{"name":"工程-webpack","outline":"[\"webpack 使用经验记录\",\"webpack 使用场景，与其他打包工具比较\"]","content":"webpack / [browserify](https://github.com/substack/node-browserify)  主要用来打包web应用\r\n打包独立模块请用 [rollup](https://github.com/rollup/rollup) \r\n"},{"name":"工程-webpack","outline":"[\"webpack 使用经验记录\",\"alias 精简模块路径\"]","content":"可指向路径，还可直接指向模块\r\n定义别名\r\nmodule.exports = {\n    resolve: {\n        alias: {\n            // 路径\n            j:'./src/js',\n\n            // 模块\n            ChunkedShow: 'E:/_work/Dropbox/github/modules/chunked-show/src/v1/chunked-show.js'\n\n        }\n    }\n}\r\n使用别名\r\n// 1路径\nimport {ChunkedShow} from 'j/index'; // 相当于 ./src/js/index\n\n// 2模块\nimport {ChunkedShow} from 'ChunkedShow';\n\r\n"},{"name":"工程-webpack","outline":"[\"webpack 使用经验记录\",\"开发服务器配置：devServer\"]","content":""},{"name":"工程-webpack","outline":"[\"webpack 使用经验记录\",\"开发服务器配置：devServer\",\"问题1：关于404 Cannot GET /\"]","content":"需指定访问页面。比如生成的是demo.html，则地址为`http://localhost:9000/demo.html`\r\n"},{"name":"工程-webpack","outline":"[\"webpack 使用经验记录\",\"webpack 动态导入 注释魔法 webpackChunkName 不生效\"]","content":"**增加 `output.chunkFilename` 字段**\r\noutput: {\n    path: path.resolve(__dirname, \"dist\"), // string\n    chunkFilename: '[name].bundle.js',\n    filename: \"[name].js\",\n},\r\n**配置 `babel-loader`**  \r\n`comments` 为 true 或者去掉即可\r\n{\n    test: /\\.js$/,\n    exclude: /node_modules/,\n    loader: 'babel-loader',\n    options: {\n        \"presets\": [\"env\"],\n        \"plugins\": [\"transform-runtime\",\"syntax-dynamic-import\"],\n        \"comments\": false\n    }\n},\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\"]","content":"即只有到真正执行的时候才加载。下面2种方式效果一样。\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"使用 import (荐)\"]","content":"例子直接使用 `node_modules` 中的模块，当然也可以指定路径模块\r\nfunction determineDate() {\n    import('katex').then(function(moment) {\n        console.log(moment);\n    }).catch(function(err) {\n        console.log('Failed to load moment', err);\n    });\n}\n//console.log(determineDate)// 只是声明，但不执行，看是否下载js。结果是不会下载，实现了按需\nsetTimeout(determineDate,1000)// 是否是1s后下载js。结果是的，实现了按需\r\n**还需安装 `npm i -D babel-plugin-syntax-dynamic-import` 否则打包报语法错误**  \r\n{\n    test: /\\.js$/,\n    exclude: /node_modules/,\n    loader: 'babel-loader',\n    options: {\n        \"presets\": [\"es2015\", \"stage-3\"],\n        \"plugins\": [\"transform-runtime\", \"syntax-dynamic-import\"]\n    }\n},\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"使用 import (荐)\",\"注释魔法：自定义包名\"]","content":"需满足下面2个条件\r\n1 设置 output.chunkFilename\r\nmodule.exports ={\n  output: {\n    chunkFilename: 'js/[name].bundle.js',\n  },\n}\r\n2 注释魔法\r\nasync function getComponent() {\n  var element = document.createElement('div');\n  const _ = await import(/* webpackChunkName: \"lodash\" */ 'lodash');\n\n  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n  return element;\n}\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"使用 import (荐)\",\"注释魔法：合并异步模块\"]","content":"把多个模块打包成一个异步包。只需要相同的注释包名即可。此功能很强大，最大化优化请求\r\nconst Foo = () => import(/* webpackChunkName: \"group-foo\" */ './Foo.vue')\nconst Bar = () => import(/* webpackChunkName: \"group-foo\" */ './Bar.vue')\nconst Baz = () => import(/* webpackChunkName: \"group-foo\" */ './Baz.vue')\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"使用 `bundle-loader` (弃用)\"]","content":"需先安装`npm i -D bundle-loader`\r\n下例用了路径模块，当然也可以直接使用 `node_modules` 中的模块\r\nfunction determineDate() {\n\n    var waitForChunk = require('bundle-loader!./file.js')\n    // var waitForChunk = require(bundle-loader?lazy&name=[name]!./file.js)\n\n    waitForChunk(function (file) {\n        console.log(file)\n    });\n\n}\n\n//console.log(determineDate)// 只是声明，但不执行，看是否下载js。结果是不会下载，实现了按需\nsetTimeout(determineDate,1000)// 是否是1s后下载js。结果是的，实现了按需\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"异步调用实验\"]","content":""},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"异步调用实验\",\"异步中的同步调用-公共模块：不重复\"]","content":"异步加载某些模块 A B D，A B D 都有对公共分离的模块 C 有同步调用，公共模块 C 不会重复打包\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"异步调用实验\",\"异步中的同步调用-非公共模块：重复\"]","content":"多个异步模块 ABD，都同步调用模块C，模块C会被重复打进每个异步模块中\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"异步调用实验\",\"异步中的异步调用-异步包：不重复\"]","content":"多个异步模块 A B C，都异步调用同一个模块 D，模块 D 会被单独打包成异步模块，不会重复\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"异步调用实验\",\"异步中的异步调用-公共模块：不重复\"]","content":"如果模块 D 被分离成公共包。模块 D 会固定成为公共包，不会因为异步调用原因被分离成异步包\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"总结\"]","content":"公共包永不重复：抽离出来的公共包在异步模块中被同步或异步调用都没有特殊，依然是公共包，不会重复。  \r\n如果多个位置异步调用某非公共模块 C，模块 C 会被单独打包出来，成为公共的异步模块，不会重复。 但如果此时在某位置使用同步方式调用模块 C，那么会有一个重复的同步模块C出现\r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"核心再总结\"]","content":"异步中异步或同步调用某公共模块是安全的，不会重复。\r\n固定以异步形式调用某模块也是安全的，也不会重复\r\n补充：\r\n可通过注释魔法合并异步包。此功能很强大，最大化优化请求\r\n异步中同步调用某模块(非公共)，此模块固定会包含进异步包中，成为异步包的组成部分。别的异步包也调用此模块，会重复包含进去\r\n补充：\r\n注释魔法分组歧义：\r\n 模块 A，异步模块B中同步调用，其他处异步调用，以B为同一组，那么A不会重复。\r\n 即：  \r\n 子模块(同步) -> 异步模块(分组) -> 外界  \r\n 子模块(异步,与上同组) -> 外界  \r\n 虽然子模块不会重复，但此方式容易混乱。应改成如下方式：  \r\n 子模块(同步) -> 异步模块(分组) -> 外界  \r\n 子模块(同步) -> 新异步模块(与上同组) -> 外界  \r\n"},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"异步 css 模块\"]","content":""},{"name":"工程-webpack","outline":"[\"异步加载，异步模块\",\"异步 css 模块\",\"抽离致使异步css模块报错\"]","content":"异步css模块指：`import('./base.css')`等操作\r\n原因是缺少 style-loader/lib/addStyles.js 模块所致\r\n解决：\r\nimport(/* webpackChunkName: \"katexcss\" */ 'style-loader/lib/addStyles.js')\r\n"},{"name":"工程-webpack","outline":"[\"引入不编译js库，比如jq\"]","content":"依然可模块调用，非常适用cdn情况，或多个项目共享公共静态资源\r\n// 此 chunk 不打包\n// 左边调用名字，如 require('vue')；右边是库的全局变量\nexternals: {\n    vue: 'Vue'\n},\r\n另外两个辅助插件，避免手动添加，独立项目情况用，不适用cdn\r\n// 其实就是个拷贝插件\nnew CopyWebpackPlugin([\n    { from: 'E:/_work/node_modules/vue/dist/vue.min.js', to: './vue.min.js'},\n]),\n\n// 指定包含资源\nnew HtmlWebpackIncludeAssetsPlugin({\n    files: ['./single_v2.html'],\n    assets: ['vue.min.js'],\n    // 是增加到后面还是前面，true追加到后面\n    append: false\n}),\r\n"},{"name":"工程-webpack","outline":"[\"批量导入模块\"]","content":""},{"name":"工程-webpack","outline":"[\"批量导入模块\",\"require.context\"]","content":"支持搜索子目录，参数2设为true即可\r\n实际上，参数3的正则是交给 webpack 去解析的，即 node 环境，不是运行时代码，企图通过 `new Reg(str)` 运行时动态指定是行不通的。  \n包括 `require('./router/' + name + '.js');`  也是，webpack 会解析成一个正则去导入目录下的所有js。\r\n// 批量导入路由\nlet routes = []\nfunction importAll (r) {\n  r.keys().forEach(key => {\n    routes = routes.concat(r(key).default)\n  })\n}\nimportAll(require.context('./', false, /\\/(?!index).+\\.js$/))\r\n"},{"name":"工程-webpack","outline":"[\"批量导入模块\",\"require、require.context 都支持环境变量\"]","content":"也就是实现某种情况不编译\r\n// 指定只打包具体 router\nif (process.env.NODE_ENV === 'production') {\n  // 正式环境\n  importAll(require.context('./router', false, /(use-car|commonPage)\\.js$/))\n} else {\n  // 开发环境：使用 nav-dev.js 中的路由\n  routes = require('./nav-dev.js').default\n}\r\n"},{"name":"工程-webpack","outline":"[\"报错，问题\"]","content":""},{"name":"工程-webpack","outline":"[\"报错，问题\",\"css 提取时报错 `TypeError: chunk.sortModules is not a function`\"]","content":"使用 CLI ，且 node_modules 与 webpack.config 不同级，可能会报此错误\r\n目前解决：  \n使用 Nodejs API 编译打包即可\r\nlet webpack = require('webpack');\n\nwebpack(require('./webpack.config')(),function (err, stats) {\n  if (err) {\n    console.error(err.stack || err);\n    if (err.details) {\n      console.error(err.details);\n    }\n    return;\n  }\n\n  // const info = stats.toJson();\n  const info =stats.toString({\n    // chunks: true,\n    // Add console colors\n    colors: true\n  });\n\n  if (stats.hasErrors()) {\n    console.error(info.errors);\n  }\n\n  if (stats.hasWarnings()) {\n    console.warn(info.warnings)\n  }\n\n  console.log(info)\n})\n\r\n"},{"name":"工程-webpack","outline":"[\"报错，问题\",\"babel 不编译问题\"]","content":"**首先检查是否有 .babelrc 配置**。居然有一次为了这问题找了挺久的原因，主要不报错有点坑\r\n"},{"name":"工程-webpack","outline":"[\"报错，问题\",\"webpack 编译大批量客户端node_modules模块找不到问题问题\"]","content":"首先检查\r\n{\n  resolve: {\n    modules: [\n      // 所以，一般还是不要指定绝对路径\n      resolve(\"../../node_modules\")\n    ]\n  }\n}\r\n"},{"name":"工程-webpack","outline":"[\"插件-DefinePlugin 环境变量\"]","content":""},{"name":"工程-webpack","outline":"[\"插件-DefinePlugin 环境变量\",\"编写只有开发环境存在代码\"]","content":"1、开发环境可用。以下代码**不会**生成到正式环境\r\nif (process.env.NODE_ENV !== 'production') {\n  console.log('Looks like we are in development mode!');\n}\r\n2、也会删除如下判断\r\nif (process.env.NODE_ENV === 'production') {\n  console.log('Looks like we are in production mode!');\n}\r\n删除后\r\nconsole.log('Looks like we are in production mode!');\r\n3、也支持三元运算符\r\n三元运算符 `true?1:0` 压缩后 1，也会删除多余代码\r\n4、支持模块\r\n只能使用 require 语法\r\n包括 `require`、 `require.context`\r\n相关内容：\r\n[dependency-management](https://webpack.js.org/guides/dependency-management/)\r\n[批量导入模块](#批量导入模块)\r\n"},{"name":"工程-webpack","outline":"[\"插件-DefinePlugin 环境变量\",\"可新增其他变量\"]","content":"new webpack.DefinePlugin({\n  'process.env': {\n    NODE_ENV: JSON.stringify('production'),\n    WEB_TEST: JSON.stringify('false')\n  }\n})\r\n"},{"name":"工程-webpack","outline":"[\"插件-DefinePlugin 环境变量\",\"使用未声明变量并不会转换成 false\"]","content":"注意，在没有新增某变量的情况下，使用此变量，并不会转换成 false。也就是说，此代码块压缩后不会删除\r\n"},{"name":"工程-webpack","outline":"[\"插件-DefinePlugin 环境变量\",\"多个 DefinePlugin\"]","content":"使用 webpack3 webpack4 测试结论：\n同名以第一次为准；不同命不影响，都会存在\r\n*webpack.config.js*\r\nplugins: [\n  // 环境变量\n  new webpack.DefinePlugin({\n    'process.env': {\n      NODE_ENV: JSON.stringify('production'),\n      APP_TEST: JSON.stringify('false')\n    }\n  }),\n  new webpack.DefinePlugin({\n    'process.env': {\n      NODE_ENV: JSON.stringify('production2'),\n      APP_TEST2: JSON.stringify('true')\n    }\n  }),\n]\r\n*页面 index.js*\r\nconsole.log(process.env.NODE_ENV, process.env.APP_TEST) // production false\nconsole.log(process.env.NODE_ENV, process.env.APP_TEST2) // production true\r\n"},{"name":"工程-webpack","outline":"[\"插件\"]","content":""},{"name":"工程-webpack","outline":"[\"插件\",\"html-webpack-plugin\"]","content":"[github](https://github.com/jantimon/html-webpack-plugin)\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"html-webpack-plugin\",\"排序混乱问题：已解决\"]","content":"CommonsChunkPlugin 中超过两个公共chrunk 后生成的script顺序会乱来，无法控制\r\n更新到 **2.29.0** 就好了。。。或者使用下面的2种方法：[定制排序](定制排序)[定制排序](定制排序)\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"html-webpack-plugin\",\"定制排序\"]","content":"此方式不需要设置 chunks 属性。将按照数组给的顺序来\r\n{\n    plugins:[\n        new HtmlWebpackPlugin({\n            filename: './index.html',\n            template: './src/index.html',\n            chunks: ['manifest','common1','k','app'],\n            chunksSortMode: function (c1,c2) {\n                let orders = ['manifest','common1','k','app'];\n                let o1 = orders.indexOf(c1.names[0]);\n                let o2 = orders.indexOf(c2.names[0]);\n                return o1 - o2;\n            }\n        }),\n    ]\n}\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"html-webpack-plugin\",\"排除指定 chunk\"]","content":"全部引入，这样引入顺序就不会乱。再排除不需要的 chunk。需借助 [html-webpack-exclude-assets-plugin](https://github.com/jamesjieye/html-webpack-exclude-assets-plugin)\r\n强调：自身提供 excludeChunks 选项也可实现排除，但依然会乱\r\nvar HtmlWebpackExcludeAssetsPlugin = require('html-webpack-exclude-assets-plugin');\n\nmodule.exports = \n{\n    plugins:[\n        new HtmlWebpackPlugin({\n            filename: './single_v2.html',\n            template: './src/single_v2.html',\n            chunks: ['common', 'katex', 'new_common','old_common', 'single_v2'],\n            excludeAssets: [/old_common/]\n        }),\n        new HtmlWebpackExcludeAssetsPlugin(),\n    ]\n}\n\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"html-webpack-plugin\",\"html 压缩\"]","content":"\nmodule.exports = function (env, options) {\n    return {\n        plugins: [\n\n            new HtmlWebpackPlugin({\n                filename: 'demo/draw-arc/index.html',\n                template: './src/demo/draw-arc/index.html',\n                chunks: ['index'],\n                minify:{\n                    removeComments: true,\n                    collapseWhitespace: true,\n                    removeAttributeQuotes: true,\n                    minifyCSS: true\n                    // more options:\n                    // https://github.com/kangax/html-minifier#options-quick-reference\n                }\n            })\n\n        ]\n    }\n};\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"html-webpack-plugin\",\"模版选项\"]","content":"html文件默认使用 ejs 模版\r\n模版相关说明：  \nhttps://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"NamedModulesPlugin\"]","content":"不再适用id，使用路径名称标识模块\r\nnew webpack.NamedModulesPlugin()\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"DllPlugin & DllReferencePlugin\"]","content":"使用 DllPlugin 打包\r\n通过 DllReferencePlugin 使用\r\n**不支持官方的动态导入**，强制使用会出现这种情况\r\npageA.js\r\nimport('./vendor').then(d => {\n  console.log('dynamic-imports 成功')\n})\r\nvendor dll 依然需要同步先执行，多出一个中间的动态js文件\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"html-webpack-inline-source-plugin\"]","content":"实现 inline css，当然，也支持 inline js\n需结合 extract-text-webpack-plugin 使用\r\n包含进页面中的js，sourceMap 依然有效\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"Webpack 打包优化\"]","content":"https://doc.webpack-china.org/guides/code-splitting/#bundle-bundle-analysis-\r\nhttps://github.com/webpackmonitor/webpackmonitor\r\n"},{"name":"工程-webpack","outline":"[\"插件\",\"HtmlWebpackIncludeAssetsPlugin 资源包含进html\"]","content":"css 包含需先分离 css\r\ncss 包含不成功问题：css 分离的文件路径不能有 ./\r\n"},{"name":"工程-webpack","outline":"[\"热替换 浏览器强制刷新 dev hot middleware\"]","content":""},{"name":"工程-webpack","outline":"[\"热替换 浏览器强制刷新 dev hot middleware\",\"1 [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) 需与 [webpack-hot-middleware](https://github.com/glenjamin/webpack-hot-middleware) 配合才会实现监听更改后刷新\"]","content":""},{"name":"工程-webpack","outline":"[\"热替换 浏览器强制刷新 dev hot middleware\",\"2 每个 entry 还需导入 `webpack-hot-middleware/client?reload=true` 才能刷新\"]","content":"`reload=true` 表示无法热替换则强制刷新浏览器\r\n    entry:{\n      page1: ['webpack-hot-middleware/client?reload=true',\"./src/page1.js\"],\n      page2: ['webpack-hot-middleware/client?reload=true',\"./src/page2.js\"]\n    },\n\r\n"},{"name":"工程-webpack","outline":"[\"热替换 浏览器强制刷新 dev hot middleware\",\"3 热替换实现还需每个js文件加入类似如下代码\"]","content":"// page1.js\n\nif(module.hot) {\n  module.hot.accept();\n}\n\r\n"},{"name":"工程-webpack","outline":"[\"热替换 浏览器强制刷新 dev hot middleware\",\"4 html 文件的更改刷新还需借助 eventsource-polyfill\"]","content":"`webpack-hot-middleware/client` 中有对 eventsource-polyfill 的调用。[官方也有说明](https://www.npmjs.com/package/webpack-hot-middleware#use-on-browsers-without-eventsource)\r\neventsource-polyfill 实现客户端接受服务端推送的消息\r\nclient 导入，即 entry 中配置，此处包含第2点\r\nrequire('eventsource-polyfill')\nvar hotClient = require('webpack-hot-middleware/client?noInfo=true&reload=true')\n\nhotClient.subscribe(function (event) {\n  if (event.action === 'reload') {\n    window.location.reload()\n  }\n})\r\nserver：服务端通知客户端刷新\r\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n})\n\r\n"},{"name":"工程-webpack","outline":"[\"热替换 浏览器强制刷新 dev hot middleware\",\"附上配置代码\"]","content":"// dev-client.js\n\nrequire('eventsource-polyfill')\nvar hotClient = require('webpack-hot-middleware/client?noInfo=true&reload=true')\n\nhotClient.subscribe(function (event) {\n  if (event.action === 'reload') {\n    window.location.reload()\n  }\n})\n\r\n// dev-server.js\n\nvar express = require('express')\nvar path = require('path')\n\nvar webpack = require('webpack')\n\nvar webpackConfig = require('./webpack.config')()\n\nObject.keys(webpackConfig.entry).forEach(function (name) {\n  webpackConfig.entry[name] = ['./dev-client'].concat(webpackConfig.entry[name])\n})\n\nvar app = express()\nvar compiler = webpack(webpackConfig)\n\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  noInfo: true,\n  stats: {\n    colors: true\n  },\n})\n\nvar hotMiddleware = require('webpack-hot-middleware')(compiler)\n\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({ action: 'reload' })\n    cb()\n  })\n});\n\napp.use(devMiddleware)\n\napp.use(hotMiddleware)\n\napp.use(express.static(path.join(__dirname, 'dist')));\n\nvar server = app.listen(8080)\n\r\n"},{"name":"工程-webpack","outline":"[\"缓存，避免更改造成所有文件构建 id发生变化\"]","content":"https://doc.webpack-china.org/guides/caching#-module-identifiers-\r\n有2个插件可以解决\r\n[NamedModulesPlugin](https://doc.webpack-china.org/plugins/named-modules-plugin)  将id换成路径。\r\n还可以很快定位缺少模块问题\r\n[HashedModuleIdsPlugin](https://doc.webpack-china.org/plugins/hashed-module-ids-plugin) 将id换成路径的hash值 [推荐]\r\n"},{"name":"工程-webpack","outline":"[\"缓存，避免更改造成所有文件构建 id发生变化\",\"注意是使用 [chunkhash]\"]","content":"不能使用 [hash]\r\nmodule.exports = {\n  output: {\n    path: path.resolve(__dirname, '../dist'),\n    filename: \"js/[name].[chunkhash:4].js\",\n    chunkFilename: 'js/[name].bundle.[chunkhash:4].js',\n  },\n  plugins: [\n    new ExtractTextPlugin('css/[name].[chunkhash:4].css'),\n    new webpack.HashedModuleIdsPlugin()\n  ]\n}\n\r\n"},{"name":"工程-webpack4","outline":"[\"代码拆分\"]","content":"Since version 4 the `CommonsChunkPlugin` was removed in favor of `optimization.splitChunks` and `optimization.runtimeChunk` options. Here is how the new flow works.\r\nhttps://webpack.js.org/plugins/split-chunks-plugin\r\n"},{"name":"工程-webpack4","outline":"[\"css 分离 使用 mini-css-extract-plugin\"]","content":"[mini-css-extract-plugin 文档](https://webpack.js.org/plugins/mini-css-extract-plugin)\r\n"},{"name":"工程-webpack4","outline":"[\"entry 也能指定文件夹\"]","content":"entry: {\n  // 将为 index.js 新建v3文件夹，\n  'v3/index': ['./src/v3/index.pcss',\"./src/v3/index.js\"],\n}\r\n但自动生成的引用路径可能会多一层，所以直接使用output指定会更好\r\noutput: {\n  path: path.resolve(__dirname, \"dist/v3\"), // string\n  filename: \"[name].js\",\n},\r\n"},{"name":"技术框架","outline":"[\"ckedit4 富文本\"]","content":"build-config.js 备份。用于在线构建指定的\r\nvar CKBUILDER_CONFIG = {\n    skin: 'moono-lisa',\n    // preset: 'basic',\n    preset: 'full',\n    ignore: [\n        '.DS_Store',\n        '.bender',\n        '.editorconfig',\n        '.gitattributes',\n        '.gitignore',\n        '.idea',\n        '.jscsrc',\n        '.jshintignore',\n        '.jshintrc',\n        '.mailmap',\n        '.npm',\n        '.travis.yml',\n        'bender-err.log',\n        'bender-out.log',\n        'bender.ci.js',\n        'bender.js',\n        'dev',\n        'gruntfile.js',\n        'less',\n        'node_modules',\n        'package.json',\n        'tests'\n    ],\n    plugins : {\n        // 'a11yhelp' : 1,\n        // 'about' : 1,\n        'basicstyles' : 1,\n        'bidi' : 1,\n        'blockquote' : 1,\n        'clipboard' : 1,\n        'colorbutton' : 1, // 字体颜色\n        'colordialog' : 1,\n        'contextmenu' : 1,\n        'copyformatting' : 1,\n        'dialogadvtab' : 1,\n        'div' : 1,\n        'elementspath' : 1,\n        'enterkey' : 1,\n        'entities' : 1,\n        // 'filebrowser' : 1, // 文件上传相关\n        'find' : 1,\n        // 'flash' : 1,\n        'floatingspace' : 1,\n        'font' : 1,\n        'format' : 1,\n        // 'forms' : 1,\n        'horizontalrule' : 1, // 插入水平线\n        'htmlwriter' : 1,\n        'iframe' : 1,\n        'image' : 1,\n        'indentblock' : 1,\n        'indentlist' : 1,\n        'justify' : 1,\n        // 'language' : 1,\n        'link' : 1,\n        'list' : 1,\n        'liststyle' : 1,\n        'magicline' : 1,\n        // 'maximize' : 1, // 最大化窗口\n        // 'newpage' : 1,\n        'pagebreak' : 1,\n        'pastefromword' : 1,\n        'pastetext' : 1,\n        'preview' : 1,\n        // 'print' : 1,\n        'removeformat' : 1,\n        'resize' : 1,\n        // 'save' : 1,\n        // 'scayt' : 1, // 即时拼写检查\n        'selectall' : 1,\n        'showblocks' : 1,\n        'showborders' : 1,\n        'smiley' : 1, // 表情\n        'sourcearea' : 1,\n        'specialchar' : 1, // 特殊字符\n        'stylescombo' : 1,\n        'tab' : 1,\n        'table' : 1,\n        'tableselection' : 1,\n        'tabletools' : 1,\n        // 'templates' : 1,\n        'toolbar' : 1,\n        'undo' : 1,\n        // 'uploadimage' : 1,\n        // 'wsc' : 1, // 拼写检查弹窗\n        'wysiwygarea' : 1\n    },\n    languages : {\n        'zh-cn' : 1\n    }\n};\r\n"},{"name":"技术框架","outline":"[\"ckedit5 富文本\"]","content":""},{"name":"技术框架","outline":"[\"ckedit5 富文本\",\"自定义构建\"]","content":"https://github.com/ckeditor/ckeditor5-build-inline\r\nhttps://github.com/ckeditor/ckeditor5-build-classic\r\n"},{"name":"技术框架","outline":"[\"ckedit5 富文本\",\"文本框编辑改变事件 - input\"]","content":"但复制黏贴不会触发，坑爹啊，只能用 change:data 了\r\neditor.commands.get('input').on('execute', (evt, args) => {\n  this.$emit('inputValue', editor.getData())\n})\r\n"},{"name":"技术框架","outline":"[\"ckedit5 富文本\",\"使用示例\"]","content":"ClassicEditor\n        .create(this.$el, {\n          fontSize: {\n            options: [\n              12,\n              'default',\n              18,\n              20,\n              22\n            ]\n          },\n          // highlight: {\n          //   options: [\n          //     { model: 'yellowMarker', class: 'marker-yellow', title: 'Yellow Marker', color: 'var(--ck-highlight-marker-yellow)', type: 'marker' },\n          //     { model: 'greenMarker', class: 'marker-green', title: 'Green marker', color: 'var(--ck-highlight-marker-green)', type: 'marker' },\n          //     { model: 'pinkMarker', class: 'marker-pink', title: 'Pink marker', color: 'var(--ck-highlight-marker-pink)', type: 'marker' },\n          //     { model: 'blueMarker', class: 'marker-blue', title: 'Blue marker', color: 'var(--ck-highlight-marker-blue)', type: 'marker' },\n          //     { model: 'redPen', class: 'pen-red', title: 'Red pen', color: 'var(--ck-highlight-pen-red)', type: 'pen' },\n          //     { model: 'greenPen', class: 'pen-green', title: 'Green pen', color: 'var(--ck-highlight-pen-green)', type: 'pen' }\n          //   ]\n          // },\n          heading: {\n            options: [\n              { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n              { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },\n              { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },\n              { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' },\n              { model: 'heading4', view: 'h4', title: '标题 4', class: 'ck-heading_heading4' },\n              { model: 'heading5', view: 'h5', title: '标题 5', class: 'ck-heading_heading5' }\n              // {\n              //   model: 'headingFancy',\n              //   view: {\n              //     name: 'h2',\n              //     classes: 'fancy'\n              //   },\n              //   title: 'Heading 2 (fancy)',\n              //   class: 'ck-heading_heading2_fancy',\n\n              //   // It needs to be converted before the standard 'heading2'.\n              //   converterPriority: 'high'\n              // }\n            ]\n          }\n          // toolbar: [ 'heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'alignment', 'blockQuote', 'undo', 'redo' ],\n          // language: 'zh-cn'\n        })\n        .then(editor => {\n          this.editor = editor\n          editor.setData(this.value)\n\n          editor.model.document.on('change:data', () => {\n            // 主动设置情况 不触发 inputValue\n            if (this.autoset === true) {\n              this.autoset = false\n              return\n            }\n            this.$emit('inputValue', editor.getData())\n          })\n          // 文本框编辑改变事件，但\n          // 复制黏贴不会触发，坑爹啊，只能用 change:data 了\n          // editor.commands.get('input').on('execute', (evt, args) => {\n          //   this.$emit('inputValue', editor.getData())\n          // })\n        })\n        .catch(error => {\n          console.error(error)\n        })\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\"]","content":""},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"前端\"]","content":"pwd：google 力推的，完全的web方式\r\nweex\r\nrn：react native\r\n[常用代码高亮 highlight](https://github.com/highlightjs/highlight.js)\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"web服务端\"]","content":"eggjs\r\nkoa\r\nexpress\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"nodejs 桌面应用开发框架\"]","content":"[electron](https://electron.atom.io/)\r\nnwjs\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"博客建站 markdown 文档\"]","content":"https://www.gatsbyjs.org/\r\nhttps://hexo.io/\r\nhttps://vuepress.vuejs.org/zh/\r\nhttps://docsify.js.org/#/\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"汉字转拼音\"]","content":"https://github.com/sxei/pinyinjs\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"各种js数据驱动框架\"]","content":"reactjs \r\nvuejs\r\n[Preact](https://github.com/developit/preact)：react 的轻量解决方案\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"ui 框架\"]","content":"reavt-native ui库：React-Virgin\r\nhttps://www.telerik.com/support/demos\r\nhttps://myliang.github.io/fish-ui/#/components/menu\r\nhttp://quasar-framework.org/quasar-play/android/index.html#/showcase/style-and-identity/color-palette\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"日期时间美化\"]","content":"http://momentjs.com\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"公式解决\"]","content":"https://github.com/Khan/KaTeX\r\nhttps://github.com/mathjax/MathJax\r\n"},{"name":"技术框架","outline":"[\"汇总各种技术框架 解决方案\",\"直播解决\"]","content":"**腾讯直播 TcPlayer-2.2.1.js**\r\n[官方文档](https://cloud.tencent.com/document/product/454/7503)\r\n**hls.js**\r\nhttps://github.com/video-dev/hls.js\r\n"},{"name":"数学","outline":"[\"三角形\"]","content":""},{"name":"数学","outline":"[\"三角形\",\"角度？通过比较 x y 比例即可\"]","content":""},{"name":"数据库","outline":"[\"MongoDB\"]","content":"[ubuntu 部署](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/)\r\n关于 mongod 商用是否收费：企业版收费，社区版随便用，不收费\r\n[mongod 命令](https://docs.mongodb.com/manual/reference/program/mongod/index.html)\r\nmongod 用来启动服务\r\nmongo 用来输入脚本操作数据库\r\n1.运行“locate mongo”命令查看系统默认把mongo装到了哪里\r\nhttps://www.cnblogs.com/caicaizi/p/6160884.html\r\n[配置文件文档](https://docs.mongodb.com/manual/reference/configuration-options/)\r\n[创建用户](https://docs.mongodb.com/manual/tutorial/create-users/)\r\n[用户角色](https://docs.mongodb.com/manual/reference/built-in-roles)\r\n[MongoDB用户角色配置](https://www.cnblogs.com/out-of-memory/p/6810411.html)\r\n修改mongod.conf文件\r\nsecurity:\n  authorization: enabled // 启用授权\r\n创建用户\r\n超级用户\ndb.createUser({ user: 'root', pwd: '12345678', roles: [{ role: 'root', db: 'admin' }] })\r\nadmin 用户\ndb.createUser(  \n  {  \n    user: \"admin\",  \n    pwd: \"12345678\",  \n    roles: [{role: \"userAdminAnyDatabase\", db: \"admin\"}]  \n  }  \n)\r\n读写用户\ndb.createUser(\n  {\n    user: \"test\",\n    pwd: \"12345678\",\n    roles: [\n       { role: \"readWrite\", db: \"test\" }\n    ]\n  }\n)\n只读用户\ndb.createUser(\n  {\n    user: \"test2\",\n    pwd: \"12345678\",\n    roles: [\n       { role: \"read\", db: \"test\" }\n    ]\n  }\n)\r\n修改权限\ndb.grantRolesToUser(\n  \"admin\",\n  [{role:\"readWrite\", db:\"test\"}]\n)\r\n登录：db.auth(\"admin\",\"12345678\")\ndb.auth(\"root\",\"12345678\")\r\n新建数据库\nuse test\n新建usr表，并添加一条数据\ndb.usr.insert({'name':'tompig'});\r\n删除用户\ndb.dropUser('nodercms')\r\n显示所有用户\nshow users\r\n"},{"name":"数据库","outline":"[\"MongoDB\",\"可视化管理工具\"]","content":"目前使用：[Robomongo](https://robomongo.org)\r\n其中，Robo 3T 免费, Studio 3T 收费。附上一个`studio3t 续天.bat`\r\n@echo off\nECHO 重置Studio 3T的使用日期......\nFOR /f \"tokens=1,2,* \" %%i IN ('reg query \"HKEY_CURRENT_USER\\Software\\JavaSoft\\Prefs\\3t\\mongochef\\enterprise\" ^| find /V \"installation\" ^| find /V \"HKEY\"') DO ECHO yes | reg add \"HKEY_CURRENT_USER\\Software\\JavaSoft\\Prefs\\3t\\mongochef\\enterprise\" /v %%i /t REG_SZ /d \"\"\nECHO 重置完成, 按任意键退出......\npause>nul\nexit\r\n"},{"name":"数据库","outline":"[\"MongoDB\",\"用户角色配置\"]","content":"创建普通用户步骤\r\nuse admin\ndb.createUser({ user: 'admin', pwd: '12345678', roles: [{ role: 'admin', db: 'admin' }] }) // 超级用户\n// 注意，必须要先 user，再 createUser，才能使用此用户登录此数据库\nuse test\ndb.createUser({ user: 'test', pwd: '3nk6U7H9o3Ct', roles: [{ role: 'readWrite', db: 'test' }] })\r\n"},{"name":"数据库","outline":"[\"MongoDB\",\"问题解决\"]","content":""},{"name":"数据库","outline":"[\"MongoDB\",\"问题解决\",\"远程连接被拒绝\"]","content":"将 mongodb.conf 中 `bind_ip=127.0.0.1` 的那一行，修改为 `bind_ip=0.0.0.0`\r\n如果不需要远程连接，建议改回去，更安全\r\nmongod.conf 默认位置：`/etc/mongod.conf`\r\n可通过进程看到\r\n# 查看 mongo 进程\nps -aux | grep mongo\r\n"},{"name":"数据库","outline":"[\"MongoDB\",\"Node.JS Driver\"]","content":"[mongodb](http://mongodb.github.io/node-mongodb-native/)，这个是基础，官方维护\r\n[mongoose](https://mongoosejs.com/)，基于 mongodb 封装，拥有对象模型，一般用这个\r\n"},{"name":"数据库","outline":"[\"MongoDB\",\"nodejs mongoose 使用\"]","content":"var mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/wcard', {useNewUrlParser: true});\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  // we're connected!\n  console.log('mongobd 连接成功!')\n});\n\nvar kittySchema = new mongoose.Schema({\n  item: String,\n  qty: Number\n});\n\n// var Kitten = mongoose.model('Kitten', kittySchema);\n// var silence = new Kitten({ name: 'Silence' });\n// console.log(silence.name); // 'Silence'\n// NOTE: methods must be added to the schema before compiling it with mongoose.model()\n// kittySchema.methods.speak = function () {\n//   var greeting = this.name\n//     ? \"Meow name is \" + this.name\n//     : \"I don't have a name\";\n//   console.log(greeting);\n// }\n\nvar Kitten = mongoose.model('adoniswinner', kittySchema, 'adoniswinner');\nvar fluffy = new Kitten({ item: 'fluffy' });\n// // fluffy.speak(); // \"Meow name is fluffy\"  \n\nfluffy.save(function (err, fluffy) {\n  if (err) return console.error(err);\n  // fluffy.speak();\n});\n// var Person = mongoose.model('Person', yourSchema);\n\n// find each person with a last name matching 'Ghost', selecting the `name` and `occupation` fields\nKitten.find({}, function (err, person) {\n  if (err) return handleError(err);\n  // Prints \"Space Ghost is a talk show host\".\n  console.log(person)\n  console.log('%s %s is a %s.', person.item, person.qty, person.qty);\n})\r\n"},{"name":"数据库","outline":"[\"SQLite\"]","content":""},{"name":"数据库","outline":"[\"SQLite\",\"可视化管理工具\"]","content":"[SQLite可视化管理工具汇总(更新中)](https://blog.csdn.net/qq_27248989/article/details/80279585)\r\n目前熟悉使用：[SQLiteStudio](https://sqlitestudio.pl/index.rvt?act=download)\r\n"},{"name":"数据库","outline":"[\"SQLite\",\"nodejs 使用\"]","content":"一般使用 [sqlite3](https://github.com/mapbox/node-sqlite3)\r\n"},{"name":"数据库","outline":"[\"SQLite\",\"sql 语法\"]","content":"-- 创建表。如果存在会报错\nCREATE TABLE articles(\n  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, -- 主键，自动增长，非空\n  path VARCHAR(200),\n  content TEXT\n);\n\n-- 创建表。不存在才创建，解决报错问题\nCREATE TABLE IF NOT EXISTS articles(\n  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n  name VARCHAR(100),\n  path VARCHAR(200),\n  content TEXT\n);\n\n-- 删除 表\nDROP TABLE articles;\n\n-- 列出所有表\nSELECT name FROM SQLITE_MASTER WHERE type='table' ORDER BY name\n\n-- 查询指定表数量\nSELECT count(*) FROM sqlite_master WHERE type='table' AND name='articles';\r\n"},{"name":"数据库","outline":"[\"SQLite\",\"sql 语法\",\"函数\"]","content":""},{"name":"数据库","outline":"[\"SQLite\",\"sql 语法\",\"函数\",\"instr - 查找字符串位置\"]","content":"实现截断匹配字符串字符串\r\nsubstr 为截取字符串\r\nSELECT id,\n       path,\n       substr(content,instr(content,'数组'),20)\n  FROM articles WHERE path,content LIKE '%数组%' LIMIT 20;\n\r\n"},{"name":"数据库","outline":"[\"SQLite\",\"特殊字符转义及通配符\"]","content":"[关于sqlite的特殊字符转义及通配符](https://blog.csdn.net/ameyume/article/details/8007149)\r\n"},{"name":"数据算法","outline":"[\"uuid 通用唯一识别码\"]","content":"用来生成唯一 id\r\n[常用 uuid js 模块](https://www.npmjs.com/package/uuid)\r\n"},{"name":"数据算法","outline":"[\"加密技术\"]","content":"不可逆加密算法\n可逆加密算法\r\n[多种哈希加密算法对比](http://www.atool.org/hash.php)\r\n[常用加密js模块 crypto-js](https://www.npmjs.com/package/crypto-js)\r\n"},{"name":"混可开发 webview","outline":"[\"js 调 ios 需注意\"]","content":"不能将 ios 接口 赋变量再调用。所以下例调用将不成功\r\nwebjs = window.jshomework;//将ios的jshomework赋给其他变量\nwebjs.selectPicture()//调用ios定义的selectPicture方法\r\n"},{"name":"装机","outline":"[\"win10 - efi 装机\"]","content":""},{"name":"装机","outline":"[\"win10 - efi 装机\",\"硬盘安装\"]","content":"需先将硬盘转化为GUID，压缩出一小部分，5G即可，转成fat32格式，然后将win10 ios镜像解压进根目录，再从此硬盘启动\r\n"},{"name":"装机","outline":"[\"win10 - efi 装机\",\"关于隐藏安装盘\"]","content":"隐藏此盘，当系统安装盘。\r\n但安装时必须显示，包括驱动器编号删除的隐藏。否则无法安装。\n如果没法进系统，而且又隐藏了，可以先去pe进行显示操作（编号删除情况，pe看得到，也需删掉再加）\r\n"},{"name":"装机","outline":"[\"win10 - efi 装机\",\"制作 win10 安装盘 - U盘\"]","content":"需要 fat32 格式的U盘，然后将win10 ios镜像解压进根目录即可。然后从此U盘启动\r\n"},{"name":"装机","outline":"[\"win10 - efi 装机\",\"制作 win10 安装盘 - 移动硬盘\"]","content":"转成 GUID\r\n压缩出一小部分，5G即可，转成fat32格式，然后将win10 ios镜像解压进根目录即可。然后从此盘启动\r\n"},{"name":"规范化","outline":"[\"版本-知识点\"]","content":"举例\r\nv2.0.0-alpha.8  \nv15.0.0-beta.6  \nv15.0.0-rc.2  \r\n**前三种数字解释：**\r\n主版本号 重大更新\r\n子版本号 新增功能\r\n修正版本号 bug修复\r\n**减号后面：**\r\n广义上对测试有三个传统的称呼：alpha、beta、gamma(rc)，用来标识测试的阶段和范围。\r\nalpha 是指内测，即现在说的CB，指开发团队内部测试的版本或者有限用户体验测试版本。\r\nbeta 是指公测，即针对所有用户公开的测试版本。\r\ngamma 是指正式发布候选版，即现在说的 RC（Release Candidate）。是 beta 之后的版本，一般指是对 beta 做过一些修改\r\n-- 摘自百度百科\r\n"}]
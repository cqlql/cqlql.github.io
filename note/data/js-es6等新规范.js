window['cb_js-es6等新规范']({"outline":{"children":[{"level":1,"name":"class","children":[{"level":2,"name":"常用模式、性能","children":[]},{"level":2,"name":"基本语法","children":[]},{"level":2,"name":"继承","children":[{"level":3,"name":"速度使用","children":[]}]}]},{"level":1,"name":"Fetch 新一代 替换传统ajax","children":[]},{"level":1,"name":"let、const","children":[{"level":2,"name":"const","children":[]}]},{"level":1,"name":"Promise + async","children":[{"level":2,"name":"快速了解","children":[]},{"level":2,"name":"快速使用、语法简要说明","children":[]},{"level":2,"name":"Promise","children":[{"level":3,"name":"catch 简写","children":[]},{"level":3,"name":"then catch 执行机制","children":[]},{"level":3,"name":"then catch 都将返回 Promise 实例","children":[]},{"level":3,"name":"then 中手动抛错的正确方式","children":[]},{"level":3,"name":"resolve/reject 立即执行 then/catch 依然是异步","children":[]},{"level":3,"name":"resolve 只能传一个参数","children":[]},{"level":3,"name":"reject 传入什么，就返回什么","children":[]}]},{"level":2,"name":"Promise.all 并发，返回所有结果","children":[]},{"level":2,"name":"Promise.race 并发，返回第一个完成的结果","children":[]},{"level":2,"name":"async","children":[{"level":3,"name":"返回 Promise 对象","children":[]},{"level":3,"name":"错误处理","children":[{"level":4,"name":"捕捉方式 1: try catch","children":[]},{"level":4,"name":"捕捉方式 2: Promise 的 catch","children":[]}]},{"level":3,"name":"手动抛错","children":[]},{"level":3,"name":"await 返回的是 resolve 传的值","children":[]},{"level":3,"name":"处理并发","children":[]}]}]},{"level":1,"name":"Symbol","children":[]}],"name":"js-es6等新规范"},"content":"<section><h1 id='[\"class\"]' data-index=0>class</h1><section><h2 id='[\"class\",\"常用模式、性能\"]' data-index=1>常用模式、性能</h2><p>es6 class 常用模式:</p><pre><code class=language-js><span class=hljs-comment>// 私有成员，创建在class 外面，如果还是有其他class，使用 即时函数了</span>\n<span class=hljs-comment>// 此为目前无奈解决方案</span>\n\n<span class=hljs-comment>// 功能初始，最先执行，只执行一次</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>testInit</span>(<span class=hljs-params></span>) </span>{\n    <span class=hljs-comment>// 保证只执行一次</span>\n    testInit=<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{};\n}\n\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>test</span></span>{\n    <span class=hljs-keyword>constructor</span>(){\n\n        <span class=hljs-comment>// 公共成员，非共享</span>\n\n    }\n\n    <span class=hljs-comment>// 公共成员，共享</span>\n\n}\n</code></pre></section><section><h2 id='[\"class\",\"基本语法\"]' data-index=2>基本语法</h2><p>属性只能在constructor函数中创建</p><pre><code><span class=hljs-comment>// 定义类</span>\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>hello</span> </span>{\n\n  <span class=hljs-comment>// 构造函数，如果没有显式定义，一个空的constructor方法会被默认添加。</span>\n  <span class=hljs-keyword>constructor</span>(name) {\n    <span class=hljs-comment>// new 的时候执行</span>\n    <span class=hljs-comment>// 参数也是 new 的时候传入的</span>\n\n    <span class=hljs-keyword>this</span>.name = name;\n\n    <span class=hljs-comment>// 默认返回实例对象（即this）,完全可以指定返回另外一个对象</span>\n    <span class=hljs-comment>// return {}</span>\n  }\n\n  <span class=hljs-comment>// 方法成员</span>\n  hi() {\n    <span class=hljs-keyword>return</span> <span class=hljs-string>'hello '</span>+<span class=hljs-keyword>this</span>.name;\n  }\n}\n\n<span class=hljs-comment>// 调用。不使用new是没法调用的，会报错</span>\n<span class=hljs-keyword>let</span> p1 = <span class=hljs-keyword>new</span> hello(<span class=hljs-string>'jony'</span>);\n\n<span class=hljs-keyword>let</span> p2 = <span class=hljs-keyword>new</span> hello; <span class=hljs-comment>// 不传参也没事</span>\n</code></pre></section><section><h2 id='[\"class\",\"继承\"]' data-index=3>继承</h2><section><h3 id='[\"class\",\"继承\",\"速度使用\"]' data-index=4>速度使用</h3><p>extends：继承关键字 super：执行父类的构造函数</p><pre><code><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>ColorPoint</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>Point</span> </span>{\n  <span class=hljs-keyword>constructor</span>(x, y, color) {\n    <span class=hljs-keyword>super</span>(x, y); <span class=hljs-comment>// 调用父类的constructor(x, y)</span>\n    <span class=hljs-keyword>this</span>.color = color;\n  } \n}</code></pre></section></section></section><section><h1 id='[\"Fetch 新一代 替换传统ajax\"]' data-index=5>Fetch 新一代 替换传统ajax</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API>Fetch 概念</a></p><p><a href=https://github.github.io/fetch/ >fetch 实现库，兼容不支持 fetch 情况</a><br><a href=https://www.npmjs.com/package/whatwg-fetch>npm：whatwg-fetch</a></p><p><a href=https://segmentfault.com/a/1190000003810652>Fetch 使用问题解决</a></p></section><section><h1 id='[\"let、const\"]' data-index=6>let、const</h1><section><h2 id='[\"let、const\",\"const\"]' data-index=7>const</h2><p>不能将其他值付给变量。但是可以更改值的成员</p><pre><code class=language-js><span class=hljs-keyword>const</span> a = {}\na.b = <span class=hljs-number>123</span> <span class=hljs-comment>// 允许</span>\na = <span class=hljs-number>123</span> <span class=hljs-comment>// 不允许</span></code></pre></section></section><section><h1 id='[\"Promise + async\"]' data-index=8>Promise + async</h1><section><h2 id='[\"Promise + async\",\"快速了解\"]' data-index=9>快速了解</h2><ol><li>Promise 一般用于函数内，作为返回值</li><li>Promise 一般结合 async 函数和使用</li></ol></section><section><h2 id='[\"Promise + async\",\"快速使用、语法简要说明\"]' data-index=10>快速使用、语法简要说明</h2><p><strong>Promise</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> fs = <span class=hljs-built_in>require</span>(<span class=hljs-string>'fs'</span>);\n\n<span class=hljs-keyword>var</span> readFile = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>fileName</span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    <span class=hljs-comment>// 此处会立即执行(同步执行)</span>\n    <span class=hljs-comment>// 强调：此处会在当前 new Promise 实例后立即执行</span>\n\n    <span class=hljs-comment>// ...异步逻辑代码</span>\n    fs.readFile(fileName, <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>error, data</span>) </span>{\n\n      <span class=hljs-comment>/*异步失败*/</span>\n      <span class=hljs-keyword>if</span> (error) <span class=hljs-keyword>return</span> reject(error);\n\n      <span class=hljs-comment>/*异步成功*/</span>\n      resolve(data);\n    });\n  });\n};\n</code></pre><p><strong>async</strong>：实际上是 Promise 的扩展</p><pre><code class=language-js><span class=hljs-keyword>var</span> asyncReadFile = <span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-comment>// 此处会立马同步执行</span>\n\n  <span class=hljs-comment>// await 返回的是 Promise 的 resolve 执行后传入的值</span>\n  <span class=hljs-keyword>var</span> f1 = <span class=hljs-keyword>await</span> readFile(<span class=hljs-string>'/etc/fstab'</span>);\n  <span class=hljs-comment>// 此处等待 await 异步执行完后才会执行</span>\n\n  <span class=hljs-keyword>var</span> f2 = <span class=hljs-keyword>await</span> readFile(<span class=hljs-string>'/etc/shells'</span>);\n  <span class=hljs-comment>// 此处等待 await 异步执行完后才会执行</span>\n\n  <span class=hljs-built_in>console</span>.log(f1.toString());\n  <span class=hljs-built_in>console</span>.log(f2.toString());\n};\n\n<span class=hljs-comment>// 异步函数执行</span>\nasyncReadFile();\n</code></pre></section><section><h2 id='[\"Promise + async\",\"Promise\"]' data-index=11>Promise</h2><section><h3 id='[\"Promise + async\",\"Promise\",\"catch 简写\"]' data-index=12>catch 简写</h3><p>2 种方式</p><pre><code class=language-js>p.then(<span class=hljs-function>(<span class=hljs-params>val</span>) =&gt;</span> <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'fulfilled:'</span>, val))\n  .catch(<span class=hljs-function>(<span class=hljs-params>err</span>) =&gt;</span> <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'rejected'</span>, err));\n\n<span class=hljs-comment>// 等同于</span>\np.then(<span class=hljs-function>(<span class=hljs-params>val</span>) =&gt;</span> <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'fulfilled:'</span>, val))\n  .then(<span class=hljs-literal>null</span>, <span class=hljs-function>(<span class=hljs-params>err</span>) =&gt;</span> <span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"rejected:\"</span>, err));</code></pre></section><section><h3 id='[\"Promise + async\",\"Promise\",\"then catch 执行机制\"]' data-index=13>then catch 执行机制</h3><ul><li>执行 resolve 后，后面的 then 都会执行，除了 catch</li><li>执行 reject 后，从 catch 开始执行，后面的 then 都会执行</li></ul><pre><code class=language-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n  setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    reject(<span class=hljs-string>'错了'</span>)\n  },<span class=hljs-number>1000</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>)\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(err)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>3</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>4</span>)\n});\n\n<span class=hljs-comment>// 输出：(等待1s)'错了'、(同步)3、(同步)4</span></code></pre><ul><li>then catch 中都可继续异步</li></ul><pre><code class=language-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n  setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    reject(<span class=hljs-string>'错了'</span>)\n  },<span class=hljs-number>1000</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>)\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(err)\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      reject(<span class=hljs-string>'继续错了'</span>)\n    },<span class=hljs-number>1000</span>)\n  })\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>3</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>4</span>)\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(err)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>5</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>6</span>)\n});\n\n<span class=hljs-comment>// (等待1s)输出：'错了'、(等待1s)'继续错了'、(同步)5、(同步)6</span></code></pre></section><section><h3 id='[\"Promise + async\",\"Promise\",\"then catch 都将返回 Promise 实例\"]' data-index=14>then catch 都将返回 Promise 实例</h3><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>get</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    resolve(<span class=hljs-string>'hi'</span>)\n  }).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>d</span>) </span>{\n    <span class=hljs-keyword>return</span> d\n  })\n}\n\n<span class=hljs-comment>// 继续 then</span>\n<span class=hljs-comment>// 因为 上一个 then 的执行返回的是 Promise</span>\n<span class=hljs-keyword>get</span>().then(function (d) {\n  <span class=hljs-built_in>console</span>.log(d)\n})</code></pre></section><section><h3 id='[\"Promise + async\",\"Promise\",\"then 中手动抛错的正确方式\"]' data-index=15>then 中手动抛错的正确方式</h3><p>实现自定义 catch 触发</p><pre><code class=language-js>axios.post(<span class=hljs-string>'/Mccard/ClassBrand/GetGroupEditModel'</span>, { <span class=hljs-attr>code</span>: equipmentCode  }).then(<span class=hljs-function>(<span class=hljs-params>{data}</span>) =&gt;</span> {\n  <span class=hljs-keyword>if</span> (data.code === <span class=hljs-number>0</span>) {\n    <span class=hljs-keyword>return</span> data.data.id\n  }\n  <span class=hljs-comment>// 手动抛错</span>\n  <span class=hljs-keyword>return</span> <span class=hljs-built_in>Promise</span>.reject(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(<span class=hljs-string>'classId 获取失败'</span>))\n}).then(<span class=hljs-function><span class=hljs-params>classId</span> =&gt;</span> {\n  <span class=hljs-comment>// 不会执行</span>\n}).catch(<span class=hljs-function><span class=hljs-params>e</span> =&gt;</span> {\n  <span class=hljs-comment>// 捕获到错误</span>\n\n  <span class=hljs-comment>// 可再抛错</span>\n  e.message += <span class=hljs-string>', 一错再错'</span>\n  <span class=hljs-keyword>return</span> <span class=hljs-built_in>Promise</span>.reject(e)\n}).catch(<span class=hljs-function><span class=hljs-params>e</span> =&gt;</span> {\n  <span class=hljs-comment>// 依然可以捕获</span>\n  <span class=hljs-built_in>console</span>.dir(e)\n})\n</code></pre></section><section><h3 id='[\"Promise + async\",\"Promise\",\"resolve/reject 立即执行 then/catch 依然是异步\"]' data-index=16>resolve/reject 立即执行 then/catch 依然是异步</h3><pre><code class=language-js>(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>) <span class=hljs-comment>// 同步</span>\n  resolve() <span class=hljs-comment>// 直接执行</span>\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>3</span>) <span class=hljs-comment>// 同步</span>\n})).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'处理'</span>) <span class=hljs-comment>// 异步</span>\n  <span class=hljs-keyword>return</span> <span class=hljs-built_in>Promise</span>.reject(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(<span class=hljs-string>'失败'</span>))\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(e) <span class=hljs-comment>// 异步</span>\n})\n<span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>)\n\n<span class=hljs-comment>// 依次输出：2，3，1，'处理'，'失败'</span></code></pre></section><section><h3 id='[\"Promise + async\",\"Promise\",\"resolve 只能传一个参数\"]' data-index=17>resolve 只能传一个参数</h3><pre><code class=language-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve</span>) </span>{\n  resolve(<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>d1, d2, d3</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(d1, d2, d3) <span class=hljs-comment>// 1 undefined undefined</span>\n})</code></pre></section><section><h3 id='[\"Promise + async\",\"Promise\",\"reject 传入什么，就返回什么\"]' data-index=18>reject 传入什么，就返回什么</h3><p>不会自动包装成一个 Error 实例</p><pre><code class=language-js><span class=hljs-comment>// 反例</span>\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n  reject(<span class=hljs-string>'err'</span>)\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(err === <span class=hljs-string>'err'</span>) <span class=hljs-comment>// true</span>\n})\n\n<span class=hljs-comment>// 正确示范</span>\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n  reject(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(<span class=hljs-string>'err'</span>))\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(err.message === <span class=hljs-string>'err'</span>) <span class=hljs-comment>// true</span>\n})</code></pre></section></section><section><h2 id='[\"Promise + async\",\"Promise.all 并发，返回所有结果\"]' data-index=19>Promise.all 并发，返回所有结果</h2><p>出错情况：返回第一个出错的结果</p><pre><code class=language-js><span class=hljs-comment>// 生成一个Promise对象的数组</span>\n<span class=hljs-keyword>const</span> promises = [<span class=hljs-number>2</span>, <span class=hljs-number>3</span>, <span class=hljs-number>5</span>, <span class=hljs-number>7</span>, <span class=hljs-number>11</span>, <span class=hljs-number>13</span>].map(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>id</span>) </span>{\n  <span class=hljs-keyword>return</span> getJSON(<span class=hljs-string>'/post/'</span> + id + <span class=hljs-string>\".json\"</span>);\n});\n\n<span class=hljs-built_in>Promise</span>.all(promises).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>posts</span>) </span>{\n  <span class=hljs-comment>// ...</span>\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>reason</span>)</span>{\n  <span class=hljs-comment>// ...</span>\n});</code></pre></section><section><h2 id='[\"Promise + async\",\"Promise.race 并发，返回第一个完成的结果\"]' data-index=20>Promise.race 并发，返回第一个完成的结果</h2><p>无论对错，都将只返回第一个完成的结果</p><pre><code class=language-js><span class=hljs-keyword>const</span> p = <span class=hljs-built_in>Promise</span>.race([\n  fetch(<span class=hljs-string>'/resource-that-may-take-a-while'</span>),\n  <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-params>()</span> =&gt;</span> reject(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(<span class=hljs-string>'request timeout'</span>)), <span class=hljs-number>5000</span>)\n  })\n]);\n\np\n.then(<span class=hljs-built_in>console</span>.log)\n.catch(<span class=hljs-built_in>console</span>.error);</code></pre></section><section><h2 id='[\"Promise + async\",\"async\"]' data-index=21>async</h2><pre><code class=language-js><span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>f</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>const</span> result = <span class=hljs-keyword>await</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      <span class=hljs-keyword>if</span> (<span class=hljs-number>0</span>) {\n        reject(<span class=hljs-string>'e111'</span>)\n      }\n      resolve(<span class=hljs-string>'111'</span>)\n    }, <span class=hljs-number>600</span>)\n  })\n}</code></pre><section><h3 id='[\"Promise + async\",\"async\",\"返回 Promise 对象\"]' data-index=22>返回 Promise 对象</h3><p>async 函数执行，将返回值包装成 Promise 对象，再返回</p><pre><code class=language-js><span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>f</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-string>'hello world'</span>;\n}\n\nf().then(<span class=hljs-function><span class=hljs-params>v</span> =&gt;</span> <span class=hljs-built_in>console</span>.log(v))\n<span class=hljs-comment>// \"hello world\"</span></code></pre></section><section><h3 id='[\"Promise + async\",\"async\",\"错误处理\"]' data-index=23>错误处理</h3><p>如果出错，将不会继续往下，直接执行 catch。如果没有 catch 捕捉，直接报错并中断执行</p><p>先创建两个</p><pre><code class=language-js></code></pre><section><h4 id='[\"Promise + async\",\"async\",\"错误处理\",\"捕捉方式 1: try catch\"]' data-index=24>捕捉方式 1: try catch</h4><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>get1</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      <span class=hljs-keyword>if</span> (<span class=hljs-number>1</span>) {\n        reject(<span class=hljs-string>'e111'</span>)\n      }\n      resolve(<span class=hljs-string>'111'</span>)\n    }, <span class=hljs-number>600</span>)\n\n  })\n}\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>get2</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      <span class=hljs-keyword>if</span> (<span class=hljs-number>1</span>) {\n        reject(<span class=hljs-string>'e222'</span>)\n      }\n      resolve(<span class=hljs-string>'222'</span>)\n    }, <span class=hljs-number>600</span>)\n  })\n}\n<span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>f</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>try</span> {\n    <span class=hljs-keyword>const</span> result = <span class=hljs-keyword>await</span> get1()\n  } <span class=hljs-keyword>catch</span> (e) {\n    <span class=hljs-built_in>console</span>.log(e)\n  }\n  <span class=hljs-keyword>await</span> get2()\n}\n\nf()</code></pre></section><section><h4 id='[\"Promise + async\",\"async\",\"错误处理\",\"捕捉方式 2: Promise 的 catch\"]' data-index=25>捕捉方式 2: Promise 的 catch</h4><pre><code class=language-js><span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>f</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>const</span> result = <span class=hljs-keyword>await</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      <span class=hljs-keyword>if</span> (<span class=hljs-number>1</span>) {\n        reject(<span class=hljs-string>'e111'</span>)\n      }\n      resolve(<span class=hljs-string>'111'</span>)\n    }, <span class=hljs-number>600</span>)\n\n  })\n  <span class=hljs-keyword>await</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      <span class=hljs-keyword>if</span> (<span class=hljs-number>1</span>) {\n        reject(<span class=hljs-string>'e222'</span>)\n      }\n      resolve(<span class=hljs-string>'222'</span>)\n    }, <span class=hljs-number>600</span>)\n\n  })\n}\n\n<span class=hljs-comment>// 捕捉错误</span>\nf().catch(<span class=hljs-function><span class=hljs-params>e</span> =&gt;</span><span class=hljs-built_in>console</span>.log(e))\n\n<span class=hljs-comment>// 或者, 既可接收返回值，又能捕获错误</span>\nf().then(<span class=hljs-function><span class=hljs-params>v</span> =&gt;</span><span class=hljs-built_in>console</span>.log(v), e =&gt;<span class=hljs-built_in>console</span>.log(e))</code></pre></section></section><section><h3 id='[\"Promise + async\",\"async\",\"手动抛错\"]' data-index=26>手动抛错</h3><p>使用 throw 即可</p><pre><code class=language-js><span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>login</span> (<span class=hljs-params>user</span>) </span>{\n  <span class=hljs-keyword>let</span> { data } = <span class=hljs-keyword>await</span> axios.post(<span class=hljs-string>'/comm/v1/token'</span>, user)\n  <span class=hljs-keyword>if</span> (data.code === <span class=hljs-number>0</span>) {\n    <span class=hljs-keyword>return</span> data.result\n  }\n  <span class=hljs-keyword>throw</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(data.message)\n}</code></pre></section><section><h3 id='[\"Promise + async\",\"async\",\"await 返回的是 resolve 传的值\"]' data-index=27>await 返回的是 resolve 传的值</h3><p>也就是 then 给函数输出的参数</p><p><strong>而 reject 返回的值</strong>需 async 执行后通过 catch，或者不接受，报错直接中断执行</p></section><section><h3 id='[\"Promise + async\",\"async\",\"处理并发\"]' data-index=28>处理并发</h3><p>借助 Promise.all</p><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>get1</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      resolve(<span class=hljs-string>'111'</span>)\n    }, <span class=hljs-number>2100</span>)\n\n  })\n}\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>get2</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      resolve(<span class=hljs-string>'222'</span>)\n    }, <span class=hljs-number>1100</span>)\n  })\n}\n\n<span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>f</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.time()\n  <span class=hljs-keyword>let</span> results = <span class=hljs-keyword>await</span> <span class=hljs-built_in>Promise</span>.all([get1(), get2()]);\n  <span class=hljs-built_in>console</span>.log(results)\n  <span class=hljs-built_in>console</span>.timeEnd()\n\n}\nf()</code></pre></section></section></section><section><h1 id='[\"Symbol\"]' data-index=29>Symbol</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol>Symbol - JavaScript | MDN</a></p><p>Symbol 解决属性冲突</p><pre><code class=language-js><span class=hljs-keyword>let</span> sym1 = <span class=hljs-built_in>Symbol</span>();\n<span class=hljs-keyword>let</span> sym2 = <span class=hljs-built_in>Symbol</span>(<span class=hljs-string>'foo'</span>);\n<span class=hljs-keyword>let</span> sym3 = <span class=hljs-built_in>Symbol</span>(<span class=hljs-string>'foo'</span>);\n\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Symbol</span>(<span class=hljs-string>\"foo\"</span>) === <span class=hljs-built_in>Symbol</span>(<span class=hljs-string>\"foo\"</span>)); <span class=hljs-comment>// false</span>\n\n<span class=hljs-keyword>let</span> obj = {\n  [sym2]: <span class=hljs-number>2</span>,\n  [sym3]: <span class=hljs-number>3</span>,\n}\n<span class=hljs-built_in>console</span>.log(obj)\n<span class=hljs-built_in>console</span>.log(obj[sym2]) <span class=hljs-comment>// 2</span>\n<span class=hljs-built_in>console</span>.log(obj[sym3]) <span class=hljs-comment>// 3</span></code></pre></section>"})
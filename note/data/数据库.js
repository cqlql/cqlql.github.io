window['cb_数据库']({"outline":{"children":[{"level":1,"name":"MongoDB","children":[{"level":2,"name":"可视化管理工具","children":[]},{"level":2,"name":"用户角色配置","children":[]},{"level":2,"name":"问题解决","children":[{"level":3,"name":"远程连接被拒绝","children":[]}]},{"level":2,"name":"Node.JS Driver","children":[]},{"level":2,"name":"nodejs mongoose 使用","children":[]}]},{"level":1,"name":"SQLite","children":[{"level":2,"name":"可视化管理工具","children":[]},{"level":2,"name":"nodejs 使用","children":[]},{"level":2,"name":"sql 语法","children":[{"level":3,"name":"函数","children":[{"level":4,"name":"instr - 查找字符串位置","children":[]}]}]},{"level":2,"name":"特殊字符转义及通配符","children":[]}]}],"name":"数据库"},"content":"<section><h1 id='[\"MongoDB\"]' data-index=0>MongoDB</h1><p><a href=https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/ >ubuntu 部署</a></p><p>关于 mongod 商用是否收费：企业版收费，社区版随便用，不收费</p><p><a href=https://docs.mongodb.com/manual/reference/program/mongod/index.html>mongod 命令</a></p><p>mongod 用来启动服务</p><p>mongo 用来输入脚本操作数据库</p><p>1.运行“locate mongo”命令查看系统默认把mongo装到了哪里</p><p><a href=https://www.cnblogs.com/caicaizi/p/6160884.html>https://www.cnblogs.com/caicaizi/p/6160884.html</a></p><p><a href=https://docs.mongodb.com/manual/reference/configuration-options/ >配置文件文档</a></p><p><a href=https://docs.mongodb.com/manual/tutorial/create-users/ >创建用户</a></p><p><a href=https://docs.mongodb.com/manual/reference/built-in-roles>用户角色</a></p><p><a href=https://www.cnblogs.com/out-of-memory/p/6810411.html>MongoDB用户角色配置</a></p><p>修改mongod.conf文件</p><pre><code class=language-conf>security:\n  authorization: enabled <span class=hljs-comment>// 启用授权</span></code></pre><p>创建用户</p><p>超级用户 db.createUser({ user: &#39;root&#39;, pwd: &#39;12345678&#39;, roles: [{ role: &#39;root&#39;, db: &#39;admin&#39; }] })</p><p>admin 用户 db.createUser(<br>{<br>user: &quot;admin&quot;,<br>pwd: &quot;12345678&quot;,<br>roles: [{role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot;}]<br>}<br>)</p><p>读写用户 db.createUser( { user: &quot;test&quot;, pwd: &quot;12345678&quot;, roles: [ { role: &quot;readWrite&quot;, db: &quot;test&quot; } ] } ) 只读用户 db.createUser( { user: &quot;test2&quot;, pwd: &quot;12345678&quot;, roles: [ { role: &quot;read&quot;, db: &quot;test&quot; } ] } )</p><p>修改权限 db.grantRolesToUser( &quot;admin&quot;, [{role:&quot;readWrite&quot;, db:&quot;test&quot;}] )</p><p>登录：db.auth(&quot;admin&quot;,&quot;12345678&quot;) db.auth(&quot;root&quot;,&quot;12345678&quot;)</p><p>新建数据库 use test 新建usr表，并添加一条数据 db.usr.insert({&#39;name&#39;:&#39;tompig&#39;});</p><p>删除用户 db.dropUser(&#39;nodercms&#39;)</p><p>显示所有用户 show users</p><section><h2 id='[\"MongoDB\",\"可视化管理工具\"]' data-index=1>可视化管理工具</h2><p>目前使用：<a href=https://robomongo.org>Robomongo</a></p><p>其中，Robo 3T 免费, Studio 3T 收费。附上一个<code>studio3t 续天.bat</code></p><pre><code class=language-sh>@<span class=hljs-built_in>echo</span> off\n<span class=hljs-built_in>ECHO</span> 重置Studio <span class=hljs-number>3</span>T的使用日期......\n<span class=hljs-keyword>FOR</span> /f \"tokens=<span class=hljs-number>1</span>,<span class=hljs-number>2</span>,* \" <span class=hljs-variable>%%i</span> <span class=hljs-keyword>IN</span> ('reg query \"HKEY_CURRENT_USER\\Software\\JavaSoft\\Prefs\\<span class=hljs-number>3</span>t\\mongochef\\enterprise\" ^| <span class=hljs-built_in>find</span> /V \"installation\" ^| <span class=hljs-built_in>find</span> /V \"HKEY\"') <span class=hljs-keyword>DO</span> <span class=hljs-built_in>ECHO</span> yes | reg add \"HKEY_CURRENT_USER\\Software\\JavaSoft\\Prefs\\<span class=hljs-number>3</span>t\\mongochef\\enterprise\" /v <span class=hljs-variable>%%i</span> /t REG_SZ /d \"\"\n<span class=hljs-built_in>ECHO</span> 重置完成, 按任意键退出......\n<span class=hljs-built_in>pause</span>&gt;<span class=hljs-built_in>nul</span>\n<span class=hljs-keyword>exit</span></code></pre></section><section><h2 id='[\"MongoDB\",\"用户角色配置\"]' data-index=2>用户角色配置</h2><p>创建普通用户步骤</p><pre><code class=language-js>use admin\ndb.createUser({ user: <span class=hljs-string>'admin'</span>, <span class=hljs-built_in>pwd</span>: <span class=hljs-string>'12345678'</span>, roles: [{ role: <span class=hljs-string>'admin'</span>, db: <span class=hljs-string>'admin'</span> }] }) // 超级用户\n// 注意，必须要先 user，再 createUser，才能使用此用户登录此数据库\nuse <span class=hljs-built_in>test</span>\ndb.createUser({ user: <span class=hljs-string>'test'</span>, <span class=hljs-built_in>pwd</span>: <span class=hljs-string>'3nk6U7H9o3Ct'</span>, roles: [{ role: <span class=hljs-string>'readWrite'</span>, db: <span class=hljs-string>'test'</span> }] })</code></pre></section><section><h2 id='[\"MongoDB\",\"问题解决\"]' data-index=3>问题解决</h2><section><h3 id='[\"MongoDB\",\"问题解决\",\"远程连接被拒绝\"]' data-index=4>远程连接被拒绝</h3><p>将 mongodb.conf 中 <code>bind_ip=127.0.0.1</code> 的那一行，修改为 <code>bind_ip=0.0.0.0</code></p><p>如果不需要远程连接，建议改回去，更安全</p><p>mongod.conf 默认位置：<code>/etc/mongod.conf</code></p><p>可通过进程看到</p><pre><code class=language-sh><span class=hljs-comment># 查看 mongo 进程</span>\n<span class=hljs-attribute>ps</span> -aux | grep mongo</code></pre></section></section><section><h2 id='[\"MongoDB\",\"Node.JS Driver\"]' data-index=5>Node.JS Driver</h2><p><a href=http://mongodb.github.io/node-mongodb-native/ >mongodb</a>，这个是基础，官方维护</p><p><a href=https://mongoosejs.com/ >mongoose</a>，基于 mongodb 封装，拥有对象模型，一般用这个</p></section><section><h2 id='[\"MongoDB\",\"nodejs mongoose 使用\"]' data-index=6>nodejs mongoose 使用</h2><pre><code class=language-js><span class=hljs-keyword>var</span> mongoose = <span class=hljs-built_in>require</span>(<span class=hljs-string>'mongoose'</span>);\nmongoose.connect(<span class=hljs-string>'mongodb://localhost:27017/wcard'</span>, {<span class=hljs-attr>useNewUrlParser</span>: <span class=hljs-literal>true</span>});\n<span class=hljs-keyword>var</span> db = mongoose.connection;\ndb.on(<span class=hljs-string>'error'</span>, <span class=hljs-built_in>console</span>.error.bind(<span class=hljs-built_in>console</span>, <span class=hljs-string>'connection error:'</span>));\ndb.once(<span class=hljs-string>'open'</span>, <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-comment>// we're connected!</span>\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'mongobd 连接成功!'</span>)\n});\n\n<span class=hljs-keyword>var</span> kittySchema = <span class=hljs-keyword>new</span> mongoose.Schema({\n  <span class=hljs-attr>item</span>: <span class=hljs-built_in>String</span>,\n  <span class=hljs-attr>qty</span>: <span class=hljs-built_in>Number</span>\n});\n\n<span class=hljs-comment>// var Kitten = mongoose.model('Kitten', kittySchema);</span>\n<span class=hljs-comment>// var silence = new Kitten({ name: 'Silence' });</span>\n<span class=hljs-comment>// console.log(silence.name); // 'Silence'</span>\n<span class=hljs-comment>// <span class=hljs-doctag>NOTE:</span> methods must be added to the schema before compiling it with mongoose.model()</span>\n<span class=hljs-comment>// kittySchema.methods.speak = function () {</span>\n<span class=hljs-comment>//   var greeting = this.name</span>\n<span class=hljs-comment>//     ? \"Meow name is \" + this.name</span>\n<span class=hljs-comment>//     : \"I don't have a name\";</span>\n<span class=hljs-comment>//   console.log(greeting);</span>\n<span class=hljs-comment>// }</span>\n\n<span class=hljs-keyword>var</span> Kitten = mongoose.model(<span class=hljs-string>'adoniswinner'</span>, kittySchema, <span class=hljs-string>'adoniswinner'</span>);\n<span class=hljs-keyword>var</span> fluffy = <span class=hljs-keyword>new</span> Kitten({ <span class=hljs-attr>item</span>: <span class=hljs-string>'fluffy'</span> });\n<span class=hljs-comment>// // fluffy.speak(); // \"Meow name is fluffy\"  </span>\n\nfluffy.save(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err, fluffy</span>) </span>{\n  <span class=hljs-keyword>if</span> (err) <span class=hljs-keyword>return</span> <span class=hljs-built_in>console</span>.error(err);\n  <span class=hljs-comment>// fluffy.speak();</span>\n});\n<span class=hljs-comment>// var Person = mongoose.model('Person', yourSchema);</span>\n\n<span class=hljs-comment>// find each person with a last name matching 'Ghost', selecting the `name` and `occupation` fields</span>\nKitten.find({}, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err, person</span>) </span>{\n  <span class=hljs-keyword>if</span> (err) <span class=hljs-keyword>return</span> handleError(err);\n  <span class=hljs-comment>// Prints \"Space Ghost is a talk show host\".</span>\n  <span class=hljs-built_in>console</span>.log(person)\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'%s %s is a %s.'</span>, person.item, person.qty, person.qty);\n})</code></pre></section></section><section><h1 id='[\"SQLite\"]' data-index=7>SQLite</h1><section><h2 id='[\"SQLite\",\"可视化管理工具\"]' data-index=8>可视化管理工具</h2><p><a href=https://blog.csdn.net/qq_27248989/article/details/80279585>SQLite可视化管理工具汇总(更新中)</a></p><p>目前熟悉使用：<a href=\"https://sqlitestudio.pl/index.rvt?act=download\">SQLiteStudio</a></p></section><section><h2 id='[\"SQLite\",\"nodejs 使用\"]' data-index=9>nodejs 使用</h2><p>一般使用 <a href=https://github.com/mapbox/node-sqlite3>sqlite3</a></p></section><section><h2 id='[\"SQLite\",\"sql 语法\"]' data-index=10>sql 语法</h2><pre><code class=language-sql>-- 创建表。如果存在会报错\nCREATE TABLE articles(\n  id INTEGER PRIMARY KEY AUTOINCREMENT <span class=hljs-keyword>NOT</span> NULL, -- 主键，自动增长，非空\n  <span class=hljs-built_in>path</span> VARCHAR(<span class=hljs-number>200</span>),\n  content TEXT\n);\n\n-- 创建表。不存在才创建，解决报错问题\nCREATE TABLE <span class=hljs-keyword>IF</span> <span class=hljs-keyword>NOT</span> EXISTS articles(\n  id INTEGER PRIMARY KEY AUTOINCREMENT <span class=hljs-keyword>NOT</span> NULL,\n  name VARCHAR(<span class=hljs-number>100</span>),\n  <span class=hljs-built_in>path</span> VARCHAR(<span class=hljs-number>200</span>),\n  content TEXT\n);\n\n-- 删除 表\nDROP TABLE articles;\n\n-- 列出所有表\nSELECT name FROM SQLITE_MASTER WHERE <span class=hljs-built_in>type</span>='table' ORDER BY name\n\n-- 查询指定表数量\nSELECT count(*) FROM sqlite_master WHERE <span class=hljs-built_in>type</span>='table' AND name='articles';</code></pre><section><h3 id='[\"SQLite\",\"sql 语法\",\"函数\"]' data-index=11>函数</h3><section><h4 id='[\"SQLite\",\"sql 语法\",\"函数\",\"instr - 查找字符串位置\"]' data-index=12>instr - 查找字符串位置</h4><p>实现截断匹配字符串字符串</p><p>substr 为截取字符串</p><pre><code class=language-sql><span class=hljs-attribute>SELECT</span> id,\n       path,\n       substr(content,instr(content,<span class=hljs-string>'数组'</span>),<span class=hljs-number>20</span>)\n  FROM articles WHERE path,content LIKE <span class=hljs-string>'%数组%'</span> LIMIT <span class=hljs-number>20</span>;\n</code></pre></section></section></section><section><h2 id='[\"SQLite\",\"特殊字符转义及通配符\"]' data-index=13>特殊字符转义及通配符</h2><p><a href=https://blog.csdn.net/ameyume/article/details/8007149>关于sqlite的特殊字符转义及通配符</a></p></section></section>"})
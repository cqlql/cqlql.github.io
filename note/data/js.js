window['cb_js']({"outline":{"children":[{"index":0,"level":1,"name":"性能","children":[{"index":1,"level":2,"name":"变量","children":[]},{"index":2,"level":2,"name":"函数","children":[]}]},{"index":3,"level":1,"name":"可隐式转换为 true/ false 的值","children":[]},{"index":4,"level":1,"name":"Ajax(XMLHttpRequest)","children":[]},{"index":5,"level":1,"name":"console 控制台","children":[{"index":6,"level":2,"name":"耗时查看。","children":[]},{"index":7,"level":2,"name":"分组","children":[]},{"index":8,"level":2,"name":"换行写法 + 变色","children":[]}]},{"index":9,"level":1,"name":"Date 时间日期","children":[{"index":10,"level":2,"name":"ios &quot;-&quot; 号连接问题","children":[]},{"index":11,"level":2,"name":"取天总数","children":[]}]},{"index":12,"level":1,"name":"Function 函数","children":[{"index":13,"level":2,"name":"变量、函数提升的区别","children":[]}]},{"index":14,"level":1,"name":"Math 数学，Number 处理","children":[{"index":15,"level":2,"name":"数位处理","children":[{"index":16,"level":3,"name":"去小数","children":[{"index":17,"level":4,"name":"直接去，黑魔法","children":[]},{"index":18,"level":4,"name":"向前取整","children":[]},{"index":19,"level":4,"name":"向后取整","children":[]},{"index":20,"level":4,"name":"四舍五入","children":[]}]},{"index":21,"level":3,"name":"保留指定位小数","children":[]}]},{"index":22,"level":2,"name":"随机数 random","children":[]},{"index":23,"level":2,"name":"平方","children":[]},{"index":24,"level":2,"name":"幂/平方","children":[]},{"index":25,"level":2,"name":"平方根，立方根","children":[]},{"index":26,"level":2,"name":"角度 与 弧度","children":[]},{"index":27,"level":2,"name":"直角三角形","children":[{"index":28,"level":3,"name":"所有 相关 函数","children":[]},{"index":29,"level":3,"name":"边的比值-正弦 余弦 正切","children":[]},{"index":30,"level":3,"name":"角度获取-反正弦 反余弦 反正切","children":[]}]},{"index":31,"level":2,"name":"圆","children":[{"index":32,"level":3,"name":"PI","children":[]}]},{"index":33,"level":2,"name":"绝对值","children":[]},{"index":34,"level":2,"name":"取最大/小值","children":[]},{"index":35,"level":2,"name":"e，某数乘10的n次方","children":[]},{"index":36,"level":2,"name":"一些应用","children":[{"index":37,"level":3,"name":"3点算角度","children":[]}]}]},{"index":38,"level":1,"name":"Object","children":[{"index":39,"level":2,"name":"JSON字符串 -&gt; JS对象","children":[]},{"index":40,"level":2,"name":"删除操作","children":[]},{"index":41,"level":2,"name":"快速效率查找实现","children":[]},{"index":42,"level":2,"name":"Object.assign()","children":[{"index":43,"level":3,"name":"合并","children":[]},{"index":44,"level":3,"name":"copy","children":[]}]},{"index":45,"level":2,"name":"Object.create() 创建原型对象","children":[]},{"index":46,"level":2,"name":"Object.defineProperties() 定义属性的新方式","children":[]},{"index":47,"level":2,"name":"成员遍历","children":[{"index":48,"level":3,"name":"for...in","children":[]},{"index":49,"level":3,"name":"Object.keys","children":[]},{"index":50,"level":3,"name":"getOwnPropertyNames","children":[]}]}]},{"index":51,"level":1,"name":"String 字符串","children":[{"index":52,"level":2,"name":"取索引","children":[]},{"index":53,"level":2,"name":"编码、解码","children":[{"index":54,"level":3,"name":"js数据编解码","children":[]},{"index":55,"level":3,"name":"url参数编码解码","children":[]},{"index":56,"level":3,"name":"url编码解码","children":[]},{"index":57,"level":3,"name":"对应的php编码解码","children":[]}]},{"index":58,"level":2,"name":"字符串比较","children":[]},{"index":59,"level":2,"name":"空字符串","children":[]},{"index":60,"level":2,"name":"length","children":[]},{"index":61,"level":2,"name":"子字符获取","children":[]},{"index":62,"level":2,"name":"子串获取","children":[{"index":63,"level":3,"name":"substring","children":[{"index":64,"level":4,"name":"语法","children":[]},{"index":65,"level":4,"name":"示例说明","children":[]},{"index":66,"level":4,"name":"兼容性","children":[]}]},{"index":67,"level":3,"name":"substr","children":[{"index":68,"level":4,"name":"语法","children":[]},{"index":69,"level":4,"name":"示例说明","children":[]},{"index":70,"level":4,"name":"兼容性","children":[]}]}]},{"index":71,"level":2,"name":"String(数字) Number 互转","children":[]},{"index":72,"level":2,"name":"字符串 —&gt; number","children":[{"index":73,"level":3,"name":"使用 parseFloat、parseFloat","children":[]},{"index":74,"level":3,"name":"ECMAScript 3中的 parseInt 问题","children":[]},{"index":75,"level":3,"name":"什么情况使用 parseFloat、parseInt","children":[]}]},{"index":76,"level":2,"name":"其他类型 转 字符串","children":[]},{"index":77,"level":2,"name":"字母大小写转换","children":[]},{"index":78,"level":2,"name":"去掉两头空白字符-trim","children":[]},{"index":79,"level":2,"name":"其他进制 --&gt; 十进制","children":[]},{"index":80,"level":2,"name":"字符，Unicode码","children":[{"index":81,"level":3,"name":"字符 -&gt; Unicode 的十进制数","children":[]},{"index":82,"level":3,"name":"十进制 Unicode -&gt; 字符","children":[]},{"index":83,"level":3,"name":"字符 Unicode 直接量写法","children":[]}]},{"index":84,"level":2,"name":"中文字符比较","children":[]},{"index":85,"level":2,"name":"汉字范围 十六进制写法","children":[]},{"index":86,"level":2,"name":"两种空格","children":[]}]},{"index":87,"level":1,"name":"WebSocket 或 SSE","children":[]},{"index":88,"level":1,"name":"光标操作","children":[{"index":89,"level":2,"name":"textarea input[type=text]","children":[{"index":90,"level":3,"name":"ie10+","children":[{"index":91,"level":4,"name":"光标到文本最后","children":[]},{"index":92,"level":4,"name":"实现全选","children":[]}]},{"index":93,"level":3,"name":"ie6/7/8/9","children":[]}]}]},{"index":94,"level":1,"name":"关键字","children":[{"index":95,"level":2,"name":"instanceof 判断是否属于某构造函数实例","children":[{"index":96,"level":3,"name":"判断数组类型","children":[]},{"index":97,"level":3,"name":"instanceof 不认为原始类型值的变量是对象","children":[]}]},{"index":98,"level":2,"name":"in 判断是否是某实例成员","children":[]}]},{"index":99,"level":1,"name":"其他","children":[{"index":100,"level":2,"name":"任务链 赋值","children":[]},{"index":101,"level":2,"name":"测试表达式执行顺序","children":[]},{"index":102,"level":2,"name":"if/for 大括号是否创建了域？","children":[]},{"index":103,"level":2,"name":"eval","children":[]}]},{"index":104,"level":1,"name":"变量提升 函数提升","children":[]},{"index":105,"level":1,"name":"定时器","children":[{"index":106,"level":2,"name":"setInterval(fn, ms)","children":[]}]},{"index":107,"level":1,"name":"异常处理","children":[{"index":108,"level":2,"name":"throw 手动抛异常","children":[{"index":109,"level":3,"name":"语法","children":[]},{"index":110,"level":3,"name":"示例","children":[]}]},{"index":111,"level":2,"name":"异常捕获","children":[]},{"index":112,"level":2,"name":"Error","children":[]},{"index":113,"level":2,"name":"try catch 是否可捕获函数中的错误","children":[]}]},{"index":114,"level":1,"name":"循环","children":[{"index":115,"level":2,"name":"for","children":[{"index":116,"level":3,"name":"跳出循环的方式","children":[]}]},{"index":117,"level":2,"name":"for/in","children":[]},{"index":118,"level":2,"name":"break：用于 跳出循环或 switch。(if除外)","children":[]},{"index":119,"level":2,"name":"continue：不再往下执行，直接下一次循环","children":[]}]},{"index":120,"level":1,"name":"数组","children":[{"index":121,"level":2,"name":"创建","children":[]},{"index":122,"level":2,"name":"length","children":[]},{"index":123,"level":2,"name":"取成员","children":[{"index":124,"level":3,"name":"取单个,一般获取","children":[]},{"index":125,"level":3,"name":"取单个,带删除的获取 shift、pop、splice","children":[]},{"index":126,"level":3,"name":"取多个,带删除的获取 splice","children":[]},{"index":127,"level":3,"name":"取多个，复制形式获取-slice","children":[]}]},{"index":128,"level":2,"name":"增成员","children":[{"index":129,"level":3,"name":"追加","children":[]},{"index":130,"level":3,"name":"指定位置增加","children":[]}]},{"index":131,"level":2,"name":"删成员","children":[{"index":132,"level":3,"name":"使用delete操作符","children":[]},{"index":133,"level":3,"name":"通过设置length","children":[]},{"index":134,"level":3,"name":"删头尾，一次删一个","children":[]},{"index":135,"level":3,"name":"指定范围删除，一次可删多个","children":[]},{"index":136,"level":3,"name":"根据索引删除-使用splice","children":[]}]},{"index":137,"level":2,"name":"改成员","children":[]},{"index":138,"level":2,"name":"转换","children":[{"index":139,"level":3,"name":"字符串转数组-split","children":[]},{"index":140,"level":3,"name":"数组转字符串-join","children":[]},{"index":141,"level":3,"name":"集合转数组-slice技巧","children":[]},{"index":142,"level":3,"name":"数组转字符串-toString","children":[]}]},{"index":143,"level":2,"name":"splice 增删详解","children":[]},{"index":144,"level":2,"name":"slice-复制数组","children":[]},{"index":145,"level":2,"name":"concat-合并数组","children":[]},{"index":146,"level":2,"name":"sort 排序","children":[{"index":147,"level":3,"name":"默认排序，将按字符排序","children":[]},{"index":148,"level":3,"name":"自定义排序","children":[]},{"index":149,"level":3,"name":"有返回值","children":[]}]},{"index":150,"level":2,"name":"reverse 数组反转","children":[]},{"index":151,"level":2,"name":"查找值，取值的索引-indexOf","children":[]},{"index":152,"level":2,"name":"查找值，是否包含指定值-includes","children":[]},{"index":153,"level":2,"name":"数组类型判断","children":[]},{"index":154,"level":2,"name":"遍历迭代","children":[{"index":155,"level":3,"name":"every和some : 是否满足","children":[]},{"index":156,"level":3,"name":"filter","children":[]},{"index":157,"level":3,"name":"forEach","children":[]},{"index":158,"level":3,"name":"map","children":[{"index":159,"level":4,"name":"语法","children":[]},{"index":160,"level":4,"name":"参数","children":[]},{"index":161,"level":4,"name":"示例","children":[]},{"index":162,"level":4,"name":"兼容性","children":[]}]},{"index":163,"level":3,"name":"reduce、reduceRight(相反)","children":[]}]},{"index":164,"level":2,"name":"类型","children":[{"index":165,"level":3,"name":"es5 方式","children":[]},{"index":166,"level":3,"name":"全兼容方式","children":[]},{"index":167,"level":3,"name":"不推荐使用","children":[]}]},{"index":168,"level":2,"name":"delete","children":[]},{"index":169,"level":2,"name":"关于直接赋undefined与delete操作区别讨论","children":[]},{"index":170,"level":2,"name":"取最大/小值","children":[]},{"index":171,"level":2,"name":"数组类型检测","children":[]},{"index":172,"level":2,"name":"valueOf 返回数组对象本身","children":[]}]},{"index":173,"level":1,"name":"正则表达式","children":[{"index":174,"level":2,"name":"相关方法","children":[{"index":175,"level":3,"name":"汇总","children":[]},{"index":176,"level":3,"name":"验证 RegExp.prototype.test","children":[]},{"index":177,"level":3,"name":"替换 String.prototype.replace()","children":[]},{"index":178,"level":3,"name":"查找","children":[{"index":179,"level":4,"name":"RegExp.prototype.exec()","children":[]},{"index":180,"level":4,"name":"String.prototype.match()","children":[]}]}]},{"index":181,"level":2,"name":"对象创建","children":[]},{"index":182,"level":2,"name":"修饰符","children":[]},{"index":183,"level":2,"name":"括号的多种意义","children":[{"index":184,"level":3,"name":"<code>(pattern)</code> 获取指定匹配","children":[]},{"index":185,"level":3,"name":"<code>(?:pattern)</code>","children":[]},{"index":186,"level":3,"name":"用于字符组合","children":[]},{"index":187,"level":3,"name":"<code>()</code> + <code>|</code>。子表达式 + 多个","children":[]}]},{"index":188,"level":2,"name":"收集","children":[{"index":189,"level":3,"name":"双字节字符个数","children":[]},{"index":190,"level":3,"name":"去掉http部分","children":[]},{"index":191,"level":3,"name":"去掉HTML标签","children":[]},{"index":192,"level":3,"name":"匹配是否以某标签 开头/结尾","children":[]},{"index":193,"level":3,"name":"去 html 属性","children":[]},{"index":194,"level":3,"name":"取后缀","children":[]},{"index":195,"level":3,"name":"不包含指定字符串","children":[]},{"index":196,"level":3,"name":"实现匹配字符串前面追加","children":[]},{"index":197,"level":3,"name":"取url文件名，包括后缀","children":[]},{"index":198,"level":3,"name":"文件类型过滤","children":[]},{"index":199,"level":3,"name":"手机号码","children":[]},{"index":200,"level":3,"name":"E-mail","children":[]},{"index":201,"level":3,"name":"html节","children":[]},{"index":202,"level":3,"name":"字符范围","children":[]}]}]},{"index":203,"level":1,"name":"注释","children":[{"index":204,"level":2,"name":"函数注释约定","children":[]}]},{"index":205,"level":1,"name":"类型、值和变量","children":[{"index":206,"level":2,"name":"类型获取 typeof","children":[]},{"index":207,"level":2,"name":"类型获取 toString 万能方式","children":[]},{"index":208,"level":2,"name":"类型判断","children":[{"index":209,"level":3,"name":"数组判断","children":[]},{"index":210,"level":3,"name":"isNaN 非数字判断","children":[]}]},{"index":211,"level":2,"name":"类型转换","children":[{"index":212,"level":3,"name":"--&gt; Boolean","children":[]},{"index":213,"level":3,"name":"--&gt; Number","children":[]}]},{"index":214,"level":2,"name":"null和undefined","children":[{"index":215,"level":3,"name":"是否可被重写","children":[{"index":216,"level":4,"name":"undefined 在作用域中可重写","children":[]},{"index":217,"level":4,"name":"null 不会被重写","children":[]}]}]},{"index":218,"level":2,"name":"NaN","children":[]}]},{"index":219,"level":1,"name":"编辑器编码规范配置","children":[]},{"index":220,"level":1,"name":"运算符","children":[{"index":221,"level":2,"name":"++ --","children":[]},{"index":222,"level":2,"name":"void","children":[]}]}],"name":"js"},"content":"<section><h1 id=性能 data-index=0>性能</h1><section><h2 id=变量 data-index=1>变量</h2><p>浏览器解析<strong>局部变量</strong>要比解析<strong>全局变量</strong>快，当然，比<strong>嵌套属性</strong>更快</p><p>所以，将全局变量或者嵌套属性赋值为局部变量性能更好</p></section><section><h2 id=函数 data-index=2>函数</h2><p>构造函数中最好不要有函数声明，这样，new 完之后，所占内存应该会被回收</p></section></section><section><h1 id=\"可隐式转换为 true/ false 的值\" data-index=3>可隐式转换为 true/ false 的值</h1><p><strong>表示false：</strong> undefined、null、NaN、0、&#39;&#39;</p><p><strong>表示true：</strong> 其余的都是 true</p></section><section><h1 id=Ajax(XMLHttpRequest) data-index=4>Ajax(XMLHttpRequest)</h1><pre><code class=language-js><span class=hljs-keyword>var</span> xhr\n<span class=hljs-keyword>if</span> (XMLHttpRequest) {\n  <span class=hljs-comment>// w3c标准创建方式。ie7+支持</span>\n  xhr = <span class=hljs-keyword>new</span> XMLHttpRequest();\n} <span class=hljs-keyword>else</span> {\n  <span class=hljs-comment>// IE5,6创建方式</span>\n  xhr = <span class=hljs-keyword>new</span> ActiveXObject(<span class=hljs-string>\"Microsoft.XMLHTTP\"</span>);\n}\n\n<span class=hljs-comment>/*\n * onreadystatechange事件 属性\n *\n * 每当AJAX对象的readyState属性改变时就会调用一次\n * readyState属性的初始值为0。表示 请求未初始化\n */</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>readystatechange</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>if</span> (xhr.readyState === <span class=hljs-number>1</span>) {\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"服务器连接已建立\"</span>)\n  } <span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (xhr.readyState === <span class=hljs-number>2</span>) {\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"请求已接收\"</span>)\n  } <span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (xhr.readyState === <span class=hljs-number>3</span>) {\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"请求处理中\"</span>)\n  }\n  <span class=hljs-comment>/**\n   * 4表示响应数据已到达浏览器端;200表示 正确的响应结果;404表示页面未找到\n   *\n   * 在此处 处理响应的结果\n   * 调用AJAX对象的responseText属性来获取响应的文本格式数据\n   * 还有一个属性 responseXML ，待测\n   *\n   */</span>\n <span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (xhr.readyState === <span class=hljs-number>4</span>) {\n   <span class=hljs-keyword>if</span> (xhr.status === <span class=hljs-number>200</span>) {\n     <span class=hljs-comment>// 如果不指定 responseType ,默认 text 格式！！！</span>\n      <span class=hljs-keyword>var</span> response = xhr.response\n      <span class=hljs-comment>// console.log(xhr.responseText)</span>\n      <span class=hljs-comment>// console.log(xhr.responseXML)</span>\n\n      <span class=hljs-comment>// android 4.4以下，ajax不会根据后台响应要求自动转换 json为对象。所以只能手动转换</span>\n      <span class=hljs-keyword>if</span> (responseType === <span class=hljs-string>'json'</span> &amp;&amp; <span class=hljs-keyword>typeof</span> response === <span class=hljs-string>'string'</span>) {\n        <span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>JSON</span>.parse(response))\n      } <span class=hljs-keyword>else</span> {\n        <span class=hljs-built_in>console</span>.log(response)\n      }\n    } <span class=hljs-keyword>else</span> {\n      <span class=hljs-built_in>console</span>.error(xhr)\n    }\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'complete'</span>)\n  }\n}\n<span class=hljs-comment>// 华为安卓机总是用老浏览器内核，设置 responseType 会报错</span>\n<span class=hljs-keyword>try</span> {\n  xhr.responseType = <span class=hljs-string>'json'</span>\n  xhr.onreadystatechange = readystatechange\n} <span class=hljs-keyword>catch</span> (e) {\n  xhr.onload = readystatechange\n}\n\n\n<span class=hljs-comment>/*\n指定提交的数据格式(可选)\n默认 text/plain\n\n相当于form表单的enctype标签属性。但不能指定为 multipart/form-data。即使指定了也无效(变成默认的text/plain)\n\n可设置的值，竖线后为 send 对应的值格式：\ntext/plain | 文本\napplication/json | '{ \"k\" : \"v\" }'\napplication/x-www-form-urlencoded | 'name=value&amp;n2=v2'\n\n值后面可指定编码格式\n */</span>\nxhr.setRequestHeader(<span class=hljs-string>\"Content-type\"</span>, <span class=hljs-string>\"application/json;charset=utf-8\"</span>);\n\nxhr.open(<span class=hljs-string>\"post\"</span>, <span class=hljs-string>\"/Default.aspx\"</span>)\n\n<span class=hljs-comment>/*\n执行提交\n\n参数即提交的数据，如果是get方式，填写null即可\n\n参数格式与 Content-type 对应\n*/</span>\n\najaxObj.send(<span class=hljs-built_in>JSON</span>.stringify({<span class=hljs-attr>data</span>: <span class=hljs-string>'测试数据'</span>}));\n</code></pre></section><section><h1 id=\"console 控制台\" data-index=5>console 控制台</h1><section><h2 id=耗时查看。 data-index=6>耗时查看。</h2><p>可用来性能测试</p><pre><code class=language-js><span class=hljs-built_in>console</span>.time(<span class=hljs-string>'small loop'</span>);\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> i = <span class=hljs-number>0</span>; i &lt; <span class=hljs-number>100000</span>; i++) {}\n<span class=hljs-built_in>console</span>.timeEnd(<span class=hljs-string>'small loop'</span>);\n<span class=hljs-comment>//small loop: 2.304ms</span></code></pre></section><section><h2 id=分组 data-index=7>分组</h2><pre><code class=language-js><span class=hljs-built_in>console</span>.group(<span class=hljs-string>\"程序日志\"</span>);\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"[07:21:36.754\"</span>);\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"[07:21:36.754\"</span>);\n<span class=hljs-built_in>console</span>.groupEnd();</code></pre></section><section><h2 id=\"换行写法 + 变色\" data-index=8>换行写法 + 变色</h2><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"换\\n行\"</span>);\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"默认部分 %c 红色部分）\"</span>, <span class=hljs-string>\"color:red\"</span>);\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>`%c vue-devtools %c Detected Vue v<span class=hljs-subst>${<span class=hljs-string>'2.0.0'</span>}</span> %c`</span>, <span class=hljs-string>\"background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff\"</span>, <span class=hljs-string>\"background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff\"</span>, <span class=hljs-string>\"background:transparent\"</span>)</code></pre></section></section><section><h1 id=\"Date 时间日期\" data-index=9>Date 时间日期</h1><section><h2 id=\"ios &quot;-&quot; 号连接问题\" data-index=10>ios &quot;-&quot; 号连接问题</h2><p>月日必须是2位，&quot;/&quot; 没有此问题。Android也没有问题</p><p>ios版本：iPhone OS 11_0_3 AppleWebKit/604.1.38 Version/11.0 Mobile/15A432 Safari/604.1</p><pre><code class=language-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>(<span class=hljs-string>'2017-1-1'</span>) <span class=hljs-comment>// 不支持</span>\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>(<span class=hljs-string>'2017-01-01'</span>) <span class=hljs-comment>// 支持</span></code></pre></section><section><h2 id=取天总数 data-index=11>取天总数</h2><p>指定年月, 天的总数</p><pre><code class=language-js><span class=hljs-comment>// month 从1 开始</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getDayCount</span> (<span class=hljs-params>year, month</span>) </span>{\n  <span class=hljs-keyword>var</span> d = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>(year, month)\n  d.setDate(<span class=hljs-number>0</span>)\n  <span class=hljs-keyword>return</span> d.getDate()\n}\n</code></pre></section></section><section><h1 id=\"Function 函数\" data-index=12>Function 函数</h1><section><h2 id=变量、函数提升的区别 data-index=13>变量、函数提升的区别</h2><p>函数是完全的提升； 变量只是 声明提升，赋值运算不会提升</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(a)\n<span class=hljs-keyword>var</span> a=<span class=hljs-number>1</span>\n<span class=hljs-built_in>console</span>.log(a)\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>a</span> (<span class=hljs-params></span>) </span>{\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>)\n}\n\n<span class=hljs-comment>// 提升后</span>\n<span class=hljs-keyword>var</span> a\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>a</span> (<span class=hljs-params></span>) </span>{\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>4</span>)\n}\n<span class=hljs-built_in>console</span>.log(a)\na=<span class=hljs-number>1</span>\n<span class=hljs-built_in>console</span>.log(a)</code></pre></section></section><section><h1 id=\"Math 数学，Number 处理\" data-index=14>Math 数学，Number 处理</h1><section><h2 id=数位处理 data-index=15>数位处理</h2><section><h3 id=去小数 data-index=16>去小数</h3><section><h4 id=直接去，黑魔法 data-index=17>直接去，黑魔法</h4><p>参数可以使字符串</p><p>参数不是数字类型：返回0</p><p>返回值类型：number</p><pre><code class=language-js>\n<span class=hljs-built_in>console</span>.log(~~<span class=hljs-number>12.123</span>) <span class=hljs-comment>// 12</span>\n<span class=hljs-built_in>console</span>.log(~~<span class=hljs-string>'-12.123'</span>) <span class=hljs-comment>// -12</span>\n<span class=hljs-built_in>console</span>.log(~~num / <span class=hljs-number>2</span>) <span class=hljs-comment>// num去小数后 在除2。如果是对结果去小数，需加个括号</span>\n<span class=hljs-built_in>console</span>.log(~~<span class=hljs-string>'-12.123px'</span>) <span class=hljs-comment>// 0 。非数字类型返回0，即 isNaN 为 false 的值</span>\n\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>'-12.123'</span>^<span class=hljs-number>0</span>) <span class=hljs-comment>// -12</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>'-12.123'</span>|<span class=hljs-number>0</span>) <span class=hljs-comment>// -12</span></code></pre></section><section><h4 id=向前取整 data-index=18>向前取整</h4><p>正数去小数后加一<br>负数直接去小数</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.ceil(<span class=hljs-number>5.1</span>)) <span class=hljs-comment>// 6</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.ceil(<span class=hljs-string>'5.1'</span>)) <span class=hljs-comment>// 6。返回 Number 类型</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.ceil(<span class=hljs-number>-5.1</span>)) <span class=hljs-comment>// -5</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.ceil(<span class=hljs-number>5.5</span>)) <span class=hljs-comment>// 6</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.ceil(<span class=hljs-number>5.0</span>)) <span class=hljs-comment>// 5。这种情况不能看成小数</span></code></pre></section><section><h4 id=向后取整 data-index=19>向后取整</h4><p>与 Math.ceil 相反</p><p>正数直接去小数<br>负数去小数后减一</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.floor(<span class=hljs-number>5.1</span>)) <span class=hljs-comment>// 5</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.floor(<span class=hljs-string>'5.1'</span>)) <span class=hljs-comment>// 5。返回 Number 类型</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.floor(<span class=hljs-number>-5.1</span>)) <span class=hljs-comment>// -6</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.floor(<span class=hljs-number>5.5</span>)) <span class=hljs-comment>// 5</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.floor(<span class=hljs-number>5.0</span>)) <span class=hljs-comment>// 5。这种情况不能看成小数</span></code></pre></section><section><h4 id=四舍五入 data-index=20>四舍五入</h4><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.round(<span class=hljs-number>5.1</span>)) <span class=hljs-comment>// 5</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.round(<span class=hljs-string>'5.1'</span>)) <span class=hljs-comment>// 5。返回 Number 类型</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.round(<span class=hljs-number>-5.1</span>)) <span class=hljs-comment>// -5</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.round(<span class=hljs-number>-5.6</span>)) <span class=hljs-comment>// -6</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.round(<span class=hljs-number>5.5</span>)) <span class=hljs-comment>// 6</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.round(<span class=hljs-number>5.0</span>)) <span class=hljs-comment>// 5。这种情况不能看成小数</span></code></pre></section></section><section><h3 id=保留指定位小数 data-index=21>保留指定位小数</h3><p>numObj.toFixed([digits])</p><p>返回字符串</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log((<span class=hljs-number>56.45</span>).toFixed()) <span class=hljs-comment>// '56'。参数可选，默认0，即去掉所有小数</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-number>56.456</span>).toFixed(<span class=hljs-number>2</span>)) <span class=hljs-comment>// '56.46'。 四舍五入</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-number>56</span>).toFixed(<span class=hljs-number>2</span>)) <span class=hljs-comment>// '56.00'。根据参数固定保留</span></code></pre></section></section><section><h2 id=\"随机数 random\" data-index=22>随机数 random</h2><p>获取 0~1之间的随机数。小数位大概在17位以上。20位以下。</p><pre><code class=language-js><span class=hljs-selector-tag>document</span><span class=hljs-selector-class>.write</span>(<span class=hljs-selector-tag>Math</span><span class=hljs-selector-class>.random</span>())</code></pre><p><strong>应用：</strong> 指定范围整数</p><pre><code class=language-js><span class=hljs-comment>// 0~1</span>\n~~(<span class=hljs-built_in>Math</span>.random()*<span class=hljs-number>2</span>)\n<span class=hljs-comment>// 0~5</span>\n~~(<span class=hljs-built_in>Math</span>.random()*<span class=hljs-number>6</span>)\n<span class=hljs-comment>// ...(类推)</span>\n\n<span class=hljs-comment>// 附上循环测试例子</span>\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> i = <span class=hljs-number>100</span>;i--;) {\n    <span class=hljs-built_in>console</span>.log(~~(<span class=hljs-built_in>Math</span>.random()*<span class=hljs-number>6</span>))\n}</code></pre></section><section><h2 id=平方 data-index=23>平方</h2><pre><code class=language-js><span class=hljs-comment>//参数：必须</span>\nalert(<span class=hljs-built_in>Math</span>.sqrt(<span class=hljs-number>9</span>));<span class=hljs-comment>//3</span></code></pre></section><section><h2 id=幂/平方 data-index=24>幂/平方</h2><pre><code class=language-js><span class=hljs-comment>//参数：必须</span>\nalert(<span class=hljs-built_in>Math</span>.pow(<span class=hljs-number>3</span>, <span class=hljs-number>2</span>));<span class=hljs-comment>//9，即3的2次幂</span></code></pre></section><section><h2 id=平方根，立方根 data-index=25>平方根，立方根</h2><pre><code class=language-js><span class=hljs-built_in>Math</span>.pow(<span class=hljs-number>9</span>, <span class=hljs-number>1</span>/<span class=hljs-number>2</span>)<span class=hljs-comment>//3</span>\n<span class=hljs-built_in>Math</span>.pow(<span class=hljs-number>8</span>, <span class=hljs-number>1</span>/<span class=hljs-number>3</span>)<span class=hljs-comment>//2</span></code></pre></section><section><h2 id=\"角度 与 弧度\" data-index=26>角度 与 弧度</h2><p>弧度与角度关系：π(弧度)= 180°</p><p>1角度 所代表的 弧度 是：<code>Math.PI / 180</code></p><p>1弧度 所代表的 角度 是：<code>180 / Math.PI</code></p><pre><code class=language-js><span class=hljs-comment>// 角度转弧度：</span>\n<span class=hljs-comment>// 参数：角度</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>radian</span>(<span class=hljs-params>angle</span>) </span>{\n    <span class=hljs-keyword>return</span> angle * <span class=hljs-built_in>Math</span>.PI / <span class=hljs-number>180</span>;\n}\n\n<span class=hljs-comment>// 弧度转角度：</span>\n<span class=hljs-comment>// 参数：弧度</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>angle</span>(<span class=hljs-params>radian</span>) </span>{\n    <span class=hljs-keyword>return</span> radian * <span class=hljs-number>180</span> / <span class=hljs-built_in>Math</span>.PI;\n}\n</code></pre></section><section><h2 id=直角三角形 data-index=27>直角三角形</h2><section><h3 id=\"所有 相关 函数\" data-index=28>所有 相关 函数</h3><p>Math.sin() -- 返回数字的正弦值<br>Math.cos() -- 返回数字的余弦值<br>Math.tan() -- 返回数字的正切值<br>Math.asin() -- 返回数字的反正弦值<br>Math.acos() -- 返回数字的反余弦值<br>Math.atan() -- 返回数字的反正切值<br>Math.atan2() -- 返回由x轴到点(x,y)的角度(以弧度为单位)<br>Math.PI 属性 -- 返回圆的周长与其直径的比值(圆周率π)，约等于3.1415926</p></section><section><h3 id=\"边的比值-正弦 余弦 正切\" data-index=29>边的比值-正弦 余弦 正切</h3><pre><code class=language-js><span class=hljs-built_in>Math</span>.sin(r)<span class=hljs-comment>//正弦</span>\n<span class=hljs-built_in>Math</span>.cos(r)<span class=hljs-comment>//余弦</span>\n<span class=hljs-built_in>Math</span>.tan(r)<span class=hljs-comment>//正切</span></code></pre><p><strong>参数：</strong><br>number类型，弧度值<br><strong>返回值：</strong><br>number类型，边的比值</p><p><strong>数学知识</strong><br>正弦：对比斜<br>余弦：邻比斜<br>正切：对比邻</p></section><section><h3 id=\"角度获取-反正弦 反余弦 反正切\" data-index=30>角度获取-反正弦 反余弦 反正切</h3><p>所有代码示例：</p><pre><code class=language-js><span class=hljs-selector-tag>Math</span><span class=hljs-selector-class>.asin</span>()\n<span class=hljs-selector-tag>Math</span><span class=hljs-selector-class>.acos</span>()\n<span class=hljs-selector-tag>Math</span><span class=hljs-selector-class>.atan</span>()</code></pre><p><strong>参数：</strong><br>边的比值</p><p><strong>返回值：</strong><br>弧度值</p></section></section><section><h2 id=圆 data-index=31>圆</h2><section><h3 id=PI data-index=32>PI</h3><pre><code class=language-js>alert(<span class=hljs-built_in>Math</span>.PI);<span class=hljs-comment>// 3.141592653589793。包括ie6的所有都返回这样一组数</span></code></pre></section></section><section><h2 id=绝对值 data-index=33>绝对值</h2><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.abs(<span class=hljs-number>-1</span>)) <span class=hljs-comment>// 1</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.abs(<span class=hljs-string>'-1'</span>)) <span class=hljs-comment>// 1</span></code></pre></section><section><h2 id=取最大/小值 data-index=34>取最大/小值</h2><pre><code class=language-js><span class=hljs-built_in>Math</span>.max(<span class=hljs-number>34</span>, <span class=hljs-number>23</span>, <span class=hljs-number>43</span>) <span class=hljs-comment>// 43</span>\n<span class=hljs-built_in>Math</span>.min(<span class=hljs-number>34</span>, <span class=hljs-number>23</span>, <span class=hljs-number>43</span>) <span class=hljs-comment>// 23</span>\n\n<span class=hljs-comment>// 可用来取数组最大/小值。通过 apply</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.max.apply(<span class=hljs-built_in>Math</span>, [<span class=hljs-number>34</span>, <span class=hljs-number>23</span>, <span class=hljs-number>43</span>])); <span class=hljs-comment>// 43 最大值</span>\n</code></pre></section><section><h2 id=e，某数乘10的n次方 data-index=35>e，某数乘10的n次方</h2><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-number>1e3</span>) <span class=hljs-comment>// 1000 即1*Math.pow(10, 3)</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-number>2e3</span>) <span class=hljs-comment>// 2000 即2*Math.pow(10, 3)</span></code></pre></section><section><h2 id=一些应用 data-index=36>一些应用</h2><section><h3 id=3点算角度 data-index=37>3点算角度</h3><p>使用余弦定理</p></section></section></section><section><h1 id=Object data-index=38>Object</h1><section><h2 id=\"JSON字符串 -&gt; JS对象\" data-index=39>JSON字符串 -&gt; JS对象</h2><p>通过 JSON.parse</p><p>通过 eval，不推荐</p><pre><code class=language-js><span class=hljs-keyword>var</span> objs = <span class=hljs-built_in>eval</span>(<span class=hljs-string>'({ \"border\": \"2px #0068b7 solid\", \"height\": \"200px\" })'</span>);</code></pre></section><section><h2 id=删除操作 data-index=40>删除操作</h2></section><section><h2 id=快速效率查找实现 data-index=41>快速效率查找实现</h2><p>配合delete，for in，js空对象可做 数据字典，实现快速效率查找</p><p>实践：复选框绑定id，复选框对应空对象，空对象中的已有项可定位原数据</p></section><section><h2 id=Object.assign() data-index=42>Object.assign()</h2><section><h3 id=合并 data-index=43>合并</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign>Object.assign() - JavaScript | MDN</a></p><p>将修改源对象</p><pre><code class=language-js><span class=hljs-keyword>var</span> obj = { <span class=hljs-attr>a</span>: <span class=hljs-number>1</span> };\n<span class=hljs-built_in>Object</span>.assign(obj, {<span class=hljs-attr>b</span>:<span class=hljs-number>2</span>});\n<span class=hljs-comment>// obj 对象变了</span>\n<span class=hljs-built_in>console</span>.log(obj); <span class=hljs-comment>// { a: 1, b: 2 }</span></code></pre></section><section><h3 id=copy data-index=44>copy</h3><pre><code class=language-js><span class=hljs-keyword>var</span> obj = { <span class=hljs-attr>a</span>: <span class=hljs-number>1</span> };\n<span class=hljs-keyword>var</span> copy = <span class=hljs-built_in>Object</span>.assign({}, obj);\n<span class=hljs-built_in>console</span>.log(copy); <span class=hljs-comment>// { a: 1 }</span></code></pre></section></section><section><h2 id=\"Object.create() 创建原型对象\" data-index=45>Object.create() 创建原型对象</h2><p>将目标对象的属性生成到新对象的原型上去</p><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create>Object.create() - JavaScript | MDN</a></p><pre><code class=language-js><span class=hljs-keyword>let</span> obj = <span class=hljs-built_in>Object</span>.create({<span class=hljs-attr>bar</span>: <span class=hljs-number>123</span>})\n<span class=hljs-built_in>console</span>.log(obj.__proto__.bar === <span class=hljs-number>123</span>) <span class=hljs-comment>// true</span></code></pre></section><section><h2 id=\"Object.defineProperties() 定义属性的新方式\" data-index=46>Object.defineProperties() 定义属性的新方式</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties>Object.defineProperties() - JavaScript | MDN</a></p><pre><code class=language-js><span class=hljs-keyword>var</span> obj = {};\n<span class=hljs-built_in>Object</span>.defineProperties(obj, {\n  <span class=hljs-string>'property1'</span>: {\n    <span class=hljs-attr>value</span>: <span class=hljs-literal>true</span>,\n    <span class=hljs-attr>writable</span>: <span class=hljs-literal>true</span>\n  },\n  <span class=hljs-string>'property2'</span>: {\n    <span class=hljs-attr>value</span>: <span class=hljs-string>'Hello'</span>,\n    <span class=hljs-attr>writable</span>: <span class=hljs-literal>false</span>\n  },\n  <span class=hljs-string>'fun'</span>: {\n    <span class=hljs-attr>value</span>: <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{},\n    <span class=hljs-attr>writable</span>: <span class=hljs-literal>false</span>\n  }\n});\n<span class=hljs-built_in>console</span>.log(obj.property2) <span class=hljs-comment>// Hello</span>\n<span class=hljs-built_in>console</span>.log(obj.fun) <span class=hljs-comment>// 这是一个值为函数的属性</span></code></pre></section><section><h2 id=成员遍历 data-index=47>成员遍历</h2><section><h3 id=for...in data-index=48>for...in</h3><p>包括 <strong>可枚举、原型上</strong> 属性</p></section><section><h3 id=Object.keys data-index=49>Object.keys</h3><p>包括 <strong>可枚举</strong> 属性<br>不包括 <strong>原型上</strong> 的属性</p><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys>Object.keys() - JavaScript | MDN</a></p><p>Object.keys 不包括原型上的属性，for...in 还将枚举原型上的属性</p><p>JSON.stringify()：也只串行化对象自身的可枚举的属性</p><pre><code class=language-js><span class=hljs-comment>// simple array</span>\n<span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'a'</span>, <span class=hljs-string>'b'</span>, <span class=hljs-string>'c'</span>];\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Object</span>.keys(arr)); <span class=hljs-comment>// console: ['0', '1', '2']</span>\n\n<span class=hljs-comment>// array like object</span>\n<span class=hljs-keyword>var</span> obj = { <span class=hljs-number>0</span>: <span class=hljs-string>'a'</span>, <span class=hljs-number>1</span>: <span class=hljs-string>'b'</span>, <span class=hljs-number>2</span>: <span class=hljs-string>'c'</span> };\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Object</span>.keys(obj)); <span class=hljs-comment>// console: ['0', '1', '2']</span></code></pre></section><section><h3 id=getOwnPropertyNames data-index=50>getOwnPropertyNames</h3><p>包括 <strong>可枚举、不可枚举</strong> 属性<br>不包括 <strong>原型上</strong> 的属性</p><pre><code class=language-js><span class=hljs-keyword>var</span> obj = {<span class=hljs-string>\"name\"</span>:<span class=hljs-string>\"Poly\"</span>, <span class=hljs-string>\"career\"</span>:<span class=hljs-string>\"it\"</span>}\n\n<span class=hljs-comment>// 此方式将创建一个不可枚举属性</span>\n<span class=hljs-built_in>Object</span>.defineProperty(obj, <span class=hljs-string>\"age\"</span>, {<span class=hljs-attr>value</span>:<span class=hljs-string>\"forever 18\"</span>, <span class=hljs-attr>enumerable</span>:<span class=hljs-literal>false</span>});\n\n<span class=hljs-comment>// 原型属性</span>\n<span class=hljs-built_in>Object</span>.prototype.protoPer1 = <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"proto\"</span>);};\n<span class=hljs-built_in>Object</span>.prototype.protoPer2 = <span class=hljs-number>2</span>;\n\n<span class=hljs-built_in>console</span>.log(\n  <span class=hljs-string>\"Object.getOwnPropertyNames: \"</span>,\n  <span class=hljs-built_in>Object</span>.getOwnPropertyNames(obj)); <span class=hljs-comment>// [\"name\", \"career\", \"age\"]</span></code></pre></section></section></section><section><h1 id=\"String 字符串\" data-index=51>String 字符串</h1><section><h2 id=取索引 data-index=52>取索引</h2><p>indexOf 从前往后; lastIndexOf 从后往前</p><ul><li>什么时候匹配结束：匹配成功便结束，不再继续查找</li><li>没有匹配返回值：-1</li><li>参数多个字符情况: 返回开头字符索引</li></ul><pre><code><span class=hljs-keyword>var</span> str = <span class=hljs-string>\"helloword\"</span>;\n\n<span class=hljs-comment>//从前往后</span>\nstr.indexOf(<span class=hljs-string>'ow'</span>) <span class=hljs-comment>// 4</span>\n\n<span class=hljs-comment>//从后往前</span>\nsrt.lastIndexOf(<span class=hljs-string>'ow'</span>) <span class=hljs-comment>// 6</span></code></pre></section><section><h2 id=编码、解码 data-index=53>编码、解码</h2><section><h3 id=js数据编解码 data-index=54>js数据编解码</h3><p>escape、unescape 就是完全的编码解码 兼容性:all</p></section><section><h3 id=url参数编码解码 data-index=55>url参数编码解码</h3><p>encodeURIComponent decodeURIComponent 避免#等特殊字符截断 -_.!~*&#39;() 这些符合是不会被编码解码的</p><pre><code class=language-js><span class=hljs-string>'&lt;a href=\"http://passport.baidu.com/?u='</span>+<span class=hljs-built_in>encodeURIComponent</span>(<span class=hljs-string>\"http://cang.baidu.com/bruce42\"</span>)+<span class=hljs-string>'\"&gt;退出&lt;/a&gt;'</span>;</code></pre><p>兼容性:all</p></section><section><h3 id=url编码解码 data-index=56>url编码解码</h3><p>encodeURI decodeURI 保证有特殊字符的url路径能进行访问，但现在大部分浏览器会自动对未编码的url进行编码(至于哪些浏览器，什么机制，待测)</p><p>;/?:@&amp;=+$,# 这些字符不会被编码解码</p><pre><code class=language-js>location.href=<span class=hljs-built_in>encodeURI</span>(http:<span class=hljs-comment>//cang.baidu.com/百度存储/do/s?word=xx&amp;ct=21);</span></code></pre><p>兼容性:all</p></section><section><h3 id=对应的php编码解码 data-index=57>对应的php编码解码</h3><p>rawurlencode、rawurldecode对应 encodeURIComponent decodeURIComponent urlencode()、urldecode()应该对应？encodeURI decodeURI</p></section></section><section><h2 id=字符串比较 data-index=58>字符串比较</h2><p>小返回-1，相等返回0，大返回1。可实现排序</p><pre><code class=language-js><span class=hljs-string>'吧'</span>.localeCompare(<span class=hljs-string>'啊'</span>) <span class=hljs-comment>// 1 。看来是按拼音来的，b比a大</span>\n<span class=hljs-string>'asd'</span>.localeCompare(<span class=hljs-string>'bcd'</span>) <span class=hljs-comment>// -1</span>\n</code></pre></section><section><h2 id=空字符串 data-index=59>空字符串</h2><pre><code class=language-js><span class=hljs-comment>// length 为 0</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>''</span>.length === <span class=hljs-number>0</span>) <span class=hljs-comment>// true</span>\n\n<span class=hljs-comment>// 默认转换为0</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>''</span> - <span class=hljs-number>23</span>); <span class=hljs-comment>// 相当于0-23</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>''</span> &gt; <span class=hljs-number>-1</span>); <span class=hljs-comment>// true。相当于0&gt;-1</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>''</span> === <span class=hljs-number>0</span>) <span class=hljs-comment>// false</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>''</span> == <span class=hljs-number>0</span>); <span class=hljs-comment>// true</span></code></pre><p>兼容性：all浏览器。包括严格模式</p></section><section><h2 id=length data-index=60>length</h2><p>只读属性。能获取字符串的字符个数</p></section><section><h2 id=子字符获取 data-index=61>子字符获取</h2><pre><code class=language-js><span class=hljs-keyword>var</span> str = <span class=hljs-string>'hello'</span>;\n<span class=hljs-comment>// 都是返回'h'字符。强调：依然是string类型</span>\n\n<span class=hljs-comment>// charAt 获取</span>\nalert(str.charAt(index)); <span class=hljs-comment>// 兼容所有浏览器</span>\n\n<span class=hljs-comment>// 索引 获取</span>\nalert(str[<span class=hljs-number>0</span>]); <span class=hljs-comment>// ie6\\7不兼容</span></code></pre></section><section><h2 id=子串获取 data-index=62>子串获取</h2><section><h3 id=substring data-index=63>substring</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring>substring 文档</a></p><section><h4 id=语法 data-index=64>语法</h4><pre><code><span class=hljs-selector-tag>str</span><span class=hljs-selector-class>.substring</span>(<span class=hljs-selector-tag>indexStart</span><span class=hljs-selector-attr>[, indexEnd]</span>)</code></pre></section><section><h4 id=示例说明 data-index=65>示例说明</h4><pre><code class=language-js>\n<span class=hljs-comment>// 参数2不给将获取剩下的所有字符</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substring(<span class=hljs-number>1</span>)) <span class=hljs-comment>// 'ello word'</span>\n<span class=hljs-comment>// 超过情况同上</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substring(<span class=hljs-number>1</span>, <span class=hljs-number>100</span>)) <span class=hljs-comment>// 'ello word'</span>\n\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substring(<span class=hljs-number>1</span>, <span class=hljs-number>2</span>)) <span class=hljs-comment>// 'e'</span>\n\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substring(<span class=hljs-number>0</span>, <span class=hljs-number>2</span>)) <span class=hljs-comment>// 'he'</span>\n\n<span class=hljs-comment>// 几种特殊情况</span>\n\n<span class=hljs-comment>// 超过范围情况。返回空字符串</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substring(<span class=hljs-number>100</span>)) <span class=hljs-comment>// ''</span>\n\n<span class=hljs-comment>// 2个参数都可不带。。返回原字符串</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substring()) <span class=hljs-comment>// 'hello word'</span></code></pre></section><section><h4 id=兼容性 data-index=66>兼容性</h4><p>包括ie6的所有</p></section></section><section><h3 id=substr data-index=67>substr</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr>substr 文档</a></p><section><h4 id=语法 data-index=68>语法</h4><pre><code><span class=hljs-selector-tag>str</span><span class=hljs-selector-class>.substr</span>(<span class=hljs-selector-tag>start</span><span class=hljs-selector-attr>[, length]</span>)</code></pre></section><section><h4 id=示例说明 data-index=69>示例说明</h4><pre><code class=language-js>\n<span class=hljs-comment>// 参数2不给将获取剩下的所有字符</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substr(<span class=hljs-number>1</span>)) <span class=hljs-comment>// 'ello word'</span>\n<span class=hljs-comment>// 超过情况同上</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substr(<span class=hljs-number>1</span>, <span class=hljs-number>100</span>)) <span class=hljs-comment>// 'ello word'</span>\n\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substr(<span class=hljs-number>1</span>, <span class=hljs-number>2</span>)) <span class=hljs-comment>// 'el'</span>\n\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substr(<span class=hljs-number>0</span>, <span class=hljs-number>2</span>)) <span class=hljs-comment>// 'he'</span>\n\n<span class=hljs-comment>// 几种特殊情况</span>\n\n<span class=hljs-comment>// 超过范围情况。返回空字符串</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substr(<span class=hljs-number>100</span>)) <span class=hljs-comment>// ''</span>\n\n<span class=hljs-comment>// 2个参数都可不带。。返回原字符串</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"hello word\"</span>.substr()) <span class=hljs-comment>// 'hello word'</span></code></pre></section><section><h4 id=兼容性 data-index=70>兼容性</h4><p>包括ie6的所有</p></section></section></section><section><h2 id=\"String(数字) Number 互转\" data-index=71>String(数字) Number 互转</h2><pre><code class=language-js>\n<span class=hljs-comment>// Number -&gt; String</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span> + <span class=hljs-string>''</span>) <span class=hljs-comment>// '1'。性能最好</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>String</span>(<span class=hljs-number>1</span>)) <span class=hljs-comment>// '1'。性能一般</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-number>1</span>).toString()) <span class=hljs-comment>// '1'。性能差</span>\n\n<span class=hljs-comment>// String -&gt; Number</span>\n<span class=hljs-built_in>console</span>.log(+<span class=hljs-string>'1'</span>) <span class=hljs-comment>// 性能最好</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Number</span>(<span class=hljs-string>'1'</span>)) <span class=hljs-comment>// 性能比 +1 稍差</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>'1'</span> * <span class=hljs-number>1</span>) <span class=hljs-comment>// 1 性能比 Number稍差</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>'1'</span> - <span class=hljs-number>0</span>) <span class=hljs-comment>// 1。性能与 *1 差不多</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>parseFloat</span>(<span class=hljs-string>'1'</span>)) <span class=hljs-comment>// 1。性能不佳</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>parseInt</span>(<span class=hljs-string>'1'</span>)) <span class=hljs-comment>// 1。性能不佳，与 parseFloat 差不多</span>\n\n\n<span class=hljs-comment>// 性能测试</span>\n<span class=hljs-keyword>var</span> j\n<span class=hljs-built_in>console</span>.time()\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>let</span> i = <span class=hljs-number>0</span>; i &lt; <span class=hljs-number>100000</span>; i++) {\n  j = (<span class=hljs-number>1</span>).toString()\n}\n<span class=hljs-built_in>console</span>.timeEnd()\n\n</code></pre></section><section><h2 id=\"字符串 —&gt; number\" data-index=72>字符串 —&gt; number</h2><section><h3 id=\"使用 parseFloat、parseFloat\" data-index=73>使用 parseFloat、parseFloat</h3><p>都是 window 的方法：window.parseFloat、window.parseInt</p><p>parseFloat：最多只保留 14位小数，第14位如果有，进1</p><p>兼容性：所有浏览器</p><pre><code class=language-js>\n<span class=hljs-built_in>parseInt</span>(<span class=hljs-string>'好啊'</span>) <span class=hljs-comment>// NaN</span>\n<span class=hljs-built_in>parseFloat</span>(<span class=hljs-string>'好啊'</span>) <span class=hljs-comment>// NaN</span>\n\n<span class=hljs-built_in>parseInt</span>(<span class=hljs-string>\"123.45转不了\"</span>) <span class=hljs-comment>// 123</span>\n<span class=hljs-built_in>parseFloat</span>(<span class=hljs-string>\"123.45转不了\"</span>) <span class=hljs-comment>// 123.45</span>\n</code></pre></section><section><h3 id=\"ECMAScript 3中的 parseInt 问题\" data-index=74>ECMAScript 3中的 parseInt 问题</h3><p>ECMAScript 5 中没有这一问题</p><pre><code class=language-js><span class=hljs-built_in>parseInt</span>(<span class=hljs-string>'08'</span>) <span class=hljs-comment>// 将返回0 。起始为0 的字符串将以8进制方式解析，相当于parseInt('08',8)</span>\n</code></pre><p>所以，在考虑 ECMAScript 3 环境时尽量带第二个参数 ：<code>parseInt(&#39;08&#39;,10)</code>。当然，转换的方式还有很多，比如正则</p></section><section><h3 id=\"什么情况使用 parseFloat、parseInt\" data-index=75>什么情况使用 parseFloat、parseInt</h3><p>部分数字类型，且起始情况：</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>parseFloat</span>(<span class=hljs-string>\"123你好\"</span>)) <span class=hljs-comment>// 123</span></code></pre><p>完全的数字类型使用如下方式，性能要好</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(+<span class=hljs-string>\"08\"</span>) <span class=hljs-comment>// 性能最好</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Number</span>(<span class=hljs-string>\"08\"</span>))\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"08\"</span> * <span class=hljs-number>1</span>)</code></pre></section></section><section><h2 id=\"其他类型 转 字符串\" data-index=76>其他类型 转 字符串</h2><pre><code class=language-js><span class=hljs-comment>// 兼容性：所有浏览器</span>\n\n<span class=hljs-comment>// 推荐方式</span>\n<span class=hljs-built_in>document</span>.write(<span class=hljs-number>123</span> + <span class=hljs-string>\"\"</span> + <span class=hljs-number>123</span>);\n\n<span class=hljs-comment>// 其他方式1</span>\n<span class=hljs-built_in>document</span>.write(<span class=hljs-built_in>String</span>(<span class=hljs-number>123</span>)+<span class=hljs-number>123</span>);\n\n<span class=hljs-comment>// 其他方式2</span>\n<span class=hljs-built_in>document</span>.write((<span class=hljs-number>123</span>).toString() + <span class=hljs-number>123</span>);\n</code></pre></section><section><h2 id=字母大小写转换 data-index=77>字母大小写转换</h2><pre><code class=language-js><span class=hljs-comment>//大写——&gt;小写</span>\n<span class=hljs-keyword>var</span> _info = (<span class=hljs-string>\"AAAaaa\"</span>).toLowerCase();\n\n<span class=hljs-comment>//小写——&gt;大写</span>\n<span class=hljs-keyword>var</span> _info = (<span class=hljs-string>\"AAAaaa\"</span>).toUpperCase();\n\n<span class=hljs-comment>//兼容性：all浏览器</span>\n</code></pre></section><section><h2 id=去掉两头空白字符-trim data-index=78>去掉两头空白字符-trim</h2><pre><code class=language-js>(<span class=hljs-string>'   sss        '</span>).trim()</code></pre><p>兼容性：ie9+ 、其他高级</p></section><section><h2 id=\"其他进制 --&gt; 十进制\" data-index=79>其他进制 --&gt; 十进制</h2><pre><code class=language-js><span class=hljs-built_in>parseInt</span>(<span class=hljs-string>\"589E\"</span>,<span class=hljs-number>16</span>);<span class=hljs-comment>// 某16进制字符串转10进制 。589E代表中文字符\"增\"</span>\n<span class=hljs-built_in>parseInt</span>(<span class=hljs-string>\"10\"</span>,<span class=hljs-number>8</span>); <span class=hljs-comment>//某8进制字符串转10进制</span>\n<span class=hljs-built_in>parseInt</span>(<span class=hljs-string>\"10\"</span>,<span class=hljs-number>2</span>); <span class=hljs-comment>//某2进制字符串转10进制</span>\n</code></pre></section><section><h2 id=字符，Unicode码 data-index=80>字符，Unicode码</h2><section><h3 id=\"字符 -&gt; Unicode 的十进制数\" data-index=81>字符 -&gt; Unicode 的十进制数</h3><p>返回值：编码值，number类型，十进制</p><p>兼容性：all浏览器</p><pre><code class=language-js>\n<span class=hljs-comment>// 字符 'a' 的 Unicode 值（参数不给将默认0）</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-string>'ac'</span>).charCodeAt()) <span class=hljs-comment>// 97</span>\n\n<span class=hljs-comment>// 字符 'c' 的 Unicode 值</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-string>'ac'</span>).charCodeAt(<span class=hljs-number>1</span>)) <span class=hljs-comment>// 99</span>\n\n<span class=hljs-comment>// 超出情况，返回 NaN</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-string>'ac'</span>).charCodeAt()) <span class=hljs-comment>// NaN</span></code></pre></section><section><h3 id=\"十进制 Unicode -&gt; 字符\" data-index=82>十进制 Unicode -&gt; 字符</h3><pre><code class=language-js><span class=hljs-built_in>String</span>.fromCharCode(<span class=hljs-number>49</span>);<span class=hljs-comment>// '1'</span></code></pre></section><section><h3 id=\"字符 Unicode 直接量写法\" data-index=83>字符 Unicode 直接量写法</h3><p>\\u + 16进制</p><p>直接输出显示转行后的字符</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-string>'\\u4f60\\u597d\\u554a'</span>) <span class=hljs-comment>// '你好啊'</span></code></pre><p>16进制转10进制可使用parseInt</p></section></section><section><h2 id=中文字符比较 data-index=84>中文字符比较</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare>String.prototype.localeCompare() - JavaScript | MDN</a></p><p>referenceStr.localeCompare(compareString[, locales[, options]])</p><p><strong>referenceStr 字符：</strong></p><ul><li>小，返回 -1</li><li>大 返回 1</li><li>相等 返回 0</li></ul><pre><code class=language-js><span class=hljs-keyword>let</span> referenceStr = <span class=hljs-string>'哈哈'</span> <span class=hljs-comment>// haha</span>\n<span class=hljs-keyword>let</span> compareString = <span class=hljs-string>'啊啊'</span> <span class=hljs-comment>// aa</span>\nreferenceStr.localeCompare(compareString, <span class=hljs-string>'zh'</span>); <span class=hljs-comment>// 1</span></code></pre></section><section><h2 id=\"汉字范围 十六进制写法\" data-index=85>汉字范围 十六进制写法</h2><p><strong>number</strong><br>0x4e00<br>0x9fa5</p><p><strong>字符串</strong><br>\\u4e00<br>\\u9fa5</p></section><section><h2 id=两种空格 data-index=86>两种空格</h2><p>空格符有两种，但正则表达式的 <code>\\s</code> 两种都能匹配</p><p>两个空格的 Unicode 写法</p><pre><code class=language-js>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-string>'\\u0020'</span>, <span class=hljs-string>'\\u00A0'</span>)\n</code></pre></section></section><section><h1 id=\"WebSocket 或 SSE\" data-index=87>WebSocket 或 SSE</h1><p><a href=https://www.ibm.com/developerworks/cn/web/wa-http-server-push-with-websocket-sse/index.html>SSE 比较 WebSocket</a></p></section><section><h1 id=光标操作 data-index=88>光标操作</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Range>Range - Web API 接口 | MDN</a></p><section><h2 id=\"textarea input[type=text]\" data-index=89>textarea input[type=text]</h2><section><h3 id=ie10+ data-index=90>ie10+</h3><p>属性 selectionStart、selectionEnd。可读写。通过此属性实现移动和选择</p><section><h4 id=光标到文本最后 data-index=91>光标到文本最后</h4><pre><code class=language-js>jIn[0].selectionStart = jIn[0].selectionEnd = jIn.val().length;</code></pre></section><section><h4 id=实现全选 data-index=92>实现全选</h4><pre><code class=language-js><span class=hljs-keyword>this</span>.selectionStart = <span class=hljs-number>0</span>;\n<span class=hljs-keyword>this</span>.selectionEnd = <span class=hljs-keyword>this</span>.value.length;</code></pre></section></section><section><h3 id=ie6/7/8/9 data-index=93>ie6/7/8/9</h3><p>通过操作 selection range 实现</p><p><strong>撤销当前选中</strong><code>document.selection.empty()</code></p><p><strong>创建活动区域的Range对象</strong><code>document.selection.createRange()</code></p><p><strong>对指定的 range 执行选中</strong><code>range.select()</code></p></section></section></section><section><h1 id=关键字 data-index=94>关键字</h1><section><h2 id=\"instanceof 判断是否属于某构造函数实例\" data-index=95>instanceof 判断是否属于某构造函数实例</h2><section><h3 id=判断数组类型 data-index=96>判断数组类型</h3><pre><code class=language-js><span class=hljs-keyword>var</span> arr = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>();\nalert(arr <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span>);<span class=hljs-comment>//返回true</span>\n</code></pre></section><section><h3 id=\"instanceof 不认为原始类型值的变量是对象\" data-index=97>instanceof 不认为原始类型值的变量是对象</h3><p>原始类型：undefined、null、boolean、number 和 string</p><pre><code class=language-js><span class=hljs-keyword>var</span> temp=<span class=hljs-string>\"a string for test\"</span>;   \n<span class=hljs-comment>//下面这句返回\"string\"   </span>\nalert( <span class=hljs-keyword>typeof</span> temp);   \n<span class=hljs-comment>//下面这句返回\"false\"   </span>\nalert(temp <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>String</span>); \n</code></pre></section></section><section><h2 id=\"in 判断是否是某实例成员\" data-index=98>in 判断是否是某实例成员</h2><p>包括原型上的成员</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-string>'body'</span> <span class=hljs-keyword>in</span> <span class=hljs-built_in>document</span>) <span class=hljs-comment>// true</span></code></pre></section></section><section><h1 id=其他 data-index=99>其他</h1><section><h2 id=\"任务链 赋值\" data-index=100>任务链 赋值</h2><pre><code class=language-js><span class=hljs-keyword>var</span> b, c\n<span class=hljs-keyword>var</span> a = b = c = <span class=hljs-number>100</span></code></pre></section><section><h2 id=测试表达式执行顺序 data-index=101>测试表达式执行顺序</h2><pre><code class=language-js><span class=hljs-keyword>var</span> a = [], i = <span class=hljs-number>0</span>;\na[i++] = (<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    alert(i);\n    <span class=hljs-keyword>debugger</span>\n})()</code></pre><p>先左后右，所以先执行左边的i++</p></section><section><h2 id=\"if/for 大括号是否创建了域？\" data-index=102>if/for 大括号是否创建了域？</h2><p>只有函数才有域，if/for 没有域</p><p>es6 let 变量有域</p></section><section><h2 id=eval data-index=103>eval</h2><p>调用有作用域</p><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>fun</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>var</span> j = <span class=hljs-number>20</span>;\n  <span class=hljs-built_in>eval</span>(<span class=hljs-string>'alert(j)'</span>) <span class=hljs-comment>// 成功</span>\n}\nfun()</code></pre><p>创建也有作用域</p><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>fun</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>eval</span>(<span class=hljs-string>'var i=10'</span>)\n  alert(<span class=hljs-string>'内部'</span> + i) <span class=hljs-comment>// 成功</span>\n}\nfun()\nalert(i) <span class=hljs-comment>// 报错</span></code></pre></section></section><section><h1 id=\"变量提升 函数提升\" data-index=104>变量提升 函数提升</h1><p>es6将取消</p></section><section><h1 id=定时器 data-index=105>定时器</h1><section><h2 id=\"setInterval(fn, ms)\" data-index=106>setInterval(fn, ms)</h2><p>队列机制： 每隔ms秒后，fn便增加到队列里面。如果上一个fn执行完了，立马执行队列里面的下一个fn。如果上一个执行的时间超过了几个ms秒，那么队列里面可能会堆积很多个fn等待执行</p></section></section><section><h1 id=异常处理 data-index=107>异常处理</h1><section><h2 id=\"throw 手动抛异常\" data-index=108>throw 手动抛异常</h2><p>手动让程序报错，程序将终止</p><section><h3 id=语法 data-index=109>语法</h3><pre><code><span class=hljs-keyword>throw</span> expression;</code></pre><p>expression 任意表达式</p></section><section><h3 id=示例 data-index=110>示例</h3><pre><code><span class=hljs-keyword>throw</span> <span class=hljs-string>\"Error2\"</span>; <span class=hljs-comment>// 抛出了一个值为字符串的异常</span>\n<span class=hljs-comment>// 后面的代码不会执行</span>\n\n<span class=hljs-keyword>throw</span> <span class=hljs-number>42</span>;       <span class=hljs-comment>// 抛出了一个值为整数42的异常</span>\n<span class=hljs-keyword>throw</span> <span class=hljs-literal>true</span>;     <span class=hljs-comment>// 抛出了一个值为true的异常</span></code></pre></section></section><section><h2 id=异常捕获 data-index=111>异常捕获</h2><p>阻止程序异常终止运行</p><pre><code><span class=hljs-comment>// 捕获自定义异常</span>\n<span class=hljs-keyword>try</span> {\n  <span class=hljs-keyword>throw</span> <span class=hljs-string>'错误1'</span>\n} <span class=hljs-keyword>catch</span>(e) {\n  <span class=hljs-built_in>console</span>.log(e) <span class=hljs-comment>// '错误1'</span>\n}\n\n<span class=hljs-comment>// 捕获程序异常。将抛出一个 Error 对象</span>\n<span class=hljs-keyword>try</span> {\n  a\n} <span class=hljs-keyword>catch</span>(e) {\n  <span class=hljs-built_in>console</span>.log(e) <span class=hljs-comment>// 一个 Error 对象</span>\n}\n</code></pre></section><section><h2 id=Error data-index=112>Error</h2><p>能给出代码位置信息(stack)</p><pre><code class=language-js><span class=hljs-built_in>console</span>.dir(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(<span class=hljs-string>'test'</span>))</code></pre><p>Error 子类</p><ul><li>EvalError: raised when an error occurs executing code in eval()</li><li>RangeError: raised when a numeric variable or parameter is outside of its valid range</li><li>ReferenceError: raised when de-referencing an invalid reference</li><li>SyntaxError: raised when a syntax error occurs while parsing code in eval()</li><li>TypeError: raised when a variable or parameter is not a valid type</li><li>URIError: raised when encodeURI() or decodeURI() are passed invalid parameters</li></ul></section><section><h2 id=\"try catch 是否可捕获函数中的错误\" data-index=113>try catch 是否可捕获函数中的错误</h2><p>方法内部有错误，try 中执行此方法，能捕捉到此错误吗？答案是可以</p><p>也就是说，只要在入口处 try catch，就可以保证程序不会中断运行了</p><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>test</span> (<span class=hljs-params></span>) </span>{\n  testChild()\n}\n\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>testChild</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>throw</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(<span class=hljs-string>'err'</span>)\n}\n\n<span class=hljs-keyword>try</span> {\n  test()\n}\n<span class=hljs-keyword>catch</span> (err) {\n  <span class=hljs-built_in>console</span>.log(err)\n}\n</code></pre></section></section><section><h1 id=循环 data-index=114>循环</h1><section><h2 id=for data-index=115>for</h2><section><h3 id=跳出循环的方式 data-index=116>跳出循环的方式</h3><p>通过 <code>break</code></p><p><code>return</code> 也可跳出循环，但整个函数往下都不会再执行了</p><p>疑问：if 中的 break 是否会影响 for 的跳出</p><pre><code class=language-js><span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> i = <span class=hljs-number>0</span>; i &lt; <span class=hljs-number>100</span>; i++) {\n    <span class=hljs-built_in>console</span>.log(i)\n    <span class=hljs-keyword>if</span> (<span class=hljs-literal>true</span>) {<span class=hljs-keyword>break</span>}\n}\n<span class=hljs-comment>// 只会输出 0</span></code></pre></section></section><section><h2 id=for/in data-index=117>for/in</h2><p>可以遍历对象，得到 key 值</p><p>当然也可遍历数组，会避开缺失成员</p></section><section><h2 id=\"break：用于 跳出循环或 switch。(if除外)\" data-index=118>break：用于 跳出循环或 switch。(if除外)</h2></section><section><h2 id=continue：不再往下执行，直接下一次循环 data-index=119>continue：不再往下执行，直接下一次循环</h2><p>不能 用于switch</p></section></section><section><h1 id=数组 data-index=120>数组</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array>Array - JavaScript | MDN</a></p><section><h2 id=创建 data-index=121>创建</h2><p><strong>字面量方式</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> arr = [];\n<span class=hljs-keyword>var</span> arr = [<span class=hljs-string>\"成员1\"</span>, <span class=hljs-number>2</span>];<span class=hljs-comment>//可以是不同成员</span></code></pre><p><strong>构造函数方式</strong></p><p>1、空的</p><pre><code class=language-js><span class=hljs-keyword>var</span> array = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>();</code></pre><p>2、指定长度</p><pre><code class=language-js><span class=hljs-keyword>var</span> array2 = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>);\n成员值都是<span class=hljs-literal>undefined</span>。此方式有技巧使用\n虽然值是<span class=hljs-literal>undefined</span>，但join后不会出现<span class=hljs-literal>undefined</span>字符串\n比如：\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>).join(<span class=hljs-string>''</span>) <span class=hljs-comment>// 依然返回空字符串</span>\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>).join(<span class=hljs-string>'x'</span>) <span class=hljs-comment>// 9个x</span>\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>).join(<span class=hljs-string>'&lt;li&gt;&lt;/li&gt;'</span>) <span class=hljs-comment>// 9个li标签</span></code></pre></section><section><h2 id=length data-index=122>length</h2><p>可读写属性</p><p><strong>读操作</strong> 都懂...略过</p><p><strong>写操作</strong> ==增==操作(比之前多)：相当于末尾追加了成员，初始值为undefined。非真实存在，forEach、for in 会跳过此成员</p><p>==减==操作(比之前少)：少了多少相当于 末尾删了多少<br>数组对length属性进行减少的 写操作，成员真的减少了。<br>有时候想，length属性如果没真正删除，reverse反转后是不是能把删除的反过来？而实际上，<br>reverse反转操作正常(强调：正常指并没有把删掉的成员反转过来)</p><pre><code class=language-js>div1.innerHTML = array.length;</code></pre></section><section><h2 id=取成员 data-index=123>取成员</h2><section><h3 id=取单个,一般获取 data-index=124>取单个,一般获取</h3><p>根据索引获取</p><pre><code class=language-js><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>];\n<span class=hljs-built_in>console</span>.log(arr[<span class=hljs-number>0</span>]);\n<span class=hljs-built_in>console</span>.log(arr[<span class=hljs-string>'0'</span>]);<span class=hljs-comment>// 根据以前的笔记说firefox这样不行？反正现在是行了...</span></code></pre></section><section><h3 id=\"取单个,带删除的获取 shift、pop、splice\" data-index=125>取单个,带删除的获取 shift、pop、splice</h3><p>取一个便少一个。将更改 原数组</p><p><strong>取第一个</strong></p><pre><code class=language-js><span class=hljs-selector-tag>arr</span><span class=hljs-selector-class>.shift</span>();</code></pre><p><strong>取最后一个</strong></p><pre><code class=language-js><span class=hljs-selector-tag>arr</span><span class=hljs-selector-class>.pop</span>();</code></pre><p><strong>取指定</strong> 使用splice实现</p><pre><code class=language-js><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>];\narr.splice(<span class=hljs-number>2</span>, <span class=hljs-number>1</span>);<span class=hljs-comment>// '陈'。取到了第3个成员</span>\narr;<span class=hljs-comment>// ['张', '李', '黄']</span></code></pre></section><section><h3 id=\"取多个,带删除的获取 splice\" data-index=126>取多个,带删除的获取 splice</h3><p>取多个指定成员，取多少原数组便会减多少 <code>Array.splice(开始索引,数量)</code> 返回一个新数组，装载取到的成员</p></section><section><h3 id=取多个，复制形式获取-slice data-index=127>取多个，复制形式获取-slice</h3><p>详见 <a href=%E5%A4%8D%E5%88%B6%E6%95%B0%E7%BB%84-slice>复制数组-slice</a></p></section></section><section><h2 id=增成员 data-index=128>增成员</h2><section><h3 id=追加 data-index=129>追加</h3><p>底部-push：追加一个或多个</p><pre><code class=language-js><span class=hljs-selector-tag>array</span><span class=hljs-selector-class>.push</span>(\"烧饼1\");</code></pre><p>头部-unshift：追加一个或多个</p><pre><code class=language-js>array.unshift(<span class=hljs-string>\"烧饼0\"</span>,<span class=hljs-string>\"烧饼1\"</span>);</code></pre><p>返回值 返回更改后的数组长度</p></section><section><h3 id=指定位置增加 data-index=130>指定位置增加</h3><p><strong>使用splice，真正意义上的指定位置增加</strong> 参数1：增加的位置，此位置原有的元素会往后挤 参数2：必须为0 参数3：要增加的成员，可以多个</p><pre><code><span class=hljs-keyword>var</span> arr = [<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>];\n\narr.splice(<span class=hljs-number>1</span>, <span class=hljs-number>0</span>, <span class=hljs-string>'成员1'</span>); <span class=hljs-comment>// [1, '成员1', 2, 3]</span>\narr.splice(<span class=hljs-number>2</span>, <span class=hljs-number>0</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>);\narr.splice(<span class=hljs-number>3</span>, <span class=hljs-number>0</span>, [<span class=hljs-string>'成员4'</span>, <span class=hljs-string>'成员5'</span>]); <span class=hljs-comment>// 注意，此方式没有例外，依然只添加一个成员，3索引位置是一个数组（以为会有concat特性，添加2个成员，实际不是）</span></code></pre><p><strong>使用修改方式，严格来说这还是修改</strong> 当索引大于等于length时，才是增加，否则为修改</p><pre><code><span class=hljs-keyword>var</span> arr=[];\narr[<span class=hljs-number>3</span>]=<span class=hljs-number>1</span>;\n<span class=hljs-built_in>console</span>.log(arr.length);<span class=hljs-comment>// 4</span></code></pre></section></section><section><h2 id=删成员 data-index=131>删成员</h2><section><h3 id=使用delete操作符 data-index=132>使用delete操作符</h3><p>删第一个</p><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>\"张\"</span>, <span class=hljs-string>\"李\"</span>, <span class=hljs-string>\"陈\"</span>, <span class=hljs-string>\"黄\"</span>];\n<span class=hljs-keyword>delete</span> arr[<span class=hljs-number>0</span>];\n<span class=hljs-built_in>console</span>.log(arr[<span class=hljs-number>0</span>]);<span class=hljs-comment>// undefined</span>\n<span class=hljs-built_in>console</span>.log(arr.length);<span class=hljs-comment>// 4</span></code></pre><p>删最后一个</p><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>\"张\"</span>, <span class=hljs-string>\"李\"</span>, <span class=hljs-string>\"陈\"</span>, <span class=hljs-string>\"黄\"</span>];\n<span class=hljs-keyword>delete</span> arr[<span class=hljs-number>3</span>];\n<span class=hljs-built_in>console</span>.log(arr[<span class=hljs-number>3</span>]);<span class=hljs-comment>// undefined</span>\n<span class=hljs-built_in>console</span>.log(arr.length);<span class=hljs-comment>// 4</span></code></pre><p>两个例子说明，只是把值换成了undefined了，length不变。<br>==但是==<br>使用for in无法循环出删掉的成员了，如果强行赋值undefined，又能循环出来，看来真删除了。<br>或者说这只是对象的特性而已，数组也是对象嘛</p><p><strong>总结</strong> delete 操作不会致使数组的 length 属性改变 delete 操作与直接赋 undefined 是不一样的，for in 无法获取 delete 删除的成员，可获取服 undefined 的成员</p><p><strong>兼容性</strong>：包括ie6的所有</p></section><section><h3 id=通过设置length data-index=133>通过设置length</h3><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>\"张\"</span>, <span class=hljs-string>\"李\"</span>, <span class=hljs-string>\"陈\"</span>, <span class=hljs-string>\"黄\"</span>];\narr.length=<span class=hljs-number>1</span>;\n<span class=hljs-built_in>console</span>.log(arr);<span class=hljs-comment>//[\"张\"] 。真的就只有这么一个了！！</span></code></pre><p>兼容性：包括ie6的所有</p><p>详情 见 [length] 写操作</p></section><section><h3 id=删头尾，一次删一个 data-index=134>删头尾，一次删一个</h3><p>使用shift pop 见 [取成员]</p></section><section><h3 id=指定范围删除，一次可删多个 data-index=135>指定范围删除，一次可删多个</h3><p>使用splice 见 [取成员]</p></section><section><h3 id=根据索引删除-使用splice data-index=136>根据索引删除-使用splice</h3><p>将更改原数组。返回一个新数组，装载删掉的成员</p><p>快速使用：</p><pre><code class=language-js><span class=hljs-comment>// 删除指定索引位置成员，参数2固定为1</span>\narr.splice(index,<span class=hljs-number>1</span>);</code></pre></section></section><section><h2 id=改成员 data-index=137>改成员</h2><p>根据索引覆盖操作。都懂...</p><pre><code class=language-js><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>];\narr[<span class=hljs-number>0</span>]=<span class=hljs-string>'xx'</span>;</code></pre></section><section><h2 id=转换 data-index=138>转换</h2><section><h3 id=字符串转数组-split data-index=139>字符串转数组-split</h3><p><code>String.split([string])</code></p><p><strong>· 给参情况</strong> 用字符串中指定子串 将 字符串 切割成 数组</p><pre><code><span class=hljs-string>'张,李,陈,黄'</span>.split(<span class=hljs-string>','</span>);<span class=hljs-comment>//[\"张\", \"李\", \"陈\", \"黄\"]</span></code></pre><p><strong>· 空字符串情况</strong> 将每个字符分割成数组</p><pre><code><span class=hljs-string>'张,李,陈,黄'</span>.split(<span class=hljs-string>''</span>);<span class=hljs-comment>//[\"张\", \",\", \"李\", \",\", \"陈\", \",\", \"黄\"]</span></code></pre><p><strong>· 不给参情况</strong> 返回只有原字符串一个成员的数组</p><pre><code class=language-js><span class=hljs-string>'张,李,陈,黄'</span>.split();<span class=hljs-comment>//[\"张,李,陈,黄\"]</span></code></pre></section><section><h3 id=数组转字符串-join data-index=140>数组转字符串-join</h3><p><strong>用指定字符串 将 数组 连接成 字符串</strong></p><pre><code class=language-js>[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>].join(<span class=hljs-string>'-'</span>);<span class=hljs-comment>// '张-李-陈-黄'</span></code></pre><p><strong>不带参：</strong></p><pre><code class=language-js>[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>].join();<span class=hljs-comment>// '张,李,陈,黄'</span></code></pre><p>似乎默认使用了逗号相连 也可以说是 直接将数组转换成字符串</p><p><strong>数组length=1</strong></p><pre><code class=language-js>[<span class=hljs-string>'张'</span>].join(<span class=hljs-string>'-'</span>);<span class=hljs-comment>// '张'</span></code></pre><p><strong>数组length=0</strong></p><pre><code class=language-js>[].join(<span class=hljs-string>'-'</span>).length===<span class=hljs-number>0</span>;<span class=hljs-comment>//true。看来是空字符串...</span></code></pre></section><section><h3 id=集合转数组-slice技巧 data-index=141>集合转数组-slice技巧</h3><p>集合指的是那种有length属性的类数组对象</p><p><strong>HTMLCollection 集合例子</strong></p><pre><code class=language-js>eItems = [].slice.call(<span class=hljs-built_in>document</span>.body.children, <span class=hljs-number>0</span>);</code></pre><p>这种集合ie678不支持，参数3不会影响HTMLCollection集合</p><p><strong>对象模拟 例子</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> obj = {\n    <span class=hljs-number>0</span>: <span class=hljs-number>0</span>,\n    <span class=hljs-number>1</span>: <span class=hljs-number>1</span>,\n    <span class=hljs-attr>length</span>: <span class=hljs-number>10</span>\n};\n<span class=hljs-keyword>var</span> arr = [].slice.call(obj, <span class=hljs-number>0</span>);\narr.lenght; <span class=hljs-comment>// 10</span></code></pre><p>这种支持包括ie6的所有。参数3如果给，将影响obj。不给或者负数都不影响</p><blockquote><p>其他splice用法见 <a href=splice%E5%A2%9E%E5%88%A0%E8%AF%A6%E8%A7%A3>splice增删详解</a></p></blockquote></section><section><h3 id=数组转字符串-toString data-index=142>数组转字符串-toString</h3><pre><code class=language-js>arr.toString() 相当于 arr.join(<span class=hljs-string>','</span>)\n<span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, {}];\narr.toString() <span class=hljs-comment>//成员1,成员2,[object Object]</span>\narr.join(<span class=hljs-string>','</span>) <span class=hljs-comment>//成员1,成员2,[object Object]</span></code></pre></section></section><section><h2 id=\"splice 增删详解\" data-index=143>splice 增删详解</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice>参考网址</a></p><p><strong>语法</strong> <code>array.splice(start, deleteCount[, item1[, item2[, ...]]])</code></p><p><strong>参数：</strong></p><ul><li><strong>start</strong> 必须。起始索引，负数表示从尾部开始起始，而超出情况将再尾部追加</li><li><strong>deleteCount</strong> 必须(实测可以不带)。删除的个数(含第 start 位) 0或负数都表示不删除，一般用0 超出情况将删除index之后的所有成员 技术文档都说这个是必须，实测不带也可以，不带将删除start(包含start)之后的所有</li><li><strong>itemN</strong> 可选，要替换的成员。将指定区域替换成指定成员</li></ul><p><strong>返回值：</strong> 被删掉的成员组成的新数组 没有被删返回空数组</p><p><strong>将更改原始数组：</strong> deleteCount 删除、itemN 增加 将应用到原数组中。而被删除的成员将拼成一个新数组被返回</p><p><strong>兼容：</strong> 包括ie6的所有</p><p><strong>关于clone：</strong> splice不能实现clone，arr.concat、arr.slice可以实现</p></section><section><h2 id=slice-复制数组 data-index=144>slice-复制数组</h2><p>可指定位置进行复制</p><p><strong>语法</strong> <code>arr.slice(begin[, end])</code></p><p><strong>参数</strong></p><ul><li><p><strong>begin</strong> 开始索引，从0开始 可以是负数，负数情况 相当于 length + begin，相减后结果如果还是负数将视0为起始 包含，新数组将包含此位置的值 经测试此参数也是可选的，省略情况相当于arr.slice(0)</p></li><li><p><strong>end</strong> 结束索引，从0开始 省略此参数将将一直取到原数组末尾 可以是负数，负数情况原理同begin一样 不包含，新数组将不包含此位置的值 小于或者等于begin 将 返回空数组，负数情况也如此</p></li></ul><p><strong>返回新数组</strong></p><p><strong>不更改原数组</strong></p><p><strong>完全复制</strong> 不带参或者 begin 为 0 即可实现完全复制</p><p><strong>可用于取子字符串</strong> 详情见<a href=\"\">String</a></p><p><strong>示例</strong></p><pre><code class=language-js>test.innerHTML = [<span class=hljs-number>1</span>,<span class=hljs-number>2</span>,<span class=hljs-number>3</span>,<span class=hljs-number>4</span>,<span class=hljs-number>5</span>].slice(<span class=hljs-number>1</span>, <span class=hljs-number>3</span>);<span class=hljs-comment>//[2,3]</span>\ntest.innerHTML = [<span class=hljs-number>1</span>,<span class=hljs-number>2</span>,<span class=hljs-number>3</span>,<span class=hljs-number>4</span>,<span class=hljs-number>5</span>].slice(<span class=hljs-number>1</span>, <span class=hljs-number>1</span>);<span class=hljs-comment>//[]</span>\ntest.innerHTML = [<span class=hljs-number>1</span>,<span class=hljs-number>2</span>,<span class=hljs-number>3</span>,<span class=hljs-number>4</span>,<span class=hljs-number>5</span>].slice(<span class=hljs-number>2</span>);<span class=hljs-comment>//[3,4,5]</span></code></pre><p><strong>兼容性</strong> 包括 ie6 的所有浏览器</p><p><strong>concat也可以实现复制</strong></p></section><section><h2 id=concat-合并数组 data-index=145>concat-合并数组</h2><p>实现 合并 或者 追加。返回一个新数组 数组情况是合并，非数组是追加。</p><pre><code class=language-js><span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>],\narr.concat(<span class=hljs-string>'成员4'</span>,[<span class=hljs-string>'成员5'</span>])<span class=hljs-comment>// [\"成员1\", \"成员2\", \"成员3\", \"成员4\", \"成员5\"]</span></code></pre><p><strong>语法：</strong> <code>array.concat(value1, value2, ..., valueN)</code></p><p><strong>参数：</strong> valueN 可选，不带参将实现复制</p><p><strong>关于合并：</strong> 就是将数组的所有子成员追加进来，相当于如果参数是数组，那么你当它没有中括号吧。 合并只限于子级， 如果子成员还是数组 ，不会再去合并，此数组将视为成员。</p><pre><code class=language-js><span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>],\n    arr2= [<span class=hljs-string>'成员4'</span>,[<span class=hljs-string>'成员5'</span>]];\n<span class=hljs-keyword>var</span> newArr = arr.concat(arr2);\n<span class=hljs-built_in>console</span>.log(newArr); <span class=hljs-comment>// [\"成员1\", \"成员2\", \"成员3\", \"成员4\", [\"成员5\"]]</span></code></pre><p><strong>返回值：</strong> 合并后的数组</p><p><strong>不更改原数组，也不会更改作为参数的数组</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>],\n    arr2= [<span class=hljs-string>'成员4'</span>,<span class=hljs-string>'成员5'</span>];\n<span class=hljs-keyword>var</span> newArr = arr.concat(arr2);\n\n<span class=hljs-built_in>console</span>.log(arr); <span class=hljs-comment>// [\"成员1\", \"成员2\", \"成员3\"]</span>\n<span class=hljs-built_in>console</span>.log(arr2); <span class=hljs-comment>// [\"成员4\", \"成员5\"]</span>\n<span class=hljs-built_in>console</span>.log(newArr); <span class=hljs-comment>// [\"成员1\", \"成员2\", \"成员3\", \"成员4\", \"成员5\"]</span></code></pre><p><strong>可实现clone</strong> 不带参即可 slice也可以实现clone</p><pre><code><span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>];\n<span class=hljs-keyword>var</span> newArr = arr.concat();\n兼容性：包括ie6的所有</code></pre></section><section><h2 id=\"sort 排序\" data-index=146>sort 排序</h2><section><h3 id=默认排序，将按字符排序 data-index=147>默认排序，将按字符排序</h3><p>不带参即可，升序，即小的在前面。</p><pre><code class=language-js>[<span class=hljs-string>'B'</span>,<span class=hljs-string>'A'</span>,<span class=hljs-string>'C'</span>].sort() <span class=hljs-comment>// [\"A\", \"B\", \"C\"]</span></code></pre><p><strong>将更改原数组</strong></p><p><strong>字符排序探索</strong> 逐个字符进行对比(如果是数字，并非根据数量)</p><pre><code>[<span class=hljs-number>100</span>,<span class=hljs-number>99</span>].sort()<span class=hljs-comment>// [100, 99]</span></code></pre><p>其实，如果看了下面的自定义排序，上例的结果感觉应该是这么来的。转字符串，再比较</p><pre><code><span class=hljs-string>'100'</span>&lt;<span class=hljs-string>'99'</span><span class=hljs-comment>// true</span></code></pre><p><strong>汉字</strong> 的话根据 Unicode编码，并非按照拼音</p><pre><code>[<span class=hljs-string>'陈'</span>,<span class=hljs-string>'张'</span>, <span class=hljs-string>'黄'</span>,<span class=hljs-string>'李'</span>].sort();<span class=hljs-comment>//[\"张\", \"李\", \"陈\", \"黄\"]</span></code></pre><p>上例中，如果按照拼音，&#39;陈&#39;应该在最前才对。而输出字符对于的Unicode编码是 5F20 674E 9648 9EC4，这很明显 ==推想，估计所有字符，包括字母都是按照编码来的==</p></section><section><h3 id=自定义排序 data-index=148>自定义排序</h3><p>下例实现数字排序。例子为降序。升序 将1 和 -1 调换即可</p><pre><code>([<span class=hljs-number>2</span>, <span class=hljs-number>33</span>, <span class=hljs-number>12</span>, <span class=hljs-number>6</span>, <span class=hljs-number>3333</span>]).sort(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>v1, v2</span>) </span>{\n    <span class=hljs-keyword>if</span> (v1 &lt; v2) <span class=hljs-keyword>return</span> <span class=hljs-number>1</span>;\n    <span class=hljs-keyword>if</span> (v1 &gt; v2) <span class=hljs-keyword>return</span> <span class=hljs-number>-1</span>;\n    <span class=hljs-keyword>return</span> <span class=hljs-number>0</span>;<span class=hljs-comment>// 不处理</span>\n})</code></pre><p>强调：将==更改原数组==</p></section><section><h3 id=有返回值 data-index=149>有返回值</h3><p>虽然更改了原数组，但还是有返回值，返回更改后的原数组，或者说返回原数组引用</p></section></section><section><h2 id=\"reverse 数组反转\" data-index=150>reverse 数组反转</h2><p><code>arr.reverse()</code> 差不多就是将整个数组倒过来，第一个位置就是 最后一个成员了</p></section><section><h2 id=查找值，取值的索引-indexOf data-index=151>查找值，取值的索引-indexOf</h2><p>取成员索引，不存在返回-1 ie兼容性：ie9+</p><pre><code class=language-js><span class=hljs-keyword>var</span> d = {};\n<span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'a'</span>, <span class=hljs-string>'b'</span>, d];\n<span class=hljs-built_in>console</span>.log(arr.indexOf(<span class=hljs-string>'a'</span>));<span class=hljs-comment>// 0</span>\n<span class=hljs-built_in>console</span>.log(arr.indexOf(arr[<span class=hljs-number>1</span>]));<span class=hljs-comment>// 1</span>\n<span class=hljs-comment>// 支持对象</span>\n<span class=hljs-built_in>console</span>.log(arr.indexOf(d));<span class=hljs-comment>// 2</span></code></pre></section><section><h2 id=查找值，是否包含指定值-includes data-index=152>查找值，是否包含指定值-includes</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes>Array.prototype.includes() - JavaScript | MDN</a></p><pre><code class=language-js><span class=hljs-keyword>var</span> pets = [<span class=hljs-string>'cat'</span>, <span class=hljs-string>'dog'</span>, <span class=hljs-string>'bat'</span>];\n\n<span class=hljs-built_in>console</span>.log(pets.includes(<span class=hljs-string>'cat'</span>));\n<span class=hljs-comment>// expected output: true</span></code></pre></section><section><h2 id=数组类型判断 data-index=153>数组类型判断</h2><p>详见 <a href=./%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.md>./类型判断.md</a></p></section><section><h2 id=遍历迭代 data-index=154>遍历迭代</h2><section><h3 id=\"every和some : 是否满足\" data-index=155>every和some : 是否满足</h3><p>every 和 some 都会避开缺失元素</p><p>可实现中断遍历：forEach 没法中断，但这个可以啊</p><p><strong>every</strong></p><p>必须全对</p><p>传递函数只有全部返回true(或者可转化为true的值)，才返回true</p><p>(此处可略看)反之，只要出现false，遍历停止，返回false</p><p><strong>some</strong></p><p>有一个对就行</p><p>传递函数只要出现true(或者可转化为true的值)，便停止遍历，返回true</p><p>(此处可略略看)反之，必须全部false才返回false</p></section><section><h3 id=filter data-index=156>filter</h3><p>实现过滤掉不符合条件的成员 返回一个新数组，不更改原数组 会避开缺失元素</p><p><strong>语法</strong> <code>var new_arrary = arr.filter(callback[, thisArg])</code></p><p><strong>参数</strong></p><ul><li><p><strong>callback</strong> 用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。 返回true(或者可转化为true的值)表示保留该元素（通过测试），false(或者可转化为false的值)则不保留。</p></li><li><p><strong>thisArg</strong> 可选。执行 callback 时的用于 this 的值。</p></li></ul><p><strong>浏览器兼容性</strong></p><p>ie9+</p></section><section><h3 id=forEach data-index=157>forEach</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach>Array.prototype.forEach() - JavaScript | MDN</a></p><blockquote><p>注意: 没有返回值!</p></blockquote><pre><code class=language-js><span class=hljs-keyword>var</span> array1 = [<span class=hljs-string>'a'</span>, <span class=hljs-string>'b'</span>, <span class=hljs-string>'c'</span>];\n\narray1.forEach(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>element, index, array</span>) </span>{\n  <span class=hljs-comment>// element 当前成员</span>\n  <span class=hljs-comment>// index 当前索引</span>\n  <span class=hljs-comment>// array 为原数组</span>\n\n  <span class=hljs-built_in>console</span>.log(element);\n});\n\n<span class=hljs-comment>// expected output: \"a\"</span>\n<span class=hljs-comment>// expected output: \"b\"</span>\n<span class=hljs-comment>// expected output: \"c\"</span>\n</code></pre><p><strong>兼容性</strong> ie678 不支持。可用for in代替。不推荐for循环，主要是因为for循环如果不特殊处理不会跳过不存在成员，即稀疏数组问题</p><p><strong>注意</strong> 只支持 array，其他集合，比如 document.getElementsByTagName(&#39;div&#39;)、document.body.children， 不支持。但可以变通实现</p><pre><code class=language-js>[].forEach.call(<span class=hljs-built_in>document</span>.body.children, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>element, index</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(element, index)\n})\n</code></pre><p>循环过程中<strong>没法终止循环</strong>。 下例依然输出了所有成员，无法通过false终止</p><pre><code class=language-js><span class=hljs-comment>// 这是一个错误的例子</span>\n([<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>, <span class=hljs-number>4</span>, <span class=hljs-number>5</span>]).forEach(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>n</span>) </span>{\n    <span class=hljs-built_in>console</span>.log(n);\n    <span class=hljs-keyword>return</span> <span class=hljs-literal>false</span>;\n});</code></pre></section><section><h3 id=map data-index=158>map</h3><p>数组映射。遍历数组，并返回一个新的</p><section><h4 id=语法 data-index=159>语法</h4><p>arr.map(callback[, thisArg])</p></section><section><h4 id=参数 data-index=160>参数</h4><ul><li>callback</li><li>currentValue</li><li>index</li><li>array</li><li>thisArg 可选。callback函数中this调用</li></ul></section><section><h4 id=示例 data-index=161>示例</h4><pre><code class=language-js><span class=hljs-keyword>var</span> newArr = arr.map(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>currentValue, index, array</span>) </span>{\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>arguments</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-keyword>this</span>);<span class=hljs-comment>//传入的第二个参数</span>\n    <span class=hljs-keyword>return</span> <span class=hljs-built_in>arguments</span>[<span class=hljs-number>1</span>];<span class=hljs-comment>//给新数组添加值</span>\n}, $);</code></pre></section><section><h4 id=兼容性 data-index=162>兼容性</h4><p>ie678 不支持</p></section></section><section><h3 id=reduce、reduceRight(相反) data-index=163>reduce、reduceRight(相反)</h3><p>遍历累加</p><p><strong>语法</strong> arr.reduce(callback[, initialValue])</p><p><strong>参数</strong></p><ul><li>callback</li><li>previousValue</li><li>currentValue</li><li>index</li><li>array</li><li>initialValue 可选。累加的初始值。如果不给，默认是数组的第一个，并且直接进行第二次遍历</li></ul><p><strong>示例</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> newArr = arr.reduce(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>previousValue, currentValue, index, array</span>) </span>{\n    <span class=hljs-keyword>return</span> previousValue + currentValue;<span class=hljs-comment>//给下一次遍历传入的值</span>\n});</code></pre><p><strong>兼容性</strong> ie678 不支持</p><p><strong>注意</strong> initialValue如果不给，默认值是数组的第一个，并且直接进行第二次遍历</p></section></section><section><h2 id=类型 data-index=164>类型</h2><section><h3 id=\"es5 方式\" data-index=165>es5 方式</h3><pre><code class=language-js><span class=hljs-built_in>Array</span>.isArray([]) <span class=hljs-comment>// true</span>\n<span class=hljs-built_in>Array</span>.isArray({}) <span class=hljs-comment>// false</span></code></pre></section><section><h3 id=全兼容方式 data-index=166>全兼容方式</h3><pre><code class=language-js><span class=hljs-keyword>var</span> isArray=<span class=hljs-built_in>Array</span>.isArray||<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>o</span>)</span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-built_in>Object</span>.prototype.toString.call(o)===<span class=hljs-string>\"[object Array]\"</span>;\n};</code></pre><p>es5 方式本质也使用了 Object.prototype.toString</p></section><section><h3 id=不推荐使用 data-index=167>不推荐使用</h3><p>iframe 情况可能会出问题</p><pre><code class=language-js>[] <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span> <span class=hljs-comment>// true</span>\n({}) <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span> <span class=hljs-comment>// false</span></code></pre></section></section><section><h2 id=delete data-index=168>delete</h2><p>删除真实存在，不等同赋undefined。具体见下</p></section><section><h2 id=\"关于直接赋undefined与delete操作区别讨论\" data-index=169>关于直接赋undefined与delete操作区别讨论</h2><pre><code class=language-js><span class=hljs-keyword>var</span> a = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>);\na[<span class=hljs-number>1</span>] = <span class=hljs-literal>undefined</span>;\na[<span class=hljs-number>2</span>] = <span class=hljs-literal>undefined</span>;\na[<span class=hljs-number>3</span>] = <span class=hljs-literal>undefined</span>;\n\n\n<span class=hljs-comment>// 高级浏览器</span>\na.forEach(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n});\n<span class=hljs-comment>// ie678使用如下</span>\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> k <span class=hljs-keyword>in</span> a) {\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>);\n}\n<span class=hljs-comment>// 上面两个循环都只循环了3次</span>\n\n<span class=hljs-comment>// 删除真实存在，不等同赋undefined</span>\n<span class=hljs-keyword>delete</span> a[<span class=hljs-number>1</span>];\n\na.forEach(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n});\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> k <span class=hljs-keyword>in</span> a) {\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>);\n}\n<span class=hljs-comment>// 现在只循环2次了</span>\n\na.length=<span class=hljs-number>10</span>;\n\na.forEach(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n});\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> k <span class=hljs-keyword>in</span> a) {\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>);\n}\n<span class=hljs-comment>// 还是循环2次</span>\n\na.length=<span class=hljs-number>1</span>;\n\na.forEach(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n});\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> k <span class=hljs-keyword>in</span> a) {\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>);\n}\n<span class=hljs-comment>// 循环1次</span>\n</code></pre><p>总结：</p><ol><li>即使是赋了undefined的成员，依然是存在的</li><li>直接操作length，增大操作，并不影响成员增加的本质。但对lenght直接减少操作会影响存在成员个数</li><li>forEach看似是用for in实现的，而且这两种循环只根据真实存在成员，不参照length属性</li><li>数组也是对象，依然保留对象特性。for in、delete的使用跟对象一样，也是可以做数据字典的。 即delete生效于for in(当然还有forEach)</li><li>delete不改变length。for循环差不多是自己制定循环次数，受制于length，属例外</li></ol><p>一些根据length来实现的属性，即使成员不存在： toString、join、split</p><p>非根据length来实现的属性，只根据真实存在成员： forEach、for in</p><p>此处兼容性包括ie6的所有浏览器</p></section><section><h2 id=取最大/小值 data-index=170>取最大/小值</h2><p>通过 fun.apply</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>Math</span>.max.apply(<span class=hljs-built_in>Math</span>, [<span class=hljs-number>34</span>, <span class=hljs-number>23</span>, <span class=hljs-number>43</span>])); <span class=hljs-comment>// 43 最大值</span></code></pre></section><section><h2 id=数组类型检测 data-index=171>数组类型检测</h2><p>方式1： <code>Array.isArray(obj)</code></p><p>方式2： <code>obj instanceof Array</code></p></section><section><h2 id=\"valueOf 返回数组对象本身\" data-index=172>valueOf 返回数组对象本身</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf>Object.prototype.valueOf() - JavaScript | MDN</a></p></section></section><section><h1 id=正则表达式 data-index=173>正则表达式</h1><section><h2 id=相关方法 data-index=174>相关方法</h2><section><h3 id=汇总 data-index=175>汇总</h3><ul><li>RegExp.prototype.exec</li><li>RegExp.prototype.test</li><li>String.prototype.match</li><li>search</li><li>String.prototype.replace</li><li>split</li></ul></section><section><h3 id=\"验证 RegExp.prototype.test\" data-index=176>验证 RegExp.prototype.test</h3><p>验证指定字符串是否匹配, 返回bool值</p><pre><code class=language-js><span class=hljs-keyword>var</span> patrn = <span class=hljs-regexp>/\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/</span>;<span class=hljs-comment>//E-mail</span>\n<span class=hljs-keyword>if</span> (patrn.test(<span class=hljs-string>'hello@gmail.com'</span>)) alert(<span class=hljs-string>'成功匹配'</span>);</code></pre></section><section><h3 id=\"替换 String.prototype.replace()\" data-index=177>替换 String.prototype.replace()</h3><p><strong>返回值：</strong></p><ul><li>有替换 情况：替换好的字符串；</li><li>没替换 情况：源字符串</li></ul><p><strong>两个参数：</strong></p><ol><li>用于匹配的表达式</li><li>用于替换的字符</li></ol><p><strong>关于调用表达式匹配内容：</strong></p><ul><li>通过$&amp;可以调用整个表达式匹配的内容。</li><li>通过$[1-9]可以调用匹配子内容。数字为括号的位置。调用整个匹配内容就把整个表达式括起来</li></ul><p><strong>关于replace方法中的 修饰符g</strong><br>将依次将所有匹配的内容 替换。如下例就有两个匹配的内容，这两个内容都将被替换</p><pre><code class=language-js>alert((<span class=hljs-string>'hello@qq.com||world@qq.com'</span>).replace(<span class=hljs-regexp>/(qq)(.)/g</span>, <span class=hljs-string>\"QQ$1$2\"</span>));\n<span class=hljs-keyword>var</span> a = (<span class=hljs-string>'asdsad'</span>).replace(<span class=hljs-regexp>/[a-z]/</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>d</span>) </span>{\n    <span class=hljs-comment>// 此回调 如果没找到将不执行。也就是，找到一个执行一次</span>\n    <span class=hljs-comment>//d 为 匹配的字符</span>\n    <span class=hljs-keyword>return</span> d.toUpperCase();<span class=hljs-comment>//return替换匹配字符</span>\n});</code></pre></section><section><h3 id=查找 data-index=178>查找</h3><section><h4 id=RegExp.prototype.exec() data-index=179>RegExp.prototype.exec()</h4><p><strong>返回值：</strong></p><ul><li>没有匹配返回null</li><li>有匹配情况，数组对象，有两个固定的属性<br>index 匹配字符串开始索引位置<br>input 原字符串</li></ul><p><strong>修饰符g ：</strong></p><p>每执行一次exec方法，都将继续往下寻找 未匹配过的内容。但必须是同一个RegExp实例，见下例</p><pre><code class=language-js><span class=hljs-keyword>var</span> patt = <span class=hljs-regexp>/W3School/g</span>; <span class=hljs-comment>// 等同 new RegExp('W3School', 'g')</span>\n\n<span class=hljs-built_in>console</span>.log(   \n    patt.exec(<span class=hljs-string>'Visit W3School, W3School is a place to study web technology.'</span>).index <span class=hljs-comment>// 6 </span>\n    ,\n    patt.exec(<span class=hljs-string>'Visit W3School, W3School is a place to study web technology.'</span>).index <span class=hljs-comment>// 14</span>\n    ,\n    <span class=hljs-regexp>/W3School/g</span>.exec(<span class=hljs-string>'Visit W3School, W3School is a place to study web technology.'</span>).index <span class=hljs-comment>// 6 新表达式对象</span>\n    ,\n    patt.exec(<span class=hljs-string>'Visit W3School, W3School is a place to study web technology.'</span>) <span class=hljs-comment>// null</span>\n);</code></pre><p>修饰符g + while 非常好用</p><pre><code class=language-js><span class=hljs-comment>// 使用了 赋值表达式也有返回值 的原理</span>\n<span class=hljs-keyword>while</span> (result = reg.exec(content)) {\n    <span class=hljs-built_in>console</span>.log(result );\n}</code></pre></section><section><h4 id=String.prototype.match() data-index=180>String.prototype.match()</h4><p><strong>参数：</strong></p><p>可以是 字符串；还可以是 正则表达式</p><p>字符串其实也是正则，貌似不支持修饰符g了</p><p><strong>返回值：</strong></p><p>1.没有匹配情况，返回null</p><p>2.有匹配情况，不带g<br>数组成员1为整个表达式匹配的字符串，其后的成员为被括号扩起的子表达式匹配的字符串，带两个固定属性，<br>index 匹配字符串开始索引位置<br>input 原字符串</p><p>3.带g：得到的数组是匹配到所有字符块，匹配多少就有多少成员。不会被括号影响，不带属性</p><pre><code class=language-js><span class=hljs-built_in>console</span>.log((<span class=hljs-string>'msie 9.0 oooo'</span>).match(<span class=hljs-regexp>/msie ([\\d.]+)/</span>)); <span class=hljs-comment>// [\"msie 9.0\", \"9.0\", index: 0, input: \"msie 9.0 oooo\"]</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-string>'msie 9.0 8.0'</span>).match(<span class=hljs-regexp>/ ([\\d.]+)/g</span>)); <span class=hljs-comment>// [\" 9.0\", \" 8.0\"]</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-string>'msie 9.0 8.0'</span>).match(<span class=hljs-string>'[\\\\d]'</span>)); <span class=hljs-comment>// 字符串情况</span></code></pre></section></section></section><section><h2 id=对象创建 data-index=181>对象创建</h2><p><strong>1 字面量</strong></p><pre><code class=language-js><span class=hljs-keyword>var</span> reg = <span class=hljs-regexp>/\\d\\d/</span>;\n<span class=hljs-keyword>var</span> reg2 = <span class=hljs-regexp>/\\d\\d/g</span>; <span class=hljs-comment>// 带修饰符</span>\n<span class=hljs-keyword>var</span> reg3 = <span class=hljs-regexp>/\\d\\d/gi</span>; <span class=hljs-comment>// 多个修饰符</span></code></pre><p><strong>2 构造函数</strong><br>好处是可以 根据字符串创建</p><p>参数2 为修饰符</p><pre><code class=language-js><span class=hljs-keyword>var</span> reg = <span class=hljs-keyword>new</span>  <span class=hljs-built_in>RegExp</span>(<span class=hljs-string>'\\\\d\\\\d'</span>);\n<span class=hljs-keyword>var</span> reg2 = <span class=hljs-keyword>new</span>  <span class=hljs-built_in>RegExp</span>(<span class=hljs-string>'\\\\d\\\\d'</span>,<span class=hljs-string>'g'</span>);<span class=hljs-comment>// 带修饰符</span>\n<span class=hljs-keyword>var</span> reg3 = <span class=hljs-keyword>new</span>  <span class=hljs-built_in>RegExp</span>(<span class=hljs-string>'\\\\d\\\\d'</span>,<span class=hljs-string>'gi'</span>);<span class=hljs-comment>// 多个修饰符</span></code></pre></section><section><h2 id=修饰符 data-index=182>修饰符</h2><p>g （全文查找）<br>i （忽略大小写）</p><p>m （多行查找）<br>可更改&#94;和&#36;作用，变成每行头尾(默认只表示字符串的开头和结尾)。如/^b/m将匹配到&#39;test\\nbbs&#39;</p></section><section><h2 id=括号的多种意义 data-index=183>括号的多种意义</h2><section><h3 id=\"(pattern) 获取指定匹配\" data-index=184><code>(pattern)</code> 获取指定匹配</h3><p>会反馈到到结果数组中，也可在匹配时或者替换时调用</p><p>string.replace 参数2 中通过 <code>$1</code>···<code>$9</code> 依次等访问</p><p>表达式中通过 <code>\\1</code> ··· <code>\\9</code> 依次访问</p><pre><code class=language-js>(<span class=hljs-regexp>/\\w(\\w)\\1/</span>).exec(<span class=hljs-string>'abcdd'</span>) <span class=hljs-comment>// [\"cdd\", \"d\", index: 2, input: \"abcdd\"]</span></code></pre></section><section><h3 id=(?:pattern) data-index=185><code>(?:pattern)</code></h3><p>待完成</p></section><section><h3 id=用于字符组合 data-index=186>用于字符组合</h3><pre><code class=language-js><span class=hljs-string>'v     a b c de'</span>.match(<span class=hljs-regexp>/(\\w\\s)+/g</span>) <span class=hljs-comment>// [\"v \", \"a b c \"]</span></code></pre></section><section><h3 id=\"() + |。子表达式 + 多个\" data-index=187><code>()</code> + <code>|</code>。子表达式 + 多个</h3><pre><code class=language-js><span class=hljs-comment>// 文件类型过滤</span>\n/\\.(jpg|png)&amp;<span class=hljs-regexp>/.test('1.png') /</span><span class=hljs-regexp>/ true</span></code></pre></section></section><section><h2 id=收集 data-index=188>收集</h2><section><h3 id=双字节字符个数 data-index=189>双字节字符个数</h3><pre><code class=language-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>stringSize</span> (<span class=hljs-params>s</span>) </span>{\n    <span class=hljs-keyword>return</span> (s.match(<span class=hljs-regexp>/[^\\x00-\\xff]/g</span>) || <span class=hljs-string>''</span>).length\n}</code></pre></section><section><h3 id=去掉http部分 data-index=190>去掉http部分</h3><pre><code class=language-js>/http:\\/\\/[^\\/]*/\n(&#39;http://upload.x.com/attachment/companyLogo/1_350.jpg&#39;).replace(/http:\\/\\/[^\\/]*/,&#39;&#39;)</code></pre><p>返回 &#39;/attachment/companyLogo/0218/1_350.jpg&#39;</p></section><section><h3 id=去掉HTML标签 data-index=191>去掉HTML标签</h3><p>示例为去掉 p 标签 和 div标签</p><pre><code class=language-js>n.Content.replace(/<span class=hljs-tag>&lt;<span class=hljs-name>\\</span>/{<span class=hljs-attr>0</span>,<span class=hljs-attr>1</span>}<span class=hljs-attr>p</span>&gt;</span>|<span class=hljs-tag>&lt;<span class=hljs-name>\\</span>/{<span class=hljs-attr>0</span>,<span class=hljs-attr>1</span>}<span class=hljs-attr>div</span>&gt;</span>/g, \"\")</code></pre><p>所有标签清除。带属性的 标签照样清</p><pre><code class=language-js>c.tagClear= <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>str</span>) </span>{\n    <span class=hljs-keyword>return</span> str.replace(<span class=hljs-regexp>/&lt;\\/{0,1}[^&lt;&gt;]+\\/{0,1}&gt;/g</span>, <span class=hljs-string>''</span>);\n};</code></pre><p>其实可以使用 innerText 去掉，或者getContent</p></section><section><h3 id=\"匹配是否以某标签 开头/结尾\" data-index=192>匹配是否以某标签 开头/结尾</h3><pre><code class=language-js>(/^([ ]*(&amp;nbsp;)*)*<span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>/).test('&amp;nbsp;  &amp;nbsp;   <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>')\n\n// 清除p元素开头\n('&amp;nbsp;  &amp;nbsp;   <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>').replace(/^([ ]*(&amp;nbsp;)*)*(<span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>)|(<span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>)/,'')\n// 清除p元素结尾\n('<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>  &amp;nbsp;  &amp;nbsp;   ').replace(/((<span class=hljs-tag>&lt;<span class=hljs-name>\\</span>/<span class=hljs-attr>p</span>&gt;</span>)|(<span class=hljs-tag>&lt;<span class=hljs-name>\\</span>/<span class=hljs-attr>div</span>&gt;</span>))([ ]*(&amp;nbsp;)*)*$/,'')\n</code></pre></section><section><h3 id=\"去 html 属性\" data-index=193>去 html 属性</h3><p>document.body.innerHTML = data.replace(/ style=&quot;[^&quot;]*&quot;/g,&#39;&#39;);</p></section><section><h3 id=取后缀 data-index=194>取后缀</h3><p>var ex = (&#39;c:/sdf/sdfsd/sdf/xxx.rmvb&#39;).match(/(?!=.)[^.]+$/);</p></section><section><h3 id=不包含指定字符串 data-index=195>不包含指定字符串</h3><p>使用 <code>(?!pattern)</code> 负向预查</p><pre><code class=language-js>/^(?!index).+\\.js$/.test(<span class=hljs-string>'index.js'</span>) <span class=hljs-comment>// false</span></code></pre><p><strong>一些注意，容易误导的地方</strong>：</p><pre><code class=language-js>/(?!index)\\.js$/.test(<span class=hljs-string>'index.js'</span>) <span class=hljs-comment>// true</span></code></pre><p>去掉了 <code>^</code>，就为 <code>true</code> 了，这是因为，只要找到满足条件的字符串即可，<code>.js</code>这部分满足，所以为<code>true</code>。为false的例子是因为没有一处是满足的</p></section><section><h3 id=实现匹配字符串前面追加 data-index=196>实现匹配字符串前面追加</h3><p>示例实现了在 body 结束标签前追加 script 标签</p><pre><code class=language-js>'<span class=hljs-tag>&lt;/<span class=hljs-name>body</span>&gt;</span>'.replace(/(?=<span class=hljs-tag>&lt;<span class=hljs-name>\\</span>/<span class=hljs-attr>body</span>&gt;</span>)/, '<span class=hljs-tag>&lt;<span class=hljs-name>script</span> <span class=hljs-attr>src</span>=<span class=hljs-string>\"/js/vue.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>')</code></pre></section><section><h3 id=取url文件名，包括后缀 data-index=197>取url文件名，包括后缀</h3><pre><code class=language-js>filePath.match(<span class=hljs-regexp>/[^/]+$/</span>)</code></pre></section><section><h3 id=文件类型过滤 data-index=198>文件类型过滤</h3><pre><code class=language-js>/\\.(jpg|png)&amp;<span class=hljs-regexp>/.test('1.png') /</span><span class=hljs-regexp>/ true</span></code></pre></section><section><h3 id=手机号码 data-index=199>手机号码</h3><p>/^\\d{11}$/.test(&#39;13923401527&#39;)</p></section><section><h3 id=E-mail data-index=200>E-mail</h3><p>/\\w+([-+.&#39;]\\w+)<em>@\\w+([-.]\\w+)</em>.\\w+([-.]\\w+)*/</p></section><section><h3 id=html节 data-index=201>html节</h3><ul><li>html节点：/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\\1&gt;|\\s+/&gt;)$/</li><li>html节点2：/&lt;([a-zA-Z]+)\\s+[\\w=&quot;]+&gt;[^&lt;]*&lt;/\\1&gt;/</li></ul></section><section><h3 id=字符范围 data-index=202>字符范围</h3><ul><li>匹配所有单字节：[\\x00-\\xff]</li><li>匹配所有双字节：[^\\x00-\\xff]</li><li>去两头空白字符：/^\\s<em>(\\S</em>(\\s+\\S+)<em>)\\s</em>$/</li><li>匹配所有东亚区的语言 <code>^[\\u2E80-\\u9FFF]+$</code></li><li>匹配简体和繁体 <code>^[\\u4E00-\\u9FFF]+$</code></li><li>匹配简体 <code>^[\\u4E00-\\u9FA5]+$</code></li></ul></section></section></section><section><h1 id=注释 data-index=203>注释</h1><section><h2 id=函数注释约定 data-index=204>函数注释约定</h2><pre><code class=language-js><span class=hljs-comment>/**\n * 获取后代元素\n * @example\n    common.confirm_v2({\n        title: '相册删除',\n        description: '确认要删除？'\n        onBtns: [function () {\n\n        }]\n    })\n\n * @param (arr,function) onBtns\n    至少有一个。一个将配置第一个确认按钮。第二个按钮默认关闭窗口\n    多个将依次给按钮配置指定事件\n * @param (string) description 描述\n * @parma ([bool]) hanCloseBtn \n * @parma ([function]) onCloseBtn \n * @return string 返回说明\n * @兼容性 所有浏览器\n **/</span>\n</code></pre></section></section><section><h1 id=类型、值和变量 data-index=205>类型、值和变量</h1><section><h2 id=\"类型获取 typeof\" data-index=206>类型获取 typeof</h2><table><thead><tr><th>各种值</th><th>类型字符串</th></tr></thead><tbody><tr><td>函数对象</td><td>function</td></tr><tr><td>数</td><td>number</td></tr><tr><td>字符串</td><td>string</td></tr><tr><td>原型对象、数组、Null</td><td>object</td></tr><tr><td>true/false</td><td>boolean</td></tr></tbody></table></section><section><h2 id=\"类型获取 toString 万能方式\" data-index=207>类型获取 toString 万能方式</h2><pre><code class=language-js><span class=hljs-built_in>Object</span>.prototype.toString.call([])<span class=hljs-comment>// [object Array]</span>\n<span class=hljs-built_in>Object</span>.prototype.toString.call({})<span class=hljs-comment>// [object Object]</span>\n<span class=hljs-built_in>Object</span>.prototype.toString.call(<span class=hljs-number>1</span>)<span class=hljs-comment>// [object Number]</span>\n<span class=hljs-built_in>Object</span>.prototype.toString.call(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{})<span class=hljs-comment>// [object Function]</span>\n<span class=hljs-built_in>Object</span>.prototype.toString.call(<span class=hljs-literal>true</span>)<span class=hljs-comment>// [object Boolean]</span>\n<span class=hljs-built_in>Object</span>.prototype.toString.call(<span class=hljs-string>''</span>) <span class=hljs-comment>// [object String]</span>\n\n<span class=hljs-comment>// 可直接简写成：即用 window 的 toString 方法</span>\n\ntoString.call([])<span class=hljs-comment>// [object Array]</span>\ntoString.call({})<span class=hljs-comment>// [object Object]</span>\ntoString.call(<span class=hljs-number>1</span>)<span class=hljs-comment>// [object Number]</span>\ntoString.call(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{})<span class=hljs-comment>// [object Function]</span>\ntoString.call(<span class=hljs-literal>true</span>)<span class=hljs-comment>// [object Boolean]</span>\ntoString.call(<span class=hljs-string>''</span>) <span class=hljs-comment>// [object String]</span></code></pre></section><section><h2 id=类型判断 data-index=208>类型判断</h2><section><h3 id=数组判断 data-index=209>数组判断</h3><p><strong>方式1：ES5 方法</strong></p><pre><code class=language-js><span class=hljs-built_in>Array</span>.isArray([]) <span class=hljs-comment>// true</span></code></pre><p><strong>方式2：使用instanceof，某书中说ie浏览器有不确定性。理论上 ie6+</strong></p><pre><code class=language-js><span class=hljs-built_in>console</span>.log([] <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span>);<span class=hljs-comment>//返回true</span></code></pre><p><strong>方式3：万能</strong></p><pre><code class=language-js>({}).toString.call([])<span class=hljs-comment>//\"[object Array]\"</span></code></pre><p>兼容性原型扩展，兼容包括ie6的所有</p><pre><code class=language-js><span class=hljs-keyword>if</span>(<span class=hljs-keyword>typeof</span> <span class=hljs-built_in>Array</span>.isArray === <span class=hljs-string>'undefined'</span>){\n    <span class=hljs-built_in>Array</span>.isArray = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>arg</span>)</span>{\n        <span class=hljs-keyword>return</span> ({}).toString.call(arg) === <span class=hljs-string>'[object Array]'</span>;\n    }\n}</code></pre></section><section><h3 id=\"isNaN 非数字判断\" data-index=210>isNaN 非数字判断</h3><p>凡是可以隐式转换成 number 的值，都将视为 number，即返回false</p><pre><code class=language-js>alert(<span class=hljs-built_in>isNaN</span>(<span class=hljs-number>123</span>));<span class=hljs-comment>//false</span>\nalert(<span class=hljs-built_in>isNaN</span>(<span class=hljs-string>\"\"</span>));<span class=hljs-comment>//false，空字符就是0所以也是number</span>\nalert(<span class=hljs-built_in>isNaN</span>(<span class=hljs-string>\"123\"</span>));<span class=hljs-comment>//false</span>\nalert(<span class=hljs-built_in>isNaN</span>(<span class=hljs-string>\"123px\"</span>));<span class=hljs-comment>//true</span></code></pre></section></section><section><h2 id=类型转换 data-index=211>类型转换</h2><section><h3 id=\"--&gt; Boolean\" data-index=212>--&gt; Boolean</h3><pre><code class=language-js><span class=hljs-comment>// 隐式转换也是这种转换</span>\n<span class=hljs-built_in>Boolean</span>(<span class=hljs-string>\"false\"</span>); <span class=hljs-comment>// true</span></code></pre></section><section><h3 id=\"--&gt; Number\" data-index=213>--&gt; Number</h3></section></section><section><h2 id=\"null和undefined\" data-index=214>null和undefined</h2><section><h3 id=是否可被重写 data-index=215>是否可被重写</h3><section><h4 id=\"undefined 在作用域中可重写\" data-index=216>undefined 在作用域中可重写</h4><p>在全局中不会被重写</p><pre><code class=language-js>(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{\n  <span class=hljs-keyword>var</span> <span class=hljs-literal>undefined</span> = <span class=hljs-number>123</span>;\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-literal>undefined</span>);<span class=hljs-comment>// 输出123</span>\n})()</code></pre></section><section><h4 id=\"null 不会被重写\" data-index=217>null 不会被重写</h4><pre><code class=language-js>(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{\n    <span class=hljs-comment>// Error。直接报错</span>\n    <span class=hljs-keyword>var</span> <span class=hljs-literal>null</span> = <span class=hljs-number>123</span>;\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-literal>null</span>)\n})()</code></pre></section></section></section><section><h2 id=NaN data-index=218>NaN</h2><p>NaN与任何值都不相等，与自己也不相等</p></section></section><section><h1 id=编辑器编码规范配置 data-index=219>编辑器编码规范配置</h1><p><a href=http://editorconfig.org/ >.editorconfig</a></p></section><section><h1 id=运算符 data-index=220>运算符</h1><section><h2 id=\"++ --\" data-index=221>++ --</h2><pre><code class=language-js><span class=hljs-keyword>var</span> i = <span class=hljs-number>0</span>\n\n<span class=hljs-comment>// 先加</span>\n<span class=hljs-built_in>console</span>.log(i)   <span class=hljs-comment>// 0</span>\n<span class=hljs-built_in>console</span>.log(++i) <span class=hljs-comment>// 1</span>\n\n<span class=hljs-comment>// 先用</span>\n<span class=hljs-built_in>console</span>.log(i)   <span class=hljs-comment>// 1</span>\n<span class=hljs-built_in>console</span>.log(i++) <span class=hljs-comment>// 2</span>\n<span class=hljs-built_in>console</span>.log(i)   <span class=hljs-comment>// 2</span></code></pre></section><section><h2 id=void data-index=222>void</h2><p>执行指定表达式，不返回任何值(即返回underfined)。</p><p>表达式，类似于【i = 3 * 3;】中的【3 * 3】</p><pre><code class=language-js>alert(<span class=hljs-keyword>void</span>(<span class=hljs-number>3</span> * <span class=hljs-number>3</span>));\nalert(<span class=hljs-keyword>void</span> <span class=hljs-number>0</span>);</code></pre></section></section>"})
window['cb_js']({"outline":[{"id":"3384995950","level":1,"name":"Ajax(XMLHttpRequest)","children":[{"id":"3619940510","level":2,"name":"例子说明","children":[]},{"id":"3525502684","level":2,"name":"xhr.responseType","children":[]},{"id":"3692122040","level":2,"name":"xhr.response","children":[]},{"id":"3718552104","level":2,"name":"兼容性问题","children":[{"id":"378434996","level":3,"name":"不支持 responseType、onreadystatechange","children":[]},{"id":"3055877332","level":3,"name":"不支持自动转 JSON 为对象","children":[]}]}]},{"id":"81111105","level":1,"name":"Array 数组","children":[{"id":"3896476705","level":2,"name":"创建","children":[]},{"id":"3310722227","level":2,"name":"length","children":[]},{"id":"2632652643","level":2,"name":"取成员","children":[{"id":"2992269763","level":3,"name":"取单个,一般获取","children":[]},{"id":"2090641635","level":3,"name":"取单个,带删除的获取 shift、pop、splice","children":[]},{"id":"356042796","level":3,"name":"取多个,带删除的获取 splice","children":[]},{"id":"1179719692","level":3,"name":"取多个，复制形式获取-slice","children":[]}]},{"id":"525395230","level":2,"name":"增成员","children":[{"id":"1903924850","level":3,"name":"追加","children":[]},{"id":"4107090756","level":3,"name":"指定位置增加","children":[]}]},{"id":"3201015804","level":2,"name":"删成员","children":[{"id":"1629670467","level":3,"name":"使用 delete 操作符","children":[]},{"id":"317546977","level":3,"name":"通过设置 length","children":[]},{"id":"2680588548","level":3,"name":"删头尾，一次删一个","children":[]},{"id":"2866572421","level":3,"name":"指定范围删除，一次可删多个","children":[]},{"id":"1547432490","level":3,"name":"根据索引删除-使用 splice","children":[]},{"id":"2031230036","level":3,"name":"任意多个索引删除","children":[]}]},{"id":"1257041121","level":2,"name":"改成员","children":[]},{"id":"3310337561","level":2,"name":"转换","children":[{"id":"3110278138","level":3,"name":"字符串转数组-split","children":[]},{"id":"400898277","level":3,"name":"数组转字符串-join","children":[]},{"id":"3091238466","level":3,"name":"集合转数组-slice 技巧","children":[]},{"id":"551037385","level":3,"name":"数组转字符串-toString","children":[]}]},{"id":"2576333174","level":2,"name":"splice 增删详解","children":[]},{"id":"2262790263","level":2,"name":"slice-复制数组","children":[]},{"id":"4013916922","level":2,"name":"concat-合并数组","children":[]},{"id":"5194651","level":2,"name":"sort 排序","children":[{"id":"242029331","level":3,"name":"默认排序，将按字符排序","children":[]},{"id":"2340704723","level":3,"name":"自定义排序","children":[]},{"id":"2806339698","level":3,"name":"有返回值","children":[]}]},{"id":"2614437040","level":2,"name":"reverse 数组反转","children":[]},{"id":"2723947995","level":2,"name":"查找值，取值的索引-indexOf","children":[]},{"id":"4274282644","level":2,"name":"查找值，是否包含指定值-includes","children":[]},{"id":"4094946450","level":2,"name":"数组类型判断","children":[]},{"id":"1631270087","level":2,"name":"遍历迭代","children":[{"id":"3327841979","level":3,"name":"缺失数组避开问题","children":[]},{"id":"3155839765","level":3,"name":"every 和 some : 是否满足","children":[]},{"id":"2443539566","level":3,"name":"filter","children":[]},{"id":"2356599190","level":3,"name":"forEach","children":[]},{"id":"3855636097","level":3,"name":"map","children":[{"id":"3006204170","level":4,"name":"也会避开空元素，但返回的新数组依然存在空元素","children":[]},{"id":"3911749406","level":4,"name":"语法","children":[]},{"id":"1243104668","level":4,"name":"参数","children":[]},{"id":"4158635761","level":4,"name":"示例","children":[]},{"id":"4237948103","level":4,"name":"兼容性","children":[]}]},{"id":"1439050445","level":3,"name":"reduce、reduceRight(相反)","children":[]}]},{"id":"1494230609","level":2,"name":"类型","children":[{"id":"3619003661","level":3,"name":"es5 方式","children":[]},{"id":"1110224958","level":3,"name":"全兼容方式","children":[]},{"id":"2287410696","level":3,"name":"不推荐使用","children":[]}]},{"id":"4148300672","level":2,"name":"delete","children":[]},{"id":"3281362327","level":2,"name":"关于直接赋 undefined 与 delete 操作区别讨论","children":[]},{"id":"2624954706","level":2,"name":"取最大/小值","children":[]},{"id":"1656488678","level":2,"name":"数组类型检测","children":[]},{"id":"3671639610","level":2,"name":"valueOf 返回数组对象本身","children":[]},{"id":"2790674731","level":2,"name":"参考文档","children":[]}]},{"id":"3166149199","level":1,"name":"console 控制台","children":[{"id":"832401365","level":2,"name":"耗时查看。","children":[]},{"id":"474111686","level":2,"name":"分组","children":[]},{"id":"2187308046","level":2,"name":"换行写法 + 颜色","children":[]}]},{"id":"2189143249","level":1,"name":"Date 时间日期","children":[{"id":"3396193842","level":2,"name":"对象创建","children":[]},{"id":"35412559","level":2,"name":"ios &quot;-&quot; 号连接问题","children":[]},{"id":"1147863100","level":2,"name":"取月总天数","children":[]},{"id":"2150614988","level":2,"name":"时间获取","children":[{"id":"2076836899","level":3,"name":"当前时间获取","children":[]},{"id":"1944822163","level":3,"name":"toString、toUTCString","children":[]},{"id":"2158334156","level":3,"name":"指定段获取","children":[]},{"id":"3913794868","level":3,"name":"毫秒获取","children":[]}]},{"id":"3122962870","level":2,"name":"时间设置","children":[]}]},{"id":"2780876614","level":1,"name":"Function 函数","children":[{"id":"3025415607","level":2,"name":"两个重要特征","children":[]},{"id":"2658171238","level":2,"name":"函数创建","children":[]},{"id":"1174573020","level":2,"name":"prototype","children":[{"id":"3108014398","level":3,"name":"原型概念","children":[]},{"id":"2646955659","level":3,"name":"写操作：将影响所有实例","children":[]},{"id":"3370842775","level":3,"name":"与prototype相对的this的写操作：只影响当前实例","children":[]},{"id":"446725857","level":3,"name":"可通过this(实例)访问","children":[]},{"id":"1373621691","level":3,"name":"关于<strong>proto</strong> 理解","children":[]},{"id":"2481908946","level":3,"name":"prototype起始值是一个空对象","children":[]},{"id":"2352409695","level":3,"name":"prototype方式无法重写this添加的成员","children":[]},{"id":"2070582359","level":3,"name":"构造函数 - 性能","children":[]}]},{"id":"1507112103","level":2,"name":"this","children":[{"id":"3776746483","level":3,"name":"this读操作","children":[]},{"id":"3545341925","level":3,"name":"this成员读操作","children":[]},{"id":"3618265997","level":3,"name":"this成员写操作，也就是给this增加新成员，或者修改现有成员","children":[]},{"id":"884552500","level":3,"name":"举例说明","children":[]},{"id":"2733989877","level":3,"name":"改变this指向","children":[]}]},{"id":"2822349639","level":2,"name":"js继承","children":[{"id":"3372466773","level":3,"name":"constructor 取实例的构造函数","children":[]}]},{"id":"278430446","level":2,"name":"？name 属性","children":[]},{"id":"2244913135","level":2,"name":"函数作用域","children":[]},{"id":"730488890","level":2,"name":"闭包-函数声明位置可调用同级或上级变量","children":[]},{"id":"3479482034","level":2,"name":"声明VS表达式","children":[]},{"id":"1127594221","level":2,"name":"回调函数 概念","children":[]},{"id":"2847403752","level":2,"name":"call，apply","children":[{"id":"1673171658","level":3,"name":"apply妙用","children":[]}]},{"id":"2412248958","level":2,"name":"变量、函数提升的区别","children":[]},{"id":"1584541971","level":2,"name":"arguments 函数参数","children":[]},{"id":"196433594","level":2,"name":"length，函数预设参数个数","children":[]},{"id":"2435505335","level":2,"name":"函数执行","children":[]}]},{"id":"1667597157","level":1,"name":"MathAndNumber","children":[]},{"id":"409874646","level":1,"name":"Math And Number","children":[{"id":"3282441232","level":2,"name":"数位处理","children":[{"id":"3872382793","level":3,"name":"去小数","children":[{"id":"3925574589","level":4,"name":"直接去，黑魔法","children":[]},{"id":"3350668742","level":4,"name":"向前取整","children":[]},{"id":"3045798953","level":4,"name":"向后取整","children":[]},{"id":"1791927249","level":4,"name":"四舍五入","children":[]}]},{"id":"1782619720","level":3,"name":"保留指定位小数","children":[]}]},{"id":"798766871","level":2,"name":"随机数 random","children":[]},{"id":"972963395","level":2,"name":"平方","children":[]},{"id":"4078973787","level":2,"name":"幂/平方","children":[]},{"id":"2303143845","level":2,"name":"平方根，立方根","children":[]},{"id":"3327294193","level":2,"name":"角度 与 弧度","children":[]},{"id":"827511866","level":2,"name":"直角三角形","children":[{"id":"22951053","level":3,"name":"所有 相关 函数","children":[]},{"id":"2097084617","level":3,"name":"边的比值-正弦 余弦 正切","children":[]},{"id":"3103237211","level":3,"name":"角度获取","children":[]}]},{"id":"3175650858","level":2,"name":"圆","children":[{"id":"250107012","level":3,"name":"PI","children":[]}]},{"id":"2306496026","level":2,"name":"绝对值","children":[]},{"id":"3932258542","level":2,"name":"取最大/小值","children":[]},{"id":"3519842419","level":2,"name":"e，某数乘 10 的 n 次方","children":[]},{"id":"861380564","level":2,"name":"一些应用","children":[{"id":"2340109300","level":3,"name":"3 点算角度","children":[]}]}]},{"id":"145701656","level":1,"name":"Object","children":[{"id":"1676654721","level":2,"name":"JSON字符串 -&gt; JS对象","children":[]},{"id":"1588921197","level":2,"name":"删除操作","children":[]},{"id":"2774837342","level":2,"name":"快速效率查找实现","children":[]},{"id":"1910162374","level":2,"name":"Object.assign() 合并复制","children":[{"id":"3547087177","level":3,"name":"合并","children":[]},{"id":"3054155400","level":3,"name":"复制","children":[]}]},{"id":"2159938280","level":2,"name":"Object.create() 创建原型对象","children":[]},{"id":"2955856393","level":2,"name":"Object.defineProperties() 定义属性的新方式","children":[]},{"id":"1465694503","level":2,"name":"成员遍历","children":[{"id":"3755231985","level":3,"name":"for...in","children":[]},{"id":"1888839003","level":3,"name":"Object.keys","children":[]},{"id":"975072375","level":3,"name":"getOwnPropertyNames","children":[]}]},{"id":"3963010477","level":2,"name":"判断是否是实例成员 - in关键字","children":[]},{"id":"1039408945","level":2,"name":"判断是否非 prototype 成员 - hasOwnProperty","children":[]}]},{"id":"3968836150","level":1,"name":"String 字符串","children":[{"id":"3212418214","level":2,"name":"取索引","children":[]},{"id":"1280789363","level":2,"name":"字符串比较","children":[]},{"id":"969650459","level":2,"name":"空字符串","children":[]},{"id":"1731273694","level":2,"name":"length","children":[]},{"id":"2060243033","level":2,"name":"子字符获取","children":[]},{"id":"3024657989","level":2,"name":"子串获取","children":[{"id":"4285615192","level":3,"name":"substring","children":[{"id":"190131864","level":4,"name":"语法","children":[]},{"id":"2812356342","level":4,"name":"示例说明","children":[]},{"id":"1337986622","level":4,"name":"兼容性","children":[]}]},{"id":"3363418354","level":3,"name":"substr","children":[{"id":"2903246960","level":4,"name":"语法","children":[]},{"id":"659222654","level":4,"name":"示例说明","children":[]},{"id":"2314158439","level":4,"name":"兼容性","children":[]}]}]},{"id":"1360274031","level":2,"name":"String(数字) Number 互转","children":[]},{"id":"2388122910","level":2,"name":"字符串 —&gt; number","children":[{"id":"3149828630","level":3,"name":"使用 parseFloat、parseFloat","children":[]},{"id":"2257713997","level":3,"name":"ECMAScript 3中的 parseInt 问题","children":[]},{"id":"2344294130","level":3,"name":"什么情况使用 parseFloat、parseInt","children":[]}]},{"id":"4262610034","level":2,"name":"其他类型 转 字符串","children":[]},{"id":"763094896","level":2,"name":"字母大小写转换","children":[]},{"id":"3314698803","level":2,"name":"去掉两头空白字符-trim","children":[]},{"id":"587328435","level":2,"name":"其他进制 --&gt; 十进制","children":[]},{"id":"2438326206","level":2,"name":"字符，Unicode码","children":[{"id":"1998917059","level":3,"name":"字符 -&gt; Unicode 的十进制数","children":[]},{"id":"1991658536","level":3,"name":"十进制 Unicode -&gt; 字符","children":[]},{"id":"4129371359","level":3,"name":"字符 Unicode 直接量写法","children":[]}]},{"id":"708523555","level":2,"name":"中文字符比较","children":[]},{"id":"1948482803","level":2,"name":"汉字范围 十六进制写法","children":[]},{"id":"614414499","level":2,"name":"两种空格","children":[]}]},{"id":"2620506322","level":1,"name":"WebSocket 或 SSE","children":[]},{"id":"2616696876","level":1,"name":"关键字","children":[{"id":"943789537","level":2,"name":"instanceof 判断是否属于某构造函数实例","children":[{"id":"2916481979","level":3,"name":"判断数组类型","children":[]},{"id":"1614444025","level":3,"name":"instanceof 不认为原始类型值的变量是对象","children":[]}]},{"id":"133094510","level":2,"name":"in - 判断是否是某实例成员","children":[]}]},{"id":"1304957286","level":1,"name":"其他","children":[{"id":"2756572493","level":2,"name":"任务链 赋值","children":[]},{"id":"4099987442","level":2,"name":"测试表达式执行顺序","children":[]},{"id":"2288596175","level":2,"name":"if/for 大括号是否创建了域？","children":[]},{"id":"2660933063","level":2,"name":"eval","children":[]}]},{"id":"2355185043","level":1,"name":"变量","children":[{"id":"2316628289","level":2,"name":"未声明变量不能直接拿来用，但可成功赋值","children":[]},{"id":"2884230170","level":2,"name":"未定义变量只要不执行，就不会报错。包括ie6","children":[]},{"id":"789427581","level":2,"name":"未定义变量不能判断","children":[]}]},{"id":"3625428272","level":1,"name":"定时器","children":[{"id":"3193819034","level":2,"name":"setInterval(fn, ms)","children":[]}]},{"id":"3494592818","level":1,"name":"异常处理","children":[{"id":"1391390378","level":2,"name":"throw 手动抛异常","children":[{"id":"1525936958","level":3,"name":"语法","children":[]},{"id":"1546170408","level":3,"name":"示例","children":[]}]},{"id":"3677246480","level":2,"name":"异常捕获","children":[]},{"id":"1321490267","level":2,"name":"Error","children":[]},{"id":"2592410062","level":2,"name":"try catch 是否可捕获函数中的错误","children":[]}]},{"id":"3476351503","level":1,"name":"循环","children":[{"id":"1456360951","level":2,"name":"for","children":[{"id":"2808520626","level":3,"name":"跳出循环的方式","children":[]}]},{"id":"1578682565","level":2,"name":"for/in","children":[]},{"id":"2686736169","level":2,"name":"break：用于 跳出循环或 switch。(if除外)","children":[]},{"id":"3753141315","level":2,"name":"continue：不再往下执行，直接下一次循环","children":[]}]},{"id":"3850731555","level":1,"name":"正则表达式","children":[{"id":"1830406102","level":2,"name":"相关方法","children":[{"id":"951076960","level":3,"name":"汇总","children":[]},{"id":"3244868513","level":3,"name":"验证 RegExp.prototype.test","children":[]},{"id":"387999723","level":3,"name":"替换 String.prototype.replace()","children":[]},{"id":"2779395469","level":3,"name":"查找","children":[{"id":"3003768118","level":4,"name":"RegExp.prototype.exec()","children":[]},{"id":"3823031210","level":4,"name":"String.prototype.match()","children":[]}]}]},{"id":"2201172645","level":2,"name":"对象创建","children":[]},{"id":"460606260","level":2,"name":"修饰符","children":[]},{"id":"771208619","level":2,"name":"括号的多种意义","children":[{"id":"2540180795","level":3,"name":"<code>(pattern)</code> 获取指定匹配","children":[]},{"id":"1821097600","level":3,"name":"<code>(?:pattern)</code>","children":[]},{"id":"2002526714","level":3,"name":"用于字符组合","children":[]},{"id":"828816428","level":3,"name":"<code>()</code> + <code>|</code>。子表达式 + 多个","children":[]}]},{"id":"569558455","level":2,"name":"收集","children":[{"id":"1576001502","level":3,"name":"关键字过滤","children":[]},{"id":"532452978","level":3,"name":"双字节字符个数","children":[]},{"id":"3946491760","level":3,"name":"去掉 http 部分","children":[]},{"id":"1411624053","level":3,"name":"去掉 HTML 标签","children":[]},{"id":"646841371","level":3,"name":"匹配是否以某标签 开头/结尾","children":[]},{"id":"2915917518","level":3,"name":"去 html 属性","children":[]},{"id":"4032693799","level":3,"name":"取后缀","children":[]},{"id":"1361392652","level":3,"name":"不包含指定字符串","children":[]},{"id":"2598308877","level":3,"name":"实现匹配字符串前面追加","children":[]},{"id":"1980468834","level":3,"name":"取 url 文件名，包括后缀","children":[]},{"id":"1720950080","level":3,"name":"文件类型过滤","children":[]},{"id":"999924465","level":3,"name":"手机号码","children":[]},{"id":"243305679","level":3,"name":"E-mail","children":[]},{"id":"137276879","level":3,"name":"html 节","children":[]},{"id":"911460595","level":3,"name":"字符范围","children":[]}]}]},{"id":"3750401755","level":1,"name":"注释","children":[{"id":"3166070840","level":2,"name":"函数注释约定","children":[]}]},{"id":"2434423855","level":1,"name":"类型、值和变量","children":[{"id":"402838200","level":2,"name":"类型获取 typeof","children":[]},{"id":"4292428790","level":2,"name":"类型获取 toString 万能方式","children":[]},{"id":"3530119761","level":2,"name":"类型判断","children":[{"id":"2417089871","level":3,"name":"数组判断","children":[]},{"id":"1032145951","level":3,"name":"isNaN 非数字判断","children":[]}]},{"id":"48225341","level":2,"name":"类型转换","children":[{"id":"850859812","level":3,"name":"--&gt; Boolean","children":[]},{"id":"1134486021","level":3,"name":"--&gt; Number","children":[]}]},{"id":"2106074035","level":2,"name":"null和undefined","children":[{"id":"2022460506","level":3,"name":"是否可被重写","children":[{"id":"1836743091","level":4,"name":"undefined 在作用域中可重写","children":[]},{"id":"3026786372","level":4,"name":"null 不会被重写","children":[]}]}]},{"id":"430135850","level":2,"name":"NaN","children":[]}]},{"id":"689922517","level":1,"name":"编辑器编码规范配置","children":[]},{"id":"2266685210","level":1,"name":"表达式和运算符","children":[{"id":"307071113","level":2,"name":"delete","children":[]}]},{"id":"2018536351","level":1,"name":"运算符","children":[{"id":"3778826163","level":2,"name":"++ --","children":[]},{"id":"427961835","level":2,"name":"void","children":[]}]},{"id":"2539871413","level":1,"name":"性能","children":[{"id":"1576825769","level":2,"name":"变量","children":[]},{"id":"237421072","level":2,"name":"函数","children":[]}]},{"id":"2770852027","level":1,"name":"可隐式转换为 true/ false 的值","children":[]},{"id":"3506160566","level":1,"name":"调试","children":[]},{"id":"2039384870","level":1,"name":"注释约定","children":[]}],"content":"<section><h1 id=\"3384995950\">Ajax(XMLHttpRequest)</h1><section><h2 id=\"3619940510\">例子说明</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> xhr;\n<span class=\"hljs-keyword\">if</span> (XMLHttpRequest) {\n  <span class=\"hljs-comment\">// w3c标准创建方式。ie7+支持</span>\n  xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// IE5,6创建方式</span>\n  xhr = <span class=\"hljs-keyword\">new</span> ActiveXObject(<span class=\"hljs-string\">\"Microsoft.XMLHTTP\"</span>);\n}\n\n<span class=\"hljs-comment\">/*\n * onreadystatechange事件 属性\n *\n * 每当AJAX对象的readyState属性改变时就会调用一次\n * readyState属性的初始值为0。表示 请求未初始化\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">readystatechange</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (xhr.readyState === <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"服务器连接已建立\"</span>);\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (xhr.readyState === <span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"请求已接收\"</span>);\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (xhr.readyState === <span class=\"hljs-number\">3</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"请求处理中\"</span>);\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (xhr.readyState === <span class=\"hljs-number\">4</span>) {\n    <span class=\"hljs-comment\">/**\n     * 4表示响应数据已到达浏览器端;200表示 正确的响应结果;404表示页面未找到\n     *\n     * 在此处 处理响应的结果\n     * 调用AJAX对象的responseText属性来获取响应的文本格式数据\n     * 还有一个属性 responseXML ，待测\n     *\n     */</span>\n    <span class=\"hljs-keyword\">if</span> (xhr.status === <span class=\"hljs-number\">200</span>) {\n      <span class=\"hljs-comment\">// 如果不指定 responseType ,默认 text 格式！！！</span>\n      <span class=\"hljs-keyword\">var</span> response = xhr.response;\n      <span class=\"hljs-comment\">// console.log(xhr.responseText)</span>\n      <span class=\"hljs-comment\">// console.log(xhr.responseXML)</span>\n\n      <span class=\"hljs-comment\">// android 4.4以下，ajax不会根据后台响应要求自动转换 json为对象。所以只能手动转换</span>\n      <span class=\"hljs-keyword\">if</span> (responseType === <span class=\"hljs-string\">\"json\"</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> response === <span class=\"hljs-string\">\"string\"</span>) {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.parse(response));\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">console</span>.log(response);\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">console</span>.error(xhr);\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"complete\"</span>);\n  }\n}\n<span class=\"hljs-comment\">// 华为安卓机总是用老浏览器内核，设置 responseType 会报错</span>\n<span class=\"hljs-keyword\">try</span> {\n  xhr.responseType = <span class=\"hljs-string\">\"json\"</span>;\n  xhr.onreadystatechange = readystatechange;\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  xhr.onload = readystatechange;\n}\n\n<span class=\"hljs-comment\">/*\n指定提交的数据格式(可选)\n默认 text/plain\n\n相当于form表单的enctype标签属性。但不能指定为 multipart/form-data。即使指定了也无效(变成默认的text/plain)\n\n可设置的值，竖线后为 send 对应的值格式：\ntext/plain | 文本\napplication/json | '{ \"k\" : \"v\" }'\napplication/x-www-form-urlencoded | 'name=value&amp;n2=v2'\n\n值后面可指定编码格式\n */</span>\nxhr.setRequestHeader(<span class=\"hljs-string\">\"Content-type\"</span>, <span class=\"hljs-string\">\"application/json;charset=utf-8\"</span>);\n\nxhr.open(<span class=\"hljs-string\">\"post\"</span>, <span class=\"hljs-string\">\"/Default.aspx\"</span>);\n\n<span class=\"hljs-comment\">/*\n执行提交\n\n参数即提交的数据，如果是get方式，填写null即可\n\n参数格式与 Content-type 对应\n*/</span>\n\najaxObj.send(<span class=\"hljs-built_in\">JSON</span>.stringify({ <span class=\"hljs-attr\">data</span>: <span class=\"hljs-string\">\"测试数据\"</span> }));</code></pre>\n</section><section><h2 id=\"3525502684\">xhr.responseType</h2><p>指定响应的数据类型。<br>服务器可据此作出相应处理，返回指定类型。<br>浏览器会据此将数据解析成指定类型对象，可通过 xhr.response 获取</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Data type of response property</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&quot;&quot;(空字符串)</td>\n<td>字符串</td>\n<td>默认值，相当于&quot;text&quot;</td>\n</tr>\n<tr>\n<td>&quot;text&quot;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&quot;arraybuffer&quot;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&quot;blob&quot;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&quot;document&quot;</td>\n<td>Document 对象</td>\n<td>将解析成一个新的 document 树</td>\n</tr>\n<tr>\n<td>&quot;json&quot;</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</section><section><h2 id=\"3692122040\">xhr.response</h2><p>获取响应的数据，通过 responseType 指定类型</p>\n</section><section><h2 id=\"3718552104\">兼容性问题</h2><section><h3 id=\"378434996\">不支持 responseType、onreadystatechange</h3><p><strong>浏览器版本：</strong><br><code>AppleWebKit/534.30 Version/4.0; Android 7.0; HUAWEINXT-AL10</code>\n华为机安卓 7.0，内置浏览器版本很低</p>\n<p>完整的版本信息，没有 chrome 字样：\n5.0 (Linux; Android 7.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</p>\n<p><strong>不支持：</strong></p>\n<pre><code class=\"language-js\">xhr.responseType = <span class=\"hljs-string\">\"json\"</span>;</code></pre>\n<p>同时 onreadystatechange 事件也有问题(只会触发一次，且 xhr.readyState 为 1)，需使用 onload 代替，目前如下解决</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">readystatechange</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">try</span> {\n  xhr.responseType = <span class=\"hljs-string\">\"json\"</span>;\n  xhr.onreadystatechange = readystatechange;\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  xhr.onload = readystatechange;\n}</code></pre>\n</section><section><h3 id=\"3055877332\">不支持自动转 JSON 为对象</h3><p>明明指定了 xhr.responseType = &quot;json&quot;，指明后台返回 json 数据，浏览器当然可以直接转对象</p>\n<p><strong>系统版本</strong><br><code>AppleWebKit/537.36 Version/1.5 Chrome/28.0.1500.94 Mobile; Android 4.3; SAMSUNG SM-G3586V</code></p>\n<p><strong>目前如下解决：</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> response === <span class=\"hljs-string\">\"string\"</span>) {\n  success(<span class=\"hljs-built_in\">JSON</span>.parse(response));\n} <span class=\"hljs-keyword\">else</span> {\n  success(response);\n}</code></pre>\n</section></section></section><section><h1 id=\"81111105\">Array 数组</h1><section><h2 id=\"3896476705\">创建</h2><p><strong>字面量方式</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> arr = []\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'成员1'</span>, <span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">//可以是不同成员</span></code></pre>\n<p><strong>构造函数方式</strong></p>\n<p>1、空的</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>()</code></pre>\n<p>2、指定长度</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> array2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>);\n成员值都是<span class=\"hljs-literal\">undefined</span>。此方式有技巧使用\n虽然值是<span class=\"hljs-literal\">undefined</span>，但join后不会出现<span class=\"hljs-literal\">undefined</span>字符串\n比如：\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>).join(<span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// 依然返回空字符串</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>).join(<span class=\"hljs-string\">'x'</span>) <span class=\"hljs-comment\">// 9个x</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>).join(<span class=\"hljs-string\">'&lt;li&gt;&lt;/li&gt;'</span>) <span class=\"hljs-comment\">// 9个li标签</span></code></pre>\n</section><section><h2 id=\"3310722227\">length</h2><p>可读写属性</p>\n<p><strong>读操作</strong> 都懂...略过</p>\n<p><strong>写操作</strong> ==增==操作(比之前多)：相当于末尾追加了成员，初始值为 undefined。非真实存在，forEach、for in 会跳过此成员</p>\n<p>==减==操作(比之前少)：少了多少相当于 末尾删了多少<br>数组对 length 属性进行减少的 写操作，成员真的减少了。<br>有时候想，length 属性如果没真正删除，reverse 反转后是不是能把删除的反过来？而实际上，<br>reverse 反转操作正常(强调：正常指并没有把删掉的成员反转过来)</p>\n<pre><code class=\"language-js\">div1.innerHTML = array.length</code></pre>\n</section><section><h2 id=\"2632652643\">取成员</h2><section><h3 id=\"2992269763\">取单个,一般获取</h3><p>根据索引获取</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'张'</span>, <span class=\"hljs-string\">'李'</span>, <span class=\"hljs-string\">'陈'</span>, <span class=\"hljs-string\">'黄'</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr[<span class=\"hljs-number\">0</span>])\n<span class=\"hljs-built_in\">console</span>.log(arr[<span class=\"hljs-string\">'0'</span>]) <span class=\"hljs-comment\">// 根据以前的笔记说firefox这样不行？反正现在是行了...</span></code></pre>\n</section><section><h3 id=\"2090641635\">取单个,带删除的获取 shift、pop、splice</h3><p>取一个便少一个。将更改 原数组</p>\n<p><strong>取第一个</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">arr</span><span class=\"hljs-selector-class\">.shift</span>()</code></pre>\n<p><strong>取最后一个</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">arr</span><span class=\"hljs-selector-class\">.pop</span>()</code></pre>\n<p><strong>取指定</strong> 使用 splice 实现</p>\n<pre><code class=\"language-js\"><span class=\"hljs-attribute\">var</span> arr = [<span class=\"hljs-string\">'张'</span>, <span class=\"hljs-string\">'李'</span>, <span class=\"hljs-string\">'陈'</span>, <span class=\"hljs-string\">'黄'</span>]\narr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>) // <span class=\"hljs-string\">'陈'</span>。取到了第<span class=\"hljs-number\">3</span>个成员\narr // [<span class=\"hljs-string\">'张'</span>, <span class=\"hljs-string\">'李'</span>, <span class=\"hljs-string\">'黄'</span>]</code></pre>\n</section><section><h3 id=\"356042796\">取多个,带删除的获取 splice</h3><p>取多个指定成员，取多少原数组便会减多少 <code>Array.splice(开始索引,数量)</code> 返回一个新数组，装载取到的成员</p>\n</section><section><h3 id=\"1179719692\">取多个，复制形式获取-slice</h3><p>详见 <a href=\"%E5%A4%8D%E5%88%B6%E6%95%B0%E7%BB%84-slice\">复制数组-slice</a></p>\n</section></section><section><h2 id=\"525395230\">增成员</h2><section><h3 id=\"1903924850\">追加</h3><p>底部-push：追加一个或多个</p>\n<pre><code class=\"language-js\">array.push(<span class=\"hljs-string\">'烧饼1'</span>)</code></pre>\n<p>头部-unshift：追加一个或多个</p>\n<pre><code class=\"language-js\">array.unshift(<span class=\"hljs-string\">'烧饼0'</span>, <span class=\"hljs-string\">'烧饼1'</span>)</code></pre>\n<p>返回值返回更改后的数组长度</p>\n</section><section><h3 id=\"4107090756\">指定位置增加</h3><p><strong>使用 splice，真正意义上的指定位置增加</strong> 参数 1：增加的位置，此位置原有的元素会往后挤参数 2：必须为 0 参数 3：要增加的成员，可以多个</p>\n<pre><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\narr.splice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'成员1'</span>); <span class=\"hljs-comment\">// [1, '成员1', 2, 3]</span>\narr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'成员2'</span>, <span class=\"hljs-string\">'成员3'</span>);\narr.splice(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, [<span class=\"hljs-string\">'成员4'</span>, <span class=\"hljs-string\">'成员5'</span>]); <span class=\"hljs-comment\">// 注意，此方式没有例外，依然只添加一个成员，3索引位置是一个数组（以为会有concat特性，添加2个成员，实际不是）</span></code></pre><p><strong>使用修改方式，严格来说这还是修改</strong> 当索引大于等于 length 时，才是增加，否则为修改</p>\n<pre><code><span class=\"hljs-keyword\">var</span> arr=[];\narr[<span class=\"hljs-number\">3</span>]=<span class=\"hljs-number\">1</span>;\n<span class=\"hljs-built_in\">console</span>.log(arr.length);<span class=\"hljs-comment\">// 4</span></code></pre></section></section><section><h2 id=\"3201015804\">删成员</h2><section><h3 id=\"1629670467\">使用 delete 操作符</h3><p>删第一个</p>\n<pre><code><span class=\"hljs-keyword\">var</span> arr=[<span class=\"hljs-string\">\"张\"</span>, <span class=\"hljs-string\">\"李\"</span>, <span class=\"hljs-string\">\"陈\"</span>, <span class=\"hljs-string\">\"黄\"</span>];\n<span class=\"hljs-keyword\">delete</span> arr[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-built_in\">console</span>.log(arr[<span class=\"hljs-number\">0</span>]);<span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-built_in\">console</span>.log(arr.length);<span class=\"hljs-comment\">// 4</span></code></pre><p>删最后一个</p>\n<pre><code><span class=\"hljs-keyword\">var</span> arr=[<span class=\"hljs-string\">\"张\"</span>, <span class=\"hljs-string\">\"李\"</span>, <span class=\"hljs-string\">\"陈\"</span>, <span class=\"hljs-string\">\"黄\"</span>];\n<span class=\"hljs-keyword\">delete</span> arr[<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-built_in\">console</span>.log(arr[<span class=\"hljs-number\">3</span>]);<span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-built_in\">console</span>.log(arr.length);<span class=\"hljs-comment\">// 4</span></code></pre><p>两个例子说明，只是把值换成了 undefined 了，length 不变。<br>==但是==<br>使用 for in 无法循环出删掉的成员了，如果强行赋值 undefined，又能循环出来，看来真删除了。<br>或者说这只是对象的特性而已，数组也是对象嘛</p>\n<p><strong>总结</strong> delete 操作不会致使数组的 length 属性改变 delete 操作与直接赋 undefined 是不一样的，for in 无法获取 delete 删除的成员，可获取服 undefined 的成员</p>\n<p><strong>兼容性</strong>：包括 ie6 的所有</p>\n</section><section><h3 id=\"317546977\">通过设置 length</h3><pre><code><span class=\"hljs-keyword\">var</span> arr=[<span class=\"hljs-string\">\"张\"</span>, <span class=\"hljs-string\">\"李\"</span>, <span class=\"hljs-string\">\"陈\"</span>, <span class=\"hljs-string\">\"黄\"</span>];\narr.length=<span class=\"hljs-number\">1</span>;\n<span class=\"hljs-built_in\">console</span>.log(arr);<span class=\"hljs-comment\">//[\"张\"] 。真的就只有这么一个了！！</span></code></pre><p>兼容性：包括 ie6 的所有</p>\n<p>详情 见 [length] 写操作</p>\n</section><section><h3 id=\"2680588548\">删头尾，一次删一个</h3><p>使用 shift pop 见 [取成员]</p>\n</section><section><h3 id=\"2866572421\">指定范围删除，一次可删多个</h3><p>使用 splice 见 [取成员]</p>\n</section><section><h3 id=\"1547432490\">根据索引删除-使用 splice</h3><p>将更改原数组。返回一个新数组，装载删掉的成员</p>\n<p>快速使用：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 删除指定索引位置成员，参数2固定为1</span>\narr.splice(index, <span class=\"hljs-number\">1</span>)</code></pre>\n</section><section><h3 id=\"2031230036\">任意多个索引删除</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">/**\n * 任意多个索引删除\n * @param {Array} arr 要操作的数组\n * @param {Array} indexs 要删除的索引集合\n * @return {Array} 新数组\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayDelete</span>(<span class=\"hljs-params\">arr, indexs</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> dict = {}\n  <span class=\"hljs-keyword\">let</span> hasOwnProperty = <span class=\"hljs-built_in\">Object</span>.prototype.hasOwnProperty\n  indexs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{\n    dict[index] = <span class=\"hljs-literal\">true</span>\n  })\n  arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, i</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (hasOwnProperty.call(dict, i)) {\n      <span class=\"hljs-keyword\">delete</span> arr[i]\n    }\n  })\n  <span class=\"hljs-keyword\">return</span> arr.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">el</span>) =&gt;</span> <span class=\"hljs-literal\">true</span>)\n}</code></pre>\n<p>错误示例，使用 splice 循环删除</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">/*\n估计只有第1次准确，接下来的循环可能会删错。因为第1次删除会改变现有元素的索引，所以之前记录的删除索引已经不再准确\n而且forEach 循环次数也发生了改变\n*/</span>\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\narr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, i</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(i)\n  <span class=\"hljs-keyword\">switch</span> (i) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>: <span class=\"hljs-comment\">// 删除元素 2、3，实际删的是2</span>\n      arr.splice(i, <span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">break</span>\n  }\n})\n<span class=\"hljs-built_in\">console</span>.log(arr)</code></pre>\n</section></section><section><h2 id=\"1257041121\">改成员</h2><p>根据索引覆盖操作。都懂...</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'张'</span>, <span class=\"hljs-string\">'李'</span>, <span class=\"hljs-string\">'陈'</span>, <span class=\"hljs-string\">'黄'</span>]\narr[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">'xx'</span></code></pre>\n</section><section><h2 id=\"3310337561\">转换</h2><section><h3 id=\"3110278138\">字符串转数组-split</h3><p><code>String.split([string])</code></p>\n<p><strong>· 给参情况</strong> 用字符串中指定子串 将 字符串 切割成 数组</p>\n<pre><code><span class=\"hljs-string\">'张,李,陈,黄'</span>.split(<span class=\"hljs-string\">','</span>);//[<span class=\"hljs-string\">\"张\"</span>, <span class=\"hljs-string\">\"李\"</span>, <span class=\"hljs-string\">\"陈\"</span>, <span class=\"hljs-string\">\"黄\"</span>]</code></pre><p><strong>· 空字符串情况</strong> 将每个字符分割成数组</p>\n<pre><code><span class=\"hljs-string\">'张,李,陈,黄'</span>.split(<span class=\"hljs-string\">''</span>);//[<span class=\"hljs-string\">\"张\"</span>, <span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\"李\"</span>, <span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\"陈\"</span>, <span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\"黄\"</span>]</code></pre><p><strong>· 不给参情况</strong> 返回只有原字符串一个成员的数组</p>\n<pre><code class=\"language-js\"><span class=\"hljs-string\">'张,李,陈,黄'</span>.split() <span class=\"hljs-comment\">//[\"张,李,陈,黄\"]</span></code></pre>\n</section><section><h3 id=\"400898277\">数组转字符串-join</h3><p><strong>用指定字符串 将 数组 连接成 字符串</strong></p>\n<pre><code class=\"language-js\">;[<span class=\"hljs-string\">'张'</span>, <span class=\"hljs-string\">'李'</span>, <span class=\"hljs-string\">'陈'</span>, <span class=\"hljs-string\">'黄'</span>].join(<span class=\"hljs-string\">'-'</span>) <span class=\"hljs-comment\">// '张-李-陈-黄'</span></code></pre>\n<p><strong>不带参：</strong></p>\n<pre><code class=\"language-js\">;[<span class=\"hljs-string\">'张'</span>, <span class=\"hljs-string\">'李'</span>, <span class=\"hljs-string\">'陈'</span>, <span class=\"hljs-string\">'黄'</span>].join() <span class=\"hljs-comment\">// '张,李,陈,黄'</span></code></pre>\n<p>似乎默认使用了逗号相连也可以说是 直接将数组转换成字符串</p>\n<p><strong>数组 length=1</strong></p>\n<pre><code class=\"language-js\">;[<span class=\"hljs-string\">'张'</span>].join(<span class=\"hljs-string\">'-'</span>) <span class=\"hljs-comment\">// '张'</span></code></pre>\n<p><strong>数组 length=0</strong></p>\n<pre><code class=\"language-js\">;[].join(<span class=\"hljs-string\">'-'</span>).length === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">//true。看来是空字符串...</span></code></pre>\n</section><section><h3 id=\"3091238466\">集合转数组-slice 技巧</h3><p>集合指的是那种有 length 属性的类数组对象</p>\n<p><strong>HTMLCollection 集合例子</strong></p>\n<pre><code class=\"language-js\">eItems = [].slice.call(<span class=\"hljs-built_in\">document</span>.body.children, <span class=\"hljs-number\">0</span>)</code></pre>\n<p>这种集合 ie678 不支持，参数 3 不会影响 HTMLCollection 集合</p>\n<p><strong>对象模拟 例子</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">10</span>,\n}\n<span class=\"hljs-keyword\">var</span> arr = [].slice.call(obj, <span class=\"hljs-number\">0</span>)\narr.lenght <span class=\"hljs-comment\">// 10</span></code></pre>\n<p>这种支持包括 ie6 的所有。参数 3 如果给，将影响 obj。不给或者负数都不影响</p>\n<blockquote>\n<p>其他 splice 用法见 <a href=\"splice%E5%A2%9E%E5%88%A0%E8%AF%A6%E8%A7%A3\">splice 增删详解</a></p>\n</blockquote>\n</section><section><h3 id=\"551037385\">数组转字符串-toString</h3><pre><code class=\"language-js\">arr.toString() 相当于 arr.join(<span class=\"hljs-string\">','</span>)\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'成员1'</span>, <span class=\"hljs-string\">'成员2'</span>, {}];\narr.toString() <span class=\"hljs-comment\">//成员1,成员2,[object Object]</span>\narr.join(<span class=\"hljs-string\">','</span>) <span class=\"hljs-comment\">//成员1,成员2,[object Object]</span></code></pre>\n</section></section><section><h2 id=\"2576333174\">splice 增删详解</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">参考网址</a></p>\n<p><strong>语法</strong> <code>array.splice(start, deleteCount[, item1[, item2[, ...]]])</code></p>\n<p><strong>参数：</strong></p>\n<ul>\n<li><strong>start</strong> 必须。起始索引，负数表示从尾部开始起始，而超出情况将再尾部追加</li>\n<li><strong>deleteCount</strong> 必须(实测可以不带)。删除的个数(含第 start 位) 0 或负数都表示不删除，一般用 0 超出情况将删除 index 之后的所有成员技术文档都说这个是必须，实测不带也可以，不带将删除 start(包含 start)之后的所有</li>\n<li><strong>itemN</strong> 可选，要替换的成员。将指定区域替换成指定成员</li>\n</ul>\n<p><strong>返回值：</strong> 被删掉的成员组成的新数组没有被删返回空数组</p>\n<p><strong>将更改原始数组：</strong> deleteCount 删除、itemN 增加 将应用到原数组中。而被删除的成员将拼成一个新数组被返回</p>\n<p><strong>兼容：</strong> 包括 ie6 的所有</p>\n<p><strong>关于 clone：</strong> splice 不能实现 clone，arr.concat、arr.slice 可以实现</p>\n</section><section><h2 id=\"2262790263\">slice-复制数组</h2><p>可指定位置进行复制</p>\n<p><strong>语法</strong> <code>arr.slice(begin[, end])</code></p>\n<p><strong>参数</strong></p>\n<ul>\n<li><p><strong>begin</strong> 开始索引，从 0 开始可以是负数，负数情况 相当于 length + begin，相减后结果如果还是负数将视 0 为起始包含，新数组将包含此位置的值经测试此参数也是可选的，省略情况相当于 arr.slice(0)</p>\n</li>\n<li><p><strong>end</strong> 结束索引，从 0 开始省略此参数将将一直取到原数组末尾可以是负数，负数情况原理同 begin 一样不包含，新数组将不包含此位置的值小于或者等于 begin 将 返回空数组，负数情况也如此</p>\n</li>\n</ul>\n<p><strong>返回新数组</strong></p>\n<p><strong>不更改原数组</strong></p>\n<p><strong>完全复制</strong> 不带参或者 begin 为 0 即可实现完全复制</p>\n<p><strong>可用于取子字符串</strong> 详情见<a href=\"\">String</a></p>\n<p><strong>示例</strong></p>\n<pre><code class=\"language-js\">test.innerHTML = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].slice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//[2,3]</span>\ntest.innerHTML = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].slice(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">//[]</span>\ntest.innerHTML = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].slice(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">//[3,4,5]</span></code></pre>\n<p><strong>兼容性</strong> 包括 ie6 的所有浏览器</p>\n<p><strong>concat 也可以实现复制</strong></p>\n</section><section><h2 id=\"4013916922\">concat-合并数组</h2><p>实现 合并 或者 追加。返回一个新数组数组情况是合并，非数组是追加。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-attribute\">var</span> arr = [<span class=\"hljs-string\">'成员1'</span>, <span class=\"hljs-string\">'成员2'</span>, <span class=\"hljs-string\">'成员3'</span>],\narr.concat(<span class=\"hljs-string\">'成员4'</span>,[<span class=\"hljs-string\">'成员5'</span>])// [<span class=\"hljs-string\">\"成员1\"</span>, <span class=\"hljs-string\">\"成员2\"</span>, <span class=\"hljs-string\">\"成员3\"</span>, <span class=\"hljs-string\">\"成员4\"</span>, <span class=\"hljs-string\">\"成员5\"</span>]</code></pre>\n<p><strong>语法：</strong> <code>array.concat(value1, value2, ..., valueN)</code></p>\n<p><strong>参数：</strong> valueN 可选，不带参将实现复制</p>\n<p><strong>关于合并：</strong> 就是将数组的所有子成员追加进来，相当于如果参数是数组，那么你当它没有中括号吧。合并只限于子级， 如果子成员还是数组 ，不会再去合并，此数组将视为成员。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-attribute\">var</span> arr = [<span class=\"hljs-string\">'成员1'</span>, <span class=\"hljs-string\">'成员2'</span>, <span class=\"hljs-string\">'成员3'</span>],\n  arr2 = [<span class=\"hljs-string\">'成员4'</span>, [<span class=\"hljs-string\">'成员5'</span>]]\nvar newArr = arr.concat(arr2)\nconsole.log(newArr) // [<span class=\"hljs-string\">\"成员1\"</span>, <span class=\"hljs-string\">\"成员2\"</span>, <span class=\"hljs-string\">\"成员3\"</span>, <span class=\"hljs-string\">\"成员4\"</span>, [<span class=\"hljs-string\">\"成员5\"</span>]]</code></pre>\n<p><strong>返回值：</strong> 合并后的数组</p>\n<p><strong>不更改原数组，也不会更改作为参数的数组</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-attribute\">var</span> arr = [<span class=\"hljs-string\">'成员1'</span>, <span class=\"hljs-string\">'成员2'</span>, <span class=\"hljs-string\">'成员3'</span>],\n  arr2 = [<span class=\"hljs-string\">'成员4'</span>, <span class=\"hljs-string\">'成员5'</span>]\nvar newArr = arr.concat(arr2)\n\nconsole.log(arr) // [<span class=\"hljs-string\">\"成员1\"</span>, <span class=\"hljs-string\">\"成员2\"</span>, <span class=\"hljs-string\">\"成员3\"</span>]\nconsole.log(arr2) // [<span class=\"hljs-string\">\"成员4\"</span>, <span class=\"hljs-string\">\"成员5\"</span>]\nconsole.log(newArr) // [<span class=\"hljs-string\">\"成员1\"</span>, <span class=\"hljs-string\">\"成员2\"</span>, <span class=\"hljs-string\">\"成员3\"</span>, <span class=\"hljs-string\">\"成员4\"</span>, <span class=\"hljs-string\">\"成员5\"</span>]</code></pre>\n<p><strong>可实现 clone</strong> 不带参即可 slice 也可以实现 clone</p>\n<pre><code><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'成员1'</span>, <span class=\"hljs-string\">'成员2'</span>, <span class=\"hljs-string\">'成员3'</span>];\n<span class=\"hljs-keyword\">var</span> newArr = arr.concat();\n兼容性：包括ie6的所有</code></pre></section><section><h2 id=\"5194651\">sort 排序</h2><section><h3 id=\"242029331\">默认排序，将按字符排序</h3><p>不带参即可，升序，即小的在前面。</p>\n<pre><code class=\"language-js\">;[<span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'C'</span>].sort() // [<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"C\"</span>]</code></pre>\n<p><strong>将更改原数组</strong></p>\n<p><strong>字符排序探索</strong> 逐个字符进行对比(如果是数字，并非根据数量)</p>\n<pre><code>[<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">99</span>].sort()<span class=\"hljs-comment\">// [100, 99]</span></code></pre><p>其实，如果看了下面的自定义排序，上例的结果感觉应该是这么来的。转字符串，再比较</p>\n<pre><code><span class=\"hljs-string\">'100'</span>&lt;<span class=\"hljs-string\">'99'</span><span class=\"hljs-comment\">// true</span></code></pre><p><strong>汉字</strong> 的话根据 Unicode 编码，并非按照拼音</p>\n<pre><code>[<span class=\"hljs-string\">'陈'</span>,<span class=\"hljs-string\">'张'</span>, <span class=\"hljs-string\">'黄'</span>,<span class=\"hljs-string\">'李'</span>].sort();//[<span class=\"hljs-string\">\"张\"</span>, <span class=\"hljs-string\">\"李\"</span>, <span class=\"hljs-string\">\"陈\"</span>, <span class=\"hljs-string\">\"黄\"</span>]</code></pre><p>上例中，如果按照拼音，&#39;陈&#39;应该在最前才对。而输出字符对于的 Unicode 编码是 5F20 674E 9648 9EC4，这很明显 ==推想，估计所有字符，包括字母都是按照编码来的==</p>\n</section><section><h3 id=\"2340704723\">自定义排序</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 升序。降序序 将1 和 -1 调换即可</span>\n;[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3333</span>]\n  .sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (a &lt; b) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">// 小于0即可，可以不为-1</span>\n    <span class=\"hljs-keyword\">if</span> (a &gt; b) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 大于0即可，可以不为1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// 相等，不处理</span>\n  })(\n    <span class=\"hljs-comment\">// 优化后</span>\n    <span class=\"hljs-comment\">// 升序。降序序 将 b-a 即可</span>\n    [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3333</span>],\n  )\n  .sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a - b)</code></pre>\n<p><strong>强调：将更改原数组</strong></p>\n</section><section><h3 id=\"2806339698\">有返回值</h3><p>虽然更改了原数组，但还是有返回值，返回更改后的原数组，或者说返回原数组引用</p>\n</section></section><section><h2 id=\"2614437040\">reverse 数组反转</h2><p><code>arr.reverse()</code> 差不多就是将整个数组倒过来，第一个位置就是 最后一个成员了</p>\n</section><section><h2 id=\"2723947995\">查找值，取值的索引-indexOf</h2><p>取成员索引，不存在返回-1 ie 兼容性：ie9+</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> d = {}\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, d]\n<span class=\"hljs-built_in\">console</span>.log(arr.indexOf(<span class=\"hljs-string\">'a'</span>)) <span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-built_in\">console</span>.log(arr.indexOf(arr[<span class=\"hljs-number\">1</span>])) <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// 支持对象</span>\n<span class=\"hljs-built_in\">console</span>.log(arr.indexOf(d)) <span class=\"hljs-comment\">// 2</span></code></pre>\n</section><section><h2 id=\"4274282644\">查找值，是否包含指定值-includes</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\">Array.prototype.includes() - JavaScript | MDN</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> pets = [<span class=\"hljs-string\">'cat'</span>, <span class=\"hljs-string\">'dog'</span>, <span class=\"hljs-string\">'bat'</span>]\n\n<span class=\"hljs-built_in\">console</span>.log(pets.includes(<span class=\"hljs-string\">'cat'</span>))\n<span class=\"hljs-comment\">// expected output: true</span></code></pre>\n</section><section><h2 id=\"4094946450\">数组类型判断</h2><p>详见 <a href=\"./%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.md\">./类型判断.md</a></p>\n</section><section><h2 id=\"1631270087\">遍历迭代</h2><section><h3 id=\"3327841979\">缺失数组避开问题</h3></section><section><h3 id=\"3155839765\">every 和 some : 是否满足</h3><p>every 和 some 都会避开缺失元素</p>\n<p>可实现中断遍历：forEach 没法中断，但这个可以啊</p>\n<p><strong>every</strong></p>\n<p>必须全对</p>\n<p>传递函数只有全部返回 true(或者可转化为 true 的值)，才返回 true</p>\n<p>(此处可略看)反之，只要出现 false，遍历停止，返回 false</p>\n<p><strong>some</strong></p>\n<p>有一个对就行</p>\n<p>传递函数只要出现 true(或者可转化为 true 的值)，便停止遍历，返回 true</p>\n<p>(此处可略略看)反之，必须全部 false 才返回 false</p>\n</section><section><h3 id=\"2443539566\">filter</h3><p>实现过滤掉不符合条件的成员返回一个新数组，不更改原数组会避开缺失元素</p>\n<p><strong>语法</strong> <code>var new_arrary = arr.filter(callback[, thisArg])</code></p>\n<p><strong>参数</strong></p>\n<ul>\n<li><p><strong>callback</strong> 用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。返回 true(或者可转化为 true 的值)表示保留该元素（通过测试），false(或者可转化为 false 的值)则不保留。</p>\n</li>\n<li><p><strong>thisArg</strong> 可选。执行 callback 时的用于 this 的值。</p>\n</li>\n</ul>\n<p><strong>浏览器兼容性</strong></p>\n<p>ie9+</p>\n</section><section><h3 id=\"2356599190\">forEach</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">Array.prototype.forEach() - JavaScript | MDN</a></p>\n<blockquote>\n<p>注意: 没有返回值!</p>\n</blockquote>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> array1 = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>]\n\narray1.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, index, array</span>) </span>{\n  <span class=\"hljs-comment\">// element 当前成员</span>\n  <span class=\"hljs-comment\">// index 当前索引</span>\n  <span class=\"hljs-comment\">// array 为原数组</span>\n\n  <span class=\"hljs-built_in\">console</span>.log(element)\n})\n\n<span class=\"hljs-comment\">// expected output: \"a\"</span>\n<span class=\"hljs-comment\">// expected output: \"b\"</span>\n<span class=\"hljs-comment\">// expected output: \"c\"</span></code></pre>\n<p><strong>兼容性</strong> ie678 不支持。可用 for in 代替。不推荐 for 循环，主要是因为 for 循环如果不特殊处理不会跳过不存在成员，即稀疏数组问题</p>\n<p><strong>注意</strong> 只支持 array，其他集合，比如 document.getElementsByTagName(&#39;div&#39;)、document.body.children， 不支持。但可以变通实现</p>\n<pre><code class=\"language-js\">;[].forEach.call(<span class=\"hljs-built_in\">document</span>.body.children, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, index</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(element, index)\n})</code></pre>\n<p>循环过程中<strong>没法终止循环</strong>。下例依然输出了所有成员，无法通过 false 终止</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 这是一个错误的例子</span>\n;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(n)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n})</code></pre>\n</section><section><h3 id=\"3855636097\">map</h3><p>数组映射。遍历数组，并返回一个新的</p>\n<p>不更改原数组</p>\n<section><h4 id=\"3006204170\">也会避开空元素，但返回的新数组依然存在空元素</h4><pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-comment\">// 删除元素，生成稀疏数组</span>\n<span class=\"hljs-keyword\">delete</span> arr[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-keyword\">delete</span> arr[<span class=\"hljs-number\">4</span>]\n<span class=\"hljs-keyword\">let</span> newArr = arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">el, i</span>) </span>{\n  <span class=\"hljs-comment\">// 遇空数组不会执行此函数</span>\n\n  <span class=\"hljs-built_in\">console</span>.log(i)\n  <span class=\"hljs-keyword\">return</span> el\n})\n<span class=\"hljs-built_in\">console</span>.log(newArr) <span class=\"hljs-comment\">// 依然有空数组</span></code></pre>\n</section><section><h4 id=\"3911749406\">语法</h4><p>arr.map(callback[, thisArg])</p>\n</section><section><h4 id=\"1243104668\">参数</h4><ul>\n<li>callback</li>\n<li>currentValue</li>\n<li>index</li>\n<li>array</li>\n<li>thisArg 可选。callback 函数中 this 调用</li>\n</ul>\n</section><section><h4 id=\"4158635761\">示例</h4><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> newArr = arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">currentValue, index, array</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>) <span class=\"hljs-comment\">//传入的第二个参数</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">//给新数组添加值</span>\n}, $)</code></pre>\n</section><section><h4 id=\"4237948103\">兼容性</h4><p>ie678 不支持</p>\n</section></section><section><h3 id=\"1439050445\">reduce、reduceRight(相反)</h3><p>遍历累加</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">Array.prototype.reduce() - JavaScript | MDN</a></p>\n<p><strong>语法</strong> arr.reduce(callback[, initialValue])</p>\n<p><strong>参数</strong></p>\n<ul>\n<li>callback</li>\n<li>previousValue</li>\n<li>currentValue</li>\n<li>index</li>\n<li>array</li>\n<li>initialValue 可选。累加的初始值。如果不给，默认是数组的第一个，并且直接进行第二次遍历</li>\n</ul>\n<p><strong>示例</strong></p>\n<pre><code class=\"language-js\">var newArr = arr.reduce(function (previousValue, currentValue, index, array) {\n  return previousValue + currentValue //给下一次遍历传入的值\n})\n\n// 还可以按属性对object分类: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#<span class=\"hljs-variable\">%E6%</span><span class=\"hljs-number\">8</span>C<span class=\"hljs-variable\">%89%</span>E5<span class=\"hljs-variable\">%B1%</span><span class=\"hljs-number\">9</span>E<span class=\"hljs-variable\">%E6%</span><span class=\"hljs-number\">80</span><span class=\"hljs-variable\">%A7%</span>E5<span class=\"hljs-variable\">%AF%</span>B9object<span class=\"hljs-variable\">%E5%</span><span class=\"hljs-number\">88</span><span class=\"hljs-variable\">%86%</span>E7<span class=\"hljs-variable\">%B1%</span>BB</code></pre>\n<p><strong>兼容性</strong> ie678 不支持</p>\n<p><strong>注意</strong> initialValue 如果不给，默认值是数组的第一个，并且直接进行第二次遍历</p>\n</section></section><section><h2 id=\"1494230609\">类型</h2><section><h3 id=\"3619003661\">es5 方式</h3><pre><code class=\"language-js\"><span class=\"hljs-built_in\">Array</span>.isArray([]) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">Array</span>.isArray({}) <span class=\"hljs-comment\">// false</span></code></pre>\n</section><section><h3 id=\"1110224958\">全兼容方式</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> isArray =\n  <span class=\"hljs-built_in\">Array</span>.isArray ||\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">o</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(o) === <span class=\"hljs-string\">'[object Array]'</span>\n  }</code></pre>\n<p>es5 方式本质也使用了 Object.prototype.toString</p>\n</section><section><h3 id=\"2287410696\">不推荐使用</h3><p>iframe 情况可能会出问题</p>\n<pre><code class=\"language-js\">;[] <span class=\"hljs-keyword\">instanceof</span>\n  <span class=\"hljs-built_in\">Array</span>(\n    <span class=\"hljs-comment\">// true</span>\n    {},\n  ) <span class=\"hljs-keyword\">instanceof</span>\n  <span class=\"hljs-built_in\">Array</span> <span class=\"hljs-comment\">// false</span></code></pre>\n</section></section><section><h2 id=\"4148300672\">delete</h2><p>删除真实存在，不等同赋 undefined。具体见下</p>\n</section><section><h2 id=\"3281362327\">关于直接赋 undefined 与 delete 操作区别讨论</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>)\na[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">undefined</span>\na[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-literal\">undefined</span>\na[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-literal\">undefined</span>\n\n<span class=\"hljs-comment\">// 高级浏览器</span>\na.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n})\n<span class=\"hljs-comment\">// ie678使用如下</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k <span class=\"hljs-keyword\">in</span> a) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)\n}\n<span class=\"hljs-comment\">// 上面两个循环都只循环了3次</span>\n\n<span class=\"hljs-comment\">// 删除真实存在，不等同赋undefined</span>\n<span class=\"hljs-keyword\">delete</span> a[<span class=\"hljs-number\">1</span>]\n\na.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n})\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k <span class=\"hljs-keyword\">in</span> a) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)\n}\n<span class=\"hljs-comment\">// 现在只循环2次了</span>\n\na.length = <span class=\"hljs-number\">10</span>\n\na.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n})\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k <span class=\"hljs-keyword\">in</span> a) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)\n}\n<span class=\"hljs-comment\">// 还是循环2次</span>\n\na.length = <span class=\"hljs-number\">1</span>\n\na.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n})\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k <span class=\"hljs-keyword\">in</span> a) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)\n}\n<span class=\"hljs-comment\">// 循环1次</span></code></pre>\n<p>总结：</p>\n<ol>\n<li>即使是赋了 undefined 的成员，依然是存在的</li>\n<li>直接操作 length，增大操作，并不影响成员增加的本质。但对 lenght 直接减少操作会影响存在成员个数</li>\n<li>forEach 看似是用 for in 实现的，而且这两种循环只根据真实存在成员，不参照 length 属性</li>\n<li>数组也是对象，依然保留对象特性。for in、delete 的使用跟对象一样，也是可以做数据字典的。即 delete 生效于 for in(当然还有 forEach)</li>\n<li>delete 不改变 length。for 循环差不多是自己制定循环次数，受制于 length，属例外</li>\n</ol>\n<p>一些根据 length 来实现的属性，即使成员不存在： toString、join、split</p>\n<p>非根据 length 来实现的属性，只根据真实存在成员： forEach、for in</p>\n<p>此处兼容性包括 ie6 的所有浏览器</p>\n</section><section><h2 id=\"2624954706\">取最大/小值</h2><p>通过 fun.apply</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.max.apply(<span class=\"hljs-built_in\">Math</span>, [<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">43</span>])) <span class=\"hljs-comment\">// 43 最大值</span></code></pre>\n</section><section><h2 id=\"1656488678\">数组类型检测</h2><p>方式 1： <code>Array.isArray(obj)</code></p>\n<p>方式 2： <code>obj instanceof Array</code></p>\n</section><section><h2 id=\"3671639610\">valueOf 返回数组对象本身</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\">Object.prototype.valueOf() - JavaScript | MDN</a></p>\n</section><section><h2 id=\"2790674731\">参考文档</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array - JavaScript | MDN</a></p>\n</section></section><section><h1 id=\"3166149199\">console 控制台</h1><section><h2 id=\"832401365\">耗时查看。</h2><p>可用来性能测试</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">'small loop'</span>);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; i++) {}\n<span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">'small loop'</span>);\n<span class=\"hljs-comment\">//small loop: 2.304ms</span></code></pre>\n</section><section><h2 id=\"474111686\">分组</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.group(<span class=\"hljs-string\">\"程序日志\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"[07:21:36.754\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"[07:21:36.754\"</span>);\n<span class=\"hljs-built_in\">console</span>.groupEnd();</code></pre>\n</section><section><h2 id=\"2187308046\">换行写法 + 颜色</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"换\\n行\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"默认部分 %c 红色部分）\"</span>, <span class=\"hljs-string\">\"color:red\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`%c vue-devtools %c Detected Vue v<span class=\"hljs-subst\">${<span class=\"hljs-string\">'2.0.0'</span>}</span> %c`</span>, <span class=\"hljs-string\">\"background:#35495e ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff\"</span>, <span class=\"hljs-string\">\"background:#41b883 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #fff\"</span>, <span class=\"hljs-string\">\"background:transparent\"</span>)</code></pre>\n</section></section><section><h1 id=\"2189143249\">Date 时间日期</h1><section><h2 id=\"3396193842\">对象创建</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 当前时间创建</span>\n<span class=\"hljs-comment\">/**\n* 不带参即可\n*\n* 兼容性：all浏览器\n*/</span>\n<span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n\n<span class=\"hljs-comment\">// 指定时间创建</span>\n<span class=\"hljs-comment\">/**\n* 带参即可 \n*\n* 参数格式：*****************************************************\n* 1、yyyy/MM/dd HH:mm:ss(时分秒可以选带，年月日必须带)，兼容性最好\n* 2、yyyy-MM-dd HH:mm:ss(时分秒可以选带，年月日必须带)，ie6\\7\\8 不支持，ios MM-dd HH:mm:ss 部分一位数必须补0\n* 3、Mon, 21 May 2012 04:23:31 UTC\n* 4、2019-04-22T12:35:00+08:00\n* 5、number 单个多个参数\n*/</span>\n<span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'2012/03/04'</span>);\n<span class=\"hljs-keyword\">var</span> exdate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'Mon, 21 May 2012 04:23:31'</span>);\n<span class=\"hljs-comment\">//使用UTC时间初始</span>\n<span class=\"hljs-keyword\">var</span> exdate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'Mon, 21 May 2012 04:23:31 UTC'</span>);\n<span class=\"hljs-comment\">// 多参数</span>\n<span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2013</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">//实际上是 2013-12-1</span>\n<span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2013</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">//实际上是 2012-12-1</span>\n<span class=\"hljs-comment\">// 一个参数：毫秒</span>\n<span class=\"hljs-keyword\">var</span> myDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">1000</span>)</code></pre>\n</section><section><h2 id=\"35412559\">ios &quot;-&quot; 号连接问题</h2><p>月日必须是2位，&quot;/&quot; 没有此问题。Android也没有问题</p>\n<p>ios版本：iPhone OS 11_0_3 AppleWebKit/604.1.38 Version/11.0 Mobile/15A432 Safari/604.1</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'2017-1-1'</span>) <span class=\"hljs-comment\">// 不支持</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'2017-01-01'</span>) <span class=\"hljs-comment\">// 支持</span></code></pre>\n</section><section><h2 id=\"1147863100\">取月总天数</h2><p>指定年月, 天的总数</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// month 从1 开始</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getDayCount</span> (<span class=\"hljs-params\">year, month</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(year, month)\n  d.setDate(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> d.getDate()\n}\n</code></pre>\n</section><section><h2 id=\"2150614988\">时间获取</h2><section><h3 id=\"2076836899\">当前时间获取</h3><p>毫秒方式直接取 <code>Date.now()</code></p>\n<p>对象方式 <code>new Date()</code></p>\n</section><section><h3 id=\"1944822163\">toString、toUTCString</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> timeTxt = exdate.toString() <span class=\"hljs-comment\">//将返回格式 如：Mon May 21 2012 12:19:10 UTC+0800 (中国标准时间)</span>\n<span class=\"hljs-keyword\">var</span> timeTxtUTC = exdate.toUTCString();<span class=\"hljs-comment\">//将返回格式 如：Mon, 21 May 2012 04:23:31 UTC</span>\n<span class=\"hljs-comment\">// toString：返回当前地区时间</span>\n<span class=\"hljs-comment\">// toUTCString：返回UTC时间</span></code></pre>\n</section><section><h3 id=\"2158334156\">指定段获取</h3><pre><code class=\"language-js\">\n<span class=\"hljs-comment\">// 年</span>\n<span class=\"hljs-comment\">// number类型</span>\n<span class=\"hljs-comment\">// 兼容性：all浏览器</span>\nmyDate.getFullYear()\n\n<span class=\"hljs-comment\">// 月</span>\n<span class=\"hljs-comment\">// 从0开始，即0代表1月份</span>\n<span class=\"hljs-comment\">// number类型</span>\n<span class=\"hljs-comment\">// 兼容性：all浏览器</span>\nmyDate.getMonth();\n\n<span class=\"hljs-comment\">// 号(天)</span>\n<span class=\"hljs-comment\">// number类型</span>\n<span class=\"hljs-comment\">// 兼容性：all浏览器</span>\nmyDate.getDate();\n\n<span class=\"hljs-comment\">// 星期</span>\n<span class=\"hljs-comment\">// 获取值范围：0~6</span>\n<span class=\"hljs-comment\">// 其中0代表星期天。其他不变</span>\nmyDate.getDay();\n</code></pre>\n</section><section><h3 id=\"3913794868\">毫秒获取</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 毫秒</span>\nmyDate.getTime();\n<span class=\"hljs-comment\">// 简写</span>\n<span class=\"hljs-keyword\">var</span> time = +myDate</code></pre>\n</section></section><section><h2 id=\"3122962870\">时间设置</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 年</span>\nmyDate.setFullYear(<span class=\"hljs-number\">2012</span>)\nmyDate.setFullYear(<span class=\"hljs-number\">2012</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 支持月日</span>\n<span class=\"hljs-comment\">// 兼容性：包括ie6的所有</span>\n\n<span class=\"hljs-comment\">// 天</span>\n<span class=\"hljs-comment\">// 溢出情况，将累加到下个月</span>\n<span class=\"hljs-comment\">// 负数情况，往后退</span>\n<span class=\"hljs-comment\">// 参数0，为上个月的最后一天</span>\nmyDate.setDate(<span class=\"hljs-number\">31</span>);\n<span class=\"hljs-comment\">// 兼容性：包括ie6的所有</span>\n\n<span class=\"hljs-comment\">// 秒</span>\nmyDate.setSeconds(<span class=\"hljs-number\">-70</span>);\n<span class=\"hljs-comment\">// 兼容性：包括ie6的所有</span>\n\n<span class=\"hljs-comment\">// 毫秒</span>\n<span class=\"hljs-comment\">// 从1970年开始的毫秒数，负数可回到1970年之后</span>\nmyDate.setTime(<span class=\"hljs-number\">1</span>); \n<span class=\"hljs-comment\">// 兼容性：包括ie6的所有</span>\n</code></pre>\n</section></section><section><h1 id=\"2780876614\">Function 函数</h1><section><h2 id=\"3025415607\">两个重要特征</h2><p>1、依然是对象\n2、提供局部作用域</p>\n</section><section><h2 id=\"2658171238\">函数创建</h2><p><strong>1 声明</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">argument</span>) </span>{\n    <span class=\"hljs-comment\">// body...  </span>\n}\n<span class=\"hljs-comment\">// 输出：有名字</span>\nel.innerHTML = fn;<span class=\"hljs-comment\">// function fn(argument) { // body... }</span>\n<span class=\"hljs-comment\">// 不管放到何处，都将最先被创建赋值。也就是可以如下写：</span>\nel.innerHTML = fn;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">argument</span>) </span>{ }</code></pre>\n<p><strong>2 表达式</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 匿名函数赋值</span>\n<span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">argument</span>) </span>{\n    <span class=\"hljs-comment\">// body...  </span>\n};\n<span class=\"hljs-comment\">// 输出：可以看到没有名字</span>\ninfo.innerHTML = fn;<span class=\"hljs-comment\">// function (argument) { // body... }</span></code></pre>\n<p><strong>3 构造函数</strong></p>\n<p>类似eval，不推荐的方式，费效率\n函数赋值的方式类似 2，也是匿名赋值\n语法：<code>new Function ([arg1[, arg2[, ... argN]],] functionBody)</code></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">'alert(\"\")'</span>);<span class=\"hljs-comment\">// 不带参</span>\n<span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'alert(a+b)'</span>);<span class=\"hljs-comment\">// 带参</span></code></pre>\n</section><section><h2 id=\"1174573020\">prototype</h2><section><h3 id=\"3108014398\">原型概念</h3><p>原型，其实就是将成员共享出去，共享给以后的每个实例，这样，每次创建新实例对象时，就不用每次都重新创建成员了</p>\n</section><section><h3 id=\"2646955659\">写操作：将影响所有实例</h3><p>对类的prototype成员的增删改，会影响<strong>之前之后</strong>的所有实例。即现有的实例，后来新加的实例，都会被影响</p>\n</section><section><h3 id=\"3370842775\">与prototype相对的this的写操作：只影响当前实例</h3></section><section><h3 id=\"446725857\">可通过this(实例)访问</h3><p>prototype设置的成员，包括方法，属性，可通过this访问</p>\n<p>this的本质就是当前实例，this可以访问，实例也可以访问</p>\n<p>关于优先权：实例直接成员将优先访问，没有直接成员情况才会访问prototype</p>\n</section><section><h3 id=\"1373621691\">关于<strong>proto</strong> 理解</h3><p>函数的prototype 属性，当函数被实例化后，prototype 属性就变成<strong>proto</strong>了。<br>相当于，<strong>函数的prototype与实例的<strong>proto</strong>引用的是同一个对象</strong>。下面问题的解答也证实了这点</p>\n<p>问题1：<strong>proto</strong> 只跟当前实例有关？<br>操作实例的<strong>proto</strong>相当于操作类的prototype，所有跟所有之前之后的实例都有关系。</p>\n<p>问题2：<strong>proto</strong> 设置的成员可直接通过实例访问？<br>当然可以，因为操作实例的<strong>proto</strong>相当于操作类的prototype，而类的prototype的修改是会影响之前之后的所有实例</p>\n</section><section><h3 id=\"2481908946\">prototype起始值是一个空对象</h3><p>兼容性：ie6+</p>\n</section><section><h3 id=\"2352409695\">prototype方式无法重写this添加的成员</h3><p>也就是实例直接添加成员\n这里也引发了优先权问题，也就解释了为什么无法重写：实例直接成员将优先访问，没有直接成员情况才会访问prototype</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> x + y;\n    }\n}\nfoo.prototype.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x + y + <span class=\"hljs-number\">10</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-keyword\">new</span> foo();\nalert(f.add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">//结果是3，而不是13</span>\n</code></pre>\n<p>也无法重写直接指定的成员，看来this就是直接添加的成员</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-keyword\">new</span> foo();\nf.hello=<span class=\"hljs-string\">'world'</span>;\nfoo.prototype.hello = <span class=\"hljs-string\">'what?'</span>;\nalert(f.hello); <span class=\"hljs-comment\">//'world'</span></code></pre>\n</section><section><h3 id=\"2070582359\">构造函数 - 性能</h3><p>减少避免构造函数的复制操作： \n构造函数每次创建对象，其中的私有成员，包括this的赋值，都会重新创建。可以尽可能的将其中公共的成员通过prototype共享出来，减少复制操作，节约内存</p>\n</section></section><section><h2 id=\"1507112103\">this</h2><section><h3 id=\"3776746483\">this读操作</h3><p>函数是需要一个对象来执行的，而this用来获取执行这个函数的对象</p>\n</section><section><h3 id=\"3545341925\">this成员读操作</h3><p>this(实例对象)成员读取：将优先访问自身成员，没有自身成员则访问prototype成员</p>\n</section><section><h3 id=\"3618265997\">this成员写操作，也就是给this增加新成员，或者修改现有成员</h3><p>增删改成员：影响当前实例，其实就是实例的增删改。此操作会覆盖当前实例同名prototype成员。强调，只对当前实例有影响，其他实例不影响</p>\n</section><section><h3 id=\"884552500\">举例说明</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> obj={};\n\nobj.fun=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>);<span class=\"hljs-comment\">// 这个this就是那个obj</span>\n};\n\n<span class=\"hljs-comment\">// 看。用obj执行fun函数</span>\nobj.fun();\n</code></pre>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 那么这又是怎么回事呢</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>);<span class=\"hljs-comment\">// 这个this是个啥？？？其实返回window，为啥？？</span>\n}\n\n<span class=\"hljs-comment\">// 这是用什么执行的？？？！！！</span>\nfun();\n\n})();\n</code></pre>\n<p><strong>对于不指明的函数执行，将固定使用window来执行。所以上例中的this是window对象。</strong><br>上例加个自执行函数是为了说明即使不是全局对象(全局对象可隐藏window)，依然是使用window来执行</p>\n<p><strong>但es5改变了这一标准。对于不指明的函数执行，this都将返回undefined</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 开启 es5</span>\n<span class=\"hljs-meta\">\"use strict\"</span>;\n\n<span class=\"hljs-comment\">// #1</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n}\nfun();<span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-built_in\">window</span>.fun();<span class=\"hljs-comment\">// window</span>\n\n<span class=\"hljs-comment\">// #2 即使显式的指明是window的成员，依然同上</span>\n<span class=\"hljs-built_in\">window</span>.fun2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n};\nfun2();<span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-built_in\">window</span>.fun()<span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">// window </span>\n</code></pre>\n</section><section><h3 id=\"2733989877\">改变this指向</h3><p><strong>call、apply</strong></p>\n<p>见<a href=\"#js/2847403752\">call，apply</a></p>\n<p><strong>Function.prototype.bind()</strong><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function.prototype.bind() - JavaScript | MDN</a></p>\n<p>指定 this 指向，固定的绑定。返回一个新函数</p>\n<p>apply call 区别：apply call 是用指定的对象执行，立即执行。bind 是固定绑定一个对象，等待调用执行。除非更改绑定，否则不会执行</p>\n<p>兼容性：es5 规范。ie中只ie9开始支持</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> obj = {\n    <span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>);\n    }\n};\n\n<span class=\"hljs-keyword\">var</span> new_fn = obj.fn.bind({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'newObj'</span>});\n\n<span class=\"hljs-comment\">// 返回一个新函数</span>\n<span class=\"hljs-built_in\">console</span>.log(new_fn === obj.fn);<span class=\"hljs-comment\">// false</span>\n\nnew_fn(); <span class=\"hljs-comment\">// this 是 bind 绑定的那个</span>\n\n({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'newObj-2'</span>,\n    <span class=\"hljs-attr\">fn</span>: new_fn\n}).fn();<span class=\"hljs-comment\">// this 依然是 bind 绑定的那个</span>\n\n({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'newObj-2'</span>,\n    <span class=\"hljs-attr\">fn</span>: obj.fn\n}).fn();<span class=\"hljs-comment\">// this 遵循一般规则，可任意改变</span>\n</code></pre>\n</section></section><section><h2 id=\"2822349639\">js继承</h2><p>子类继承父类<br>子类拥有父类的成员。但父类不拥有子类的成员</p>\n<p><strong>1模拟继承 错误例子：</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">A</span>(<span class=\"hljs-params\"></span>) </span>{\n\n}\n\nA.prototype.a=<span class=\"hljs-number\">111</span>;\nA.prototype.b=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">222</span>;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">B</span>(<span class=\"hljs-params\"></span>) </span>{\n\n}\n\nB.prototype=A.prototype;\n\nA.prototype.c=<span class=\"hljs-number\">333</span>;\nB.prototype.d=<span class=\"hljs-number\">444</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> A);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> B);\n</code></pre>\n<p>上例中，A类和B类的prototype同时引用了同一个对象，所以父类也继承了子类的成员。。</p>\n<p><strong>2模拟继承 正确例子：</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">A</span>(<span class=\"hljs-params\"></span>) </span>{\n\n}\n\nA.prototype.a=<span class=\"hljs-number\">111</span>;\nA.prototype.b=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">222</span>;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">B</span>(<span class=\"hljs-params\"></span>) </span>{\n\n}\n\nB.prototype=<span class=\"hljs-keyword\">new</span> A ;\n\nA.prototype.c=<span class=\"hljs-number\">333</span>;\nB.prototype.d=<span class=\"hljs-number\">444</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> A);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> B);\n</code></pre>\n<section><h3 id=\"3372466773\">constructor 取实例的构造函数</h3><p>constructor<br>用来获取 创建此 对象 的函数</p>\n<p><em>可通过prototype改变指向</em></p>\n<p><strong>兼容性</strong><br>包括ie6的所有</p>\n<p><strong>代码示例</strong>  </p>\n<p>function a() { alert(); }\nvar _a = new a();</p>\n<p>console.log((_a).constructor);//通过对象_a 取到了 函数a\n//等同于 下面\nconsole.log(a);</p>\n<p>//可以通过 constructor执行 此函数\nconsole.log((_a).constructor());</p>\n<p>console.log(([]).constructor === Array);// true</p>\n</section></section><section><h2 id=\"278430446\">？name 属性</h2><p>函数表达式：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> fun = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ };<span class=\"hljs-comment\">// 未命名函数</span>\nfun.name <span class=\"hljs-comment\">// 'fun'，这是chrome结果</span>\nfun.name <span class=\"hljs-comment\">// ''(空字符串)，ie所有，包括最新的ie edge</span></code></pre>\n<p>所以，如果需要使用name属性，最好还是使用下面的方式：函数声明</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>) </span>{ }\nfun.name <span class=\"hljs-comment\">// 'fun'</span></code></pre>\n<p>此属性不是ECAM 标准？？</p>\n</section><section><h2 id=\"2244913135\">函数作用域</h2><p><strong>作用域 与 重写</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(sum(<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n\n    <span class=\"hljs-comment\">// 只能重写此域中的sum</span>\n    <span class=\"hljs-comment\">// 外部的sum并不受影响</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">a</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> a + <span class=\"hljs-number\">99</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> a + b;\n}</code></pre>\n<p><strong>只有函数提供作用域</strong><br>并非使用花括号就能定义局部作用域<br>只有函数能提供作用域，if等包裹并没有作用域</p>\n</section><section><h2 id=\"730488890\">闭包-函数声明位置可调用同级或上级变量</h2><p><strong>不管函数赋给了哪里的变量，也不管函数在哪里执行，它声明位置的同级或上级变量都可调用</strong></p>\n<p>闭包详细：<br>父函数中子函数，子函数将拥有一个不影响外界的空间(函数作用域)，如果再将子函数 return 出去，那么，子函数不管再何处执行(其他某个函数域)，并不影响子函数对这个封闭的空间中同级或上级变量使用，此时这个封闭的空间就是闭包了，一个可以在任何位置被激活的封闭空间</p>\n<p>单纯的作用域虽然也是封闭空间，但不能叫闭包，这个封闭空间必须满足可在任意位置被激活</p>\n</section><section><h2 id=\"3479482034\">声明VS表达式</h2><p><strong>声明拥有变量提升特性</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 调用在上</span>\n<span class=\"hljs-built_in\">console</span>.log(sum(<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>));\n\n<span class=\"hljs-comment\">// 声明写下面</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> a + b;\n}\n<span class=\"hljs-comment\">// 甚至可以这样：</span>\n<span class=\"hljs-built_in\">console</span>.log(sum(<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>));\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n\n    <span class=\"hljs-keyword\">return</span> sum(a, b);\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> a + b;\n    }\n}</code></pre>\n<p><strong>表达式其实就是赋值</strong><br>把函数当成值来使用</p>\n</section><section><h2 id=\"1127594221\">回调函数 概念</h2><p>函数A作为参数传入函数B，并可能在函数B内执行，那么A就被称为回调函数</p>\n<pre><code class=\"language-js\">B(a);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">A</span>(<span class=\"hljs-params\"></span>) </span>{\n\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">B</span>(<span class=\"hljs-params\">callback</span>) </span>{\n    callback();\n}</code></pre>\n</section><section><h2 id=\"2847403752\">call，apply</h2><p>指定对象执行函数</p>\n<p><strong>使用 null 或者 undefined 去执行某函数，this 指向问题？</strong><br>ES5 以下将指向 window<br>ES5 直接就是 null 或者 undefined 。用的什么就指向什么</p>\n<p>这样看来，call，apply 可以不带任何参数执行</p>\n<p>兼容性：ie6也如上所说</p>\n<section><h3 id=\"1673171658\">apply妙用</h3><ol>\n<li>实现两个函数参数一样，配合arguments</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn1</span>(<span class=\"hljs-params\">a1,a2,a3</span>) </span>{\n    fn2.apply(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-built_in\">arguments</span>);\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">a1, a2, a3</span>) </span>{ }</code></pre>\n<ol start=\"2\">\n<li>取数组 最大\\最小值\n兼容性：all</li>\n</ol>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.max.apply(<span class=\"hljs-built_in\">Math</span>, [<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">43</span>])); <span class=\"hljs-comment\">// 43</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.min.apply(<span class=\"hljs-built_in\">Math</span>, [<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">43</span>])); <span class=\"hljs-comment\">// 23</span></code></pre>\n</section></section><section><h2 id=\"2412248958\">变量、函数提升的区别</h2><p><em>es6将取消</em></p>\n<p>函数是完全的提升；\n变量只是 声明提升，赋值运算不会提升</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(a)\n<span class=\"hljs-keyword\">var</span> a=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-built_in\">console</span>.log(a)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)\n}\n\n<span class=\"hljs-comment\">// 提升后</span>\n<span class=\"hljs-keyword\">var</span> a\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>)\n}\n<span class=\"hljs-built_in\">console</span>.log(a)\na=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-built_in\">console</span>.log(a)</code></pre>\n</section><section><h2 id=\"1584541971\">arguments 函数参数</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\">Arguments 对象 - JavaScript | MDN</a></p>\n<p>类数组对象，获取当前函数参数</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\">a</span>) </span>{\n    <span class=\"hljs-comment\">//获取</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] === a) <span class=\"hljs-comment\">// true</span>\n\n    <span class=\"hljs-comment\">//获取参数个数 —— length 属性</span>\n    alert(a + <span class=\"hljs-string\">\"||\"</span> + <span class=\"hljs-built_in\">arguments</span>.length);\n\n    <span class=\"hljs-comment\">//当前函数获取 —— callee属性 (严格模式不可用)</span>\n    <span class=\"hljs-comment\">//callee属性 属于 arguments对象</span>\n    <span class=\"hljs-comment\">//当然，直接通过 函数对象 变量名也可 获取当前 被执行的函数对象。对于一些无名函数可通过此方式</span>\n    alert(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">arguments</span>.callee);\n}\n</code></pre>\n<p>兼容性：所有浏览器</p>\n</section><section><h2 id=\"196433594\">length，函数预设参数个数</h2><pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\">a,b,c</span>)</span>{}\n<span class=\"hljs-built_in\">console</span>.log(fun.length)<span class=\"hljs-comment\">//3</span></code></pre>\n<p>兼容性：ie6+、其他所有</p>\n</section><section><h2 id=\"2435505335\">函数执行</h2><p>函数的每次执行，都将是一次全新的执行</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-number\">123</span>\n    <span class=\"hljs-keyword\">return</span> {\n    getName () {\n        <span class=\"hljs-keyword\">return</span> name\n    },\n    setName (newName) {\n        name = newName\n    }\n    }\n}\n\n<span class=\"hljs-keyword\">var</span> f1 = fun()\n<span class=\"hljs-keyword\">var</span> f2 = fun()\n\nf1.setName(<span class=\"hljs-number\">111</span>)\n<span class=\"hljs-built_in\">console</span>.log(f1.getName()) <span class=\"hljs-comment\">// 111</span>\n\n<span class=\"hljs-comment\">// 函数每次执行都是新的</span>\n<span class=\"hljs-built_in\">console</span>.log(f2.getName()) <span class=\"hljs-comment\">// 123</span></code></pre>\n</section></section><section><h1 id=\"1667597157\">MathAndNumber</h1></section><section><h1 id=\"409874646\">Math And Number</h1><section><h2 id=\"3282441232\">数位处理</h2><section><h3 id=\"3872382793\">去小数</h3><section><h4 id=\"3925574589\">直接去，黑魔法</h4><p>参数可以使字符串</p>\n<p>参数不是数字类型：返回 0</p>\n<p>返回值类型：number</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(~~<span class=\"hljs-number\">12.123</span>) <span class=\"hljs-comment\">// 12</span>\n<span class=\"hljs-built_in\">console</span>.log(~~<span class=\"hljs-string\">'-12.123'</span>) <span class=\"hljs-comment\">// -12</span>\n<span class=\"hljs-built_in\">console</span>.log(~~num / <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// num去小数后 在除2。如果是对结果去小数，需加个括号</span>\n<span class=\"hljs-built_in\">console</span>.log(~~<span class=\"hljs-string\">'-12.123px'</span>) <span class=\"hljs-comment\">// 0 。非数字类型返回0，即 isNaN 为 false 的值</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'-12.123'</span> ^ <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// -12</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'-12.123'</span> | <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// -12</span></code></pre>\n</section><section><h4 id=\"3350668742\">向前取整</h4><p>正数去小数后加一<br>负数直接去小数</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-number\">5.1</span>)) <span class=\"hljs-comment\">// 6</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-string\">'5.1'</span>)) <span class=\"hljs-comment\">// 6。返回 Number 类型</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-number\">-5.1</span>)) <span class=\"hljs-comment\">// -5</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-number\">5.5</span>)) <span class=\"hljs-comment\">// 6</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-number\">5.0</span>)) <span class=\"hljs-comment\">// 5。这种情况不能看成小数</span></code></pre>\n</section><section><h4 id=\"3045798953\">向后取整</h4><p>与 Math.ceil 相反</p>\n<p>正数直接去小数<br>负数去小数后减一</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-number\">5.1</span>)) <span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-string\">'5.1'</span>)) <span class=\"hljs-comment\">// 5。返回 Number 类型</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-number\">-5.1</span>)) <span class=\"hljs-comment\">// -6</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-number\">5.5</span>)) <span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-number\">5.0</span>)) <span class=\"hljs-comment\">// 5。这种情况不能看成小数</span></code></pre>\n</section><section><h4 id=\"1791927249\">四舍五入</h4><pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-number\">5.1</span>)) <span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-string\">'5.1'</span>)) <span class=\"hljs-comment\">// 5。返回 Number 类型</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-number\">-5.1</span>)) <span class=\"hljs-comment\">// -5</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-number\">-5.6</span>)) <span class=\"hljs-comment\">// -6</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-number\">5.5</span>)) <span class=\"hljs-comment\">// 6</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-number\">5.0</span>)) <span class=\"hljs-comment\">// 5。这种情况不能看成小数</span></code></pre>\n</section></section><section><h3 id=\"1782619720\">保留指定位小数</h3><p>numObj.toFixed([digits])</p>\n<p>返回字符串</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log((<span class=\"hljs-number\">56.45</span>).toFixed()) <span class=\"hljs-comment\">// '56'。参数可选，默认0，即去掉所有小数</span>\n<span class=\"hljs-built_in\">console</span>.log((<span class=\"hljs-number\">56.456</span>).toFixed(<span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// '56.46'。 四舍五入</span>\n<span class=\"hljs-built_in\">console</span>.log((<span class=\"hljs-number\">56</span>).toFixed(<span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// '56.00'。根据参数固定保留</span></code></pre>\n</section></section><section><h2 id=\"798766871\">随机数 random</h2><p>获取 0~1 之间的随机数。小数位大概在 17 位以上。20 位以下。</p>\n<pre><code class=\"language-js\"><span class=\"hljs-selector-tag\">document</span><span class=\"hljs-selector-class\">.write</span>(<span class=\"hljs-selector-tag\">Math</span><span class=\"hljs-selector-class\">.random</span>())</code></pre>\n<p><strong>应用：</strong> 指定范围整数</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 0~1</span>\n~~(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\">// 0~5</span>\n~~(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">6</span>)\n<span class=\"hljs-comment\">// ...(类推)</span>\n\n<span class=\"hljs-comment\">// 附上循环测试例子</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">100</span>; i--; ) {\n  <span class=\"hljs-built_in\">console</span>.log(~~(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">6</span>))\n}\n\n<span class=\"hljs-comment\">// 可指定开始和结束</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">randomNum</span>(<span class=\"hljs-params\">s, e</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.random() * (e - s) + s\n}</code></pre>\n</section><section><h2 id=\"972963395\">平方</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">//参数：必须</span>\nalert(<span class=\"hljs-built_in\">Math</span>.sqrt(<span class=\"hljs-number\">9</span>)) <span class=\"hljs-comment\">//3</span></code></pre>\n</section><section><h2 id=\"4078973787\">幂/平方</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">//参数：必须</span>\nalert(<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">//9，即3的2次幂</span></code></pre>\n</section><section><h2 id=\"2303143845\">平方根，立方根</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">//3</span>\n<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">//2</span></code></pre>\n</section><section><h2 id=\"3327294193\">角度 与 弧度</h2><p>弧度与角度关系：π(弧度)= 180°</p>\n<p>1 角度 所代表的 弧度 是：<code>Math.PI / 180</code></p>\n<p>1 弧度 所代表的 角度 是：<code>180 / Math.PI</code></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 角度转弧度：</span>\n<span class=\"hljs-comment\">// 参数：角度</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">radian</span>(<span class=\"hljs-params\">angle</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (angle * <span class=\"hljs-built_in\">Math</span>.PI) / <span class=\"hljs-number\">180</span>\n}\n\n<span class=\"hljs-comment\">// 弧度转角度：</span>\n<span class=\"hljs-comment\">// 参数：弧度</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">angle</span>(<span class=\"hljs-params\">radian</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (radian * <span class=\"hljs-number\">180</span>) / <span class=\"hljs-built_in\">Math</span>.PI\n}</code></pre>\n</section><section><h2 id=\"827511866\">直角三角形</h2><section><h3 id=\"22951053\">所有 相关 函数</h3><p>Math.sin() -- 返回数字的正弦值<br>Math.cos() -- 返回数字的余弦值<br>Math.tan() -- 返回数字的正切值<br>Math.asin() -- 返回数字的反正弦值<br>Math.acos() -- 返回数字的反余弦值<br>Math.atan() -- 返回数字的反正切值<br>Math.atan2() -- 返回由 x 轴到点(x,y)的角度(以弧度为单位)<br>Math.PI 属性 -- 返回圆的周长与其直径的比值(圆周率 π)，约等于 3.1415926</p>\n</section><section><h3 id=\"2097084617\">边的比值-正弦 余弦 正切</h3><pre><code class=\"language-js\"><span class=\"hljs-built_in\">Math</span>.sin(r) <span class=\"hljs-comment\">//正弦</span>\n<span class=\"hljs-built_in\">Math</span>.cos(r) <span class=\"hljs-comment\">//余弦</span>\n<span class=\"hljs-built_in\">Math</span>.tan(r) <span class=\"hljs-comment\">//正切</span></code></pre>\n<p><strong>参数：</strong><br>number 类型，弧度值<br><strong>返回值：</strong><br>number 类型，边的比值</p>\n<p><strong>数学知识</strong><br>正弦：对比斜<br>余弦：邻比斜<br>正切：对比邻</p>\n</section><section><h3 id=\"3103237211\">角度获取</h3><p>所有代码示例：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">/* 参数: 边的比值 */</span>\n<span class=\"hljs-comment\">/* 返回值: 弧度值 */</span>\n<span class=\"hljs-comment\">// 反正弦</span>\n<span class=\"hljs-built_in\">Math</span>.asin(r)\n<span class=\"hljs-comment\">// 反余弦</span>\n<span class=\"hljs-built_in\">Math</span>.acos(r)\n<span class=\"hljs-comment\">// 反正切</span>\n<span class=\"hljs-built_in\">Math</span>.atan(r)\n\n\n<span class=\"hljs-comment\">/* 参数: 点（x,y） */</span>\n<span class=\"hljs-comment\">/* 返回值: 弧度值 */</span>\n<span class=\"hljs-comment\">// 反正切2</span>\n<span class=\"hljs-built_in\">Math</span>.atan2(y,x)</code></pre>\n</section></section><section><h2 id=\"3175650858\">圆</h2><section><h3 id=\"250107012\">PI</h3><pre><code class=\"language-js\">alert(<span class=\"hljs-built_in\">Math</span>.PI) <span class=\"hljs-comment\">// 3.141592653589793。包括ie6的所有都返回这样一组数</span></code></pre>\n</section></section><section><h2 id=\"2306496026\">绝对值</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.abs(<span class=\"hljs-number\">-1</span>)) <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.abs(<span class=\"hljs-string\">'-1'</span>)) <span class=\"hljs-comment\">// 1</span></code></pre>\n</section><section><h2 id=\"3932258542\">取最大/小值</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">43</span>) <span class=\"hljs-comment\">// 43</span>\n<span class=\"hljs-built_in\">Math</span>.min(<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">43</span>) <span class=\"hljs-comment\">// 23</span>\n\n<span class=\"hljs-comment\">// 可用来取数组最大/小值。通过 apply</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.max.apply(<span class=\"hljs-built_in\">Math</span>, [<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">43</span>])) <span class=\"hljs-comment\">// 43 最大值</span></code></pre>\n</section><section><h2 id=\"3519842419\">e，某数乘 10 的 n 次方</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1e3</span>) <span class=\"hljs-comment\">// 1000 即1*Math.pow(10, 3)</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2e3</span>) <span class=\"hljs-comment\">// 2000 即2*Math.pow(10, 3)</span></code></pre>\n</section><section><h2 id=\"861380564\">一些应用</h2><section><h3 id=\"2340109300\">3 点算角度</h3><p>使用余弦定理</p>\n</section></section></section><section><h1 id=\"145701656\">Object</h1><section><h2 id=\"1676654721\">JSON字符串 -&gt; JS对象</h2><p>通过 JSON.parse</p>\n<p>通过 eval，不推荐</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> objs = <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">'({ \"border\": \"2px #0068b7 solid\", \"height\": \"200px\" })'</span>);</code></pre>\n</section><section><h2 id=\"1588921197\">删除操作</h2></section><section><h2 id=\"2774837342\">快速效率查找实现</h2><p>配合delete，for in，js空对象可做 数据字典，实现快速效率查找</p>\n<p>实践：复选框绑定id，复选框对应空对象，空对象中的已有项可定位原数据</p>\n</section><section><h2 id=\"1910162374\">Object.assign() 合并复制</h2><section><h3 id=\"3547087177\">合并</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign() - JavaScript | MDN</a></p>\n<p>将修改源对象</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> obj = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-built_in\">Object</span>.assign(obj, {<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span>});\n<span class=\"hljs-comment\">// obj 对象变了</span>\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// { a: 1, b: 2 }</span></code></pre>\n</section><section><h3 id=\"3054155400\">复制</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> obj = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">var</span> copy = <span class=\"hljs-built_in\">Object</span>.assign({}, obj);\n<span class=\"hljs-built_in\">console</span>.log(copy); <span class=\"hljs-comment\">// { a: 1 }</span></code></pre>\n</section></section><section><h2 id=\"2159938280\">Object.create() 创建原型对象</h2><p>将目标对象的属性生成到新对象的原型上去</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create() - JavaScript | MDN</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">Object</span>.create({<span class=\"hljs-attr\">bar</span>: <span class=\"hljs-number\">123</span>})\n<span class=\"hljs-built_in\">console</span>.log(obj.__proto__.bar === <span class=\"hljs-number\">123</span>) <span class=\"hljs-comment\">// true</span></code></pre>\n</section><section><h2 id=\"2955856393\">Object.defineProperties() 定义属性的新方式</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\">Object.defineProperties() - JavaScript | MDN</a></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> obj = {};\n<span class=\"hljs-built_in\">Object</span>.defineProperties(obj, {\n  <span class=\"hljs-string\">'property1'</span>: {\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>\n  },\n  <span class=\"hljs-string\">'property2'</span>: {\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'Hello'</span>,\n    <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span>\n  },\n  <span class=\"hljs-string\">'fun'</span>: {\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{},\n    <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span>\n  }\n});\n<span class=\"hljs-built_in\">console</span>.log(obj.property2) <span class=\"hljs-comment\">// Hello</span>\n<span class=\"hljs-built_in\">console</span>.log(obj.fun) <span class=\"hljs-comment\">// 这是一个值为函数的属性</span></code></pre>\n</section><section><h2 id=\"1465694503\">成员遍历</h2><section><h3 id=\"3755231985\">for...in</h3><p>包括 <strong>可枚举、原型上</strong> 属性</p>\n</section><section><h3 id=\"1888839003\">Object.keys</h3><p>包括 <strong>可枚举</strong> 属性<br>不包括 <strong>原型上</strong> 的属性</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\">Object.keys() - JavaScript | MDN</a></p>\n<p>Object.keys 不包括原型上的属性，for...in 还将枚举原型上的属性</p>\n<p>JSON.stringify()：也只串行化对象自身的可枚举的属性</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// simple array</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.keys(arr)); <span class=\"hljs-comment\">// console: ['0', '1', '2']</span>\n\n<span class=\"hljs-comment\">// array like object</span>\n<span class=\"hljs-keyword\">var</span> obj = { <span class=\"hljs-number\">0</span>: <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">2</span>: <span class=\"hljs-string\">'c'</span> };\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.keys(obj)); <span class=\"hljs-comment\">// console: ['0', '1', '2']</span></code></pre>\n</section><section><h3 id=\"975072375\">getOwnPropertyNames</h3><p>包括 <strong>可枚举、不可枚举</strong> 属性<br>不包括 <strong>原型上</strong> 的属性</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"Poly\"</span>, <span class=\"hljs-string\">\"career\"</span>:<span class=\"hljs-string\">\"it\"</span>}\n\n<span class=\"hljs-comment\">// 此方式将创建一个不可枚举属性</span>\n<span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">\"age\"</span>, {<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">\"forever 18\"</span>, <span class=\"hljs-attr\">enumerable</span>:<span class=\"hljs-literal\">false</span>});\n\n<span class=\"hljs-comment\">// 原型属性</span>\n<span class=\"hljs-built_in\">Object</span>.prototype.protoPer1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"proto\"</span>);};\n<span class=\"hljs-built_in\">Object</span>.prototype.protoPer2 = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(\n  <span class=\"hljs-string\">\"Object.getOwnPropertyNames: \"</span>,\n  <span class=\"hljs-built_in\">Object</span>.getOwnPropertyNames(obj)); <span class=\"hljs-comment\">// [\"name\", \"career\", \"age\"]</span></code></pre>\n</section></section><section><h2 id=\"3963010477\">判断是否是实例成员 - in关键字</h2><p><a href=\"./index.html#js/133094510\">见关键字</a></p>\n</section><section><h2 id=\"1039408945\">判断是否非 prototype 成员 - hasOwnProperty</h2><p>hasOwnProperty: 指示对象自身属性中是否具有指定的属性</p>\n<p>实例的方法<br>返回bool值，true表示是非通过prototype添加的成员</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">Object</span>.prototype.bar = <span class=\"hljs-number\">1</span>; \n<span class=\"hljs-keyword\">var</span> foo = {<span class=\"hljs-attr\">goo</span>: <span class=\"hljs-literal\">undefined</span>};\nfoo.la=<span class=\"hljs-number\">3</span>;\nfoo.hasOwnProperty(<span class=\"hljs-string\">'bar'</span>); <span class=\"hljs-comment\">// false</span>\nfoo.hasOwnProperty(<span class=\"hljs-string\">'goo'</span>); <span class=\"hljs-comment\">// true</span>\nfoo.hasOwnProperty(<span class=\"hljs-string\">'la'</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// 推荐通过 prototype 调用。因为 hasOwnProperty 非敏感词，可能被占用</span>\n<span class=\"hljs-built_in\">Object</span>.prototype.hasOwnProperty.call(foo, <span class=\"hljs-string\">'la'</span>); <span class=\"hljs-comment\">// true</span></code></pre>\n</section></section><section><h1 id=\"3968836150\">String 字符串</h1><section><h2 id=\"3212418214\">取索引</h2><p>indexOf 从前往后; lastIndexOf 从后往前</p>\n<ul>\n<li>什么时候匹配结束：匹配成功便结束，不再继续查找</li>\n<li>没有匹配返回值：-1</li>\n<li>参数多个字符情况: 返回开头字符索引</li>\n</ul>\n<pre><code><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">\"helloword\"</span>;\n\n<span class=\"hljs-comment\">//从前往后</span>\nstr.indexOf(<span class=\"hljs-string\">'ow'</span>) <span class=\"hljs-comment\">// 4</span>\n\n<span class=\"hljs-comment\">//从后往前</span>\nsrt.lastIndexOf(<span class=\"hljs-string\">'ow'</span>) <span class=\"hljs-comment\">// 6</span></code></pre></section><section><h2 id=\"1280789363\">字符串比较</h2><p>小返回-1，相等返回0，大返回1。可实现排序</p>\n<pre><code class=\"language-js\"><span class=\"hljs-string\">'吧'</span>.localeCompare(<span class=\"hljs-string\">'啊'</span>) <span class=\"hljs-comment\">// 1 。看来是按拼音来的，b比a大</span>\n<span class=\"hljs-string\">'asd'</span>.localeCompare(<span class=\"hljs-string\">'bcd'</span>) <span class=\"hljs-comment\">// -1</span>\n</code></pre>\n</section><section><h2 id=\"969650459\">空字符串</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">// length 为 0</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">''</span>.length === <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// 默认转换为0</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">''</span> - <span class=\"hljs-number\">23</span>); <span class=\"hljs-comment\">// 相当于0-23</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">''</span> &gt; <span class=\"hljs-number\">-1</span>); <span class=\"hljs-comment\">// true。相当于0&gt;-1</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">''</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">''</span> == <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// true</span></code></pre>\n<p>兼容性：all浏览器。包括严格模式</p>\n</section><section><h2 id=\"1731273694\">length</h2><p>只读属性。能获取字符串的字符个数</p>\n</section><section><h2 id=\"2060243033\">子字符获取</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">'hello'</span>;\n<span class=\"hljs-comment\">// 都是返回'h'字符。强调：依然是string类型</span>\n\n<span class=\"hljs-comment\">// charAt 获取</span>\nalert(str.charAt(index)); <span class=\"hljs-comment\">// 兼容所有浏览器</span>\n\n<span class=\"hljs-comment\">// 索引 获取</span>\nalert(str[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// ie6\\7不兼容</span></code></pre>\n</section><section><h2 id=\"3024657989\">子串获取</h2><section><h3 id=\"4285615192\">substring</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring\">substring 文档</a></p>\n<section><h4 id=\"190131864\">语法</h4><pre><code><span class=\"hljs-selector-tag\">str</span><span class=\"hljs-selector-class\">.substring</span>(<span class=\"hljs-selector-tag\">indexStart</span><span class=\"hljs-selector-attr\">[, indexEnd]</span>)</code></pre></section><section><h4 id=\"2812356342\">示例说明</h4><pre><code class=\"language-js\">\n<span class=\"hljs-comment\">// 参数2不给将获取剩下的所有字符</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substring(<span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">// 'ello word'</span>\n<span class=\"hljs-comment\">// 超过情况同上</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substring(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>)) <span class=\"hljs-comment\">// 'ello word'</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substring(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// 'e'</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substring(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// 'he'</span>\n\n<span class=\"hljs-comment\">// 几种特殊情况</span>\n\n<span class=\"hljs-comment\">// 超过范围情况。返回空字符串</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substring(<span class=\"hljs-number\">100</span>)) <span class=\"hljs-comment\">// ''</span>\n\n<span class=\"hljs-comment\">// 2个参数都可不带。。返回原字符串</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substring()) <span class=\"hljs-comment\">// 'hello word'</span></code></pre>\n</section><section><h4 id=\"1337986622\">兼容性</h4><p>包括ie6的所有</p>\n</section></section><section><h3 id=\"3363418354\">substr</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr\">substr 文档</a></p>\n<section><h4 id=\"2903246960\">语法</h4><pre><code><span class=\"hljs-selector-tag\">str</span><span class=\"hljs-selector-class\">.substr</span>(<span class=\"hljs-selector-tag\">start</span><span class=\"hljs-selector-attr\">[, length]</span>)</code></pre></section><section><h4 id=\"659222654\">示例说明</h4><pre><code class=\"language-js\">\n<span class=\"hljs-comment\">// 参数2不给将获取剩下的所有字符</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substr(<span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">// 'ello word'</span>\n<span class=\"hljs-comment\">// 超过情况同上</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substr(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>)) <span class=\"hljs-comment\">// 'ello word'</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substr(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// 'el'</span>\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substr(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// 'he'</span>\n\n<span class=\"hljs-comment\">// 几种特殊情况</span>\n\n<span class=\"hljs-comment\">// 超过范围情况。返回空字符串</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substr(<span class=\"hljs-number\">100</span>)) <span class=\"hljs-comment\">// ''</span>\n\n<span class=\"hljs-comment\">// 2个参数都可不带。。返回原字符串</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello word\"</span>.substr()) <span class=\"hljs-comment\">// 'hello word'</span></code></pre>\n</section><section><h4 id=\"2314158439\">兼容性</h4><p>包括ie6的所有</p>\n</section></section></section><section><h2 id=\"1360274031\">String(数字) Number 互转</h2><pre><code class=\"language-js\">\n<span class=\"hljs-comment\">// Number -&gt; String</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// '1'。性能最好</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">String</span>(<span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">// '1'。性能一般</span>\n<span class=\"hljs-built_in\">console</span>.log((<span class=\"hljs-number\">1</span>).toString()) <span class=\"hljs-comment\">// '1'。性能差</span>\n\n<span class=\"hljs-comment\">// String -&gt; Number</span>\n<span class=\"hljs-built_in\">console</span>.log(+<span class=\"hljs-string\">'1'</span>) <span class=\"hljs-comment\">// 性能最好</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'1'</span>)) <span class=\"hljs-comment\">// 性能比 +1 稍差</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'1'</span> * <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 1 性能比 Number稍差</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'1'</span> - <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// 1。性能与 *1 差不多</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">parseFloat</span>(<span class=\"hljs-string\">'1'</span>)) <span class=\"hljs-comment\">// 1。性能不佳</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'1'</span>)) <span class=\"hljs-comment\">// 1。性能不佳，与 parseFloat 差不多</span>\n\n\n<span class=\"hljs-comment\">// 性能测试</span>\n<span class=\"hljs-keyword\">var</span> j\n<span class=\"hljs-built_in\">console</span>.time()\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; i++) {\n  j = (<span class=\"hljs-number\">1</span>).toString()\n}\n<span class=\"hljs-built_in\">console</span>.timeEnd()\n\n</code></pre>\n</section><section><h2 id=\"2388122910\">字符串 —&gt; number</h2><section><h3 id=\"3149828630\">使用 parseFloat、parseFloat</h3><p>都是 window 的方法：window.parseFloat、window.parseInt</p>\n<p>parseFloat：最多只保留 14位小数，第14位如果有，进1</p>\n<p>兼容性：所有浏览器</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'好啊'</span>) <span class=\"hljs-comment\">// NaN</span>\n<span class=\"hljs-built_in\">parseFloat</span>(<span class=\"hljs-string\">'好啊'</span>) <span class=\"hljs-comment\">// NaN</span>\n\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"123.45转不了\"</span>) <span class=\"hljs-comment\">// 123</span>\n<span class=\"hljs-built_in\">parseFloat</span>(<span class=\"hljs-string\">\"123.45转不了\"</span>) <span class=\"hljs-comment\">// 123.45</span>\n</code></pre>\n</section><section><h3 id=\"2257713997\">ECMAScript 3中的 parseInt 问题</h3><p>ECMAScript 5 中没有这一问题</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'08'</span>) <span class=\"hljs-comment\">// 将返回0 。起始为0 的字符串将以8进制方式解析，相当于parseInt('08',8)</span>\n</code></pre>\n<p>所以，在考虑 ECMAScript 3 环境时尽量带第二个参数 ：<code>parseInt(&#39;08&#39;,10)</code>。当然，转换的方式还有很多，比如正则</p>\n</section><section><h3 id=\"2344294130\">什么情况使用 parseFloat、parseInt</h3><p>部分数字类型，且起始情况：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">parseFloat</span>(<span class=\"hljs-string\">\"123你好\"</span>)) <span class=\"hljs-comment\">// 123</span></code></pre>\n<p>完全的数字类型使用如下方式，性能要好</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(+<span class=\"hljs-string\">\"08\"</span>) <span class=\"hljs-comment\">// 性能最好</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">\"08\"</span>))\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"08\"</span> * <span class=\"hljs-number\">1</span>)</code></pre>\n</section></section><section><h2 id=\"4262610034\">其他类型 转 字符串</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 兼容性：所有浏览器</span>\n\n<span class=\"hljs-comment\">// 推荐方式</span>\n<span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-number\">123</span> + <span class=\"hljs-string\">\"\"</span> + <span class=\"hljs-number\">123</span>);\n\n<span class=\"hljs-comment\">// 其他方式1</span>\n<span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-built_in\">String</span>(<span class=\"hljs-number\">123</span>)+<span class=\"hljs-number\">123</span>);\n\n<span class=\"hljs-comment\">// 其他方式2</span>\n<span class=\"hljs-built_in\">document</span>.write((<span class=\"hljs-number\">123</span>).toString() + <span class=\"hljs-number\">123</span>);\n</code></pre>\n</section><section><h2 id=\"763094896\">字母大小写转换</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">// ——&gt;小写</span>\n<span class=\"hljs-keyword\">var</span> _info = (<span class=\"hljs-string\">\"AAAaaa\"</span>).toLowerCase();\n\n<span class=\"hljs-comment\">// ——&gt;大写</span>\n<span class=\"hljs-keyword\">var</span> _info = (<span class=\"hljs-string\">\"AAAaaa\"</span>).toUpperCase();\n\n<span class=\"hljs-comment\">//兼容性：all浏览器</span>\n</code></pre>\n</section><section><h2 id=\"3314698803\">去掉两头空白字符-trim</h2><pre><code class=\"language-js\">(<span class=\"hljs-string\">'   sss        '</span>).trim()</code></pre>\n<p>兼容性：ie9+ 、其他高级</p>\n</section><section><h2 id=\"587328435\">其他进制 --&gt; 十进制</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"589E\"</span>,<span class=\"hljs-number\">16</span>);<span class=\"hljs-comment\">// 某16进制字符串转10进制 。589E代表中文字符\"增\"</span>\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"10\"</span>,<span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">//某8进制字符串转10进制</span>\n<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">\"10\"</span>,<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">//某2进制字符串转10进制</span>\n</code></pre>\n</section><section><h2 id=\"2438326206\">字符，Unicode码</h2><section><h3 id=\"1998917059\">字符 -&gt; Unicode 的十进制数</h3><p>返回值：编码值，number类型，十进制</p>\n<p>兼容性：all浏览器</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-comment\">// 字符 'a' 的 Unicode 值（参数不给将默认0）</span>\n<span class=\"hljs-built_in\">console</span>.log((<span class=\"hljs-string\">'ac'</span>).charCodeAt()) <span class=\"hljs-comment\">// 97</span>\n\n<span class=\"hljs-comment\">// 字符 'c' 的 Unicode 值</span>\n<span class=\"hljs-built_in\">console</span>.log((<span class=\"hljs-string\">'ac'</span>).charCodeAt(<span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">// 99</span>\n\n<span class=\"hljs-comment\">// 超出情况，返回 NaN</span>\n<span class=\"hljs-built_in\">console</span>.log((<span class=\"hljs-string\">'ac'</span>).charCodeAt()) <span class=\"hljs-comment\">// NaN</span></code></pre>\n</section><section><h3 id=\"1991658536\">十进制 Unicode -&gt; 字符</h3><pre><code class=\"language-js\"><span class=\"hljs-built_in\">String</span>.fromCharCode(<span class=\"hljs-number\">49</span>);<span class=\"hljs-comment\">// '1'</span></code></pre>\n</section><section><h3 id=\"4129371359\">字符 Unicode 直接量写法</h3><p>\\u + 16进制</p>\n<p>直接输出显示转行后的字符</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'\\u4f60\\u597d\\u554a'</span>) <span class=\"hljs-comment\">// '你好啊'</span></code></pre>\n<p>16进制转10进制可使用parseInt</p>\n</section></section><section><h2 id=\"708523555\">中文字符比较</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\">String.prototype.localeCompare() - JavaScript | MDN</a></p>\n<p>referenceStr.localeCompare(compareString[, locales[, options]])</p>\n<p><strong>referenceStr 字符：</strong></p>\n<ul>\n<li>小，返回 -1</li>\n<li>大 返回 1</li>\n<li>相等 返回 0</li>\n</ul>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> referenceStr = <span class=\"hljs-string\">'哈哈'</span> <span class=\"hljs-comment\">// haha</span>\n<span class=\"hljs-keyword\">let</span> compareString = <span class=\"hljs-string\">'啊啊'</span> <span class=\"hljs-comment\">// aa</span>\nreferenceStr.localeCompare(compareString, <span class=\"hljs-string\">'zh'</span>); <span class=\"hljs-comment\">// 1</span></code></pre>\n</section><section><h2 id=\"1948482803\">汉字范围 十六进制写法</h2><p><strong>number</strong><br>0x4e00<br>0x9fa5</p>\n<p><strong>字符串</strong><br>\\u4e00<br>\\u9fa5  </p>\n</section><section><h2 id=\"614414499\">两种空格</h2><p>空格符有两种，但正则表达式的 <code>\\s</code> 两种都能匹配</p>\n<p>两个空格的 Unicode 写法</p>\n<pre><code class=\"language-js\">\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'\\u0020'</span>, <span class=\"hljs-string\">'\\u00A0'</span>)\n</code></pre>\n</section></section><section><h1 id=\"2620506322\">WebSocket 或 SSE</h1><p><a href=\"https://www.ibm.com/developerworks/cn/web/wa-http-server-push-with-websocket-sse/index.html\">SSE 比较 WebSocket</a></p>\n</section><section><h1 id=\"2616696876\">关键字</h1><section><h2 id=\"943789537\">instanceof 判断是否属于某构造函数实例</h2><section><h3 id=\"2916481979\">判断数组类型</h3><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>();\nalert(arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>);<span class=\"hljs-comment\">//返回true</span>\n</code></pre>\n</section><section><h3 id=\"1614444025\">instanceof 不认为原始类型值的变量是对象</h3><p>原始类型：undefined、null、boolean、number 和 string</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> temp=<span class=\"hljs-string\">\"a string for test\"</span>;   \n<span class=\"hljs-comment\">//下面这句返回\"string\"   </span>\nalert( <span class=\"hljs-keyword\">typeof</span> temp);   \n<span class=\"hljs-comment\">//下面这句返回\"false\"   </span>\nalert(temp <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span>); \n</code></pre>\n<p>貌似只有使用new的实例，才有效。否则一律返回false</p>\n</section></section><section><h2 id=\"133094510\">in - 判断是否是某实例成员</h2><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 本身的</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'body'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">document</span>) <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// 本身的 - 直接新增</span>\n<span class=\"hljs-built_in\">document</span>.hi = <span class=\"hljs-string\">'Jo'</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hi'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">document</span>) <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// 原型上继承过来的</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'toString'</span> <span class=\"hljs-keyword\">in</span> {}) <span class=\"hljs-comment\">// true</span>\n</code></pre>\n</section></section><section><h1 id=\"1304957286\">其他</h1><section><h2 id=\"2756572493\">任务链 赋值</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> b, c\n<span class=\"hljs-keyword\">var</span> a = b = c = <span class=\"hljs-number\">100</span></code></pre>\n</section><section><h2 id=\"4099987442\">测试表达式执行顺序</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> a = [], i = <span class=\"hljs-number\">0</span>;\na[i++] = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    alert(i);\n    <span class=\"hljs-keyword\">debugger</span>\n})()</code></pre>\n<p>先左后右，所以先执行左边的i++</p>\n</section><section><h2 id=\"2288596175\">if/for 大括号是否创建了域？</h2><p>只有函数才有域，if/for 没有域</p>\n<p>es6 let 变量有域</p>\n</section><section><h2 id=\"2660933063\">eval</h2><p>调用有作用域</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">20</span>;\n  <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">'alert(j)'</span>) <span class=\"hljs-comment\">// 成功</span>\n}\nfun()</code></pre>\n<p>创建也有作用域</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">'var i=10'</span>)\n  alert(<span class=\"hljs-string\">'内部'</span> + i) <span class=\"hljs-comment\">// 成功</span>\n}\nfun()\nalert(i) <span class=\"hljs-comment\">// 报错</span></code></pre>\n</section></section><section><h1 id=\"2355185043\">变量</h1><section><h2 id=\"2316628289\">未声明变量不能直接拿来用，但可成功赋值</h2><p>只有在 <em>非严格模式</em> 才成立</p>\n<pre><code class=\"language-js\">common = {}; <span class=\"hljs-comment\">// 成功，创建全局变量 common</span>\n\n<span class=\"hljs-built_in\">console</span>.log(comm2) <span class=\"hljs-comment\">// 报错， comm2 未定义</span></code></pre>\n</section><section><h2 id=\"2884230170\">未定义变量只要不执行，就不会报错。包括ie6</h2><p>所以这样写是没错的： <code>window.a ? a : &#39;&#39;</code></p>\n</section><section><h2 id=\"789427581\">未定义变量不能判断</h2><p><strong>例子说明</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 1、</span>\n<span class=\"hljs-keyword\">if</span> (!a){}\n<span class=\"hljs-comment\">// 如果a没定义，将报错</span>\n\n<span class=\"hljs-comment\">// 2、</span>\n<span class=\"hljs-keyword\">if</span> (!a) <span class=\"hljs-keyword\">var</span> a = {};\n<span class=\"hljs-comment\">// 将不会报错，因为[预解析]，所有var会先执行，所以a也算定义的了</span>\n\n<span class=\"hljs-comment\">// 3、</span>\n<span class=\"hljs-keyword\">var</span> a = {<span class=\"hljs-attr\">aa</span>:<span class=\"hljs-string\">'xxx'</span>};\n<span class=\"hljs-keyword\">var</span> a;\n<span class=\"hljs-built_in\">console</span>.log(a);\n<span class=\"hljs-comment\">// 因为预解析，两个相同的变量最终还是一个变量，且只有第一个进行了赋值运算，所以最终输出第一个</span>\n\n<span class=\"hljs-comment\">// 4、</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{ }\n<span class=\"hljs-keyword\">var</span> a;\n<span class=\"hljs-built_in\">console</span>.log(a);\n<span class=\"hljs-comment\">// 最终还是输出函数。说明，函数也是变量，而且还进行了赋函数值的运算</span>\n</code></pre>\n<p><strong>对象子成员未赋值情况 可以判断</strong><br>某对象未创建的子成员可以，且返回undefined</p>\n<p><strong>兼容性</strong><br>包括ie6 的所有浏览器</p>\n</section></section><section><h1 id=\"3625428272\">定时器</h1><section><h2 id=\"3193819034\">setInterval(fn, ms)</h2><p>猜测，如果把执行时间算进去，误差会不会越来越大</p>\n<p>经测试，并不会出现误差，内部机制似乎会减去多耗去的时间。测试例子如下：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Date</span>.now() % <span class=\"hljs-number\">1000</span>)\nsetInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Date</span>.now() % <span class=\"hljs-number\">1000</span>)\n}, <span class=\"hljs-number\">1000</span>)</code></pre>\n<p>setTimeout 有误差，例子如下</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">exec</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Date</span>.now() % <span class=\"hljs-number\">1000</span>)\n  setTimeout(exec, <span class=\"hljs-number\">1000</span>)\n}\nexec()</code></pre>\n</section></section><section><h1 id=\"3494592818\">异常处理</h1><section><h2 id=\"1391390378\">throw 手动抛异常</h2><p>手动让程序报错，程序将终止</p>\n<section><h3 id=\"1525936958\">语法</h3><pre><code><span class=\"hljs-keyword\">throw</span> expression;</code></pre><p>expression 任意表达式</p>\n</section><section><h3 id=\"1546170408\">示例</h3><pre><code><span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"Error2\"</span>; <span class=\"hljs-comment\">// 抛出了一个值为字符串的异常</span>\n<span class=\"hljs-comment\">// 后面的代码不会执行</span>\n\n<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-number\">42</span>;       <span class=\"hljs-comment\">// 抛出了一个值为整数42的异常</span>\n<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-literal\">true</span>;     <span class=\"hljs-comment\">// 抛出了一个值为true的异常</span></code></pre></section></section><section><h2 id=\"3677246480\">异常捕获</h2><p>阻止程序异常终止运行</p>\n<pre><code><span class=\"hljs-comment\">// 捕获自定义异常</span>\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">'错误1'</span>\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(e) <span class=\"hljs-comment\">// '错误1'</span>\n}\n\n<span class=\"hljs-comment\">// 捕获程序异常。将抛出一个 Error 对象</span>\n<span class=\"hljs-keyword\">try</span> {\n  a\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(e) <span class=\"hljs-comment\">// 一个 Error 对象</span>\n}\n</code></pre></section><section><h2 id=\"1321490267\">Error</h2><p>能给出代码位置信息(stack)</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.dir(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'test'</span>))</code></pre>\n<p>Error 子类</p>\n<ul>\n<li>EvalError: raised when an error occurs executing code in eval() </li>\n<li>RangeError: raised when a numeric variable or parameter is outside of its valid range </li>\n<li>ReferenceError: raised when de-referencing an invalid reference </li>\n<li>SyntaxError: raised when a syntax error occurs while parsing code in eval() </li>\n<li>TypeError: raised when a variable or parameter is not a valid type </li>\n<li>URIError: raised when encodeURI() or decodeURI() are passed invalid parameters</li>\n</ul>\n</section><section><h2 id=\"2592410062\">try catch 是否可捕获函数中的错误</h2><p>方法内部有错误，try 中执行此方法，能捕捉到此错误吗？答案是可以</p>\n<p>也就是说，只要在入口处 try catch，就可以保证程序不会中断运行了</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span> (<span class=\"hljs-params\"></span>) </span>{\n  testChild()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testChild</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'err'</span>)\n}\n\n<span class=\"hljs-keyword\">try</span> {\n  test()\n}\n<span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-built_in\">console</span>.log(err)\n}\n</code></pre>\n</section></section><section><h1 id=\"3476351503\">循环</h1><section><h2 id=\"1456360951\">for</h2><section><h3 id=\"2808520626\">跳出循环的方式</h3><p>通过 <code>break</code></p>\n<p><code>return</code> 也可跳出循环，但整个函数往下都不会再执行了</p>\n<p>疑问：if 中的 break 是否会影响 for 的跳出</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n    <span class=\"hljs-built_in\">console</span>.log(i)\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {<span class=\"hljs-keyword\">break</span>}\n}\n<span class=\"hljs-comment\">// 只会输出 0</span></code></pre>\n</section></section><section><h2 id=\"1578682565\">for/in</h2><p>可以遍历对象，得到 key 值</p>\n<p>当然也可遍历数组，会避开缺失成员</p>\n</section><section><h2 id=\"2686736169\">break：用于 跳出循环或 switch。(if除外)</h2></section><section><h2 id=\"3753141315\">continue：不再往下执行，直接下一次循环</h2><p>不能 用于switch</p>\n</section></section><section><h1 id=\"3850731555\">正则表达式</h1><section><h2 id=\"1830406102\">相关方法</h2><section><h3 id=\"951076960\">汇总</h3><ul>\n<li>RegExp.prototype.exec</li>\n<li>RegExp.prototype.test</li>\n<li>String.prototype.match</li>\n<li>search</li>\n<li>String.prototype.replace</li>\n<li>split</li>\n</ul>\n</section><section><h3 id=\"3244868513\">验证 RegExp.prototype.test</h3><p>验证指定字符串是否匹配, 返回 bool 值</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> patrn = <span class=\"hljs-regexp\">/\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/</span>; <span class=\"hljs-comment\">//E-mail</span>\n<span class=\"hljs-keyword\">if</span> (patrn.test(<span class=\"hljs-string\">\"hello@gmail.com\"</span>)) alert(<span class=\"hljs-string\">\"成功匹配\"</span>);</code></pre>\n</section><section><h3 id=\"387999723\">替换 String.prototype.replace()</h3><p><strong>返回值：</strong></p>\n<ul>\n<li>有替换 情况：替换好的字符串；</li>\n<li>没替换 情况：源字符串</li>\n</ul>\n<p><strong>两个参数：</strong></p>\n<ol>\n<li>用于匹配的表达式</li>\n<li>用于替换的字符</li>\n</ol>\n<p><strong>关于调用表达式匹配内容：</strong></p>\n<ul>\n<li>通过$&amp;可以调用整个表达式匹配的内容。</li>\n<li>通过$[1-9]可以调用匹配子内容。数字为括号的位置。调用整个匹配内容就把整个表达式括起来</li>\n</ul>\n<p><strong>关于 replace 方法中的 修饰符 g</strong><br>将依次将所有匹配的内容 替换。如下例就有两个匹配的内容，这两个内容都将被替换</p>\n<pre><code class=\"language-js\">alert(<span class=\"hljs-string\">\"hello@qq.com||world@qq.com\"</span>.replace(<span class=\"hljs-regexp\">/(qq)(.)/g</span>, <span class=\"hljs-string\">\"QQ$1$2\"</span>));\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">\"asdsad\"</span>.replace(<span class=\"hljs-regexp\">/[a-z]/</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">d</span>) </span>{\n  <span class=\"hljs-comment\">// 此回调 如果没找到将不执行。也就是，找到一个执行一次</span>\n  <span class=\"hljs-comment\">//d 为 匹配的字符</span>\n  <span class=\"hljs-keyword\">return</span> d.toUpperCase(); <span class=\"hljs-comment\">//return替换匹配字符</span>\n});</code></pre>\n</section><section><h3 id=\"2779395469\">查找</h3><section><h4 id=\"3003768118\">RegExp.prototype.exec()</h4><p><strong>返回值：</strong></p>\n<ul>\n<li>没有匹配返回 null</li>\n<li>有匹配情况，数组对象，有两个固定的属性<br>index 匹配字符串开始索引位置<br>input 原字符串</li>\n</ul>\n<p><strong>修饰符 g ：</strong></p>\n<p>每执行一次 exec 方法，都将继续往下寻找 未匹配过的内容。但必须是同一个 RegExp 实例，见下例</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> patt = <span class=\"hljs-regexp\">/W3School/g</span>; <span class=\"hljs-comment\">// 等同 new RegExp('W3School', 'g')</span>\n\n<span class=\"hljs-built_in\">console</span>.log(\n  patt.exec(<span class=\"hljs-string\">\"Visit W3School, W3School is a place to study web technology.\"</span>)\n    .index, <span class=\"hljs-comment\">// 6</span>\n  patt.exec(<span class=\"hljs-string\">\"Visit W3School, W3School is a place to study web technology.\"</span>)\n    .index, <span class=\"hljs-comment\">// 14</span>\n  /W3School/g.exec(\n    <span class=\"hljs-string\">\"Visit W3School, W3School is a place to study web technology.\"</span>\n  ).index, <span class=\"hljs-comment\">// 6 新表达式对象</span>\n  patt.exec(<span class=\"hljs-string\">\"Visit W3School, W3School is a place to study web technology.\"</span>) <span class=\"hljs-comment\">// null</span>\n);</code></pre>\n<p>修饰符 g + while 非常好用</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// 使用了 赋值表达式也有返回值 的原理</span>\n<span class=\"hljs-keyword\">while</span> ((result = reg.exec(content))) {\n  <span class=\"hljs-built_in\">console</span>.log(result);\n}</code></pre>\n</section><section><h4 id=\"3823031210\">String.prototype.match()</h4><p><strong>参数：</strong></p>\n<p>可以是 字符串；还可以是 正则表达式</p>\n<p>字符串其实也是正则，貌似不支持修饰符 g 了</p>\n<p><strong>返回值：</strong></p>\n<p>1.没有匹配情况，返回 null</p>\n<p>2.有匹配情况，不带 g<br>数组成员 1 为整个表达式匹配的字符串，其后的成员为被括号扩起的子表达式匹配的字符串，带两个固定属性，<br>index 匹配字符串开始索引位置<br>input 原字符串</p>\n<p>3.带 g：得到的数组是匹配到所有字符块，匹配多少就有多少成员。不会被括号影响，不带属性</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"msie 9.0 oooo\"</span>.match(<span class=\"hljs-regexp\">/msie ([\\d.]+)/</span>)); <span class=\"hljs-comment\">// [\"msie 9.0\", \"9.0\", index: 0, input: \"msie 9.0 oooo\"]</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"msie 9.0 8.0\"</span>.match(<span class=\"hljs-regexp\">/ ([\\d.]+)/g</span>)); <span class=\"hljs-comment\">// [\" 9.0\", \" 8.0\"]</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"msie 9.0 8.0\"</span>.match(<span class=\"hljs-string\">\"[\\\\d]\"</span>)); <span class=\"hljs-comment\">// 字符串情况</span></code></pre>\n</section></section></section><section><h2 id=\"2201172645\">对象创建</h2><p><strong>1 字面量</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-regexp\">/\\d\\d/</span>;\n<span class=\"hljs-keyword\">var</span> reg2 = <span class=\"hljs-regexp\">/\\d\\d/g</span>; <span class=\"hljs-comment\">// 带修饰符</span>\n<span class=\"hljs-keyword\">var</span> reg3 = <span class=\"hljs-regexp\">/\\d\\d/gi</span>; <span class=\"hljs-comment\">// 多个修饰符</span></code></pre>\n<p><strong>2 构造函数</strong><br>好处是可以 根据字符串创建</p>\n<p>参数 2 为修饰符</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"\\\\d\\\\d\"</span>);\n<span class=\"hljs-keyword\">var</span> reg2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"\\\\d\\\\d\"</span>, <span class=\"hljs-string\">\"g\"</span>); <span class=\"hljs-comment\">// 带修饰符</span>\n<span class=\"hljs-keyword\">var</span> reg3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"\\\\d\\\\d\"</span>, <span class=\"hljs-string\">\"gi\"</span>); <span class=\"hljs-comment\">// 多个修饰符</span></code></pre>\n</section><section><h2 id=\"460606260\">修饰符</h2><p>g （全文查找）<br>i （忽略大小写）</p>\n<p>m （多行查找）<br>可更改&#94;和&#36;作用，变成每行头尾(默认只表示字符串的开头和结尾)。如/^b/m 将匹配到&#39;test\\nbbs&#39;</p>\n</section><section><h2 id=\"771208619\">括号的多种意义</h2><section><h3 id=\"2540180795\"><code>(pattern)</code> 获取指定匹配</h3><p>会反馈到到结果数组中，也可在匹配时或者替换时调用</p>\n<p>string.replace 参数 2 中通过 <code>$1</code>···<code>$9</code> 依次等访问</p>\n<p>表达式中通过 <code>\\1</code> ··· <code>\\9</code> 依次访问</p>\n<pre><code class=\"language-js\">/\\w(\\w)\\1/.<span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-string\">\"abcdd\"</span>); // [<span class=\"hljs-string\">\"cdd\"</span>, <span class=\"hljs-string\">\"d\"</span>, index: 2, input: <span class=\"hljs-string\">\"abcdd\"</span>]</code></pre>\n</section><section><h3 id=\"1821097600\"><code>(?:pattern)</code></h3><p>待完成</p>\n</section><section><h3 id=\"2002526714\">用于字符组合</h3><pre><code class=\"language-js\"><span class=\"hljs-string\">\"v     a b c de\"</span>.match(<span class=\"hljs-regexp\">/(\\w\\s)+/g</span>); <span class=\"hljs-comment\">// [\"v \", \"a b c \"]</span></code></pre>\n</section><section><h3 id=\"828816428\"><code>()</code> + <code>|</code>。子表达式 + 多个</h3><pre><code class=\"language-js\">// 文件类型过滤\n/\\.(jpg|png)&amp;/.<span class=\"hljs-built_in\">test</span>(<span class=\"hljs-string\">\"1.png\"</span>); // <span class=\"hljs-literal\">true</span></code></pre>\n</section></section><section><h2 id=\"569558455\">收集</h2><section><h3 id=\"1576001502\">关键字过滤</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 根据关键字生成正则</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">filterReg</span>(<span class=\"hljs-params\">wd</span>) </span>{\n  wd = wd\n    <span class=\"hljs-comment\">// 转义正则符号</span>\n    .replace(\n      <span class=\"hljs-regexp\">/[\\x5E\\x24\\x2A\\x2B\\x3F\\x2E\\x28\\x29\\x3A\\x3D\\x21\\x7C\\x7B\\x7D\\x2C\\x5C\\x5B\\x5D]/g</span>,\n      <span class=\"hljs-string\">\"\\\\$&amp;\"</span>\n    )\n    <span class=\"hljs-comment\">// 空格替换成匹配任意字符</span>\n    .replace(<span class=\"hljs-regexp\">/\\s+/g</span>, <span class=\"hljs-string\">\"[\\\\d\\\\D]*?\"</span>);\n\n  <span class=\"hljs-comment\">// 只包含关键字的正则</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(wd, <span class=\"hljs-string\">\"i\"</span>);\n\n  <span class=\"hljs-comment\">// 包含关键字周围字符的正则</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">`(.{0,20})(<span class=\"hljs-subst\">${wd}</span>)(.{0,20})`</span>, <span class=\"hljs-string\">\"i\"</span>);\n}</code></pre>\n</section><section><h3 id=\"532452978\">双字节字符个数</h3><pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stringSize</span>(<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (s.match(<span class=\"hljs-regexp\">/[^\\x00-\\xff]/g</span>) || <span class=\"hljs-string\">\"\"</span>).length;\n}</code></pre>\n</section><section><h3 id=\"3946491760\">去掉 http 部分</h3><pre><code class=\"language-js\">/http:\\/\\/[^\\/]*/(\n  <span class=\"hljs-string\">\"http://upload.x.com/attachment/companyLogo/1_350.jpg\"</span>\n).replace(/http:\\/\\/[^\\/]*/, <span class=\"hljs-string\">\"\"</span>);</code></pre>\n<p>返回 &#39;/attachment/companyLogo/0218/1_350.jpg&#39;</p>\n</section><section><h3 id=\"1411624053\">去掉 HTML 标签</h3><p>示例为去掉 p 标签 和 div 标签</p>\n<pre><code class=\"language-js\">n.Content.replace(/<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/{<span class=\"hljs-attr\">0</span>,<span class=\"hljs-attr\">1</span>}<span class=\"hljs-attr\">p</span>&gt;</span>|<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/{<span class=\"hljs-attr\">0</span>,<span class=\"hljs-attr\">1</span>}<span class=\"hljs-attr\">div</span>&gt;</span>/g, \"\");</code></pre>\n<p>所有标签清除。带属性的 标签照样清</p>\n<pre><code class=\"language-js\">c.tagClear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">str</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> str.replace(<span class=\"hljs-regexp\">/&lt;\\/{0,1}[^&lt;&gt;]+\\/{0,1}&gt;/g</span>, <span class=\"hljs-string\">\"\"</span>);\n};</code></pre>\n<p>其实可以使用 innerText 去掉，或者 getContent</p>\n</section><section><h3 id=\"646841371\">匹配是否以某标签 开头/结尾</h3><pre><code class=\"language-js\">/^([ ]*(&amp;nbsp;)*)*<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>/\n  .test(\"&amp;nbsp;  &amp;nbsp;   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\")(\n    // 清除p元素开头\n    \"&amp;nbsp;  &amp;nbsp;   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\"\n  )\n  .replace(\n    /^([ ]*(&amp;nbsp;)*)*(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>)|(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>)/,\n    \"\"\n  )(\n    // 清除p元素结尾\n    \"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>  &amp;nbsp;  &amp;nbsp;   \"\n  )\n  .replace(/((<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/<span class=\"hljs-attr\">p</span>&gt;</span>)|(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/<span class=\"hljs-attr\">div</span>&gt;</span>))([ ]*(&amp;nbsp;)*)*$/, \"\");</code></pre>\n</section><section><h3 id=\"2915917518\">去 html 属性</h3><p>document.body.innerHTML = data.replace(/ style=&quot;[^&quot;]*&quot;/g,&#39;&#39;);</p>\n</section><section><h3 id=\"4032693799\">取后缀</h3><p>var ex = (&#39;c:/sdf/sdfsd/sdf/xxx.rmvb&#39;).match(/(?!=.)[^.]+$/);</p>\n</section><section><h3 id=\"1361392652\">不包含指定字符串</h3><p>使用 <code>(?!pattern)</code> 负向预查</p>\n<pre><code class=\"language-js\">/^(?!index).+\\.js$/.<span class=\"hljs-built_in\">test</span>(<span class=\"hljs-string\">\"index.js\"</span>); // <span class=\"hljs-literal\">false</span></code></pre>\n<p><strong>一些注意，容易误导的地方</strong>：</p>\n<pre><code class=\"language-js\">/(?!index)\\.js$/.<span class=\"hljs-built_in\">test</span>(<span class=\"hljs-string\">\"index.js\"</span>); // <span class=\"hljs-literal\">true</span></code></pre>\n<p>去掉了 <code>^</code>，就为 <code>true</code> 了，这是因为，只要找到满足条件的字符串即可，<code>.js</code>这部分满足，所以为<code>true</code>。为 false 的例子是因为没有一处是满足的</p>\n</section><section><h3 id=\"2598308877\">实现匹配字符串前面追加</h3><p>示例实现了在 body 结束标签前追加 script 标签</p>\n<pre><code class=\"language-js\">\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\".replace(/(?=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/<span class=\"hljs-attr\">body</span>&gt;</span>)/, '<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/js/vue.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>');</code></pre>\n</section><section><h3 id=\"1980468834\">取 url 文件名，包括后缀</h3><pre><code class=\"language-js\">filePath.match(<span class=\"hljs-regexp\">/[^/]+$/</span>);</code></pre>\n</section><section><h3 id=\"1720950080\">文件类型过滤</h3><pre><code class=\"language-js\">/\\.(jpg|png)&amp;/.<span class=\"hljs-built_in\">test</span>(<span class=\"hljs-string\">\"1.png\"</span>); // <span class=\"hljs-literal\">true</span></code></pre>\n</section><section><h3 id=\"999924465\">手机号码</h3><p>/^\\d{11}$/.test(&#39;13923401527&#39;)</p>\n</section><section><h3 id=\"243305679\">E-mail</h3><p>/\\w+([-+.&#39;]\\w+)_@\\w+([-.]\\w+)_.\\w+([-.]\\w+)*/</p>\n</section><section><h3 id=\"137276879\">html 节</h3><ul>\n<li>html 节点：/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\\1&gt;|\\s+/&gt;)$/</li>\n<li>html 节点 2：/&lt;([a-zA-Z]+)\\s+[\\w=&quot;]+&gt;[^&lt;]*&lt;/\\1&gt;/</li>\n</ul>\n</section><section><h3 id=\"911460595\">字符范围</h3><ul>\n<li>匹配所有单字节：[\\x00-\\xff]</li>\n<li>匹配所有双字节：[^\\x00-\\xff]</li>\n<li>去两头空白字符：/^\\s<em>(\\S</em>(\\s+\\S+)<em>)\\s</em>$/</li>\n<li>匹配所有东亚区的语言 <code>^[\\u2E80-\\u9FFF]+$</code></li>\n<li>匹配简体和繁体 <code>^[\\u4E00-\\u9FFF]+$</code></li>\n<li>匹配简体 <code>^[\\u4E00-\\u9FA5]+$</code></li>\n</ul>\n</section></section></section><section><h1 id=\"3750401755\">注释</h1><section><h2 id=\"3166070840\">函数注释约定</h2><pre><code class=\"language-js\">/**\n * 获取后代元素\n * @example\n    common.confirm_v2({\n        title: <span class=\"hljs-string\">'相册删除'</span>,\n        description: <span class=\"hljs-string\">'确认要删除？'</span>\n        onBtns: [<span class=\"hljs-function\"><span class=\"hljs-title\">function</span></span> () {\n\n        }]\n    })\n\n * @param (arr,<span class=\"hljs-keyword\">function</span>) onBtns\n    至少有一个。一个将配置第一个确认按钮。第二个按钮默认关闭窗口\n    多个将依次给按钮配置指定事件\n * @param (string) description 描述\n * @parma ([bool]) hanCloseBtn \n * @parma ([<span class=\"hljs-keyword\">function</span>]) onCloseBtn \n * @<span class=\"hljs-built_in\">return</span> string 返回说明\n * @兼容性 所有浏览器\n **/\n</code></pre>\n</section></section><section><h1 id=\"2434423855\">类型、值和变量</h1><section><h2 id=\"402838200\">类型获取 typeof</h2><table>\n<thead>\n<tr>\n<th>各种值</th>\n<th>类型字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>函数对象</td>\n<td>function</td>\n</tr>\n<tr>\n<td>数</td>\n<td>number</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>string</td>\n</tr>\n<tr>\n<td>原型对象、数组、Null</td>\n<td>object</td>\n</tr>\n<tr>\n<td>true/false</td>\n<td>boolean</td>\n</tr>\n</tbody></table>\n</section><section><h2 id=\"4292428790\">类型获取 toString 万能方式</h2><pre><code class=\"language-js\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call([])<span class=\"hljs-comment\">// [object Array]</span>\n<span class=\"hljs-built_in\">Object</span>.prototype.toString.call({})<span class=\"hljs-comment\">// [object Object]</span>\n<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">// [object Number]</span>\n<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{})<span class=\"hljs-comment\">// [object Function]</span>\n<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">true</span>)<span class=\"hljs-comment\">// [object Boolean]</span>\n<span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// [object String]</span>\n\n<span class=\"hljs-comment\">// 可直接简写成：即用 window 的 toString 方法</span>\n\ntoString.call([])<span class=\"hljs-comment\">// [object Array]</span>\ntoString.call({})<span class=\"hljs-comment\">// [object Object]</span>\ntoString.call(<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">// [object Number]</span>\ntoString.call(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{})<span class=\"hljs-comment\">// [object Function]</span>\ntoString.call(<span class=\"hljs-literal\">true</span>)<span class=\"hljs-comment\">// [object Boolean]</span>\ntoString.call(<span class=\"hljs-string\">''</span>) <span class=\"hljs-comment\">// [object String]</span></code></pre>\n</section><section><h2 id=\"3530119761\">类型判断</h2><section><h3 id=\"2417089871\">数组判断</h3><p><strong>方式1：ES5 方法</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">Array</span>.isArray([]) <span class=\"hljs-comment\">// true</span></code></pre>\n<p><strong>方式2：使用instanceof，某书中说ie浏览器有不确定性。理论上 ie6+</strong></p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">console</span>.log([] <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>);<span class=\"hljs-comment\">//返回true</span></code></pre>\n<p><strong>方式3：万能</strong></p>\n<pre><code class=\"language-js\">({}).toString.call([])<span class=\"hljs-comment\">//\"[object Array]\"</span></code></pre>\n<p>兼容性原型扩展，兼容包括ie6的所有</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Array</span>.isArray === <span class=\"hljs-string\">'undefined'</span>){\n    <span class=\"hljs-built_in\">Array</span>.isArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arg</span>)</span>{\n        <span class=\"hljs-keyword\">return</span> ({}).toString.call(arg) === <span class=\"hljs-string\">'[object Array]'</span>;\n    }\n}</code></pre>\n</section><section><h3 id=\"1032145951\">isNaN 非数字判断</h3><p>凡是可以隐式转换成 number 的值，都将视为 number，即返回false</p>\n<pre><code class=\"language-js\">alert(<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-number\">123</span>));<span class=\"hljs-comment\">//false</span>\nalert(<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-string\">\"\"</span>));<span class=\"hljs-comment\">//false，空字符就是0所以也是number</span>\nalert(<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-string\">\"123\"</span>));<span class=\"hljs-comment\">//false</span>\nalert(<span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-string\">\"123px\"</span>));<span class=\"hljs-comment\">//true</span></code></pre>\n</section></section><section><h2 id=\"48225341\">类型转换</h2><section><h3 id=\"850859812\">--&gt; Boolean</h3><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 隐式转换也是这种转换</span>\n<span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-string\">\"false\"</span>); <span class=\"hljs-comment\">// true</span></code></pre>\n</section><section><h3 id=\"1134486021\">--&gt; Number</h3></section></section><section><h2 id=\"2106074035\">null和undefined</h2><section><h3 id=\"2022460506\">是否可被重写</h3><section><h4 id=\"1836743091\">undefined 在作用域中可重写</h4><p>在全局中不会被重写</p>\n<pre><code class=\"language-js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-literal\">undefined</span> = <span class=\"hljs-number\">123</span>;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">undefined</span>);<span class=\"hljs-comment\">// 输出123</span>\n})()</code></pre>\n</section><section><h4 id=\"3026786372\">null 不会被重写</h4><pre><code class=\"language-js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-comment\">// Error。直接报错</span>\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-literal\">null</span> = <span class=\"hljs-number\">123</span>;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span>)\n})()</code></pre>\n</section></section></section><section><h2 id=\"430135850\">NaN</h2><p>NaN与任何值都不相等，与自己也不相等</p>\n</section></section><section><h1 id=\"689922517\">编辑器编码规范配置</h1><p><a href=\"http://editorconfig.org/\">.editorconfig</a></p>\n</section><section><h1 id=\"2266685210\">表达式和运算符</h1><section><h2 id=\"307071113\">delete</h2><p>有返回值，成功删除返回 true。（严格模式下）失败情况抛出 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\">&quot;delete 操作符 - JavaScript | MDN</a></p>\n</section></section><section><h1 id=\"2018536351\">运算符</h1><section><h2 id=\"3778826163\">++ --</h2><pre><code class=\"language-js\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">// 先加</span>\n<span class=\"hljs-built_in\">console</span>.log(i)   <span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-built_in\">console</span>.log(++i) <span class=\"hljs-comment\">// 1</span>\n\n<span class=\"hljs-comment\">// 先用</span>\n<span class=\"hljs-built_in\">console</span>.log(i)   <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(i++) <span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-built_in\">console</span>.log(i)   <span class=\"hljs-comment\">// 2</span></code></pre>\n</section><section><h2 id=\"427961835\">void</h2><p>执行指定表达式，不返回任何值(即返回underfined)。</p>\n<p>表达式，类似于【i = 3 * 3;】中的【3 * 3】</p>\n<pre><code class=\"language-js\">alert(<span class=\"hljs-keyword\">void</span>(<span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">3</span>));\nalert(<span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>);</code></pre>\n</section></section><section><h1 id=\"2539871413\">性能</h1><section><h2 id=\"1576825769\">变量</h2><p>浏览器解析<strong>局部变量</strong>要比解析<strong>全局变量</strong>快，当然，比<strong>嵌套属性</strong>更快</p>\n<p>所以，将全局变量或者嵌套属性赋值为局部变量性能更好</p>\n</section><section><h2 id=\"237421072\">函数</h2><p>构造函数中最好不要有函数声明，这样，new 完之后，所占内存应该会被回收</p>\n</section></section><section><h1 id=\"2770852027\">可隐式转换为 true/ false 的值</h1><p><strong>表示false：</strong> undefined、null、NaN、0、&#39;&#39;</p>\n<p><strong>表示true：</strong> 其余的都是 true</p>\n</section><section><h1 id=\"3506160566\">调试</h1><p>可直接代码中 <code>debugger</code> 设置断点</p>\n</section><section><h1 id=\"2039384870\">注释约定</h1><p>参考：<a href=\"https://github.com/tj/dox\">https://github.com/tj/dox</a></p>\n<pre><code class=\"language-js\">/**\n * @example\n *     utils.escape(<span class=\"hljs-string\">'&lt;script&gt;&lt;/script&gt;'</span>)\n *     // =&gt; <span class=\"hljs-string\">'&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;'</span>\n * @method dialog.drag(status)\n * @param {<span class=\"hljs-keyword\">function</span>|string} onStart  可通过 <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span> 阻止拖动触发\n * @param {<span class=\"hljs-keyword\">function</span>} [onUp] 可选。 可通过 <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span> 阻止拖动触发 \n * @<span class=\"hljs-built_in\">return</span> {String} escaped html\n * */\n</code></pre>\n"})
{"article":"<section><h1 id=\"Fetch 新一代 替换传统ajax\" data-index=0>Fetch 新一代 替换传统ajax</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API>Fetch 概念</a></p><p><a href=https://github.github.io/fetch/ >fetch 实现库，兼容不支持 fetch 情况</a><br><a href=https://www.npmjs.com/package/whatwg-fetch>npm：whatwg-fetch</a></p><p><a href=https://segmentfault.com/a/1190000003810652>Fetch 使用问题解决</a></p></section><section><h1 id=class data-index=1>class</h1><section><h2 id=常用模式、性能 data-index=2>常用模式、性能</h2><p>es6 class 常用模式:</p><pre><code class=lang-js><span class=hljs-comment>// 私有成员，创建在class 外面，如果还是有其他class，使用 即时函数了</span>\n<span class=hljs-comment>// 此为目前无奈解决方案</span>\n\n<span class=hljs-comment>// 功能初始，最先执行，只执行一次</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>testInit</span>(<span class=hljs-params></span>) </span>{\n    <span class=hljs-comment>// 保证只执行一次</span>\n    testInit=<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{};\n}\n\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>test</span></span>{\n    <span class=hljs-keyword>constructor</span>(){\n\n        <span class=hljs-comment>// 公共成员，非共享</span>\n\n    }\n\n    <span class=hljs-comment>// 公共成员，共享</span>\n\n}\n</code></pre></section><section><h2 id=基本语法 data-index=3>基本语法</h2><p>属性只能在constructor函数中创建</p><pre><code><span class=hljs-comment>// 定义类</span>\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>hello</span> </span>{\n\n  <span class=hljs-comment>// 构造函数，如果没有显式定义，一个空的constructor方法会被默认添加。</span>\n  <span class=hljs-keyword>constructor</span>(name) {\n    <span class=hljs-comment>// new 的时候执行</span>\n    <span class=hljs-comment>// 参数也是 new 的时候传入的</span>\n\n    <span class=hljs-keyword>this</span>.name = name;\n\n    <span class=hljs-comment>// 默认返回实例对象（即this）,完全可以指定返回另外一个对象</span>\n    <span class=hljs-comment>// return {}</span>\n  }\n\n  <span class=hljs-comment>// 方法成员</span>\n  hi() {\n    <span class=hljs-keyword>return</span> <span class=hljs-string>'hello '</span>+<span class=hljs-keyword>this</span>.name;\n  }\n}\n\n<span class=hljs-comment>// 调用。不使用new是没法调用的，会报错</span>\n<span class=hljs-keyword>let</span> p1 = <span class=hljs-keyword>new</span> hello(<span class=hljs-string>'jony'</span>);\n\n<span class=hljs-keyword>let</span> p2 = <span class=hljs-keyword>new</span> hello; <span class=hljs-comment>// 不传参也没事</span>\n</code></pre></section><section><h2 id=继承 data-index=4>继承</h2><section><h3 id=速度使用 data-index=5>速度使用</h3><p>extends：继承关键字 super：执行父类的构造函数</p><pre><code><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>ColorPoint</span> <span class=hljs-keyword>extends</span> <span class=hljs-title>Point</span> </span>{\n  <span class=hljs-keyword>constructor</span>(x, y, color) {\n    <span class=hljs-keyword>super</span>(x, y); <span class=hljs-comment>// 调用父类的constructor(x, y)</span>\n    <span class=hljs-keyword>this</span>.color = color;\n  } \n}\n</code></pre></section></section></section><section><h1 id=\"Promise + async\" data-index=6>Promise + async</h1><section><h2 id=快速了解 data-index=7>快速了解</h2><ol><li>Promise 一般用于函数内，作为返回值</li><li>Promise 一般结合 async 函数和使用</li></ol></section><section><h2 id=快速使用、语法简要说明 data-index=8>快速使用、语法简要说明</h2><p>Promise</p><pre><code class=lang-js><span class=hljs-keyword>var</span> fs = <span class=hljs-built_in>require</span>(<span class=hljs-string>'fs'</span>);\n\n<span class=hljs-keyword>var</span> readFile = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>fileName</span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    <span class=hljs-comment>// 此处会立即执行(同步执行)</span>\n    <span class=hljs-comment>// 强调：此处会在当前 new Promise 实例后立即执行</span>\n\n    <span class=hljs-comment>// ...异步逻辑代码</span>\n    fs.readFile(fileName, <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>error, data</span>) </span>{\n\n      <span class=hljs-comment>/*异步失败*/</span>\n      <span class=hljs-keyword>if</span> (error) <span class=hljs-keyword>return</span> reject(error);\n\n      <span class=hljs-comment>/*异步成功*/</span>\n      resolve(data);\n    });\n  });\n};\n</code></pre><p>async：实际上是 Promise 的扩展</p><pre><code class=lang-js><span class=hljs-keyword>var</span> asyncReadFile = <span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-comment>// 此处会立马同步执行</span>\n\n  <span class=hljs-comment>// await 返回的是 Promise 的 resolve 执行后传入的值</span>\n  <span class=hljs-keyword>var</span> f1 = <span class=hljs-keyword>await</span> readFile(<span class=hljs-string>'/etc/fstab'</span>);\n  <span class=hljs-comment>// 此处等待 await 异步执行完后才会执行</span>\n\n  <span class=hljs-keyword>var</span> f2 = <span class=hljs-keyword>await</span> readFile(<span class=hljs-string>'/etc/shells'</span>);\n  <span class=hljs-comment>// 此处等待 await 异步执行完后才会执行</span>\n\n  <span class=hljs-built_in>console</span>.log(f1.toString());\n  <span class=hljs-built_in>console</span>.log(f2.toString());\n};\n\n<span class=hljs-comment>// 异步函数执行</span>\nasyncReadFile();\n</code></pre></section><section><h2 id=Promise data-index=9>Promise</h2><section><h3 id=错误处理 data-index=10>错误处理</h3><p>2 种方式</p><pre><code>p.then(<span class=hljs-function>(<span class=hljs-params>val</span>) =&gt;</span> <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'fulfilled:'</span>, val))\n  .catch(<span class=hljs-function>(<span class=hljs-params>err</span>) =&gt;</span> <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'rejected'</span>, err));\n\n<span class=hljs-comment>// 等同于</span>\np.then(<span class=hljs-function>(<span class=hljs-params>val</span>) =&gt;</span> <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'fulfilled:'</span>, val))\n  .then(<span class=hljs-literal>null</span>, (err) =&gt; <span class=hljs-built_in>console</span>.log(<span class=hljs-string>\"rejected:\"</span>, err));\n</code></pre></section><section><h3 id=\"then catch 执行机制\" data-index=11>then catch 执行机制</h3><ul><li>执行 resolve 后，后面的 then 都会执行，除了 catch</li><li>执行 reject 后，从 catch 开始执行，后面的 then 都会执行</li></ul><pre><code class=lang-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n  setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    reject(<span class=hljs-string>'错了'</span>)\n  },<span class=hljs-number>1000</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>)\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(err)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>3</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>4</span>)\n});\n\n<span class=hljs-comment>// 输出：(等待1s)'错了'、(同步)3、(同步)4</span>\n</code></pre><ul><li>then catch 中都可继续异步</li></ul><pre><code class=lang-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n  setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    reject(<span class=hljs-string>'错了'</span>)\n  },<span class=hljs-number>1000</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>)\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(err)\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      reject(<span class=hljs-string>'继续错了'</span>)\n    },<span class=hljs-number>1000</span>)\n  })\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>3</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>4</span>)\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(err)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>5</span>)\n}).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>6</span>)\n});\n\n<span class=hljs-comment>// (等待1s)输出：'错了'、(等待1s)'继续错了'、(同步)5、(同步)6</span>\n</code></pre></section><section><h3 id=\"then catch 都将返回 Promise 对象\" data-index=12>then catch 都将返回 Promise 对象</h3><pre><code class=lang-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>get</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    resolve(<span class=hljs-string>'hi'</span>)\n  }).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>d</span>) </span>{\n    <span class=hljs-keyword>return</span> d\n  })\n}\n\n<span class=hljs-comment>// 继续 then</span>\n<span class=hljs-comment>// 因为 上一个 then 的执行返回的是 Promise</span>\nget().then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>d</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(d)\n})\n</code></pre></section><section><h3 id=\"then 中手动抛错的正确方式\" data-index=13>then 中手动抛错的正确方式</h3><p>实现自定义 catch 触发</p><pre><code class=lang-js>axios.post(<span class=hljs-string>'/Mccard/ClassBrand/GetGroupEditModel'</span>, { <span class=hljs-attr>code</span>: equipmentCode  }).then(<span class=hljs-function>(<span class=hljs-params>{data}</span>) =&gt;</span> {\n  <span class=hljs-keyword>if</span> (data.code === <span class=hljs-number>0</span>) {\n    <span class=hljs-keyword>return</span> data.data.id\n  }\n  <span class=hljs-comment>// 手动抛错</span>\n  <span class=hljs-keyword>return</span> <span class=hljs-built_in>Promise</span>.reject(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(<span class=hljs-string>'classId 获取失败'</span>))\n}).then(<span class=hljs-function><span class=hljs-params>classId</span> =&gt;</span> {\n  <span class=hljs-comment>// 不会执行</span>\n}).catch(<span class=hljs-function><span class=hljs-params>e</span> =&gt;</span> {\n  <span class=hljs-comment>// 捕获到错误</span>\n})\n</code></pre></section><section><h3 id=\"直接执行 resolve、reject 情况依然是[异步]的\" data-index=14>直接执行 resolve、reject 情况依然是[异步]的</h3><pre><code class=lang-js>(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>2</span>) <span class=hljs-comment>// 同步</span>\n  resolve() <span class=hljs-comment>// 直接执行</span>\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-number>3</span>) <span class=hljs-comment>// 同步</span>\n})).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'处理'</span>) <span class=hljs-comment>// 异步</span>\n  <span class=hljs-keyword>return</span> <span class=hljs-built_in>Promise</span>.reject(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Error</span>(<span class=hljs-string>'失败'</span>))\n}).catch(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(e) <span class=hljs-comment>// 异步</span>\n})\n<span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>)\n\n<span class=hljs-comment>// 依次输出：2，3，1，'处理'，'失败'</span>\n</code></pre></section><section><h3 id=\"resolve 只能传一个参数\" data-index=15>resolve 只能传一个参数</h3><pre><code class=lang-js>(<span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve</span>) </span>{\n  resolve(<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>)\n})).then(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>d1, d2, d3</span>) </span>{\n  <span class=hljs-built_in>console</span>.log(d1, d2, d3) <span class=hljs-comment>// 1 undefined undefined</span>\n})\n</code></pre></section></section><section><h2 id=async data-index=16>async</h2><section><h3 id=\"返回 Promise 对象\" data-index=17>返回 Promise 对象</h3><p>async 函数执行，将返回值包装成 Promise 对象，再返回</p><pre><code><span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>f</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-string>'hello world'</span>;\n}\n\nf().then(<span class=hljs-function><span class=hljs-params>v</span> =&gt;</span> <span class=hljs-built_in>console</span>.log(v))\n<span class=hljs-comment>// \"hello world\"</span>\n</code></pre></section><section><h3 id=错误处理 data-index=18>错误处理</h3><p>如果出错，将不会继续往下，直接执行 catch。如果没有 catch 捕捉，直接报错并中断执行</p><pre><code class=lang-js><span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>f</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>await</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      <span class=hljs-keyword>if</span> (<span class=hljs-number>1</span>) {\n        reject(<span class=hljs-string>'e111'</span>)\n      }\n      resolve(<span class=hljs-string>'111'</span>)\n    }, <span class=hljs-number>600</span>)\n\n  })\n  <span class=hljs-keyword>await</span> <span class=hljs-keyword>new</span> <span class=hljs-built_in>Promise</span>(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>resolve, reject</span>) </span>{\n    setTimeout(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n      <span class=hljs-keyword>if</span> (<span class=hljs-number>1</span>) {\n        reject(<span class=hljs-string>'e222'</span>)\n      }\n      resolve(<span class=hljs-string>'222'</span>)\n    }, <span class=hljs-number>600</span>)\n\n  })\n}\n\n<span class=hljs-comment>// 捕捉错误</span>\nf().catch(<span class=hljs-function><span class=hljs-params>e</span> =&gt;</span><span class=hljs-built_in>console</span>.log(e))\n\n<span class=hljs-comment>// 或者, 既可接收返回值，又能捕获错误</span>\nf().then(<span class=hljs-function><span class=hljs-params>v</span> =&gt;</span><span class=hljs-built_in>console</span>.log(v), e =&gt;<span class=hljs-built_in>console</span>.log(e))\n</code></pre></section><section><h3 id=\"await 返回的是 resolve 传的值\" data-index=19>await 返回的是 resolve 传的值</h3><p>也就是 then 给函数输出的参数</p><p><strong>而 reject 返回的值</strong>需 async 执行后通过 catch，或者不接受，报错直接中断执行</p></section></section></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"hidden\"></i><span class=\"txt\">Fetch 新一代 替换传统ajax</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"\"></i><span class=\"txt\">class</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">常用模式、性能</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">基本语法</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"\"></i><span class=\"txt\">继承</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">速度使用</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"\"></i><span class=\"txt\">Promise + async</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"hidden\"></i><span class=\"txt\">快速了解</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"hidden\"></i><span class=\"txt\">快速使用、语法简要说明</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"\"></i><span class=\"txt\">Promise</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">错误处理</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">then catch 执行机制</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"hidden\"></i><span class=\"txt\">then catch 都将返回 Promise 对象</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"hidden\"></i><span class=\"txt\">then 中手动抛错的正确方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">直接执行 resolve、reject 情况依然是[异步]的</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"hidden\"></i><span class=\"txt\">resolve 只能传一个参数</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"\"></i><span class=\"txt\">async</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\">返回 Promise 对象</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"18\"><i class=\"hidden\"></i><span class=\"txt\">错误处理</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"19\"><i class=\"hidden\"></i><span class=\"txt\">await 返回的是 resolve 传的值</span></div><div class=\"list\"></div></div></div></div></div></div>"}
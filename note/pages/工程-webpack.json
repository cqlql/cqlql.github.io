{"article":"<h1 data-index=0>0 常用代码</h1><h2 data-index=1>CLI常用</h2><pre><code class=lang-cmd>webpack -w -d --devtool source-map --env=d,\n\nwebpack -p --env=p,\n\nE:\\\\_work\\\\node_modules\\\\.bin\\\\webpack-dev-server --open\n</code></pre><h2 data-index=2>涉及到的包</h2><p>babel-core babel-plugin-transform-runtime babel-plugin-syntax-dynamic-import babel-preset-env babel-loader</p><p>webpack</p><p>autoprefixer style-loader css-loader postcss-loader postcss-nested postcss-apply postcss-calc postcss-css-variables postcss-custom-properties postcss-loader postcss-nested postcss-smart-import</p><p>extract-text-webpack-plugin html-webpack-plugin html-webpack-inline-source-plugin</p><p>clean-webpack-plugin</p><h2 data-index=3>webpack.config 常用</h2><pre><code class=lang-js>\n<span class=hljs-keyword>let</span> path = <span class=hljs-built_in>require</span>(<span class=hljs-string>'path'</span>);\n<span class=hljs-keyword>let</span> webpack = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack'</span>);\n<span class=hljs-keyword>let</span> HtmlWebpackPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>'html-webpack-plugin'</span>);\n<span class=hljs-comment>// let CleanWebpackPlugin = require('clean-webpack-plugin');</span>\n\n<span class=hljs-built_in>module</span>.exports = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>env, options</span>) </span>{\n\n    <span class=hljs-keyword>let</span> params = env ? env.split(<span class=hljs-string>','</span>) : []\n    <span class=hljs-keyword>let</span> dev = params[<span class=hljs-number>0</span>] !== <span class=hljs-string>'p'</span>\n\n    <span class=hljs-keyword>let</span> outputPath = path.resolve(__dirname, <span class=hljs-string>\"dist\"</span>)\n\n    <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>entry</span>: {\n            <span class=hljs-attr>index</span>: [<span class=hljs-string>\"./src/index.js\"</span>]\n        },\n\n        <span class=hljs-attr>output</span>: {\n            <span class=hljs-attr>path</span>: outputPath,\n            <span class=hljs-attr>filename</span>: <span class=hljs-string>\"js/[name].js\"</span>\n            <span class=hljs-comment>// 模块路径信息，注释形式显示</span>\n            pathinfo:<span class=hljs-literal>true</span>\n        },\n        <span class=hljs-attr>plugins</span>: [\n            <span class=hljs-keyword>new</span> HtmlWebpackPlugin({\n                <span class=hljs-attr>filename</span>: <span class=hljs-string>'./index.html'</span>,\n                <span class=hljs-attr>template</span>: <span class=hljs-string>'./src/index.html'</span>,\n                <span class=hljs-attr>chunks</span>: [<span class=hljs-string>'index'</span>]\n            }),\n\n            <span class=hljs-comment>// new webpack.optimize.CommonsChunkPlugin({</span>\n            <span class=hljs-comment>//     name: ['common', 'manifest'],</span>\n            <span class=hljs-comment>// }),</span>\n\n            <span class=hljs-comment>// new CleanWebpackPlugin(['dist']),// 清理dist</span>\n            <span class=hljs-comment>// new webpack.HotModuleReplacementPlugin(), // 启用 HMR</span>\n        ],\n\n        <span class=hljs-attr>module</span>: {\n            <span class=hljs-comment>//加载器配置</span>\n            rules: [\n                {\n                    <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.js$/</span>,\n                    <span class=hljs-comment>// exclude: /node_modules/,</span>\n                    include: [path.resolve(__dirname, <span class=hljs-string>\"src\"</span>)],\n                    <span class=hljs-attr>loader</span>: <span class=hljs-string>'babel-loader'</span>,\n                    <span class=hljs-attr>options</span>: {\n                        <span class=hljs-string>\"presets\"</span>: [<span class=hljs-string>\"env\"</span>],\n                        <span class=hljs-string>\"plugins\"</span>: [<span class=hljs-string>\"transform-runtime\"</span>,<span class=hljs-string>\"syntax-dynamic-import\"</span>],\n                    }\n                }, {\n                    <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.css$/</span>,\n                    <span class=hljs-attr>use</span>: [\n                        <span class=hljs-string>'style-loader'</span>, {\n                        <span class=hljs-attr>loader</span>: <span class=hljs-string>'css-loader'</span>, <span class=hljs-attr>options</span>: {\n                            <span class=hljs-attr>importLoaders</span>: <span class=hljs-number>1</span>,\n                            <span class=hljs-attr>sourceMap</span>: <span class=hljs-literal>true</span>\n                        }\n                    }, {\n                        <span class=hljs-attr>loader</span>: <span class=hljs-string>'postcss-loader'</span>,\n                        <span class=hljs-attr>options</span>: {\n                            <span class=hljs-attr>sourceMap</span>: <span class=hljs-string>'inline'</span>\n                        }\n                    }]\n                }, {\n                    <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,\n                    <span class=hljs-attr>loader</span>: <span class=hljs-string>'url-loader'</span>,\n                    <span class=hljs-attr>query</span>: {\n                        <span class=hljs-attr>limit</span>: <span class=hljs-number>1000</span>,<span class=hljs-comment>//单位 字节，1千字节(kb)=1024字节(b)</span>\n                        <span class=hljs-comment>// path: '/',</span>\n                        <span class=hljs-comment>// publicPath: '../',</span>\n                        name: <span class=hljs-string>\"imgs/[name].[ext]\"</span>\n                    }\n                },\n                {\n                    <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,\n                    <span class=hljs-attr>loader</span>: <span class=hljs-string>'url-loader'</span>,\n                    <span class=hljs-attr>query</span>: {\n                        <span class=hljs-attr>limit</span>: <span class=hljs-number>1000</span>,\n                        <span class=hljs-comment>// publicPath: '../',</span>\n                        <span class=hljs-comment>// name: '../fonts/[name].[hash:7].[ext]'</span>\n                        name: <span class=hljs-string>\"fonts/[name].[ext]\"</span>\n                    }\n                }\n            ]\n        },\n        <span class=hljs-attr>resolve</span>: {\n\n            <span class=hljs-comment>// 寻找模块的目录</span>\n            modules: [\n                <span class=hljs-string>\"node_modules\"</span>\n            ],\n\n            <span class=hljs-attr>extensions</span>: [<span class=hljs-string>\".js\"</span>],\n\n            <span class=hljs-comment>// 别名</span>\n            alias: {\n\n            }\n        },\n\n        <span class=hljs-attr>devServer</span>: {\n            <span class=hljs-attr>contentBase</span>: outputPath,\n            <span class=hljs-attr>compress</span>: <span class=hljs-literal>true</span>,\n            <span class=hljs-attr>host</span>:<span class=hljs-string>'192.168.1.222'</span>,\n            <span class=hljs-attr>port</span>: <span class=hljs-number>3001</span>,\n            <span class=hljs-attr>hot</span>: <span class=hljs-literal>false</span>\n        }\n    }\n}\n</code></pre><h2 data-index=4>css-loader 常用</h2><h3 data-index=5>css 提取。生产可用</h3><pre><code class=lang-js><span class=hljs-comment>// 1</span>\n<span class=hljs-keyword>let</span> ExtractTextPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>\"extract-text-webpack-plugin\"</span>);\n\n<span class=hljs-built_in>module</span>.exports = {\n  <span class=hljs-attr>plugins</span>: [\n    <span class=hljs-comment>// 2</span>\n    <span class=hljs-keyword>new</span> ExtractTextPlugin(<span class=hljs-string>'css/[name].css'</span>),\n  ],\n  <span class=hljs-attr>module</span>:{\n    <span class=hljs-attr>rules</span>:[{\n      <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.(css|pcss)$/</span>,\n      <span class=hljs-comment>// 3</span>\n      use: ExtractTextPlugin.extract({\n        <span class=hljs-attr>fallback</span>: <span class=hljs-string>'style-loader'</span>,\n        <span class=hljs-attr>use</span>: [<span class=hljs-string>'css-loader'</span>, <span class=hljs-string>'postcss-loader'</span>]\n      })\n    }]\n  }\n}\n</code></pre><h3 data-index=6>不提取</h3><pre><code class=lang-js>use: [{\n    <span class=hljs-attr>loader</span>: <span class=hljs-string>'style-loader'</span>\n}, {\n    <span class=hljs-attr>loader</span>: <span class=hljs-string>'css-loader'</span>, <span class=hljs-attr>options</span>: {\n        <span class=hljs-attr>importLoaders</span>: <span class=hljs-number>1</span>,\n        <span class=hljs-attr>sourceMap</span>: <span class=hljs-literal>true</span>\n    }\n}, {\n    <span class=hljs-attr>loader</span>: <span class=hljs-string>'postcss-loader'</span>,\n    <span class=hljs-attr>options</span>: {\n        <span class=hljs-attr>sourceMap</span>: <span class=hljs-string>'inline'</span>,\n        <span class=hljs-comment>// syntax: require('postcss-scss'),</span>\n        plugins: [\n            <span class=hljs-comment>// require('postcss-cssnext')({</span>\n            <span class=hljs-comment>// browsers:[\"last 10 versions\",'Firefox &lt; 20','ie 10']</span>\n            <span class=hljs-comment>// autoprefixer:{</span>\n            <span class=hljs-comment>//   remove: false</span>\n            <span class=hljs-comment>// }</span>\n            <span class=hljs-comment>// }),</span>\n            <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-smart-import'</span>)({\n                <span class=hljs-attr>path</span>: [<span class=hljs-string>'E:/_work/mobile_webview/smallpitch.webview/src/modules/base-libs/css'</span>]\n            }),\n            <span class=hljs-comment>// require('postcss-inline-comment'),</span>\n            <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-calc'</span>),\n            <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-apply'</span>),\n            <span class=hljs-built_in>require</span>(<span class=hljs-string>'autoprefixer'</span>)({\n                <span class=hljs-attr>remove</span>: <span class=hljs-literal>false</span>\n            }),\n            <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-custom-properties'</span>),\n            <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-nested'</span>),\n            <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-css-variables'</span>),\n        ]\n    }\n},{\n    <span class=hljs-attr>loader</span>: <span class=hljs-string>\"sass-loader\"</span>,\n    <span class=hljs-attr>options</span>: {\n        <span class=hljs-attr>sourceMap</span>: <span class=hljs-literal>true</span>,\n        <span class=hljs-attr>includePaths</span>: [<span class=hljs-string>'E:/_work/mobile_webview/smallpitch.webview/src/modules/base-libs/css'</span>]\n    }\n}]\n</code></pre><h2 data-index=7>js css 集成到 html</h2><p>在满足 html-webpack-plugin、extract-text-webpack-plugin 的条件下，只需满足下面3点</p><pre><code class=lang-js><span class=hljs-keyword>let</span> path = <span class=hljs-built_in>require</span>(<span class=hljs-string>'path'</span>);\n<span class=hljs-keyword>let</span> webpack = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack'</span>);\n<span class=hljs-keyword>let</span> HtmlWebpackPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>'html-webpack-plugin'</span>);\n<span class=hljs-keyword>let</span> ExtractTextPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>\"extract-text-webpack-plugin\"</span>);\n<span class=hljs-comment>// 1</span>\n<span class=hljs-keyword>let</span> HtmlWebpackInlineSourcePlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>'html-webpack-inline-source-plugin'</span>);\n\n<span class=hljs-built_in>module</span>.exports = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>env, options</span>) </span>{\n\n  <span class=hljs-keyword>return</span> {\n    <span class=hljs-attr>plugins</span>: [\n      <span class=hljs-keyword>new</span> HtmlWebpackPlugin({\n        <span class=hljs-attr>filename</span>: <span class=hljs-string>'./index.html'</span>,\n        <span class=hljs-attr>template</span>: <span class=hljs-string>'./src/index.html'</span>,\n        <span class=hljs-attr>chunks</span>: [<span class=hljs-string>'index'</span>],\n        <span class=hljs-comment>// 2: 如果不满足条件3，条件2的有无是没任何影响的</span>\n        inlineSource: <span class=hljs-string>'.(js|css)$'</span>\n      }),\n      <span class=hljs-keyword>new</span> ExtractTextPlugin(<span class=hljs-string>'css/[name].css'</span>),\n\n      <span class=hljs-comment>// 3</span>\n      <span class=hljs-keyword>new</span> HtmlWebpackInlineSourcePlugin(),\n    ],\n\n    <span class=hljs-attr>module</span>: {\n      <span class=hljs-comment>//加载器配置</span>\n      rules: [{\n          <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.css$/</span>,\n          <span class=hljs-attr>use</span>: ExtractTextPlugin.extract({\n            <span class=hljs-attr>use</span>: [{\n              <span class=hljs-attr>loader</span>: <span class=hljs-string>'css-loader'</span>,\n              <span class=hljs-attr>options</span>: {\n                <span class=hljs-attr>importLoaders</span>: <span class=hljs-number>1</span>,\n                <span class=hljs-attr>sourceMap</span>: <span class=hljs-literal>true</span>,\n                <span class=hljs-attr>url</span>: <span class=hljs-literal>false</span>\n              }\n            }, {\n              <span class=hljs-attr>loader</span>: <span class=hljs-string>'postcss-loader'</span>,\n              <span class=hljs-attr>options</span>: {\n                <span class=hljs-attr>plugins</span>: [\n                  <span class=hljs-built_in>require</span>(<span class=hljs-string>'autoprefixer'</span>)({\n                    <span class=hljs-attr>remove</span>: <span class=hljs-literal>false</span>\n                  }),\n                ]\n              }\n            }]\n          }),\n        }]\n    },\n  }\n}\n</code></pre><h2 data-index=8>Nodejs API</h2><pre><code class=lang-js><span class=hljs-keyword>let</span> webpack = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack'</span>);\n\nwebpack(<span class=hljs-built_in>require</span>(<span class=hljs-string>'./webpack.config'</span>)(),<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>err, stats</span>) </span>{\n  <span class=hljs-keyword>if</span> (err) {\n    <span class=hljs-built_in>console</span>.error(err.stack || err);\n    <span class=hljs-keyword>if</span> (err.details) {\n      <span class=hljs-built_in>console</span>.error(err.details);\n    }\n    <span class=hljs-keyword>return</span>;\n  }\n\n  <span class=hljs-comment>// const info = stats.toJson();</span>\n  <span class=hljs-keyword>const</span> info =stats.toString({\n    <span class=hljs-comment>// chunks: true,</span>\n    <span class=hljs-comment>// Add console colors</span>\n    colors: <span class=hljs-literal>true</span>\n  });\n\n  <span class=hljs-keyword>if</span> (stats.hasErrors()) {\n    <span class=hljs-built_in>console</span>.error(info.errors);\n  }\n\n  <span class=hljs-keyword>if</span> (stats.hasWarnings()) {\n    <span class=hljs-built_in>console</span>.warn(info.warnings)\n  }\n\n  <span class=hljs-built_in>console</span>.log(info)\n})\n</code></pre><h2 data-index=9>html 压缩常用</h2><pre><code class=lang-js><span class=hljs-built_in>module</span>.exports = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>env, options</span>) </span>{\n    <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>plugins</span>: [\n\n            <span class=hljs-keyword>new</span> HtmlWebpackPlugin({\n                <span class=hljs-attr>filename</span>: <span class=hljs-string>'demo/draw-arc/index.html'</span>,\n                <span class=hljs-attr>template</span>: <span class=hljs-string>'./src/demo/draw-arc/index.html'</span>,\n                <span class=hljs-attr>chunks</span>: [<span class=hljs-string>'index'</span>],\n                <span class=hljs-attr>minify</span>:{\n                    <span class=hljs-attr>removeComments</span>: <span class=hljs-literal>true</span>,\n                    <span class=hljs-attr>collapseWhitespace</span>: <span class=hljs-literal>true</span>,\n                    <span class=hljs-attr>removeAttributeQuotes</span>: <span class=hljs-literal>true</span>,\n                    <span class=hljs-attr>minifyCSS</span>: <span class=hljs-literal>true</span>\n                    <span class=hljs-comment>// more options:</span>\n                    <span class=hljs-comment>// https://github.com/kangax/html-minifier#options-quick-reference</span>\n                }\n            })\n\n        ]\n    }\n};\n</code></pre><h2 data-index=10>开发环境</h2><pre><code class=lang-js><span class=hljs-built_in>module</span>.exports = {\n  <span class=hljs-comment>// --devtool eval-cheap-module-source-map</span>\n  <span class=hljs-comment>// 使用分离css插件，此值会不准确，可使用 source-map 代替</span>\n  devtool: <span class=hljs-string>'eval-cheap-module-source-map'</span>,\n  <span class=hljs-comment>// --watch</span>\n  watch: <span class=hljs-literal>true</span>, <span class=hljs-comment>// boolean</span>\n}\n</code></pre><h2 data-index=11>生产环境</h2><pre><code class=lang-js>\n<span class=hljs-built_in>module</span>.exports = {\n  <span class=hljs-attr>plugins</span>:[\n    <span class=hljs-comment>// --optimize-minimize</span>\n    <span class=hljs-keyword>new</span> webpack.optimize.UglifyJsPlugin(),\n    <span class=hljs-comment>// --define process.env.NODE_ENV=\"production\"</span>\n    <span class=hljs-keyword>new</span> webpack.DefinePlugin({\n      <span class=hljs-string>'process.env'</span>: {\n        <span class=hljs-attr>NODE_ENV</span>: <span class=hljs-built_in>JSON</span>.stringify(<span class=hljs-string>'production'</span>)\n      }\n    }),\n  ],\n}\n</code></pre><h1 data-index=12>CLI 对应的 config 选项</h1><table><thead><tr><th>Shortcut</th><th>Replaces</th></tr></thead><tbody><tr><td>-d</td><td>--debug --devtool eval-cheap-module-source-map --output-pathinfo</td></tr><tr><td>-p</td><td>--optimize-minimize --define process.env.NODE_ENV=&quot;production&quot;</td></tr><tr><td>-w</td><td>--watch</td></tr></tbody></table><p>对应</p><pre><code class=lang-js><span class=hljs-built_in>module</span>.exports = {\n  <span class=hljs-attr>output</span>: {\n   <span class=hljs-comment>// --output-pathinfo</span>\n   <span class=hljs-comment>// 模块路径信息，注释形式显示</span>\n    pathinfo:<span class=hljs-literal>true</span>\n  },\n  <span class=hljs-comment>// --devtool eval-cheap-module-source-map</span>\n  <span class=hljs-comment>// 使用分离css插件，此值会不准确，可使用 source-map 代替</span>\n  devtool: <span class=hljs-string>'eval-cheap-module-source-map'</span>,\n\n  <span class=hljs-attr>plugins</span>:[\n    <span class=hljs-comment>// --optimize-minimize</span>\n    <span class=hljs-keyword>new</span> webpack.optimize.UglifyJsPlugin(),\n    <span class=hljs-comment>// --define process.env.NODE_ENV=\"production\"</span>\n    <span class=hljs-keyword>new</span> webpack.DefinePlugin({\n      <span class=hljs-string>'process.env'</span>: {\n        <span class=hljs-attr>NODE_ENV</span>: <span class=hljs-built_in>JSON</span>.stringify(<span class=hljs-string>'production'</span>)\n      }\n    }),\n  ],\n  <span class=hljs-comment>// --watch</span>\n  watch: <span class=hljs-literal>true</span>, <span class=hljs-comment>// boolean</span>\n}\n</code></pre><h1 data-index=13>config 选项</h1><h2 data-index=14>output</h2><h3 data-index=15><a href=https://doc.webpack-china.org/configuration/output#output-publicpath>output.publicPath</a></h3><p>输出还是按照 output.path 输出，只是更正资源引用路径。否则引用将相对 output.path</p><p>部分 loader 有单独的 publicPath，比如 file-loader</p><h3 data-index=16><a href=\"\">output.filename</a></h3><p>除了设置名称，还可以设置输出路径</p><p>部分loader，比如 file-loader 的 name，还有 HtmlWebpackPlugin 的 filename 也有此特性</p><h2 data-index=17>modules 指定模块寻找，支持 nodejs require 机制</h2><ul><li>文件夹名称：支持往上寻找</li><li>相对路径</li><li>绝对路径</li></ul><p>文件夹名称、相对路径 问题： <strong>一个 chunk 中可能会打包出多个相同模块</strong>。<br>比如一个js中有2个vue框架。因为其他项目的 vue 引用会捆绑自己的 <code>node_modules</code>，并且独立生成。但如果使用同一个 <code>node_modules</code>(绝对路径) 就不会有此问题</p><p>webpack.config.js</p><pre><code class=lang-js>modules: [\n    <span class=hljs-comment>// 其他不同路径的独立项目打包时会使用它们自己的的 node_modules</span>\n    <span class=hljs-comment>// \"node_modules\",</span>\n\n    <span class=hljs-comment>// 只使用当前项目的 node_modules，其他不同路径的独立项目打包时也会使用此node_modules</span>\n    path.resolve(__dirname,<span class=hljs-string>'node_modules'</span>),\n\n    <span class=hljs-string>'E:/Dropbox/github/cqlql.github.io/libr'</span>,\n    <span class=hljs-string>'E:/Dropbox/github/cqlql.github.io/js/modules'</span>,\n    <span class=hljs-string>'E:/Dropbox/github/cqlql.github.io/css/modules'</span>\n\n],\n</code></pre><p>调用</p><pre><code class=lang-js><span class=hljs-keyword>import</span> click <span class=hljs-keyword>from</span> <span class=hljs-string>'dom/click'</span>;  <span class=hljs-comment>// E:/Dropbox/github/cqlql.github.io/js/modules/dom/click.js</span>\n<span class=hljs-keyword>import</span> prism <span class=hljs-keyword>from</span> <span class=hljs-string>'prism/prism'</span>;  <span class=hljs-comment>// E:/Dropbox/github/cqlql.github.io/libr/prism/prism.js</span>\n</code></pre><h1 data-index=18>webpack-dev-server</h1><h2 data-index=19>代理</h2><p>开发用。实现无需本机部署服务端环境，使用其他服务端接口</p><pre><code><span class=hljs-selector-tag>devServer</span>: {\n  <span class=hljs-attribute>proxy</span>: {\n    <span class=hljs-string>\"/note\"</span>: {\n      // /note 相当于请求 http://<span class=hljs-number>192.168</span>.<span class=hljs-number>1.222</span>:<span class=hljs-number>8800</span>/note\n      target: <span class=hljs-string>\"http://192.168.1.222:8800\"</span>\n\n      // 使用 pathRewrite 后： /note 相当于请求 http://<span class=hljs-number>192.168</span>.<span class=hljs-number>1.222</span>:<span class=hljs-number>8800</span>\n      pathRewrite: {<span class=hljs-string>\"^/note\"</span> : <span class=hljs-string>\"\"</span>}\n    }\n  }\n}\n</code></pre><h2 data-index=20>Node API</h2><p>方法示例，不会自动刷新</p><pre><code class=lang-js><span class=hljs-keyword>const</span> Webpack = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack'</span>);\n<span class=hljs-keyword>const</span> WebpackDevServer = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack-dev-server'</span>);\n<span class=hljs-keyword>const</span> webpackConfig = <span class=hljs-built_in>require</span>(<span class=hljs-string>'./webpack.config'</span>)();\n\n<span class=hljs-keyword>const</span> compiler = Webpack(webpackConfig);\n<span class=hljs-keyword>const</span> server = <span class=hljs-keyword>new</span> WebpackDevServer(compiler, {\n  <span class=hljs-attr>stats</span>: {\n    <span class=hljs-attr>colors</span>: <span class=hljs-literal>true</span>\n  }\n});\n\nserver.listen(<span class=hljs-number>8080</span>, <span class=hljs-string>'127.0.0.1'</span>, () =&gt; {\n  <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'Starting server on http://localhost:8080'</span>);\n});\n</code></pre><p>会自动刷新，但 webpack.config.js 必须根目录</p><pre><code><span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack-dev-server/bin/webpack-dev-server'</span>);\n</code></pre><h1 data-index=21>事件</h1><h2 data-index=22>编译事件</h2><h3 data-index=23>每次编译后触发</h3><pre><code class=lang-js>compiler.plugin(<span class=hljs-string>'compilation'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>compilation</span>) </span>{\n\n})\n</code></pre><h3 data-index=24>html-webpack-plugin 插件的编译后事件</h3><p>需配合 compilation 事件使用</p><p><a href=https://www.npmjs.com/package/html-webpack-plugin#events>文档有说明</a></p><pre><code class=lang-js>\ncompiler.plugin(<span class=hljs-string>'compilation'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>compilation</span>) </span>{\n  compilation.plugin(<span class=hljs-string>'html-webpack-plugin-after-emit'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>data, cb</span>) </span>{\n    hotMiddleware.publish({ <span class=hljs-attr>action</span>: <span class=hljs-string>'reload'</span> })\n    cb()\n  })\n})\n</code></pre><h1 data-index=25>webpack 使用经验记录</h1><h2 data-index=26>css模块导入依赖控制（webpack 中使用postcss 导入依赖问题）</h2><p><strong>问题1</strong></p><p>直接在 entry 指定css文件，依赖顺序无法控制，极不稳定，会出现基础css在编译后跑到后面去</p><p>js 中 require css问题依旧</p><p><strong>解决</strong><br>在css中 <code>@import</code> 问题解决，但有另一个问题</p><p>但产生<br><strong>问题2：</strong><br>css 中的<code>@import</code> 模块没法在 <code>resolve.modules</code> 指定的路径中寻找模块 (记得过去是可以的，不清楚是不是更新后有所调整)</p><p><strong>解决</strong><br>使用 <code>postcss-smart-import</code> 插件，<code>path</code> 属性中指定属性</p><pre><code class=lang-js><span class=hljs-built_in>module</span>.exports = {\n  <span class=hljs-attr>plugins</span>: [\n    <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-smart-import'</span>)({\n      <span class=hljs-attr>path</span>: [<span class=hljs-string>'E:/_work/Dropbox/github/modules/base-libs/css'</span>]\n    })\n  ]\n}\n</code></pre><h2 data-index=27>可按需引入构建的包</h2><p>之前出现这样的现象，通过<code>CommonsChunkPlugin</code>打出的某独立包某页面并不需要，但不引入却会报错。那时误以为，<code>CommonsChunkPlugin</code>打出的包都是关联的，所有页面必须全部引入，其实不是。</p><p><strong>发现原因：</strong><br>之前要引入所有包，是因为 <code>CommonsChunkPlugin</code> &gt; <code>names</code>数组头居然生成了其他模块，关键我并没有指定这种模块(其实生成的这种不相干的模块应该生成到尾部才是。。。)。即某个生成的模块还包含其他模块，而这个其他模块某页面是必须的。<br>解决很简单，2种方案：</p><pre><code><span class=hljs-number>1.</span> 可以查看源码，把这个多出来的模块固定打入某个公共包\n<span class=hljs-number>2.</span> <span class=hljs-string>`names`</span>数组头尾都放公共包\n\n\n</code></pre><p>问题代码：</p><pre><code class=lang-js><span class=hljs-built_in>module</span>.exports ={\n    <span class=hljs-attr>entry</span>:{\n        <span class=hljs-attr>common</span>: [<span class=hljs-string>'zoom-touch'</span>, <span class=hljs-string>'Popup'</span>, <span class=hljs-string>'vue'</span>, <span class=hljs-string>'common-mobile'</span>, <span class=hljs-string>'slider-one-load'</span>,<span class=hljs-string>'msg-mobile'</span>,<span class=hljs-string>'string-handle'</span>,<span class=hljs-string>\"j/common.js\"</span>],\n\n        <span class=hljs-comment>// click-vue 生成进来了，明明没有指定。这个模块所有页面都会用，预想是生成进 names 数组尾部才是，即common中。</span>\n        <span class=hljs-comment>// 结论：`CommonsChunkPlugin` &gt; `names` 头尾都不干净，中间才干净。或者内部依赖问题所致</span>\n        katex:[ <span class=hljs-string>'katexcss'</span>,<span class=hljs-string>'katex'</span>, <span class=hljs-string>'./src/js/modules/latexParse.js'</span>]\n    },\n    <span class=hljs-attr>plugins</span>:[\n        <span class=hljs-keyword>new</span> webpack.optimize.CommonsChunkPlugin({           \n            <span class=hljs-attr>names</span>:[<span class=hljs-string>'katex'</span>,<span class=hljs-string>'common'</span>]\n        })\n    ]    \n}\n</code></pre><h2 data-index=28>webpack 使用场景，与其他打包工具比较</h2><p>webpack / <a href=https://github.com/substack/node-browserify>browserify</a> 主要用来打包web应用</p><p>打包独立模块请用 <a href=https://github.com/rollup/rollup>rollup</a></p><h2 data-index=29>alias 精简模块路径</h2><p>可指向路径，还可直接指向模块</p><ol><li>定义别名</li></ol><pre><code class=lang-js><span class=hljs-built_in>module</span>.exports = {\n    <span class=hljs-attr>resolve</span>: {\n        <span class=hljs-attr>alias</span>: {\n            <span class=hljs-comment>// 路径</span>\n            j:<span class=hljs-string>'./src/js'</span>,\n\n            <span class=hljs-comment>// 模块</span>\n            ChunkedShow: <span class=hljs-string>'E:/_work/Dropbox/github/modules/chunked-show/src/v1/chunked-show.js'</span>\n\n        }\n    }\n}\n</code></pre><ol><li>使用别名</li></ol><pre><code class=lang-js><span class=hljs-comment>// 1路径</span>\n<span class=hljs-keyword>import</span> {ChunkedShow} <span class=hljs-keyword>from</span> <span class=hljs-string>'j/index'</span>; <span class=hljs-comment>// 相当于 ./src/js/index</span>\n\n<span class=hljs-comment>// 2模块</span>\n<span class=hljs-keyword>import</span> {ChunkedShow} <span class=hljs-keyword>from</span> <span class=hljs-string>'ChunkedShow'</span>;\n</code></pre><h2 data-index=30>开发服务器配置：devServer</h2><h3 data-index=31>问题1：关于404 Cannot GET /</h3><p>需指定访问页面。比如生成的是demo.html，则地址为<code>http://localhost:9000/demo.html</code></p><h2 data-index=32>webpack 动态导入 注释魔法 webpackChunkName 不生效</h2><ol><li><strong>增加 <code>output.chunkFilename</code> 字段</strong></li></ol><pre><code class=lang-js><span class=hljs-selector-tag>output</span>: {\n    <span class=hljs-attribute>path</span>: path.<span class=hljs-built_in>resolve</span>(__dirname, <span class=hljs-string>\"dist\"</span>), // string\n    chunkFilename: <span class=hljs-string>'[name].bundle.js'</span>,\n    filename: <span class=hljs-string>\"[name].js\"</span>,\n},\n</code></pre><ol><li><strong>配置 <code>babel-loader</code></strong><br><code>comments</code> 为 true 或者去掉即可</li></ol><pre><code>{\n    <span class=hljs-attribute>test</span>: /\\.js$/,\n    exclude: /node_modules/,\n    loader: <span class=hljs-string>'babel-loader'</span>,\n    options: {\n        <span class=hljs-string>\"presets\"</span>: [<span class=hljs-string>\"env\"</span>],\n        <span class=hljs-string>\"plugins\"</span>: [<span class=hljs-string>\"transform-runtime\"</span>,<span class=hljs-string>\"syntax-dynamic-import\"</span>],\n        <span class=hljs-string>\"comments\"</span>: false\n    }\n},\n</code></pre><h2 data-index=33>没搞懂 webpackMode: &quot;lazy-once&quot; 什么意思</h2><p>实测与 <code>webpackMode: &quot;lazy&quot;</code> 等价。官方的意思是动态路径情况才有意义，估计这种情况我是遇不到了</p><h1 data-index=34>异步加载</h1><p>即只有到真正执行的时候才加载。下面2种方式效果一样。</p><h2 data-index=35>使用 import (荐)</h2><p>例子直接使用 <code>node_modules</code> 中的模块，当然也可以指定路径模块</p><pre><code class=lang-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>determineDate</span>(<span class=hljs-params></span>) </span>{\n    <span class=hljs-keyword>import</span>(<span class=hljs-string>'katex'</span>).then(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>moment</span>) </span>{\n        <span class=hljs-built_in>console</span>.log(moment);\n    }).catch(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>err</span>) </span>{\n        <span class=hljs-built_in>console</span>.log(<span class=hljs-string>'Failed to load moment'</span>, err);\n    });\n}\n<span class=hljs-comment>//console.log(determineDate)// 只是声明，但不执行，看是否下载js。结果是不会下载，实现了按需</span>\nsetTimeout(determineDate,<span class=hljs-number>1000</span>)<span class=hljs-comment>// 是否是1s后下载js。结果是的，实现了按需</span>\n</code></pre><p><strong>还需安装 <code>npm i -D babel-plugin-syntax-dynamic-import</code> 否则打包报语法错误</strong></p><pre><code>{\n    <span class=hljs-attribute>test</span>: /\\.js$/,\n    exclude: /node_modules/,\n    loader: <span class=hljs-string>'babel-loader'</span>,\n    options: {\n        <span class=hljs-string>\"presets\"</span>: [<span class=hljs-string>\"es2015\"</span>, <span class=hljs-string>\"stage-3\"</span>],\n        <span class=hljs-string>\"plugins\"</span>: [<span class=hljs-string>\"transform-runtime\"</span>, <span class=hljs-string>\"syntax-dynamic-import\"</span>]\n    }\n},\n</code></pre><h3 data-index=36>注释魔法：自定义包名</h3><p>需满足下面2个条件</p><p>1 设置 output.chunkFilename</p><pre><code class=lang-js><span class=hljs-built_in>module</span>.exports ={\n  <span class=hljs-attr>output</span>: {\n    <span class=hljs-attr>chunkFilename</span>: <span class=hljs-string>'js/[name].bundle.js'</span>,\n  },\n}\n</code></pre><p>2 注释魔法</p><pre><code class=lang-js><span class=hljs-keyword>async</span> <span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getComponent</span>(<span class=hljs-params></span>) </span>{\n  <span class=hljs-keyword>var</span> element = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'div'</span>);\n  <span class=hljs-keyword>const</span> _ = <span class=hljs-keyword>await</span> <span class=hljs-keyword>import</span>(<span class=hljs-comment>/* webpackChunkName: \"lodash\" */</span> <span class=hljs-string>'lodash'</span>);\n\n  element.innerHTML = _.join([<span class=hljs-string>'Hello'</span>, <span class=hljs-string>'webpack'</span>], <span class=hljs-string>' '</span>);\n\n  <span class=hljs-keyword>return</span> element;\n}\n</code></pre><h3 data-index=37>注释魔法：合并异步模块</h3><p>把多个模块打包成一个异步包。只需要相同的注释包名即可</p><pre><code class=lang-js><span class=hljs-keyword>const</span> Foo = <span class=hljs-function><span class=hljs-params>()</span> =&gt;</span> <span class=hljs-keyword>import</span>(<span class=hljs-comment>/* webpackChunkName: \"group-foo\" */</span> <span class=hljs-string>'./Foo.vue'</span>)\n<span class=hljs-keyword>const</span> Bar = <span class=hljs-function><span class=hljs-params>()</span> =&gt;</span> <span class=hljs-keyword>import</span>(<span class=hljs-comment>/* webpackChunkName: \"group-foo\" */</span> <span class=hljs-string>'./Bar.vue'</span>)\n<span class=hljs-keyword>const</span> Baz = <span class=hljs-function><span class=hljs-params>()</span> =&gt;</span> <span class=hljs-keyword>import</span>(<span class=hljs-comment>/* webpackChunkName: \"group-foo\" */</span> <span class=hljs-string>'./Baz.vue'</span>)\n</code></pre><h2 data-index=38>使用 <code>bundle-loader</code></h2><p>需先安装<code>npm i -D bundle-loader</code></p><p>下例用了路径模块，当然也可以直接使用 <code>node_modules</code> 中的模块</p><pre><code class=lang-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>determineDate</span>(<span class=hljs-params></span>) </span>{\n\n    <span class=hljs-keyword>var</span> waitForChunk = <span class=hljs-built_in>require</span>(<span class=hljs-string>'bundle-loader!./file.js'</span>)\n    <span class=hljs-comment>// var waitForChunk = require(bundle-loader?lazy&amp;name=[name]!./file.js)</span>\n\n    waitForChunk(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>file</span>) </span>{\n        <span class=hljs-built_in>console</span>.log(file)\n    });\n\n}\n\n<span class=hljs-comment>//console.log(determineDate)// 只是声明，但不执行，看是否下载js。结果是不会下载，实现了按需</span>\nsetTimeout(determineDate,<span class=hljs-number>1000</span>)<span class=hljs-comment>// 是否是1s后下载js。结果是的，实现了按需</span>\n</code></pre><h2 data-index=39>异步调用实验</h2><h3 data-index=40>异步中的同步调用-公共同步包：不重复</h3><p>异步加载某些模块 A B D，A B D 都有对公共分离的模块 C 有同步调用，公共模块 C 不会重复打包</p><h3 data-index=41>异步中的异步调用-同步包：重复</h3><p>多个异步模块 ABD，都同步调用模块C，模块C会被重复打进每个异步模块中</p><h3 data-index=42>异步中的异步调用-异步包：不重复</h3><p>多个异步模块 A B C，都异步调用同一个模块 D，模块 D 会被单独打包成异步模块，不会重复</p><h3 data-index=43>异步中的异步调用-公共异步包：不重复</h3><p>如果模块 D 被分离成公共包。模块 D 会固定成为公共包，不会因为异步调用原因被分离出来</p><h2 data-index=44>总结</h2><p>抽离出来的公共包在异步模块中被同步或异步调用都没有特殊，依然是公共包，不会重复。<br>相反，多个位置异步调用的某非公共模块 C，模块 C 会被单独打包出来，成为公共的异步模块，不会重复。<br>但如果此时在某位置使用同步方式调用模块 C，那么模块C会出现重复，这是肯定的</p><h2 data-index=45>核心再总结</h2><ul><li>异步同步调用某公共模块是安全的，不会重复。</li><li>固定以异步形式调用某模块也是安全的，也不会重复</li></ul><h1 data-index=46>引入不编译js库，比如jq</h1><h2 data-index=47>方案1：手动</h2><p>手动在 html 文件中增加 script 引用，然后全局使用。使用 cdn 资源还是不错的，够简单直接</p><h2 data-index=48>方案2：让 webpack 统一管理，依然模块调用、自动引入</h2><p>需要引入一些插件，让配置变得复杂</p><pre><code><span class=hljs-comment>// 此 chunk 不打包</span>\nexternals: {\n    <span class=hljs-attr>katex</span>: <span class=hljs-string>'katex'</span>\n},\n\n<span class=hljs-comment>// 其实就是个拷贝插件</span>\n<span class=hljs-keyword>new</span> CopyWebpackPlugin([\n    { <span class=hljs-attr>from</span>: <span class=hljs-string>'E:/_work/node_modules/katex/dist/katex.min.js'</span>, <span class=hljs-attr>to</span>: <span class=hljs-string>'./katex.min.js'</span>},\n]),\n\n<span class=hljs-comment>// 指定包含资源</span>\n<span class=hljs-keyword>new</span> HtmlWebpackIncludeAssetsPlugin({\n    <span class=hljs-attr>files</span>: [<span class=hljs-string>'./single_v2.html'</span>],\n    <span class=hljs-attr>assets</span>: [<span class=hljs-string>'katex.min.js'</span>],\n    <span class=hljs-comment>// 是增加到后面还是前面，true追加到后面</span>\n    append: <span class=hljs-literal>false</span>\n}),\n</code></pre><pre><code>\n\n# 报错\n\n\n\n## css 提取时报错 `TypeError: chunk.sortModules is not a function`\n\n使用 CLI ，且 node_modules 与 webpack.config 不同级，可能会报此错误\n\n目前解决：  \n使用 Nodejs API 编译打包即可\n\n```js\nlet webpack = require(&#39;webpack&#39;);\n\nwebpack(require(&#39;./webpack.config&#39;)(),function (err, stats) {\n  if (err) {\n    console.error(err.stack || err);\n    if (err.details) {\n      console.error(err.details);\n    }\n    return;\n  }\n\n  // const info = stats.toJson();\n  const info =stats.toString({\n    // chunks: true,\n    // Add console colors\n    colors: true\n  });\n\n  if (stats.hasErrors()) {\n    console.error(info.errors);\n  }\n\n  if (stats.hasWarnings()) {\n    console.warn(info.warnings)\n  }\n\n  console.log(info)\n})\n</code></pre><h1 data-index=49>插件</h1><h2 data-index=50><a href=https://github.com/jantimon/html-webpack-plugin>html-webpack-plugin</a></h2><h3 data-index=51>排序混乱问题：已解决</h3><p>CommonsChunkPlugin 中超过两个公共chrunk 后生成的script顺序会乱来，无法控制</p><p>更新到 <strong>2.29.0</strong> 就好了。。。或者使用下面的2种方法：<a href=定制排序>定制排序</a><a href=定制排序>定制排序</a></p><h3 data-index=52>定制排序</h3><p>此方式不需要设置 chunks 属性。将按照数组给的顺序来</p><pre><code class=lang-js>{\n    <span class=hljs-attr>plugins</span>:[\n        <span class=hljs-keyword>new</span> HtmlWebpackPlugin({\n            <span class=hljs-attr>filename</span>: <span class=hljs-string>'./index.html'</span>,\n            <span class=hljs-attr>template</span>: <span class=hljs-string>'./src/index.html'</span>,\n            <span class=hljs-attr>chunks</span>: [<span class=hljs-string>'manifest'</span>,<span class=hljs-string>'common1'</span>,<span class=hljs-string>'k'</span>,<span class=hljs-string>'app'</span>],\n            <span class=hljs-attr>chunksSortMode</span>: <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>c1,c2</span>) </span>{\n                <span class=hljs-keyword>let</span> orders = [<span class=hljs-string>'manifest'</span>,<span class=hljs-string>'common1'</span>,<span class=hljs-string>'k'</span>,<span class=hljs-string>'app'</span>];\n                <span class=hljs-keyword>let</span> o1 = orders.indexOf(c1.names[<span class=hljs-number>0</span>]);\n                <span class=hljs-keyword>let</span> o2 = orders.indexOf(c2.names[<span class=hljs-number>0</span>]);\n                <span class=hljs-keyword>return</span> o1 - o2;\n            }\n        }),\n    ]\n}\n</code></pre><h3 data-index=53>排除指定 chunk</h3><p>全部引入，这样引入顺序就不会乱。再排除不需要的 chunk。需借助 <a href=https://github.com/jamesjieye/html-webpack-exclude-assets-plugin>html-webpack-exclude-assets-plugin</a></p><p>强调：自身提供 excludeChunks 选项也可实现排除，但依然会乱</p><pre><code class=lang-js><span class=hljs-keyword>var</span> HtmlWebpackExcludeAssetsPlugin = <span class=hljs-built_in>require</span>(<span class=hljs-string>'html-webpack-exclude-assets-plugin'</span>);\n\n<span class=hljs-built_in>module</span>.exports = \n{\n    <span class=hljs-attr>plugins</span>:[\n        <span class=hljs-keyword>new</span> HtmlWebpackPlugin({\n            <span class=hljs-attr>filename</span>: <span class=hljs-string>'./single_v2.html'</span>,\n            <span class=hljs-attr>template</span>: <span class=hljs-string>'./src/single_v2.html'</span>,\n            <span class=hljs-attr>chunks</span>: [<span class=hljs-string>'common'</span>, <span class=hljs-string>'katex'</span>, <span class=hljs-string>'new_common'</span>,<span class=hljs-string>'old_common'</span>, <span class=hljs-string>'single_v2'</span>],\n            <span class=hljs-attr>excludeAssets</span>: [<span class=hljs-regexp>/old_common/</span>]\n        }),\n        <span class=hljs-keyword>new</span> HtmlWebpackExcludeAssetsPlugin(),\n    ]\n}\n</code></pre><h3 data-index=54>html 压缩</h3><pre><code class=lang-js>\n<span class=hljs-built_in>module</span>.exports = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>env, options</span>) </span>{\n    <span class=hljs-keyword>return</span> {\n        <span class=hljs-attr>plugins</span>: [\n\n            <span class=hljs-keyword>new</span> HtmlWebpackPlugin({\n                <span class=hljs-attr>filename</span>: <span class=hljs-string>'demo/draw-arc/index.html'</span>,\n                <span class=hljs-attr>template</span>: <span class=hljs-string>'./src/demo/draw-arc/index.html'</span>,\n                <span class=hljs-attr>chunks</span>: [<span class=hljs-string>'index'</span>],\n                <span class=hljs-attr>minify</span>:{\n                    <span class=hljs-attr>removeComments</span>: <span class=hljs-literal>true</span>,\n                    <span class=hljs-attr>collapseWhitespace</span>: <span class=hljs-literal>true</span>,\n                    <span class=hljs-attr>removeAttributeQuotes</span>: <span class=hljs-literal>true</span>,\n                    <span class=hljs-attr>minifyCSS</span>: <span class=hljs-literal>true</span>\n                    <span class=hljs-comment>// more options:</span>\n                    <span class=hljs-comment>// https://github.com/kangax/html-minifier#options-quick-reference</span>\n                }\n            })\n\n        ]\n    }\n};\n</code></pre><h3 data-index=55>模版选项</h3><p>html文件默认使用 ejs 模版</p><p>模版相关说明：<br><a href=https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md>https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md</a></p><h2 data-index=56>CommonsChunkPlugin</h2><h3 data-index=57>？<code>names</code>数组两头都不干净，还需仔细研究</h3><h2 data-index=58>NamedModulesPlugin</h2><p>不再适用id，使用路径名称标识模块</p><pre><code class=lang-js><span class=hljs-selector-tag>new</span> <span class=hljs-selector-tag>webpack</span><span class=hljs-selector-class>.NamedModulesPlugin</span>()\n</code></pre><h1 data-index=59>热替换 浏览器强制刷新 dev hot middleware</h1><h2 data-index=60>1 <a href=https://github.com/webpack/webpack-dev-middleware>webpack-dev-middleware</a> 需与 <a href=https://github.com/glenjamin/webpack-hot-middleware>webpack-hot-middleware</a> 配合才会实现监听更改后刷新</h2><h2 data-index=61>2 每个 entry 还需导入 <code>webpack-hot-middleware/client?reload=true</code> 才能刷新</h2><p><code>reload=true</code> 表示无法热替换则强制刷新浏览器</p><pre><code class=lang-js>    entry:{\n      <span class=hljs-attr>page1</span>: [<span class=hljs-string>'webpack-hot-middleware/client?reload=true'</span>,<span class=hljs-string>\"./src/page1.js\"</span>],\n      <span class=hljs-attr>page2</span>: [<span class=hljs-string>'webpack-hot-middleware/client?reload=true'</span>,<span class=hljs-string>\"./src/page2.js\"</span>]\n    },\n</code></pre><h2 data-index=62>3 热替换实现还需每个js文件加入类似如下代码</h2><pre><code class=lang-js><span class=hljs-comment>// page1.js</span>\n\n<span class=hljs-keyword>if</span>(<span class=hljs-built_in>module</span>.hot) {\n  <span class=hljs-built_in>module</span>.hot.accept();\n}\n</code></pre><h2 data-index=63>4 html 文件的更改刷新还需借助 eventsource-polyfill</h2><p><code>webpack-hot-middleware/client</code> 中有对 eventsource-polyfill 的调用。<a href=https://www.npmjs.com/package/webpack-hot-middleware#use-on-browsers-without-eventsource>官方也有说明</a></p><p>eventsource-polyfill 实现客户端接受服务端推送的消息</p><p>client 导入，即 entry 中配置，此处包含第2点</p><pre><code class=lang-js><span class=hljs-built_in>require</span>(<span class=hljs-string>'eventsource-polyfill'</span>)\n<span class=hljs-keyword>var</span> hotClient = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>)\n\nhotClient.subscribe(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>event</span>) </span>{\n  <span class=hljs-keyword>if</span> (event.action === <span class=hljs-string>'reload'</span>) {\n    <span class=hljs-built_in>window</span>.location.reload()\n  }\n})\n</code></pre><p>server：服务端通知客户端刷新</p><pre><code class=lang-js>compiler.plugin(<span class=hljs-string>'compilation'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>compilation</span>) </span>{\n  compilation.plugin(<span class=hljs-string>'html-webpack-plugin-after-emit'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>data, cb</span>) </span>{\n    hotMiddleware.publish({ <span class=hljs-attr>action</span>: <span class=hljs-string>'reload'</span> })\n    cb()\n  })\n})\n</code></pre><h2 data-index=64>附上配置代码</h2><pre><code class=lang-js><span class=hljs-comment>// dev-client.js</span>\n\n<span class=hljs-built_in>require</span>(<span class=hljs-string>'eventsource-polyfill'</span>)\n<span class=hljs-keyword>var</span> hotClient = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>)\n\nhotClient.subscribe(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>event</span>) </span>{\n  <span class=hljs-keyword>if</span> (event.action === <span class=hljs-string>'reload'</span>) {\n    <span class=hljs-built_in>window</span>.location.reload()\n  }\n})\n</code></pre><pre><code><span class=hljs-comment>// dev-server.js</span>\n\n<span class=hljs-keyword>var</span> express = <span class=hljs-built_in>require</span>(<span class=hljs-string>'express'</span>)\n<span class=hljs-keyword>var</span> path = <span class=hljs-built_in>require</span>(<span class=hljs-string>'path'</span>)\n\n<span class=hljs-keyword>var</span> webpack = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack'</span>)\n\n<span class=hljs-keyword>var</span> webpackConfig = <span class=hljs-built_in>require</span>(<span class=hljs-string>'./webpack.config'</span>)()\n\n<span class=hljs-built_in>Object</span>.keys(webpackConfig.entry).forEach(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>name</span>) </span>{\n  webpackConfig.entry[name] = [<span class=hljs-string>'./dev-client'</span>].concat(webpackConfig.entry[name])\n})\n\n<span class=hljs-keyword>var</span> app = express()\n<span class=hljs-keyword>var</span> compiler = webpack(webpackConfig)\n\n<span class=hljs-keyword>var</span> devMiddleware = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack-dev-middleware'</span>)(compiler, {\n  <span class=hljs-attr>publicPath</span>: webpackConfig.output.publicPath,\n  <span class=hljs-attr>noInfo</span>: <span class=hljs-literal>true</span>,\n  <span class=hljs-attr>stats</span>: {\n    <span class=hljs-attr>colors</span>: <span class=hljs-literal>true</span>\n  },\n})\n\n<span class=hljs-keyword>var</span> hotMiddleware = <span class=hljs-built_in>require</span>(<span class=hljs-string>'webpack-hot-middleware'</span>)(compiler)\n\ncompiler.plugin(<span class=hljs-string>'compilation'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>compilation</span>) </span>{\n  compilation.plugin(<span class=hljs-string>'html-webpack-plugin-after-emit'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>data, cb</span>) </span>{\n    hotMiddleware.publish({ <span class=hljs-attr>action</span>: <span class=hljs-string>'reload'</span> })\n    cb()\n  })\n});\n\napp.use(devMiddleware)\n\napp.use(hotMiddleware)\n\napp.use(express.static(path.join(__dirname, <span class=hljs-string>'dist'</span>)));\n\n<span class=hljs-keyword>var</span> server = app.listen(<span class=hljs-number>8080</span>)\n</code></pre><h1 data-index=65>缓存 更改小文件 影响所有文件构建 id发生变化</h1><p><a href=https://doc.webpack-china.org/guides/caching#-module-identifiers->https://doc.webpack-china.org/guides/caching#-module-identifiers-</a></p><p>有2个插件可以解决</p><ul><li><p><a href=https://doc.webpack-china.org/plugins/named-modules-plugin>NamedModulesPlugin</a> 将id换成路径</p></li><li><p><a href=https://doc.webpack-china.org/plugins/hashed-module-ids-plugin>HashedModuleIdsPlugin</a> 将id换成路径的hash值</p></li></ul>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">0 常用代码</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">CLI常用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">涉及到的包</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">webpack.config 常用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"\"></i><span class=\"txt\">css-loader 常用</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">css 提取。生产可用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">不提取</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"hidden\"></i><span class=\"txt\">js css 集成到 html</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"hidden\"></i><span class=\"txt\">Nodejs API</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">html 压缩常用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">开发环境</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">生产环境</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"hidden\"></i><span class=\"txt\">CLI 对应的 config 选项</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"\"></i><span class=\"txt\">config 选项</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"\"></i><span class=\"txt\">output</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"hidden\"></i><span class=\"txt\">output.publicPath</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"hidden\"></i><span class=\"txt\">output.filename</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\">modules 指定模块寻找，支持 nodejs require 机制</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"18\"><i class=\"\"></i><span class=\"txt\">webpack-dev-server</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"19\"><i class=\"hidden\"></i><span class=\"txt\">代理</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"20\"><i class=\"hidden\"></i><span class=\"txt\">Node API</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"21\"><i class=\"\"></i><span class=\"txt\">事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"22\"><i class=\"\"></i><span class=\"txt\">编译事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"23\"><i class=\"hidden\"></i><span class=\"txt\">每次编译后触发</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"24\"><i class=\"hidden\"></i><span class=\"txt\">html-webpack-plugin 插件的编译后事件</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"25\"><i class=\"\"></i><span class=\"txt\">webpack 使用经验记录</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"26\"><i class=\"hidden\"></i><span class=\"txt\">css模块导入依赖控制（webpack 中使用postcss 导入依赖问题）</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"27\"><i class=\"hidden\"></i><span class=\"txt\">可按需引入构建的包</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"28\"><i class=\"hidden\"></i><span class=\"txt\">webpack 使用场景，与其他打包工具比较</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"29\"><i class=\"hidden\"></i><span class=\"txt\">alias 精简模块路径</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"30\"><i class=\"\"></i><span class=\"txt\">开发服务器配置：devServer</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"31\"><i class=\"hidden\"></i><span class=\"txt\">问题1：关于404 Cannot GET /</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"32\"><i class=\"hidden\"></i><span class=\"txt\">webpack 动态导入 注释魔法 webpackChunkName 不生效</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"33\"><i class=\"hidden\"></i><span class=\"txt\">没搞懂 webpackMode: &quot;lazy-once&quot; 什么意思</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"34\"><i class=\"\"></i><span class=\"txt\">异步加载</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"35\"><i class=\"\"></i><span class=\"txt\">使用 import (荐)</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"36\"><i class=\"hidden\"></i><span class=\"txt\">注释魔法：自定义包名</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"37\"><i class=\"hidden\"></i><span class=\"txt\">注释魔法：合并异步模块</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"38\"><i class=\"hidden\"></i><span class=\"txt\">使用 bundle-loader</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"39\"><i class=\"\"></i><span class=\"txt\">异步调用实验</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"40\"><i class=\"hidden\"></i><span class=\"txt\">异步中的同步调用-公共同步包：不重复</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"41\"><i class=\"hidden\"></i><span class=\"txt\">异步中的异步调用-同步包：重复</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"42\"><i class=\"hidden\"></i><span class=\"txt\">异步中的异步调用-异步包：不重复</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"43\"><i class=\"hidden\"></i><span class=\"txt\">异步中的异步调用-公共异步包：不重复</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"44\"><i class=\"hidden\"></i><span class=\"txt\">总结</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"45\"><i class=\"hidden\"></i><span class=\"txt\">核心再总结</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"46\"><i class=\"\"></i><span class=\"txt\">引入不编译js库，比如jq</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"47\"><i class=\"hidden\"></i><span class=\"txt\">方案1：手动</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"48\"><i class=\"hidden\"></i><span class=\"txt\">方案2：让 webpack 统一管理，依然模块调用、自动引入</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"49\"><i class=\"\"></i><span class=\"txt\">插件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"50\"><i class=\"\"></i><span class=\"txt\">html-webpack-plugin</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"51\"><i class=\"hidden\"></i><span class=\"txt\">排序混乱问题：已解决</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"52\"><i class=\"hidden\"></i><span class=\"txt\">定制排序</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"53\"><i class=\"hidden\"></i><span class=\"txt\">排除指定 chunk</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"54\"><i class=\"hidden\"></i><span class=\"txt\">html 压缩</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"55\"><i class=\"hidden\"></i><span class=\"txt\">模版选项</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"56\"><i class=\"\"></i><span class=\"txt\">CommonsChunkPlugin</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"57\"><i class=\"hidden\"></i><span class=\"txt\">？names数组两头都不干净，还需仔细研究</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"58\"><i class=\"hidden\"></i><span class=\"txt\">NamedModulesPlugin</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"59\"><i class=\"\"></i><span class=\"txt\">热替换 浏览器强制刷新 dev hot middleware</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"60\"><i class=\"hidden\"></i><span class=\"txt\">1 webpack-dev-middleware 需与 webpack-hot-middleware 配合才会实现监听更改后刷新</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"61\"><i class=\"hidden\"></i><span class=\"txt\">2 每个 entry 还需导入 webpack-hot-middleware/client?reload=true 才能刷新</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"62\"><i class=\"hidden\"></i><span class=\"txt\">3 热替换实现还需每个js文件加入类似如下代码</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"63\"><i class=\"hidden\"></i><span class=\"txt\">4 html 文件的更改刷新还需借助 eventsource-polyfill</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"64\"><i class=\"hidden\"></i><span class=\"txt\">附上配置代码</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"65\"><i class=\"hidden\"></i><span class=\"txt\">缓存 更改小文件 影响所有文件构建 id发生变化</span></div><div class=\"list\"></div></div>"}
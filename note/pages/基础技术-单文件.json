{"article":"<h1 data-index=0>cmd</h1><h2 data-index=1>打开浏览器 并指定网址</h2><p>explorer <a href=http://google.com>http://google.com</a></p><h1 data-index=2>css</h1><h2 data-index=3>后代选择写法原则</h2><p>尽量控制在3层<br>模块 子模块 随意</p><h2 data-index=4>文本</h2><h3 data-index=5>不换行</h3><pre><code class=lang-css><span class=hljs-selector-class>.test</span>{\n    <span class=hljs-attribute>white-space</span>: nowrap;    \n}\n</code></pre><h3 data-index=6>裁剪</h3><p>快速拷贝代码：</p><pre><code class=lang-css><span class=hljs-selector-class>.test</span>{\n    <span class=hljs-attribute>width</span>:<span class=hljs-number>10px</span>;\n    <span class=hljs-attribute>overflow</span>:hidden;\n    <span class=hljs-attribute>text-overflow</span>:ellipsis;\n    <span class=hljs-attribute>white-space</span>: nowrap;    \n}\n</code></pre><p>兼容性：包括ie6的所有</p><h2 data-index=7>比例单位</h2><h3 data-index=8>em</h3><p>不会参照以 <code>[rm]</code> 单位的上级元素，固定找到设置为<code>[px]</code>的上级元素</p><p>只能用于字体单位？</p><h3 data-index=9>rem</h3><ul><li><p><strong>还可作为其他尺寸单位</strong></p></li><li><p><strong>兼容性：ie9+</strong></p></li></ul><ul><li><p><strong>chrome 最小 12px</strong><br>chrome html 最小字体为<code>12px</code>，小于<code>12px</code>的都按<code>12px</code>算。</p><p>ie9+、edge、firefox 都没有这个问题</p><p>代码所示，div width应该是700才对，可实际是1200。</p><pre><code class=lang-css><span class=hljs-selector-tag>html</span>{\n    <span class=hljs-attribute>font-size</span>:<span class=hljs-number>7px</span>\n}\n<span class=hljs-selector-tag>div</span>{\n    <span class=hljs-attribute>width</span>:<span class=hljs-number>100rem</span>;\n}\n</code></pre></li></ul><ul><li><p><strong>rem 自适应js备份</strong></p><pre><code class=lang-js><span class=hljs-comment>// 自适应</span>\n<span class=hljs-keyword>let</span> w = <span class=hljs-built_in>window</span>.innerWidth\n<span class=hljs-keyword>if</span> (w &lt; <span class=hljs-number>360</span>) {\n    <span class=hljs-comment>// browserWidth * p = fontSize</span>\n    <span class=hljs-comment>// 即：</span>\n    <span class=hljs-comment>// p = fontSize / browserWidth</span>\n    <span class=hljs-built_in>document</span>.documentElement.style.fontSize = w * <span class=hljs-number>0.28</span> + <span class=hljs-string>'px'</span>\n}\n</code></pre></li></ul><h3 data-index=10>px 转 rem (编辑器替换)</h3><p>使用正则替换</p><pre><code class=lang-js><span class=hljs-comment>// 匹配</span>\n(\\d+)px\n\n(\\d{<span class=hljs-number>0</span>,<span class=hljs-number>1</span>}\\.{<span class=hljs-number>0</span>,<span class=hljs-number>1</span>}\\d+)px   <span class=hljs-comment>// 支持小数点</span>\n\n<span class=hljs-comment>// 替换</span>\n($<span class=hljs-number>1</span>/<span class=hljs-number>100</span> + rem)\n</code></pre><p>还原border</p><pre><code class=lang-js><span class=hljs-comment>// 匹配</span>\n\\((\\d+)/.+\\) solid\n\n<span class=hljs-comment>// 替换</span>\n$<span class=hljs-number>1</span>px solid\n</code></pre><h1 data-index=11>html</h1><h2 data-index=12>移动端web缩放控制</h2><h3 data-index=13>简单介绍</h3><p>完整</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>name</span>=<span class=hljs-string>\"viewport\"</span> <span class=hljs-attr>content</span>=<span class=hljs-string>\"height=device-height,width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no\"</span> /&gt;</span>\n</code></pre><p>常用</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>content</span>=<span class=hljs-string>\"width=device-width,initial-scale=1,user-scalable=no\"</span> <span class=hljs-attr>name</span>=<span class=hljs-string>\"viewport\"</span>/&gt;</span>\n</code></pre><p><strong>width,height</strong> 指定视区的逻辑宽度和高度。假如大于浏览器显示区的逻辑高宽，内容将放大指定倍数来显示。小于情况将等于浏览器显示区逻辑高宽。 值可以是具体的像素值； 也可以是一些特殊字指令符，比如device-width、device-heigh，如果不给，默认值就是这两个</p><p>经测试width、height可以不指定。将等于浏览器显示区的逻辑高宽</p><h3 data-index=14>ios9以下系统同时展示两个webview有bug，高宽超出</h3><p>当页面中同时放两个webview时，指定<code>width=device-width</code>，将大于webview的逻辑宽度，像是设备的逻辑宽度来算。<br><strong>解决：</strong> 去掉width，或者指定为0即可，即如下所示</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>content</span>=<span class=hljs-string>\"initial-scale=1,user-scalable=no\"</span> <span class=hljs-attr>name</span>=<span class=hljs-string>\"viewport\"</span>/&gt;</span>\n或者\n<span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>content</span>=<span class=hljs-string>\"width=0,initial-scale=1,user-scalable=no\"</span> <span class=hljs-attr>name</span>=<span class=hljs-string>\"viewport\"</span>/&gt;</span>\n</code></pre><p>20170720更新：<br>不到万不得已，不去掉width，也不指定为0，否则ios10会出现 ios click 300ms延迟。 其他低版本未测，没有手机。。</p><h1 data-index=15>Linux</h1><h2 data-index=16>软件工具</h2><h3 data-index=17><a href=https://github.com/Unitech/pm2>pm2</a> 多进程运行</h3><pre><code class=lang-shell>pm2 start http-server -- <span class=hljs-regexp>/usr/</span>website\n</code></pre><h1 data-index=18>postcss</h1><h2 data-index=19>@import 导入控制 - <code>postcss-smart-import</code> 插件</h2><p>webpack 中有部分说明 &gt; <a href=\"\">css模块导入依赖控制（webpack 中使用postcss 导入依赖问题）</a></p><h2 data-index=20>去掉斜杠注释，插件形式调用</h2><p><a href=https://github.com/moczolaszlo/postcss-inline-comment>https://github.com/moczolaszlo/postcss-inline-comment</a></p><pre><code class=lang-js><span class=hljs-built_in>module</span>.exports = {\n    <span class=hljs-attr>plugins</span>: [\n\n        <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-inline-comment'</span>),\n\n        <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-smart-import'</span>),\n        <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-calc'</span>),\n        <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-apply'</span>),\n        <span class=hljs-built_in>require</span>(<span class=hljs-string>'autoprefixer'</span>)({\n        <span class=hljs-attr>remove</span>: <span class=hljs-literal>false</span>\n        }),\n        <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-custom-properties'</span>),\n        <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-nested'</span>),\n        <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-css-variables'</span>),\n    ]\n}\n</code></pre><h2 data-index=21>转换斜杠注释</h2><p><a href=https://github.com/moczolaszlo/postcss-inline-comment>https://github.com/moczolaszlo/postcss-inline-comment</a></p><p>webpack postcss-loader 使用</p><pre><code class=lang-js><span class=hljs-keyword>let</span> parser = <span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-comment'</span>)\n<span class=hljs-built_in>module</span>.exports = {\n    <span class=hljs-attr>module</span>: {\n        <span class=hljs-comment>// 加载器配置</span>\n        rules: [\n            {\n                <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.(css|pcss)$/</span>,\n                <span class=hljs-attr>use</span>: ExtractTextPlugin.extract({\n                    <span class=hljs-attr>fallback</span>: <span class=hljs-string>'style-loader'</span>,\n                    <span class=hljs-attr>use</span>: [{\n                        <span class=hljs-attr>loader</span>: <span class=hljs-string>'css-loader'</span>, <span class=hljs-attr>options</span>: {\n                            <span class=hljs-attr>importLoaders</span>: <span class=hljs-number>1</span>,\n                            <span class=hljs-attr>sourceMap</span>: <span class=hljs-literal>true</span>\n                        }\n                    }, {\n                        <span class=hljs-attr>loader</span>: <span class=hljs-string>'postcss-loader'</span>,\n                        <span class=hljs-attr>options</span>: {\n                            <span class=hljs-attr>sourceMap</span>: <span class=hljs-string>'inline'</span>,\n                            parser\n                        }\n                    }]\n                }),\n            }\n        ]\n    }\n}\n</code></pre><h1 data-index=22>sass</h1><h2 data-index=23>跳出嵌套选择器</h2><pre><code class=lang-scss>.test{\n    @at-root{\n        body{\n           background-color: #f8f8f8;\n       }\n    }    \n}\n\n// 编译后\nbody{\n   background-color: #f8f8f8;\n}\n</code></pre><h1 data-index=24>svg</h1><h2 data-index=25>path画弧</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths>MDN写的挺好，图文并茂</a></p><h3 data-index=26>几个问题，快速了解</h3><h4 data-index=27>起点是指的圆的起点？还是画弧的起点？</h4><p>是画弧的起点</p><h4 data-index=28>起点是指令M的起点？还是指令A有起点?</h4><p>起点通过M指令指指定，指令A只能指定终点</p><h3 data-index=29>指令A</h3><p>可以这样理解，起点，终点的连线将指定半径的圆切成两半，取需要的那一半的弧线。<br>这里的<strong>起点通过M指令指定</strong>，否则默认0，即左上角</p><ul><li><p>半径： 有两个参数，分别是x轴半径和y轴半径</p></li><li><p>旋转角度 ： 以角度为单位，非弧度。 并非整个弧的旋转，起点终点不动，决定最终弧线大小方向。正圆情况此参数看不出来效果 整个弧的旋转使用rotate属性</p></li><li><p>角度大小 ： 0，小角度弧；1，大角度弧 理解，即起点，终点的连线将圆切成两半，小的那半就是小角度弧了</p></li><li><p>弧线方向 ：<br>0，起点到终点；1，终点到起点<br>都是逆时针（什么是逆时针，即往左旋转）</p><p>也可以看成都是起点到终点<br>0，逆时针，1，顺时针</p></li><li><p>终点xy：</p></li></ul><h3 data-index=30>例子</h3><p>例子使用了2个指令，M指令，A指令</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>path</span> <span class=hljs-attr>fill</span>=<span class=hljs-string>\"none\"</span> \n<span class=hljs-attr>stroke</span>=<span class=hljs-string>\"#fc4\"</span> <span class=hljs-attr>stroke-linecap</span>=<span class=hljs-string>\"round\"</span> <span class=hljs-attr>stroke-width</span>=<span class=hljs-string>\"4\"</span> \n<span class=hljs-attr>d</span>=<span class=hljs-string>\"M30 6 A 24 24, 0, 1, 1, 6.364 34.167\"</span> \n<span class=hljs-attr>transform</span>=<span class=hljs-string>\"rotate(225, 30 30)\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>path</span>&gt;</span>\n</code></pre><h1 data-index=31>vue</h1><h2 data-index=32>css scoped 后代选择器注意</h2><p>scoped 不会影响到子组件。<br>所以，如果子组件css写在父组件css中，父组件使用scoped，css就会无效</p><p>这种转换结果看上去总觉得不够好</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>style</span> <span class=hljs-attr>scoped</span>&gt;</span><span class=css>\n<span class=hljs-selector-class>.example</span> <span class=hljs-selector-tag>span</span>{\n  <span class=hljs-attribute>color</span>: red;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"example\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>span</span>&gt;</span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n</code></pre><p>转换结果：</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>style</span>&gt;</span><span class=css>\n<span class=hljs-selector-class>.example</span> <span class=hljs-selector-tag>span</span><span class=hljs-selector-attr>[data-v-f3f3eg9]</span> {\n  <span class=hljs-attribute>color</span>: red;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>data-v-4c878eb4</span>=<span class=hljs-string>\"\"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"example\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>span</span> <span class=hljs-attr>data-v-4c878eb4</span>=<span class=hljs-string>\"\"</span>&gt;</span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n</code></pre>","menu":"<div class=\"menu-item\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">cmd</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">打开浏览器 并指定网址</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item\"><div class=\"item\" data-index=\"2\"><i class=\"\"></i><span class=\"txt\">css</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">后代选择写法原则</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"\"></i><span class=\"txt\">文本</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">不换行</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">裁剪</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"\"></i><span class=\"txt\">比例单位</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"hidden\"></i><span class=\"txt\">em</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">rem</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">px 转 rem (编辑器替换)</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item\"><div class=\"item\" data-index=\"11\"><i class=\"\"></i><span class=\"txt\">html</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"\"></i><span class=\"txt\">移动端web缩放控制</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"hidden\"></i><span class=\"txt\">简单介绍</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">ios9以下系统同时展示两个webview有bug，高宽超出</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item\"><div class=\"item\" data-index=\"15\"><i class=\"\"></i><span class=\"txt\">Linux</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"\"></i><span class=\"txt\">软件工具</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\"><a href=\"https://github.com/Unitech/pm2\">pm2</a> 多进程运行</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item\"><div class=\"item\" data-index=\"18\"><i class=\"\"></i><span class=\"txt\">postcss</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"19\"><i class=\"hidden\"></i><span class=\"txt\">@import 导入控制 - <code>postcss-smart-import</code> 插件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"20\"><i class=\"hidden\"></i><span class=\"txt\">去掉斜杠注释，插件形式调用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"21\"><i class=\"hidden\"></i><span class=\"txt\">转换斜杠注释</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item\"><div class=\"item\" data-index=\"22\"><i class=\"\"></i><span class=\"txt\">sass</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"23\"><i class=\"hidden\"></i><span class=\"txt\">跳出嵌套选择器</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item\"><div class=\"item\" data-index=\"24\"><i class=\"\"></i><span class=\"txt\">svg</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"25\"><i class=\"\"></i><span class=\"txt\">path画弧</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"26\"><i class=\"\"></i><span class=\"txt\">几个问题，快速了解</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"27\"><i class=\"hidden\"></i><span class=\"txt\">起点是指的圆的起点？还是画弧的起点？</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"28\"><i class=\"hidden\"></i><span class=\"txt\">起点是指令M的起点？还是指令A有起点?</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"29\"><i class=\"hidden\"></i><span class=\"txt\">指令A</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"30\"><i class=\"hidden\"></i><span class=\"txt\">例子</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item\"><div class=\"item\" data-index=\"31\"><i class=\"\"></i><span class=\"txt\">vue</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"32\"><i class=\"hidden\"></i><span class=\"txt\">css scoped 后代选择器注意</span></div><div class=\"list\"></div></div></div></div>"}
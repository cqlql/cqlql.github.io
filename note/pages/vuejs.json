{"article":"<section><h1 id=\"实例中 Vue 构造器获取\" data-index=0>实例中 Vue 构造器获取</h1><p><code>this.$root.constructor</code></p><p>单文件组件有时可能需要使用 Vue 构造器对象，来使用部分全局 API。</p><pre><code class=lang-js><span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  mounted () {\n    <span class=hljs-comment>// 正确方式</span>\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-keyword>this</span>.$root.constructor)\n    <span class=hljs-comment>// 错误方式，获取的是 VueComponent 组件构造器</span>\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-keyword>this</span>.constructor)\n\n  }\n}\n</code></pre></section><section><h1 id=\"* 快速使用\" data-index=1>* 快速使用</h1><pre><code class=lang-js><span class=hljs-keyword>new</span> Vue({\n    <span class=hljs-attr>el</span>:<span class=hljs-string>'#app'</span>,\n\n    <span class=hljs-comment>// 根实例用可实现替换绑定的元素</span>\n    template:<span class=hljs-string>'&lt;app/&gt;'</span>,\n\n    <span class=hljs-comment>// 生命周期</span>\n    created(){},\n    mounted(){},\n\n    <span class=hljs-attr>components</span>:{}, <span class=hljs-comment>// 组件</span>\n    computed:{},<span class=hljs-comment>// 计算属性</span>\n    methods:{},<span class=hljs-comment>//方法</span>\n    watch:{},<span class=hljs-comment>// 监听</span>\n});\n</code></pre><p>template</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>button</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"button\"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>\"\"</span>&gt;</span>登录<span class=hljs-tag>&lt;/<span class=hljs-name>button</span>&gt;</span>\n</code></pre></section><section><h1 id=\"css scoped 后代选择器注意\" data-index=2>css scoped 后代选择器注意</h1><p>scoped 不会影响到子组件。<br>所以，如果子组件css写在父组件css中，父组件使用scoped，css就会无效</p><p>这种转换结果看上去总觉得不够好</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>style</span> <span class=hljs-attr>scoped</span>&gt;</span><span class=css>\n<span class=hljs-selector-class>.example</span> <span class=hljs-selector-tag>span</span>{\n  <span class=hljs-attribute>color</span>: red;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"example\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>span</span>&gt;</span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n</code></pre><p>转换结果：</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>style</span>&gt;</span><span class=css>\n<span class=hljs-selector-class>.example</span> <span class=hljs-selector-tag>span</span><span class=hljs-selector-attr>[data-v-f3f3eg9]</span> {\n  <span class=hljs-attribute>color</span>: red;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>data-v-4c878eb4</span>=<span class=hljs-string>\"\"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"example\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>span</span> <span class=hljs-attr>data-v-4c878eb4</span>=<span class=hljs-string>\"\"</span>&gt;</span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n</code></pre></section><section><h1 id=vuex data-index=3>vuex</h1><p>其实就是组件之间的通讯管理？</p></section><section><h1 id=\"vue 单文件 + webpack\" data-index=4>vue 单文件 + webpack</h1><p>[toc]</p><section><h2 id=\"css 导入先后：js 与 style 方式\" data-index=5>css 导入先后：js 与 style 方式</h2><p>js：import 方式</p><p>style：style 嵌入方式</p><p>单文件中同时使用这两种方式，无论style 位置，<strong>js 将先导入，然后才是 style</strong>，符合预想</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"hello\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>h1</span>&gt;</span>{{ msg }}<span class=hljs-tag>&lt;/<span class=hljs-name>h1</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>h2</span>&gt;</span>Essential Links<span class=hljs-tag>&lt;/<span class=hljs-name>h2</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-keyword>import</span> <span class=hljs-string>'../assets/comm.css'</span>\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  <span class=hljs-attr>name</span>: <span class=hljs-string>'hello'</span>,\n  data () {\n    <span class=hljs-keyword>return</span> {\n      <span class=hljs-attr>msg</span>: <span class=hljs-string>'Welcome to Your Vue.js App'</span>\n    }\n  }\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>style</span> <span class=hljs-attr>scoped</span>&gt;</span><span class=css>\n<span class=hljs-selector-tag>h1</span>, <span class=hljs-selector-tag>h2</span> {\n  <span class=hljs-attribute>font-weight</span>: normal;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n</code></pre></section><section><h2 id=\"js(import) css 是否归 vue-loader 管 / 异步单文件 js(import) css提取\" data-index=6>js(import) css 是否归 vue-loader 管 / 异步单文件 js(import) css提取</h2><p>js(import) 方式不归 vue-loader 管。vue-loader 只管 style。</p><p>而且，<strong>外界的css提取依然可以影响</strong></p><p>但，<strong>异步</strong>情况特殊，外css提取，vue-loadert提取都无法生效。</p><p>也就是说，异步包无法提取css？？不，可以提取，但只能提取 js(import) 方式，通过 <code>CommonsChunkPlugin</code> 开启 <code>children:true</code>。<br>将多处异步包中调用模块提取到父 chunk 中，然后css提取便生效</p><p>也就是说，异步包的 style 方式固定无法提取</p></section><section><h2 id=\"js(import)导入 css，实现不重复\" data-index=7>js(import)导入 css，实现不重复</h2><p><strong>懒加载单文件模块，单文件中 js 方式导入 css，多处导入实现不重复方式：</strong></p><ul><li>入口js 文件导入一次后，多处<strong>异步</strong>单文件中的相同导入不会重复生成</li><li>通过 <code>CommonsChunkPlugin</code>，开启 <code>children:true</code></li></ul></section><section><h2 id=\"某种情况下说，vue-loader 的提取没有意义\" data-index=8>某种情况下说，vue-loader 的提取没有意义</h2></section><section><h2 id=vue-loader data-index=9>vue-loader</h2><pre><code class=lang-js>{\n    <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.vue$/</span>,\n    <span class=hljs-attr>loader</span>: <span class=hljs-string>'vue-loader'</span>,\n    <span class=hljs-attr>options</span>: {\n        <span class=hljs-attr>loaders</span>: {\n            <span class=hljs-attr>js</span>: {\n                <span class=hljs-attr>loader</span>: <span class=hljs-string>'babel-loader'</span>,\n                <span class=hljs-attr>include</span>: [\n                    path.resolve(__dirname, <span class=hljs-string>\"src\"</span>)\n                ],\n            },\n            <span class=hljs-comment>// 带提取</span>\n            css: ExtractTextPlugin.extract({\n                <span class=hljs-attr>fallback</span>: <span class=hljs-string>'style-loader'</span>,\n                <span class=hljs-attr>use</span>: [{\n                    <span class=hljs-attr>loader</span>: <span class=hljs-string>'css-loader'</span>,\n                    <span class=hljs-attr>options</span>: {\n                        <span class=hljs-attr>importLoaders</span>: <span class=hljs-number>1</span>,\n                        <span class=hljs-attr>sourceMap</span>: <span class=hljs-literal>true</span>,\n\n                    }\n                }, {\n                    <span class=hljs-attr>loader</span>: <span class=hljs-string>'postcss-loader'</span>,\n                    <span class=hljs-attr>options</span>: {\n                        <span class=hljs-attr>sourceMap</span>: <span class=hljs-string>'inline'</span>\n                    }\n                }]\n            }),\n            <span class=hljs-comment>// 不提取</span>\n            <span class=hljs-comment>// css: {</span>\n            <span class=hljs-comment>//     use: [{</span>\n            <span class=hljs-comment>//         loader: 'style-loader'</span>\n            <span class=hljs-comment>//     }, {</span>\n            <span class=hljs-comment>//         loader: 'css-loader', options: {</span>\n            <span class=hljs-comment>//             importLoaders: 1,</span>\n            <span class=hljs-comment>//             sourceMap: true</span>\n            <span class=hljs-comment>//         }</span>\n            <span class=hljs-comment>//     }, {</span>\n            <span class=hljs-comment>//         loader: 'postcss-loader',</span>\n            <span class=hljs-comment>//         options: {</span>\n            <span class=hljs-comment>//             sourceMap: 'inline',</span>\n            <span class=hljs-comment>//             // parser</span>\n            <span class=hljs-comment>//         }</span>\n            <span class=hljs-comment>//     }]</span>\n            <span class=hljs-comment>// }</span>\n\n            scss: ExtractTextPlugin.extract({\n                <span class=hljs-attr>fallback</span>: <span class=hljs-string>'style-loader'</span>,\n                <span class=hljs-attr>use</span>: [{\n                    <span class=hljs-attr>loader</span>: <span class=hljs-string>'css-loader'</span>,\n                    <span class=hljs-attr>options</span>: {\n                        <span class=hljs-attr>importLoaders</span>: <span class=hljs-number>1</span>,\n                        <span class=hljs-attr>sourceMap</span>: <span class=hljs-literal>true</span>,\n\n                    }\n                }, {\n                    <span class=hljs-attr>loader</span>: <span class=hljs-string>'sass-loader'</span>,\n                    <span class=hljs-attr>options</span>: {\n                        <span class=hljs-attr>sourceMap</span>: <span class=hljs-literal>true</span>,\n                        <span class=hljs-attr>includePaths</span>: [<span class=hljs-string>'E:/_work/mobile_webview/smallpitch.webview/src/modules/base-libs/css'</span>]\n                    }\n                }]\n            }),\n\n        }\n    }\n}\n</code></pre></section></section><section><h1 id=各种问题 data-index=10>各种问题</h1><section><h2 id=\"vue-loader 问题\" data-index=11>vue-loader 问题</h2><section><h3 id=\"使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件\" data-index=12>使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件</h3></section></section><section><h2 id=\"vue 单文件问题\" data-index=13>vue 单文件问题</h2><section><h3 id=\"style 部分无法热更新\" data-index=14>style 部分无法热更新</h3><p>使用 vue.esm.js 即可</p></section><section><h3 id=\"js import 方式导入的 css 无效。异步单文件情况\" data-index=15>js import 方式导入的 css 无效。异步单文件情况</h3><p>强调，跟提取无关，包括外提取、vue-loader 提取，跟异步有关。<br>首先异步包 css 无法被提取。不管是 vue-loader 还是外 css loader 提取，提取都无效。<br>而且单文件 js(import) 归外 css loader 管，如果没有设置 style-loader，将不会被增加。</p><p>注：style 方式正常</p><p>解决，增加<code>fallback: &#39;style-loader&#39;</code>。</p><p>总之，<code>fallback: &#39;style-loader&#39;</code>可用来处理异步包中的 js(import) 导入的css</p><pre><code class=lang-js>rules: [{\n  <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.css$/</span>,\n  <span class=hljs-attr>use</span>: ExtractTextPlugin.extract({\n    <span class=hljs-attr>fallback</span>: <span class=hljs-string>'style-loader'</span>,\n    <span class=hljs-attr>use</span>: [<span class=hljs-string>'css-loader'</span>,<span class=hljs-string>'postcss-loader'</span>]\n  }),\n}]\n</code></pre></section></section></section><section><h1 id=插件编写 data-index=16>插件编写</h1><p>简单3步。详情看<a href=https://cn.vuejs.org/v2/guide/plugins.html>官方文档</a>。下例为添加内部的实例方法</p><p>1 编写</p><pre><code class=lang-js><span class=hljs-comment>// ./modules/msg-mobile/simple-msg-vue.js</span>\n\n<span class=hljs-keyword>import</span> simpleMsg <span class=hljs-keyword>from</span> <span class=hljs-string>'./simple-msg'</span>\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  install (Vue) {\n    Vue.prototype.$simpleMsg = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>msg</span>) </span>{\n      simpleMsg(msg)\n    }\n  }\n}\n</code></pre><p>2 注册</p><pre><code class=lang-js><span class=hljs-comment>// main.js</span>\n<span class=hljs-keyword>import</span> simpleMsg <span class=hljs-keyword>from</span> <span class=hljs-string>'./modules/msg-mobile/simple-msg-vue'</span>\nVue.use(simpleMsg)\n</code></pre><p>3 插件使用</p><pre><code class=lang-js><span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  mounted () {\n    <span class=hljs-keyword>this</span>.$simpleMsg(<span class=hljs-string>'mounted 执行'</span>)\n  }\n}\n</code></pre></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"hidden\"></i><span class=\"txt\">实例中 Vue 构造器获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">* 快速使用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">css scoped 后代选择器注意</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">vuex</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"\"></i><span class=\"txt\">vue 单文件 + webpack</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">css 导入先后：js 与 style 方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">js(import) css 是否归 vue-loader 管 / 异步单文件 js(import) css提取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"hidden\"></i><span class=\"txt\">js(import)导入 css，实现不重复</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"hidden\"></i><span class=\"txt\">某种情况下说，vue-loader 的提取没有意义</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">vue-loader</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"\"></i><span class=\"txt\">各种问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"\"></i><span class=\"txt\">vue-loader 问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"hidden\"></i><span class=\"txt\">使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"\"></i><span class=\"txt\">vue 单文件问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">style 部分无法热更新</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"hidden\"></i><span class=\"txt\">js import 方式导入的 css 无效。异步单文件情况</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"hidden\"></i><span class=\"txt\">插件编写</span></div><div class=\"list\"></div></div>"}
{"article":"<section><h1 id=\"* 快速使用\" data-index=0>* 快速使用</h1><pre><code class=lang-js><span class=hljs-keyword>new</span> Vue({\n    <span class=hljs-attr>el</span>:<span class=hljs-string>'#app'</span>,\n\n    <span class=hljs-comment>// 根实例用可实现替换绑定的元素</span>\n    template:<span class=hljs-string>'&lt;app/&gt;'</span>,\n\n    <span class=hljs-comment>// 生命周期</span>\n    created(){},\n    mounted(){},\n\n    <span class=hljs-attr>components</span>:{}, <span class=hljs-comment>// 组件</span>\n    computed:{},<span class=hljs-comment>// 计算属性</span>\n    methods:{},<span class=hljs-comment>//方法</span>\n    watch:{},<span class=hljs-comment>// 监听</span>\n});\n</code></pre></section><section><h1 id=\"css scoped 后代选择器注意\" data-index=1>css scoped 后代选择器注意</h1><p>scoped 不会影响到子组件。<br>所以，如果子组件css写在父组件css中，父组件使用scoped，css就会无效</p><p>这种转换结果看上去总觉得不够好</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>style</span> <span class=hljs-attr>scoped</span>&gt;</span><span class=css>\n<span class=hljs-selector-class>.example</span> <span class=hljs-selector-tag>span</span>{\n  <span class=hljs-attribute>color</span>: red;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"example\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>span</span>&gt;</span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n</code></pre><p>转换结果：</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>style</span>&gt;</span><span class=css>\n<span class=hljs-selector-class>.example</span> <span class=hljs-selector-tag>span</span><span class=hljs-selector-attr>[data-v-f3f3eg9]</span> {\n  <span class=hljs-attribute>color</span>: red;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>data-v-4c878eb4</span>=<span class=hljs-string>\"\"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"example\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>span</span> <span class=hljs-attr>data-v-4c878eb4</span>=<span class=hljs-string>\"\"</span>&gt;</span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n</code></pre></section><section><h1 id=vuex data-index=2>vuex</h1><p>其实就是组件之间的通讯管理？</p></section><section><h1 id=vue-router data-index=3>vue-router</h1><p><a href=https://router.vuejs.org/zh-cn/ >官方文档</a></p><section><h2 id=简单示例 data-index=4>简单示例</h2><pre><code class=lang-js>import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\n// 很久没用 router 写代码是，总是忘记这一步。。。\nVue.use(VueRouter)\n\nconst Foo = { template: '<span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>foo<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>' }\nconst Bar = { template: '<span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>bar<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>' }\n\nconst routes = [\n  { path: '/foo', component: Foo },\n  { path: '/bar', component: Bar }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  // 根实例用可实现替换绑定的元素\n  template: `<span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>h1</span>&gt;</span>Hello App!<span class=hljs-tag>&lt;/<span class=hljs-name>h1</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>\n      <span class=hljs-comment>&lt;!-- 使用 router-link 组件来导航. --&gt;</span>\n      <span class=hljs-comment>&lt;!-- 通过传入 \\`to\\` 属性指定链接. --&gt;</span>\n      <span class=hljs-comment>&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 \\`&lt;a&gt;\\` 标签 --&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>router-link</span> <span class=hljs-attr>to</span>=<span class=hljs-string>\"/foo\"</span>&gt;</span>Go to Foo<span class=hljs-tag>&lt;/<span class=hljs-name>router-link</span>&gt;</span>\n      <span class=hljs-tag>&lt;<span class=hljs-name>router-link</span> <span class=hljs-attr>to</span>=<span class=hljs-string>\"/bar\"</span>&gt;</span>Go to Bar<span class=hljs-tag>&lt;/<span class=hljs-name>router-link</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n    <span class=hljs-comment>&lt;!-- 路由出口 --&gt;</span>\n    <span class=hljs-comment>&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>router-view</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>router-view</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n`\n})\n</code></pre></section><section><h2 id=微信浏览器浏览历史支持带井号链接 data-index=5>微信浏览器浏览历史支持带井号链接</h2><p>左上角的返回箭头也支持浏览井号历史</p><p>所以能很好支持 vue-router</p></section></section><section><h1 id=各种问题 data-index=6>各种问题</h1><section><h2 id=\"vue-loader 问题\" data-index=7>vue-loader 问题</h2><section><h3 id=\"使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件\" data-index=8>使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件</h3></section></section><section><h2 id=\"vue 单文件 style 部分无法热更新\" data-index=9>vue 单文件 style 部分无法热更新</h2><p>使用 vue.esm.js 即可</p></section></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"hidden\"></i><span class=\"txt\">* 快速使用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">css scoped 后代选择器注意</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">vuex</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"\"></i><span class=\"txt\">vue-router</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"hidden\"></i><span class=\"txt\">简单示例</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">微信浏览器浏览历史支持带井号链接</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"\"></i><span class=\"txt\">各种问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"\"></i><span class=\"txt\">vue-loader 问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"hidden\"></i><span class=\"txt\">使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">vue 单文件 style 部分无法热更新</span></div><div class=\"list\"></div></div></div></div>"}
{"article":"<section><h1 id=\"* 快速使用\" data-index=0>* 快速使用</h1><pre><code class=lang-js><span class=hljs-keyword>new</span> Vue({\n    <span class=hljs-attr>el</span>:<span class=hljs-string>'#app'</span>,\n\n    <span class=hljs-comment>// 根实例用可实现替换绑定的元素</span>\n    template:<span class=hljs-string>'&lt;app/&gt;'</span>,\n\n    <span class=hljs-comment>// 生命周期</span>\n    created(){},\n    mounted(){},\n\n    <span class=hljs-attr>components</span>:{}, <span class=hljs-comment>// 组件</span>\n    computed:{},<span class=hljs-comment>// 计算属性</span>\n    methods:{},<span class=hljs-comment>//方法</span>\n    watch:{},<span class=hljs-comment>// 监听</span>\n});\n</code></pre><p>template</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>button</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"button\"</span> @<span class=hljs-attr>click</span>=<span class=hljs-string>\"\"</span>&gt;</span>登录<span class=hljs-tag>&lt;/<span class=hljs-name>button</span>&gt;</span>\n</code></pre></section><section><h1 id=\"css scoped 后代选择器注意\" data-index=1>css scoped 后代选择器注意</h1><p>scoped 不会影响到子组件。<br>所以，如果子组件css写在父组件css中，父组件使用scoped，css就会无效</p><p>这种转换结果看上去总觉得不够好</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>style</span> <span class=hljs-attr>scoped</span>&gt;</span><span class=css>\n<span class=hljs-selector-class>.example</span> <span class=hljs-selector-tag>span</span>{\n  <span class=hljs-attribute>color</span>: red;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"example\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>span</span>&gt;</span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n</code></pre><p>转换结果：</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>style</span>&gt;</span><span class=css>\n<span class=hljs-selector-class>.example</span> <span class=hljs-selector-tag>span</span><span class=hljs-selector-attr>[data-v-f3f3eg9]</span> {\n  <span class=hljs-attribute>color</span>: red;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>data-v-4c878eb4</span>=<span class=hljs-string>\"\"</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"example\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>span</span> <span class=hljs-attr>data-v-4c878eb4</span>=<span class=hljs-string>\"\"</span>&gt;</span>hi<span class=hljs-tag>&lt;/<span class=hljs-name>span</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n</code></pre></section><section><h1 id=vuex data-index=2>vuex</h1><p>其实就是组件之间的通讯管理？</p></section><section><h1 id=\"vue 单文件\" data-index=3>vue 单文件</h1><section><h2 id=\"css 导入先后：js 与 style 方式\" data-index=4>css 导入先后：js 与 style 方式</h2><p>js：import 方式</p><p>style：style 嵌入方式</p><p>单文件中同时使用这两种方式，无论style 位置，<strong>js 将先导入，然后才是 style</strong>，符合预想</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"hello\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>h1</span>&gt;</span>{{ msg }}<span class=hljs-tag>&lt;/<span class=hljs-name>h1</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>h2</span>&gt;</span>Essential Links<span class=hljs-tag>&lt;/<span class=hljs-name>h2</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-keyword>import</span> <span class=hljs-string>'../assets/comm.css'</span>\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  <span class=hljs-attr>name</span>: <span class=hljs-string>'hello'</span>,\n  data () {\n    <span class=hljs-keyword>return</span> {\n      <span class=hljs-attr>msg</span>: <span class=hljs-string>'Welcome to Your Vue.js App'</span>\n    }\n  }\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>style</span> <span class=hljs-attr>scoped</span>&gt;</span><span class=css>\n<span class=hljs-selector-tag>h1</span>, <span class=hljs-selector-tag>h2</span> {\n  <span class=hljs-attribute>font-weight</span>: normal;\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>style</span>&gt;</span>\n</code></pre></section><section><h2 id=\"引入 css 的两种方式是否归属 vue-loader 管理：js 与 style 方式\" data-index=5>引入 css 的两种方式是否归属 vue-loader 管理：js 与 style 方式</h2><p>js(import) 方式不归 vue-loader 管。vue-loader 只管 style</p><p><strong>懒加载单文件模块，单文件中 js 方式导入 css，多处导入实现不重复方式：</strong></p><ul><li>入口js 文件导入一次后，多处<strong>异步</strong>单文件中的相同导入不会重复生成</li><li>通过 <code>CommonsChunkPlugin</code>，这种方式目前比较麻烦，需要进行单独公共配置。但是否可写个定制函数（minChunks？未测）</li></ul></section><section><h2 id=问题 data-index=6>问题</h2><section><h3 id=\"一般css使用提取插件，但 vue-loader 不使用。单文件中 css 通过 js 方式导入，无法被提取，也无法正常被增加进页面\" data-index=7>一般css使用提取插件，但 vue-loader 不使用。单文件中 css 通过 js 方式导入，无法被提取，也无法正常被增加进页面</h3><p>注：style 方式正常</p><p>解决，增加<code>fallback: &#39;style-loader&#39;</code>：</p><pre><code class=lang-js>rules: [{\n  <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.css$/</span>,\n  <span class=hljs-attr>use</span>: ExtractTextPlugin.extract({\n    <span class=hljs-attr>fallback</span>: <span class=hljs-string>'style-loader'</span>,\n    <span class=hljs-attr>use</span>: [<span class=hljs-string>'css-loader'</span>,<span class=hljs-string>'postcss-loader'</span>]\n  }),\n}]\n</code></pre></section></section></section><section><h1 id=各种问题 data-index=8>各种问题</h1><section><h2 id=\"vue-loader 问题\" data-index=9>vue-loader 问题</h2><section><h3 id=\"使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件\" data-index=10>使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件</h3></section></section><section><h2 id=\"vue 单文件 style 部分无法热更新\" data-index=11>vue 单文件 style 部分无法热更新</h2><p>使用 vue.esm.js 即可</p></section></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"hidden\"></i><span class=\"txt\">* 快速使用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">css scoped 后代选择器注意</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">vuex</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"\"></i><span class=\"txt\">vue 单文件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"hidden\"></i><span class=\"txt\">css 导入先后：js 与 style 方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">引入 css 的两种方式是否归属 vue-loader 管理：js 与 style 方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"\"></i><span class=\"txt\">问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"hidden\"></i><span class=\"txt\">一般css使用提取插件，但 vue-loader 不使用。单文件中 css 通过 js 方式导入，无法被提取，也无法正常被增加进页面</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"\"></i><span class=\"txt\">各种问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"\"></i><span class=\"txt\">vue-loader 问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">使用 postcss 时，不能直接使用 plugins 选项，需使用 postcss.config.js 文件</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">vue 单文件 style 部分无法热更新</span></div><div class=\"list\"></div></div></div></div>"}
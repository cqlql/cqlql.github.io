{"article":"<section><h1 id=ajax data-index=0>ajax</h1><section><h2 id=问题 data-index=1>问题</h2><p>### xhr.responseType</p></section></section><section><h1 id=\"Date 时间日期\" data-index=2>Date 时间日期</h1><section><h2 id=取天总数 data-index=3>取天总数</h2><p>指定年月, 天的总数</p><pre><code class=lang-js><span class=hljs-comment>// month 从1 开始</span>\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getDayCount</span> (<span class=hljs-params>year, month</span>) </span>{\n  <span class=hljs-keyword>var</span> d = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>(year, month)\n  d.setDate(<span class=hljs-number>0</span>)\n  <span class=hljs-keyword>return</span> d.getDate()\n}\n</code></pre></section></section><section><h1 id=date data-index=4>date</h1><section><h2 id=兼容性 data-index=5>兼容性</h2><section><h3 id=\"ios 不支持减号连接\" data-index=6>ios 不支持减号连接</h3><p>支持：</p><pre><code class=lang-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>(<span class=hljs-string>'2017/08/23 15:55:06'</span>)\n</code></pre><p>不支持</p><pre><code class=lang-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>Date</span>(<span class=hljs-string>'2017-08-23 15:55:06'</span>)\n</code></pre><p>当前测试版本：navigator.userAgent 值</p><p>Mozilla/5.0 (iPhone; CPU iPhone OS 11_0_3 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A432 Safari/604.1</p></section></section></section><section><h1 id=\"DOM 操作\" data-index=7>DOM 操作</h1><section><h2 id=\"dataset 标签数据绑定\" data-index=8>dataset 标签数据绑定</h2><section><h3 id=\"js 设置\" data-index=9>js 设置</h3><p>js 设置操作将直接同步到标签上。可直接通过调试工具在标签上看到</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"item\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"1\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=\"undefined\">\n    item.dataset.index=2;\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h3 id=\"js 获取\" data-index=10>js 获取</h3><pre><code class=lang-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>item</span><span class=hljs-selector-class>.dataset</span><span class=hljs-selector-class>.index</span>)\n</code></pre></section><section><h3 id=关于大小写问题 data-index=11>关于大小写问题</h3><p>只能小写获取。也就是说，标签属性名尽量小写。</p><pre><code class=lang-js>document.body = `<span class=hljs-tag>&lt;<span class=hljs-name>a</span> <span class=hljs-attr>href</span>=<span class=hljs-string>\"javascript:;\"</span>  <span class=hljs-attr>data-qNo</span>=<span class=hljs-string>\"' + qNo + '\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"' + i + '\"</span>&gt;</span>' + qNo + '1<span class=hljs-tag>&lt;/<span class=hljs-name>a</span>&gt;</span>`\n\nconsole.log(btn.dataset.qno)\n</code></pre></section></section></section><section><h1 id=h5拖放 data-index=12>h5拖放</h1><p>此处为临时摘抄，未整理验证完善</p><p><a href=https://developer.mozilla.org/en-US/docs/Web/Events/drag>MDN文档参考</a></p><section><h2 id=元素可拖放设置 data-index=13>元素可拖放设置</h2><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>li</span> <span class=hljs-attr>draggable</span>=<span class=hljs-string>\"true\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>img</span> <span class=hljs-attr>src</span>=<span class=hljs-string>\"1.png\"</span> <span class=hljs-attr>alt</span>=<span class=hljs-string>\"\"</span> <span class=hljs-attr>draggable</span>=<span class=hljs-string>\"false\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>小5<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n</code></pre></section><section><h2 id=相关事件： data-index=14>相关事件：</h2><p>dragenter:拖进目标<br>dragleave:拖离目标<br>dragover:<br>目标上拖动<br>只要不离开目标都将反复触发，如果拖动，将触发更快<br>drop:目标上放下</p><p>dragstart：开始拖放 dragend：拖放结束</p><p><strong>event：</strong></p><pre><code class=lang-js><span class=hljs-comment>//设置当前拖放元素的数据参数</span>\ne.dataTransfer.setData(<span class=hljs-string>'text'</span>, <span class=hljs-keyword>this</span>.innerHTML);\n\n<span class=hljs-comment>//获取当前被拖放元素的存放数据参数</span>\n <span class=hljs-keyword>var</span> text = e.dataTransfer.getData(<span class=hljs-string>'text'</span>); \n<span class=hljs-comment>//设置鼠标样式</span>\n e.dataTransfer.dropEffect = <span class=hljs-string>'move'</span>;\n</code></pre></section></section><section><h1 id=string data-index=15>string</h1><section><h2 id=取索引 data-index=16>取索引</h2><p>indexOf 从前往后; lastIndexOf 从后往前</p><ul><li>什么时候匹配结束：匹配成功便结束，不再继续查找</li><li>没有匹配返回值：-1</li><li>参数多个字符情况: 返回开头字符索引</li></ul><pre><code><span class=hljs-keyword>var</span> str = <span class=hljs-string>\"helloword\"</span>;\n\n<span class=hljs-comment>//从前往后</span>\nstr.indexOf(<span class=hljs-string>'ow'</span>) <span class=hljs-comment>// 4</span>\n\n<span class=hljs-comment>//从后往前</span>\nsrt.lastIndexOf(<span class=hljs-string>'ow'</span>) <span class=hljs-comment>// 6</span>\n</code></pre></section></section><section><h1 id=\"WebSocket 或 SSE\" data-index=17>WebSocket 或 SSE</h1><p><a href=https://www.ibm.com/developerworks/cn/web/wa-http-server-push-with-websocket-sse/index.html>SSE 比较 WebSocket</a></p></section><section><h1 id=事件 data-index=18>事件</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/Events>事件类型一览表</a></p><section><h2 id=\"dispatchEvent 手动触发事件\" data-index=19>dispatchEvent 手动触发事件</h2><p>至今才知道。。。再一次证明，书看的少多可怕</p></section><section><h2 id=阻止默认动作 data-index=20>阻止默认动作</h2><pre><code class=lang-js><span class=hljs-keyword>if</span> (e.cancelable)e.preventDefault();<span class=hljs-comment>//cancelable、preventDefault结合使用</span>\n</code></pre></section><section><h2 id=事件类型 data-index=21>事件类型</h2><section><h3 id=移入事件 data-index=22>移入事件</h3><pre><code class=lang-js><span class=hljs-comment>//1、正常的 移入移出 事件：onmouseover移入、onmouseout移出】</span>\n<span class=hljs-comment>//兼容性：all浏览器</span>\n\n<span class=hljs-comment>/* ----------------------------------------------\n * 事件中特有属性——relatedTarget属性\n *\n *获取 触发事件 后 鼠标\n* 之前所处 元素对象——onmouseover移入事件\n *当前所处 元素对象——onmouseout移出事件\n *\n * event对象的属性，只对这两个事件有效：onmouseout移出事件、onmouseover移入事件  \n*\n * 兼容性： 所有ie中 只有ie9支持。非ie浏览器没问题\n */</span>\nalert(e.relatedTarget.className);\n\n<span class=hljs-comment>/***********************************************************/</span>\n<span class=hljs-comment>//2、特殊的 移入移出 事件</span>\n<span class=hljs-comment>//【onmouseenter移入、onmouseleave移出】 </span>\n<span class=hljs-comment>//事件 根元素 及其后代 看成一个整体 来触发此事件</span>\n<span class=hljs-comment>//兼容性：所有ie，Opera支持。fox、Chrome现在已经支持了</span>\n</code></pre></section><section><h3 id=键盘输入事件 data-index=23>键盘输入事件</h3><section><h4 id=\"keypress 字符键触发\" data-index=24>keypress 字符键触发</h4><ul><li>先触发后输入</li><li>可以阻止输入触发</li></ul><p>问题：</p><ul><li>删除键，这种能改变字符串的不触发</li><li>使用中文输入法输入时也不触发</li></ul><p>是否是先触发后输入？ 兼容性如何？</p><p>不建议当做input事件触发前的监听事件：</p></section><section><h4 id=\"input 有字符输入则触发\" data-index=25>input 有字符输入则触发</h4><p>实现输入字符 后触发 改变后触发，即输入发生后触发</p><p><strong>1.Firefox、Safari、Chrome</strong> 除了input、textarea，还适用于div文本框。所有符号键 （包括删除键）</p><p>div文本框 添加元素居然不触发，手动添加文本是否也不会触发呢</p><pre><code class=lang-js>Text1.oninput = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};\n</code></pre><p><strong>2.IE</strong> 只适用于固有的input、textarea 输入框</p><p>ie6 ie7 ie8 ie10 值变动就会触发</p><p>ie9字符键触发，删除键不会触发</p><pre><code class=lang-js>Text1.onpropertychange = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};\n</code></pre><p><strong>3.Opera</strong> 没有</p></section></section></section></section><section><h1 id=元素获取 data-index=26>元素获取</h1><p>紧邻元素获取</p><blockquote><p>相邻 紧邻 相邻元素 紧邻元素</p></blockquote><p>上一个</p><pre><code>elem.previousElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.previousSibling <span class=hljs-comment>// 节点 ie6+</span>\n</code></pre><p>下一个</p><pre><code>elem.nextElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.nextSibling <span class=hljs-comment>// 节点 ie6+</span>\n</code></pre><p>chrome、firefox 也是支持的</p></section><section><h1 id=光标操作 data-index=27>光标操作</h1><section><h2 id=input data-index=28>input</h2><p>可读，也可写 input.selectionStart</p></section></section><section><h1 id=关键字 data-index=29>关键字</h1><section><h2 id=\"instanceof 判断是否属于某构造函数实例\" data-index=30>instanceof 判断是否属于某构造函数实例</h2><section><h3 id=判断数组类型 data-index=31>判断数组类型</h3><pre><code class=lang-js><span class=hljs-keyword>var</span> arr = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>();\nalert(arr <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span>);<span class=hljs-comment>//返回true</span>\n</code></pre></section><section><h3 id=\"instanceof 不认为原始类型值的变量是对象\" data-index=32>instanceof 不认为原始类型值的变量是对象</h3><p>原始类型：undefined、null、boolean、number 和 string</p><pre><code class=lang-js><span class=hljs-keyword>var</span> temp=<span class=hljs-string>\"a string for test\"</span>;   \n<span class=hljs-comment>//下面这句返回\"string\"   </span>\nalert( <span class=hljs-keyword>typeof</span> temp);   \n<span class=hljs-comment>//下面这句返回\"false\"   </span>\nalert(temp <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>String</span>);\n</code></pre></section></section></section><section><h1 id=\"变量提升 函数提升\" data-index=33>变量提升 函数提升</h1><p>es6将取消</p></section><section><h1 id=坐标 data-index=34>坐标</h1><section><h2 id=元素坐标 data-index=35>元素坐标</h2><section><h3 id=相对定位元素 data-index=36>相对定位元素</h3><p>offsetLeft offsetTop</p><p>取 相对于 定位父元素</p><p>td tr 等特殊元素 可能会是参照物</p></section></section></section><section><h1 id=打印机 data-index=37>打印机</h1><p>调用打印 window.print()</p></section><section><h1 id=数组 data-index=38>数组</h1><section><h2 id=创建 data-index=39>创建</h2><p><strong>字面量方式</strong></p><pre><code><span class=hljs-keyword>var</span> arr = [];\n<span class=hljs-keyword>var</span> arr = [<span class=hljs-string>\"成员1\"</span>, <span class=hljs-number>2</span>];<span class=hljs-comment>//可以是不同成员</span>\n</code></pre><p><strong>构造函数方式</strong></p><p>1、空的</p><pre><code><span class=hljs-keyword>var</span> array = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>();\n</code></pre><p>2、指定长度</p><pre><code><span class=hljs-keyword>var</span> array2 = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>);\n成员值都是<span class=hljs-literal>undefined</span>。此方式有技巧使用\n虽然值是<span class=hljs-literal>undefined</span>，但join后不会出现<span class=hljs-literal>undefined</span>字符串\n比如：\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>).join(<span class=hljs-string>''</span>) <span class=hljs-comment>// 依然返回空字符串</span>\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>).join(<span class=hljs-string>'x'</span>) <span class=hljs-comment>// 9个x</span>\n<span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>(<span class=hljs-number>10</span>).join(<span class=hljs-string>'&lt;li&gt;&lt;/li&gt;'</span>) <span class=hljs-comment>// 9个li标签</span>\n</code></pre></section><section><h2 id=length data-index=40>length</h2><p>可读写属性</p><p><strong>读操作</strong><br>都懂...略过</p><p><strong>写操作</strong><br>==增==操作(比之前多)：相当于末尾追加了成员，初始值为undefined</p><p>==减==操作(比之前少)：少了多少相当于 末尾删了多少<br>数组对length属性进行减少的 写操作，成员真的减少了。<br>有时候想，length属性如果没真正删除，reverse反转后是不是能把删除的反过来？而实际上， reverse反转操作正常(强调：正常指并没有把删掉的成员反转过来)</p><pre><code>div1.innerHTML = array.length;\n</code></pre></section><section><h2 id=取成员 data-index=41>取成员</h2><section><h3 id=取单个,一般获取 data-index=42>取单个,一般获取</h3><p>根据索引获取</p><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>];\n<span class=hljs-built_in>console</span>.log(arr[<span class=hljs-number>0</span>]);\n<span class=hljs-built_in>console</span>.log(arr[<span class=hljs-string>'0'</span>]);<span class=hljs-comment>// 根据以前的笔记说firefox这样不行？反正现在是行了...</span>\n</code></pre></section><section><h3 id=\"取单个,带删除的获取 shift、pop、splice\" data-index=43>取单个,带删除的获取 shift、pop、splice</h3><p>取一个便少一个。将更改 原数组</p><p><strong>取第一个</strong></p><pre><code><span class=hljs-selector-tag>arr</span><span class=hljs-selector-class>.shift</span>();\n</code></pre><p><strong>取最后一个</strong></p><pre><code><span class=hljs-selector-tag>arr</span><span class=hljs-selector-class>.pop</span>();\n</code></pre><p><strong>取指定</strong><br>使用splice实现</p><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>];\narr.splice(<span class=hljs-number>2</span>, <span class=hljs-number>1</span>);<span class=hljs-comment>// '陈'。取到了第3个成员</span>\narr;<span class=hljs-comment>// ['张', '李', '黄']</span>\n</code></pre></section><section><h3 id=\"取多个,带删除的获取 splice\" data-index=44>取多个,带删除的获取 splice</h3><p>取多个指定成员，取多少原数组便会减多少<br><code>Array.splice(开始索引,数量)</code><br>返回一个新数组，装载取到的成员</p></section></section><section><h2 id=增成员 data-index=45>增成员</h2><section><h3 id=追加 data-index=46>追加</h3><p>底部-push：追加一个或多个</p><pre><code><span class=hljs-selector-tag>array</span><span class=hljs-selector-class>.push</span>(\"烧饼1\");\n</code></pre><p>头部-unshift：追加一个或多个</p><pre><code>array.unshift(<span class=hljs-string>\"烧饼0\"</span>,<span class=hljs-string>\"烧饼1\"</span>);\n</code></pre><p>返回值 返回更改后的数组长度</p></section><section><h3 id=指定位置增加 data-index=47>指定位置增加</h3><p><strong>使用splice，真正意义上的指定位置增加</strong><br>参数1：增加的位置，此位置原有的元素会往后挤<br>参数2：必须为0<br>参数3：要增加的成员，可以多个</p><pre><code><span class=hljs-keyword>var</span> arr = [<span class=hljs-number>1</span>, <span class=hljs-number>2</span>, <span class=hljs-number>3</span>];\n\narr.splice(<span class=hljs-number>1</span>, <span class=hljs-number>0</span>, <span class=hljs-string>'成员1'</span>);\narr.splice(<span class=hljs-number>2</span>, <span class=hljs-number>0</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>);\narr.splice(<span class=hljs-number>3</span>, <span class=hljs-number>0</span>, [<span class=hljs-string>'成员4'</span>, <span class=hljs-string>'成员5'</span>]); <span class=hljs-comment>// 注意，此方式没有例外，依然只添加一个成员，3索引位置是一个数组（以为会有concat特性，添加2个成员，实际不是）</span>\n</code></pre><p><strong>使用修改方式，严格来说这还是修改</strong><br>当索引大于等于length时，才是增加，否则为修改</p><pre><code><span class=hljs-keyword>var</span> arr=[];\narr[<span class=hljs-number>3</span>]=<span class=hljs-number>1</span>;\n<span class=hljs-built_in>console</span>.log(arr.length);<span class=hljs-comment>// 4</span>\n</code></pre></section></section><section><h2 id=删成员 data-index=48>删成员</h2><section><h3 id=使用delete操作符 data-index=49>使用delete操作符</h3><p>删第一个</p><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>\"张\"</span>, <span class=hljs-string>\"李\"</span>, <span class=hljs-string>\"陈\"</span>, <span class=hljs-string>\"黄\"</span>];\n<span class=hljs-keyword>delete</span> arr[<span class=hljs-number>0</span>];\n<span class=hljs-built_in>console</span>.log(arr[<span class=hljs-number>0</span>]);<span class=hljs-comment>// undefined</span>\n<span class=hljs-built_in>console</span>.log(arr.length);<span class=hljs-comment>// 4</span>\n</code></pre><p>删最后一个</p><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>\"张\"</span>, <span class=hljs-string>\"李\"</span>, <span class=hljs-string>\"陈\"</span>, <span class=hljs-string>\"黄\"</span>];\n<span class=hljs-keyword>delete</span> arr[<span class=hljs-number>3</span>];\n<span class=hljs-built_in>console</span>.log(arr[<span class=hljs-number>3</span>]);<span class=hljs-comment>// undefined</span>\n<span class=hljs-built_in>console</span>.log(arr.length);<span class=hljs-comment>// 4</span>\n</code></pre><p>两个例子说明，只是把值换成了undefined了，length不变<br>==但是==<br>使用for in无法循环出删掉的成员了，如果强行赋值undefined，又能循环出来，看来真删除了。 或者说这只是对象的特性而已，数组也是对象嘛</p><p><strong>总结</strong><br>delete 操作不会致使数组的 length 属性改变 delete 操作与直接赋 undefined 是不一样的，for in 无法获取 delete 删除的成员，可获取服 undefined 的成员</p><p><strong>兼容性</strong>：包括ie6的所有</p></section><section><h3 id=通过设置length data-index=50>通过设置length</h3><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>\"张\"</span>, <span class=hljs-string>\"李\"</span>, <span class=hljs-string>\"陈\"</span>, <span class=hljs-string>\"黄\"</span>];\narr.length=<span class=hljs-number>1</span>;\n<span class=hljs-built_in>console</span>.log(arr);<span class=hljs-comment>//[\"张\"] 。真的就只有这么一个了！！</span>\n</code></pre><p>兼容性：包括ie6的所有</p><p>详情 见 [length] 写操作</p></section><section><h3 id=删头尾，一次删一个 data-index=51>删头尾，一次删一个</h3><p>使用shift pop<br>见 [取成员]</p></section><section><h3 id=指定范围删除，一次可删多个 data-index=52>指定范围删除，一次可删多个</h3><p>使用splice<br>见 [取成员]</p></section><section><h3 id=根据索引删除-使用splice data-index=53>根据索引删除-使用splice</h3><p>快速使用：</p><pre><code><span class=hljs-comment>// 删除指定索引位置成员，参数2固定为1</span>\narr.splice(index,<span class=hljs-number>1</span>);\n</code></pre><p>返回值：返回一个新数组，装载删掉的成员</p><p>将更改原数组</p></section></section><section><h2 id=改成员 data-index=54>改成员</h2><p>根据索引覆盖操作。都懂...</p><pre><code><span class=hljs-keyword>var</span> arr=[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>];\narr[<span class=hljs-number>0</span>]=<span class=hljs-string>'xx'</span>;\n</code></pre></section><section><h2 id=转换 data-index=55>转换</h2><section><h3 id=字符串转数组-split data-index=56>字符串转数组-split</h3><p><code>String.split([string])</code></p><p><strong>· 给参情况</strong><br>用字符串中指定子串 将 字符串 切割成 数组</p><pre><code><span class=hljs-string>'张,李,陈,黄'</span>.split(<span class=hljs-string>','</span>);<span class=hljs-comment>//[\"张\", \"李\", \"陈\", \"黄\"]</span>\n</code></pre><p><strong>· 空字符串情况</strong><br>将每个字符分割成数组</p><pre><code><span class=hljs-string>'张,李,陈,黄'</span>.split(<span class=hljs-string>''</span>);<span class=hljs-comment>//[\"张\", \",\", \"李\", \",\", \"陈\", \",\", \"黄\"]</span>\n</code></pre><p><strong>· 不给参情况</strong><br>返回只有原字符串一个成员的数组</p><pre><code class=lang-js><span class=hljs-string>'张,李,陈,黄'</span>.split();<span class=hljs-comment>//[\"张,李,陈,黄\"]</span>\n</code></pre></section><section><h3 id=数组转字符串-join data-index=57>数组转字符串-join</h3><p><strong>用指定字符串 将 数组 连接成 字符串</strong></p><pre><code class=lang-js>[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>].join(<span class=hljs-string>'-'</span>);<span class=hljs-comment>// '张-李-陈-黄'</span>\n</code></pre><p><strong>不带参：</strong></p><pre><code class=lang-js>[<span class=hljs-string>'张'</span>, <span class=hljs-string>'李'</span>, <span class=hljs-string>'陈'</span>, <span class=hljs-string>'黄'</span>].join();<span class=hljs-comment>// '张,李,陈,黄'</span>\n</code></pre><p>似乎默认使用了逗号相连<br>也可以说是 直接将数组转换成字符串</p><p><strong>数组length=1</strong></p><pre><code class=lang-js>[<span class=hljs-string>'张'</span>].join(<span class=hljs-string>'-'</span>);<span class=hljs-comment>// '张'</span>\n</code></pre><p><strong>数组length=0</strong></p><pre><code class=lang-js>[].join(<span class=hljs-string>'-'</span>).length===<span class=hljs-number>0</span>;<span class=hljs-comment>//true。看来是空字符串...</span>\n</code></pre></section><section><h3 id=集合转数组-slice技巧 data-index=58>集合转数组-slice技巧</h3><p>集合指的是那种有length属性的类数组对象</p><p><strong>HTMLCollection 集合例子</strong></p><pre><code class=lang-js>eItems = [].slice.call(<span class=hljs-built_in>document</span>.body.children, <span class=hljs-number>0</span>);\n</code></pre><p>这种集合ie678不支持，参数3不会影响HTMLCollection集合</p><p><strong>对象模拟 例子</strong></p><pre><code class=lang-js><span class=hljs-keyword>var</span> obj = {\n    <span class=hljs-number>0</span>: <span class=hljs-number>0</span>,\n    <span class=hljs-number>1</span>: <span class=hljs-number>1</span>,\n    <span class=hljs-attr>length</span>: <span class=hljs-number>10</span>\n};\n<span class=hljs-keyword>var</span> arr = [].slice.call(obj, <span class=hljs-number>0</span>);\narr.lenght; <span class=hljs-comment>// 10</span>\n</code></pre><p>这种支持包括ie6的所有。参数3如果给，将影响obj。不给或者负数都不影响</p><blockquote><p>其他splice用法见 <a href=splice增删详解>splice增删详解</a></p></blockquote></section><section><h3 id=数组转字符串-toString data-index=59>数组转字符串-toString</h3><pre><code class=lang-js>arr.toString() 相当于 arr.join(<span class=hljs-string>','</span>)\n<span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, {}];\narr.toString() <span class=hljs-comment>//成员1,成员2,[object Object]</span>\narr.join(<span class=hljs-string>','</span>) <span class=hljs-comment>//成员1,成员2,[object Object]</span>\n</code></pre></section></section><section><h2 id=取成员 data-index=60>取成员</h2><section><h3 id=取多个，复制形式获取-slice data-index=61>取多个，复制形式获取-slice</h3><p>详见 <a href=复制数组-slice>复制数组-slice</a></p></section></section><section><h2 id=\"splice 增删详解\" data-index=62>splice 增删详解</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice>参考网址</a></p><p><strong>语法</strong><br><code>array.splice(start, deleteCount[, item1[, item2[, ...]]])</code></p><p><strong>参数：</strong></p><ul><li><strong>start</strong> 必须。起始索引，负数表示从尾部开始起始，而超出情况将再尾部追加</li><li><strong>deleteCount</strong> 必须(实测可以不带)。删除的个数(含第 start 位)<br>0或负数都表示不删除，一般用0<br>超出情况将删除index之后的所有成员<br>技术文档都说这个是必须，实测不带也可以，不带将删除start(包含start)之后的所有</li><li><strong>itemN</strong> 可选，要替换的成员。将指定区域替换成指定成员</li></ul><p><strong>返回值：</strong><br>被删掉的成员组成的新数组<br>没有被删返回空数组</p><p><strong>将更改原始数组：</strong><br>deleteCount 删除、itemN 增加 将应用到原数组中。而被删除的成员将拼成一个新数组被返回</p><p><strong>兼容：</strong><br>包括ie6的所有</p><p><strong>关于clone：</strong><br>splice不能实现clone，arr.concat、arr.slice可以实现</p></section><section><h2 id=复制数组-slice data-index=63>复制数组-slice</h2><p>可指定位置进行复制</p><p><strong>语法</strong><br><code>arr.slice(begin[, end])</code></p><p><strong>参数</strong></p><ul><li><p><strong>begin</strong><br>开始索引，从0开始<br>可以是负数，负数情况 相当于 length + begin，相减后结果如果还是负数将视0为起始<br>包含，新数组将包含此位置的值<br>经测试此参数也是可选的，省略情况相当于arr.slice(0)</p></li><li><p><strong>end</strong><br>结束索引，从0开始<br>省略此参数将将一直取到原数组末尾<br>可以是负数，负数情况原理同begin一样<br>不包含，新数组将不包含此位置的值<br>小于或者等于begin 将 返回空数组，负数情况也如此</p></li></ul><p><strong>返回新数组</strong></p><p><strong>不更改原数组</strong></p><p><strong>完全复制</strong><br>不带参或者 begin 为 0 即可实现完全复制</p><p><strong>兼容性</strong><br>包括 ie6 的所有浏览器</p><p><strong>concat也可以实现复制</strong></p></section><section><h2 id=合并数组-concat data-index=64>合并数组-concat</h2><p>实现 合并 或者 追加。返回一个新数组 数组情况是合并，非数组是追加。</p><pre><code><span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>],\narr.concat(<span class=hljs-string>'成员4'</span>,[<span class=hljs-string>'成员5'</span>])<span class=hljs-comment>// [\"成员1\", \"成员2\", \"成员3\", \"成员4\", \"成员5\"]</span>\n</code></pre><p><strong>语法：</strong><br><code>array.concat(value1, value2, ..., valueN)</code></p><p><strong>参数：</strong><br>valueN 可选，不带参将实现复制</p><p><strong>关于合并：</strong><br>就是将数组的所有子成员追加进来，相当于如果参数是数组，那么你当它没有中括号吧。<br>合并只限于子级， 如果子成员还是数组 ，不会再去合并，此数组将视为成员。</p><pre><code><span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>],\n    arr2= [<span class=hljs-string>'成员4'</span>,[<span class=hljs-string>'成员5'</span>]];\n<span class=hljs-keyword>var</span> newArr = arr.concat(arr2);\n<span class=hljs-built_in>console</span>.log(newArr); <span class=hljs-comment>// [\"成员1\", \"成员2\", \"成员3\", \"成员4\", [\"成员5\"]]</span>\n</code></pre><p><strong>返回值：</strong><br>合并后的数组</p><p><strong>不更改原数组，也不会更改作为参数的数组</strong></p><pre><code><span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>],\n    arr2= [<span class=hljs-string>'成员4'</span>,<span class=hljs-string>'成员5'</span>];\n<span class=hljs-keyword>var</span> newArr = arr.concat(arr2);\n\n<span class=hljs-built_in>console</span>.log(arr); <span class=hljs-comment>// [\"成员1\", \"成员2\", \"成员3\"]</span>\n<span class=hljs-built_in>console</span>.log(arr2); <span class=hljs-comment>// [\"成员4\", \"成员5\"]</span>\n<span class=hljs-built_in>console</span>.log(newArr); <span class=hljs-comment>// [\"成员1\", \"成员2\", \"成员3\", \"成员4\", \"成员5\"]</span>\n</code></pre><p><strong>可实现clone</strong><br>不带参即可<br>slice也可以实现clone</p><pre><code><span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'成员1'</span>, <span class=hljs-string>'成员2'</span>, <span class=hljs-string>'成员3'</span>];\n<span class=hljs-keyword>var</span> newArr = arr.concat();\n兼容性：包括ie6的所有\n</code></pre></section><section><h2 id=\"sort 排序\" data-index=65>sort 排序</h2><section><h3 id=默认排序，将按字符排序 data-index=66>默认排序，将按字符排序</h3><p>不带参即可，升序，即小的在前面。</p><pre><code class=lang-js>[<span class=hljs-string>'B'</span>,<span class=hljs-string>'A'</span>,<span class=hljs-string>'C'</span>].sort() <span class=hljs-comment>// [\"A\", \"B\", \"C\"]</span>\n</code></pre><p><strong>将更改原数组</strong></p><p><strong>字符排序探索</strong><br>逐个字符进行对比(如果是数字，并非根据数量)</p><pre><code>[<span class=hljs-number>100</span>,<span class=hljs-number>99</span>].sort()<span class=hljs-comment>// [100, 99]</span>\n</code></pre><p>其实，如果看了下面的自定义排序，上例的结果感觉应该是这么来的。转字符串，再比较</p><pre><code><span class=hljs-string>'100'</span>&lt;<span class=hljs-string>'99'</span><span class=hljs-comment>// true</span>\n</code></pre><p><strong>汉字</strong><br>的话根据 Unicode编码，并非按照拼音</p><pre><code>[<span class=hljs-string>'陈'</span>,<span class=hljs-string>'张'</span>, <span class=hljs-string>'黄'</span>,<span class=hljs-string>'李'</span>].sort();<span class=hljs-comment>//[\"张\", \"李\", \"陈\", \"黄\"]</span>\n</code></pre><p>上例中，如果按照拼音，&#39;陈&#39;应该在最前才对。而输出字符对于的Unicode编码是 5F20 674E 9648 9EC4，这很明显<br>==推想，估计所有字符，包括字母都是按照编码来的==</p></section><section><h3 id=自定义排序 data-index=67>自定义排序</h3><p>下例实现数字排序。例子为降序。升序 将1 和 -1 调换即可</p><pre><code>([<span class=hljs-number>2</span>, <span class=hljs-number>33</span>, <span class=hljs-number>12</span>, <span class=hljs-number>6</span>, <span class=hljs-number>3333</span>]).sort(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>v1, v2</span>) </span>{\n    <span class=hljs-keyword>if</span> (v1 &lt; v2) <span class=hljs-keyword>return</span> <span class=hljs-number>1</span>;\n    <span class=hljs-keyword>if</span> (v1 &gt; v2) <span class=hljs-keyword>return</span> <span class=hljs-number>-1</span>;\n    <span class=hljs-keyword>return</span> <span class=hljs-number>0</span>;<span class=hljs-comment>// 不处理</span>\n})\n</code></pre><p>强调：将==更改原数组==</p></section><section><h3 id=有返回值 data-index=68>有返回值</h3><p>虽然更改了原数组，但还是有返回值，返回更改后的原数组，或者说返回原数组引用</p></section></section><section><h2 id=\"reverse 数组反转\" data-index=69>reverse 数组反转</h2><p><code>arr.reverse()</code><br>差不多就是将整个数组倒过来，第一个位置就是 最后一个成员了</p></section><section><h2 id=取索引-indexOf data-index=70>取索引-indexOf</h2><p>取成员索引，不存在返回-1<br>ie兼容性：ie9+</p><pre><code><span class=hljs-keyword>var</span> d = {};\n<span class=hljs-keyword>var</span> arr = [<span class=hljs-string>'a'</span>, <span class=hljs-string>'b'</span>, d];\n<span class=hljs-built_in>console</span>.log(arr.indexOf(<span class=hljs-string>'a'</span>));<span class=hljs-comment>// 0</span>\n<span class=hljs-built_in>console</span>.log(arr.indexOf(arr[<span class=hljs-number>1</span>]));<span class=hljs-comment>// 1</span>\n<span class=hljs-built_in>console</span>.log(arr.indexOf(d));<span class=hljs-comment>// 2</span>\n</code></pre></section><section><h2 id=数组类型判断 data-index=71>数组类型判断</h2><p>详见 <a href=./类型判断.md>./类型判断.md</a></p></section><section><h2 id=遍历迭代 data-index=72>遍历迭代</h2><section><h3 id=\"every和some : 是否满足\" data-index=73>every和some : 是否满足</h3><p>every 和 some 都会避开缺失元素</p><p>可实现中断遍历：forEach 没法中断，但这个可以啊</p><p><strong>every</strong></p><p>必须全对</p><p>传递函数只有全部返回true(或者可转化为true的值)，才返回true</p><p>(此处可略看)反之，只要出现false，遍历停止，返回false</p><p><strong>some</strong></p><p>有一个对就行</p><p>传递函数只要出现true(或者可转化为true的值)，便停止遍历，返回true</p><p>(此处可略略看)反之，必须全部false才返回false</p></section><section><h3 id=filter data-index=74>filter</h3><p>实现过滤掉不符合条件的成员 返回一个新数组，不更改原数组 会避开缺失元素</p><p><strong>语法</strong><br><code>var new_arrary = arr.filter(callback[, thisArg])</code></p><p><strong>参数</strong></p><ul><li><p><strong>callback</strong> 用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。 返回true(或者可转化为true的值)表示保留该元素（通过测试），false(或者可转化为false的值)则不保留。</p></li><li><p><strong>thisArg</strong> 可选。执行 callback 时的用于 this 的值。</p></li></ul><p><strong>浏览器兼容性</strong></p><p>ie9+</p></section><section><h3 id=forEach data-index=75>forEach</h3></section><section><h3 id=map data-index=76>map</h3></section></section><section><h2 id=类型 data-index=77>类型</h2><section><h3 id=\"es5 方式\" data-index=78>es5 方式</h3><pre><code class=lang-js><span class=hljs-built_in>Array</span>.isArray([]) <span class=hljs-comment>// true</span>\n<span class=hljs-built_in>Array</span>.isArray({}) <span class=hljs-comment>// false</span>\n</code></pre></section><section><h3 id=全兼容方式 data-index=79>全兼容方式</h3><pre><code class=lang-js><span class=hljs-keyword>var</span> isArray=<span class=hljs-built_in>Array</span>.isArray||<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>o</span>)</span>{\n  <span class=hljs-keyword>return</span> <span class=hljs-built_in>Object</span>.prototype.toString.call(o)===<span class=hljs-string>\"[object Array]\"</span>;\n};\n</code></pre><p>es5 方式本质也使用了 Object.prototype.toString</p></section><section><h3 id=不推荐使用 data-index=80>不推荐使用</h3><p>iframe 情况可能会出问题</p><pre><code class=lang-js>[] <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span> <span class=hljs-comment>// true</span>\n({}) <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span> <span class=hljs-comment>// false</span>\n</code></pre></section></section><section><h2 id=？检测数组 data-index=81>？检测数组</h2><p>arrName instanceof Array</p><p>Array.isArray(arrName)</p></section><section><h2 id=？缩小方法 data-index=82>？缩小方法</h2><p>arr.reduce() arr.reduceRight()</p></section><section><h2 id=toSource？？ data-index=83>toSource？？</h2><p>返回代表特定数组的数组常数，可以用来建立新的数组</p></section><section><h2 id=valueOf？？ data-index=84>valueOf？？</h2><p>取得数组值</p></section></section><section><h1 id=正则表达式 data-index=85>正则表达式</h1><p>[toc]</p><section><h2 id=相关方法 data-index=86>相关方法</h2><section><h3 id=汇总 data-index=87>汇总</h3><p>exec<br>test<br>match<br>search<br>replace<br>split</p></section><section><h3 id=\"替换 String.prototype.replace()\" data-index=88>替换 String.prototype.replace()</h3><p>返回值： 有替换 情况：替换好的字符串； 没替换 情况：源字符串</p><p>两个参数： 1、用于匹配的表达式 2、用于替换的字符</p><p>关于调用表达式匹配内容 通过$&amp;可以调用整个表达式匹配的内容。 通过$[1-9]可以调用匹配子内容。数字为括号的位置。调用整个匹配内容就把整个表达式括起来</p><p>关于replace方法中的 修饰符g 将依次将所有匹配的内容 替换。如下例就有两个匹配的内容，这两个内容都将被替换</p><pre><code class=lang-js>alert((<span class=hljs-string>'hello@qq.com||world@qq.com'</span>).replace(<span class=hljs-regexp>/(qq)(.)/g</span>, <span class=hljs-string>\"QQ$1$2\"</span>));\n<span class=hljs-keyword>var</span> a = (<span class=hljs-string>'asdsad'</span>).replace(<span class=hljs-regexp>/[a-z]/</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>d</span>) </span>{\n    <span class=hljs-comment>// 此回调 如果没找到将不执行。也就是，找到一个执行一次</span>\n    <span class=hljs-comment>//d 为 匹配的字符</span>\n    <span class=hljs-keyword>return</span> d.toUpperCase();<span class=hljs-comment>//return替换匹配字符</span>\n});\n</code></pre></section><section><h3 id=\"查找 RegExp.prototype.exec()\" data-index=89>查找 RegExp.prototype.exec()</h3><p><strong>返回值：</strong></p><ul><li>没有匹配返回null</li><li>有匹配情况，数组对象，有两个固定的属性<br>index 匹配字符串开始索引位置<br>input 原字符串</li></ul><p><strong>修饰符g ：</strong></p><p>每执行一次exec方法，都将继续往下寻找 未匹配过的内容。但必须是同一个RegExp实例，见下例</p><pre><code class=lang-js><span class=hljs-keyword>var</span> patt = <span class=hljs-regexp>/W3School/g</span>; <span class=hljs-comment>// 等同 new RegExp('W3School', 'g')</span>\n\n<span class=hljs-built_in>console</span>.log(   \n    patt.exec(<span class=hljs-string>'Visit W3School, W3School is a place to study web technology.'</span>).index <span class=hljs-comment>// 6 </span>\n    ,\n    patt.exec(<span class=hljs-string>'Visit W3School, W3School is a place to study web technology.'</span>).index <span class=hljs-comment>// 14</span>\n    ,\n    /W3School/g.exec(<span class=hljs-string>'Visit W3School, W3School is a place to study web technology.'</span>).index <span class=hljs-comment>// 6 新表达式对象</span>\n    ,\n    patt.exec(<span class=hljs-string>'Visit W3School, W3School is a place to study web technology.'</span>) <span class=hljs-comment>// null</span>\n);\n</code></pre><p>修饰符g + while 非常好用</p><pre><code class=lang-js><span class=hljs-comment>// 使用了 赋值表达式也有返回值 的原理</span>\n<span class=hljs-keyword>while</span> (result = reg.exec(content)) {\n    <span class=hljs-built_in>console</span>.log(result );\n}\n</code></pre></section><section><h3 id=\"查找 String.prototype.match()\" data-index=90>查找 String.prototype.match()</h3><p><strong>参数：</strong></p><p>可以是 字符串；还可以是 正则表达式</p><p>字符串其实也是正则，貌似不支持修饰符g了</p><p><strong>返回值：</strong></p><p>1.没有匹配情况，返回null</p><p>2.有匹配情况，不带g<br>数组成员1为整个表达式匹配的字符串，其后的成员为被括号扩起的子表达式匹配的字符串，带两个固定属性，<br>index 匹配字符串开始索引位置<br>input 原字符串</p><p>3.带g：得到的数组是匹配到所有字符块，匹配多少就有多少成员。不会被括号影响，不带属性</p><pre><code class=lang-js><span class=hljs-built_in>console</span>.log((<span class=hljs-string>'msie 9.0 oooo'</span>).match(<span class=hljs-regexp>/msie ([\\d.]+)/</span>)); <span class=hljs-comment>// [\"msie 9.0\", \"9.0\", index: 0, input: \"msie 9.0 oooo\"]</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-string>'msie 9.0 8.0'</span>).match(<span class=hljs-regexp>/ ([\\d.]+)/g</span>)); <span class=hljs-comment>// [\" 9.0\", \" 8.0\"]</span>\n<span class=hljs-built_in>console</span>.log((<span class=hljs-string>'msie 9.0 8.0'</span>).match(<span class=hljs-string>'[\\\\d]'</span>)); <span class=hljs-comment>// 字符串情况</span>\n</code></pre></section></section><section><h2 id=不包含指定字符串 data-index=91>不包含指定字符串</h2><p>使用 <code>(?!pattern)</code> 负向预查</p><pre><code class=lang-js>/^(?!index)\\.js$/.test(<span class=hljs-string>'index.js'</span>) <span class=hljs-comment>// false</span>\n</code></pre><p><strong>一些注意，容易误导的地方</strong>：</p><pre><code class=lang-js>/(?!index)\\.js$/.test(<span class=hljs-string>'index.js'</span>) <span class=hljs-comment>// true</span>\n</code></pre><p>去掉了 <code>^</code>，就为 <code>true</code> 了，这是因为，只要找到满足条件的字符串即可，<code>.js</code>这部分满足，所以为<code>true</code>。为false的例子是因为没有一处是满足的</p></section></section><section><h1 id=浏览器 data-index=92>浏览器</h1><section><h2 id=手动刷新 data-index=93>手动刷新</h2><p>之前都是 <code>location.href=&quot;&quot;</code>，其实有直接的方法</p><pre><code class=lang-js><span class=hljs-selector-tag>location</span><span class=hljs-selector-class>.reload</span>()\n</code></pre></section></section><section><h1 id=类型判断 data-index=94>类型判断</h1><section><h2 id=数组判断 data-index=95>数组判断</h2><p>ES5 方法</p><pre><code class=lang-js><span class=hljs-built_in>Array</span>.isArray([]) <span class=hljs-comment>// true</span>\n</code></pre><p>使用instanceof，某书中说ie浏览器有不确定性。理论上 ie6+</p><pre><code class=lang-js><span class=hljs-built_in>console</span>.log([] <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span>);<span class=hljs-comment>//返回true</span>\n</code></pre><p>万能</p><pre><code class=lang-js>({}).toString.call([])<span class=hljs-comment>//\"[object Array]\"</span>\n</code></pre><p>兼容性原型扩展，兼容包括ie6的所有</p><pre><code class=lang-js><span class=hljs-keyword>if</span>(<span class=hljs-keyword>typeof</span> <span class=hljs-built_in>Array</span>.isArray === <span class=hljs-string>'undefined'</span>){\n    <span class=hljs-built_in>Array</span>.isArray = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>arg</span>)</span>{\n        <span class=hljs-keyword>return</span> ({}).toString.call(arg) === <span class=hljs-string>'[object Array]'</span>;\n    }\n}\n</code></pre></section></section><section><h1 id=编辑器编码规范配置 data-index=96>编辑器编码规范配置</h1><p><a href=http://editorconfig.org/ >.editorconfig</a></p></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">ajax</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">问题</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"\"></i><span class=\"txt\">Date 时间日期</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">取天总数</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"\"></i><span class=\"txt\">date</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"\"></i><span class=\"txt\">兼容性</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">ios 不支持减号连接</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"\"></i><span class=\"txt\">DOM 操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"\"></i><span class=\"txt\">dataset 标签数据绑定</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">js 设置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">js 获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">关于大小写问题</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"\"></i><span class=\"txt\">h5拖放</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"hidden\"></i><span class=\"txt\">元素可拖放设置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">相关事件：</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"\"></i><span class=\"txt\">string</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"hidden\"></i><span class=\"txt\">取索引</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\">WebSocket 或 SSE</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"18\"><i class=\"\"></i><span class=\"txt\">事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"19\"><i class=\"hidden\"></i><span class=\"txt\">dispatchEvent 手动触发事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"20\"><i class=\"hidden\"></i><span class=\"txt\">阻止默认动作</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"21\"><i class=\"\"></i><span class=\"txt\">事件类型</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"22\"><i class=\"hidden\"></i><span class=\"txt\">移入事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"23\"><i class=\"\"></i><span class=\"txt\">键盘输入事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"24\"><i class=\"hidden\"></i><span class=\"txt\">keypress 字符键触发</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"25\"><i class=\"hidden\"></i><span class=\"txt\">input 有字符输入则触发</span></div><div class=\"list\"></div></div></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"26\"><i class=\"hidden\"></i><span class=\"txt\">元素获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"27\"><i class=\"\"></i><span class=\"txt\">光标操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"28\"><i class=\"hidden\"></i><span class=\"txt\">input</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"29\"><i class=\"\"></i><span class=\"txt\">关键字</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"30\"><i class=\"\"></i><span class=\"txt\">instanceof 判断是否属于某构造函数实例</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"31\"><i class=\"hidden\"></i><span class=\"txt\">判断数组类型</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"32\"><i class=\"hidden\"></i><span class=\"txt\">instanceof 不认为原始类型值的变量是对象</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"33\"><i class=\"hidden\"></i><span class=\"txt\">变量提升 函数提升</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"34\"><i class=\"\"></i><span class=\"txt\">坐标</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"35\"><i class=\"\"></i><span class=\"txt\">元素坐标</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"36\"><i class=\"hidden\"></i><span class=\"txt\">相对定位元素</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"37\"><i class=\"hidden\"></i><span class=\"txt\">打印机</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"38\"><i class=\"\"></i><span class=\"txt\">数组</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"39\"><i class=\"hidden\"></i><span class=\"txt\">创建</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"40\"><i class=\"hidden\"></i><span class=\"txt\">length</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"41\"><i class=\"\"></i><span class=\"txt\">取成员</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"42\"><i class=\"hidden\"></i><span class=\"txt\">取单个,一般获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"43\"><i class=\"hidden\"></i><span class=\"txt\">取单个,带删除的获取 shift、pop、splice</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"44\"><i class=\"hidden\"></i><span class=\"txt\">取多个,带删除的获取 splice</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"45\"><i class=\"\"></i><span class=\"txt\">增成员</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"46\"><i class=\"hidden\"></i><span class=\"txt\">追加</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"47\"><i class=\"hidden\"></i><span class=\"txt\">指定位置增加</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"48\"><i class=\"\"></i><span class=\"txt\">删成员</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"49\"><i class=\"hidden\"></i><span class=\"txt\">使用delete操作符</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"50\"><i class=\"hidden\"></i><span class=\"txt\">通过设置length</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"51\"><i class=\"hidden\"></i><span class=\"txt\">删头尾，一次删一个</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"52\"><i class=\"hidden\"></i><span class=\"txt\">指定范围删除，一次可删多个</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"53\"><i class=\"hidden\"></i><span class=\"txt\">根据索引删除-使用splice</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"54\"><i class=\"hidden\"></i><span class=\"txt\">改成员</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"55\"><i class=\"\"></i><span class=\"txt\">转换</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"56\"><i class=\"hidden\"></i><span class=\"txt\">字符串转数组-split</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"57\"><i class=\"hidden\"></i><span class=\"txt\">数组转字符串-join</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"58\"><i class=\"hidden\"></i><span class=\"txt\">集合转数组-slice技巧</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"59\"><i class=\"hidden\"></i><span class=\"txt\">数组转字符串-toString</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"60\"><i class=\"\"></i><span class=\"txt\">取成员</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"61\"><i class=\"hidden\"></i><span class=\"txt\">取多个，复制形式获取-slice</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"62\"><i class=\"hidden\"></i><span class=\"txt\">splice 增删详解</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"63\"><i class=\"hidden\"></i><span class=\"txt\">复制数组-slice</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"64\"><i class=\"hidden\"></i><span class=\"txt\">合并数组-concat</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"65\"><i class=\"\"></i><span class=\"txt\">sort 排序</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"66\"><i class=\"hidden\"></i><span class=\"txt\">默认排序，将按字符排序</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"67\"><i class=\"hidden\"></i><span class=\"txt\">自定义排序</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"68\"><i class=\"hidden\"></i><span class=\"txt\">有返回值</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"69\"><i class=\"hidden\"></i><span class=\"txt\">reverse 数组反转</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"70\"><i class=\"hidden\"></i><span class=\"txt\">取索引-indexOf</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"71\"><i class=\"hidden\"></i><span class=\"txt\">数组类型判断</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"72\"><i class=\"\"></i><span class=\"txt\">遍历迭代</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"73\"><i class=\"hidden\"></i><span class=\"txt\">every和some : 是否满足</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"74\"><i class=\"hidden\"></i><span class=\"txt\">filter</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"75\"><i class=\"hidden\"></i><span class=\"txt\">forEach</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"76\"><i class=\"hidden\"></i><span class=\"txt\">map</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"77\"><i class=\"\"></i><span class=\"txt\">类型</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"78\"><i class=\"hidden\"></i><span class=\"txt\">es5 方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"79\"><i class=\"hidden\"></i><span class=\"txt\">全兼容方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"80\"><i class=\"hidden\"></i><span class=\"txt\">不推荐使用</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"81\"><i class=\"hidden\"></i><span class=\"txt\">？检测数组</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"82\"><i class=\"hidden\"></i><span class=\"txt\">？缩小方法</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"83\"><i class=\"hidden\"></i><span class=\"txt\">toSource？？</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"84\"><i class=\"hidden\"></i><span class=\"txt\">valueOf？？</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"85\"><i class=\"\"></i><span class=\"txt\">正则表达式</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"86\"><i class=\"\"></i><span class=\"txt\">相关方法</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"87\"><i class=\"hidden\"></i><span class=\"txt\">汇总</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"88\"><i class=\"hidden\"></i><span class=\"txt\">替换 String.prototype.replace()</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"89\"><i class=\"hidden\"></i><span class=\"txt\">查找 RegExp.prototype.exec()</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"90\"><i class=\"hidden\"></i><span class=\"txt\">查找 String.prototype.match()</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"91\"><i class=\"hidden\"></i><span class=\"txt\">不包含指定字符串</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"92\"><i class=\"\"></i><span class=\"txt\">浏览器</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"93\"><i class=\"hidden\"></i><span class=\"txt\">手动刷新</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"94\"><i class=\"\"></i><span class=\"txt\">类型判断</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"95\"><i class=\"hidden\"></i><span class=\"txt\">数组判断</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"96\"><i class=\"hidden\"></i><span class=\"txt\">编辑器编码规范配置</span></div><div class=\"list\"></div></div>"}
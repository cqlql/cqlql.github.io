{"article":"<section><h1 data-index=0>ajax</h1><section><h2 data-index=1>问题</h2><p>### xhr.responseType</p></section></section><section><h1 data-index=2>DOM 操作</h1><section><h2 data-index=3>dataset 标签数据绑定</h2><section><h3 data-index=4>js 设置</h3><p>js 设置操作将直接同步到标签上。可直接通过调试工具在标签上看到</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"item\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"1\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=\"undefined\">\n    item.dataset.index=2;\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h3 data-index=5>js 获取</h3><pre><code class=lang-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>item</span><span class=hljs-selector-class>.dataset</span><span class=hljs-selector-class>.index</span>)\n</code></pre></section><section><h3 data-index=6>关于大小写问题</h3><p>只能小写获取。也就是说，标签属性名尽量小写。</p><pre><code class=lang-js>document.body = `<span class=hljs-tag>&lt;<span class=hljs-name>a</span> <span class=hljs-attr>href</span>=<span class=hljs-string>\"javascript:;\"</span>  <span class=hljs-attr>data-qNo</span>=<span class=hljs-string>\"' + qNo + '\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"' + i + '\"</span>&gt;</span>' + qNo + '1<span class=hljs-tag>&lt;/<span class=hljs-name>a</span>&gt;</span>`\n\nconsole.log(btn.dataset.qno)\n</code></pre></section></section></section><section><h1 data-index=7>string</h1><section><h2 data-index=8>取索引</h2><p>indexOf 从前往后; lastIndexOf 从后往前</p><ul><li>什么时候匹配结束：匹配成功便结束，不再继续查找</li><li>没有匹配返回值：-1</li><li>参数多个字符情况: 返回开头字符索引</li></ul><pre><code><span class=hljs-keyword>var</span> str = <span class=hljs-string>\"helloword\"</span>;\n\n<span class=hljs-comment>//从前往后</span>\nstr.indexOf(<span class=hljs-string>'ow'</span>) <span class=hljs-comment>// 4</span>\n\n<span class=hljs-comment>//从后往前</span>\nsrt.lastIndexOf(<span class=hljs-string>'ow'</span>) <span class=hljs-comment>// 6</span>\n</code></pre></section></section><section><h1 data-index=9>事件</h1><section><h2 data-index=10>dispatchEvent 手动触发事件</h2><p>至今才知道。。。再一次证明，书看的少多可怕</p></section><section><h2 data-index=11>阻止默认动作</h2><pre><code class=lang-js><span class=hljs-keyword>if</span> (e.cancelable)e.preventDefault();<span class=hljs-comment>//cancelable、preventDefault结合使用</span>\n</code></pre></section><section><h2 data-index=12>事件类型</h2><section><h3 data-index=13>移入事件</h3><pre><code class=lang-js><span class=hljs-comment>//1、正常的 移入移出 事件：onmouseover移入、onmouseout移出】</span>\n<span class=hljs-comment>//兼容性：all浏览器</span>\n\n<span class=hljs-comment>/* ----------------------------------------------\n * 事件中特有属性——relatedTarget属性\n *\n *获取 触发事件 后 鼠标\n* 之前所处 元素对象——onmouseover移入事件\n *当前所处 元素对象——onmouseout移出事件\n *\n * event对象的属性，只对这两个事件有效：onmouseout移出事件、onmouseover移入事件  \n*\n * 兼容性： 所有ie中 只有ie9支持。非ie浏览器没问题\n */</span>\nalert(e.relatedTarget.className);\n\n<span class=hljs-comment>/***********************************************************/</span>\n<span class=hljs-comment>//2、特殊的 移入移出 事件</span>\n<span class=hljs-comment>//【onmouseenter移入、onmouseleave移出】 </span>\n<span class=hljs-comment>//事件 根元素 及其后代 看成一个整体 来触发此事件</span>\n<span class=hljs-comment>//兼容性：所有ie，Opera支持。fox、Chrome现在已经支持了</span>\n</code></pre></section><section><h3 data-index=14>键盘输入事件</h3><section><h4 data-index=15>keypress 字符键触发</h4><ul><li>先触发后输入</li><li>可以阻止输入触发</li></ul><p>问题：</p><ul><li>删除键，这种能改变字符串的不触发</li><li>使用中文输入法输入时也不触发</li></ul><p>是否是先触发后输入？ 兼容性如何？</p><p>不建议当做input事件触发前的监听事件：</p></section><section><h4 data-index=16>input 有字符输入则触发</h4><p>实现输入字符 后触发 改变后触发，即输入发生后触发</p><p><strong>1.Firefox、Safari、Chrome</strong> 除了input、textarea，还适用于div文本框。所有符号键 （包括删除键）</p><p>div文本框 添加元素居然不触发，手动添加文本是否也不会触发呢</p><pre><code class=lang-js>Text1.oninput = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};\n</code></pre><p><strong>2.IE</strong> 只适用于固有的input、textarea 输入框</p><p>ie6 ie7 ie8 ie10 值变动就会触发</p><p>ie9字符键触发，删除键不会触发</p><pre><code class=lang-js>Text1.onpropertychange = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};\n</code></pre><p><strong>3.Opera</strong> 没有</p></section></section></section></section><section><h1 data-index=17>元素获取</h1><p>紧邻元素获取</p><blockquote><p>相邻 紧邻 相邻元素 紧邻元素</p></blockquote><p>上一个</p><pre><code>elem.previousElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.previousSibling <span class=hljs-comment>// 节点 ie6+</span>\n</code></pre><p>下一个</p><pre><code>elem.nextElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.nextSibling <span class=hljs-comment>// 节点 ie6+</span>\n</code></pre><p>chrome、firefox 也是支持的</p></section><section><h1 data-index=18>光标操作</h1><section><h2 data-index=19>input</h2><p>可读，也可写 input.selectionStart</p></section></section><section><h1 data-index=20>关键字</h1><section><h2 data-index=21>instanceof 判断是否属于某构造函数实例</h2><section><h3 data-index=22>判断数组类型</h3><pre><code class=lang-js><span class=hljs-keyword>var</span> arr = <span class=hljs-keyword>new</span> <span class=hljs-built_in>Array</span>();\nalert(arr <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span>);<span class=hljs-comment>//返回true</span>\n</code></pre></section><section><h3 data-index=23>instanceof 不认为原始类型值的变量是对象</h3><p>原始类型：undefined、null、boolean、number 和 string</p><pre><code class=lang-js><span class=hljs-keyword>var</span> temp=<span class=hljs-string>\"a string for test\"</span>;   \n<span class=hljs-comment>//下面这句返回\"string\"   </span>\nalert( <span class=hljs-keyword>typeof</span> temp);   \n<span class=hljs-comment>//下面这句返回\"false\"   </span>\nalert(temp <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>String</span>);\n</code></pre></section></section></section><section><h1 data-index=24>变量提升 函数提升</h1><p>es6将取消</p></section><section><h1 data-index=25>坐标</h1><section><h2 data-index=26>元素坐标</h2><section><h3 data-index=27>相对定位元素</h3><p>offsetLeft offsetTop</p><p>取 相对于 定位父元素</p><p>td tr 等特殊元素 可能会是参照物</p></section></section></section><section><h1 data-index=28>打印机</h1><p>调用打印 window.print()</p></section><section><h1 data-index=29>数组</h1><section><h2 data-index=30>sort 排序</h2><section><h3 data-index=31>默认排序，将按字符排序</h3><p>不带参即可，升序，即小的在前面。</p><pre><code class=lang-js>[<span class=hljs-string>'B'</span>,<span class=hljs-string>'A'</span>,<span class=hljs-string>'C'</span>].sort() <span class=hljs-comment>// [\"A\", \"B\", \"C\"]</span>\n</code></pre><p><strong>将更改原数组</strong></p><p><strong>字符排序探索</strong><br>逐个字符进行对比(如果是数字，并非根据数量)</p><pre><code>[<span class=hljs-number>100</span>,<span class=hljs-number>99</span>].sort()<span class=hljs-comment>// [100, 99]</span>\n</code></pre><p>其实，如果看了下面的自定义排序，上例的结果感觉应该是这么来的。转字符串，再比较</p><pre><code><span class=hljs-string>'100'</span>&lt;<span class=hljs-string>'99'</span><span class=hljs-comment>// true</span>\n</code></pre><p><strong>汉字</strong><br>的话根据 Unicode编码，并非按照拼音</p><pre><code>[<span class=hljs-string>'陈'</span>,<span class=hljs-string>'张'</span>, <span class=hljs-string>'黄'</span>,<span class=hljs-string>'李'</span>].sort();<span class=hljs-comment>//[\"张\", \"李\", \"陈\", \"黄\"]</span>\n</code></pre><p>上例中，如果按照拼音，&#39;陈&#39;应该在最前才对。而输出字符对于的Unicode编码是 5F20 674E 9648 9EC4，这很明显<br>==推想，估计所有字符，包括字母都是按照编码来的==</p></section><section><h3 data-index=32>自定义排序</h3><p>下例实现数字排序。例子为降序。升序 将1 和 -1 调换即可</p><pre><code>([<span class=hljs-number>2</span>, <span class=hljs-number>33</span>, <span class=hljs-number>12</span>, <span class=hljs-number>6</span>, <span class=hljs-number>3333</span>]).sort(<span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>v1, v2</span>) </span>{\n    <span class=hljs-keyword>if</span> (v1 &lt; v2) <span class=hljs-keyword>return</span> <span class=hljs-number>1</span>;\n    <span class=hljs-keyword>if</span> (v1 &gt; v2) <span class=hljs-keyword>return</span> <span class=hljs-number>-1</span>;\n    <span class=hljs-keyword>return</span> <span class=hljs-number>0</span>;<span class=hljs-comment>// 不处理</span>\n})\n</code></pre><p>强调：将==更改原数组==</p></section><section><h3 data-index=33>有返回值</h3><p>虽然更改了原数组，但还是有返回值，返回更改后的原数组，或者说返回原数组引用</p></section></section><section><h2 data-index=34>数组类型判断</h2><p>详见 <a href=./类型判断.md>./类型判断.md</a></p></section></section><section><h1 data-index=35>类型判断</h1><section><h2 data-index=36>数组判断</h2><p>ES5 方法</p><pre><code class=lang-js><span class=hljs-built_in>Array</span>.isArray([]) <span class=hljs-comment>// true</span>\n</code></pre><p>使用instanceof，某书中说ie浏览器有不确定性。理论上 ie6+</p><pre><code class=lang-js><span class=hljs-built_in>console</span>.log([] <span class=hljs-keyword>instanceof</span> <span class=hljs-built_in>Array</span>);<span class=hljs-comment>//返回true</span>\n</code></pre><p>万能</p><pre><code class=lang-js>({}).toString.call([])<span class=hljs-comment>//\"[object Array]\"</span>\n</code></pre><p>兼容性原型扩展，兼容包括ie6的所有</p><pre><code class=lang-js><span class=hljs-keyword>if</span>(<span class=hljs-keyword>typeof</span> <span class=hljs-built_in>Array</span>.isArray === <span class=hljs-string>'undefined'</span>){\n    <span class=hljs-built_in>Array</span>.isArray = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>arg</span>)</span>{\n        <span class=hljs-keyword>return</span> ({}).toString.call(arg) === <span class=hljs-string>'[object Array]'</span>;\n    }\n}\n</code></pre></section></section><section><h1 data-index=37>编码规范控制</h1><p><a href=http://editorconfig.org/ >.editorconfig</a></p></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">ajax</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">问题</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"\"></i><span class=\"txt\">DOM 操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"\"></i><span class=\"txt\">dataset 标签数据绑定</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"hidden\"></i><span class=\"txt\">js 设置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">js 获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">关于大小写问题</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"\"></i><span class=\"txt\">string</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"hidden\"></i><span class=\"txt\">取索引</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"\"></i><span class=\"txt\">事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">dispatchEvent 手动触发事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">阻止默认动作</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"\"></i><span class=\"txt\">事件类型</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"hidden\"></i><span class=\"txt\">移入事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"\"></i><span class=\"txt\">键盘输入事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"hidden\"></i><span class=\"txt\">keypress 字符键触发</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"hidden\"></i><span class=\"txt\">input 有字符输入则触发</span></div><div class=\"list\"></div></div></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\">元素获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"18\"><i class=\"\"></i><span class=\"txt\">光标操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"19\"><i class=\"hidden\"></i><span class=\"txt\">input</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"20\"><i class=\"\"></i><span class=\"txt\">关键字</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"21\"><i class=\"\"></i><span class=\"txt\">instanceof 判断是否属于某构造函数实例</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"22\"><i class=\"hidden\"></i><span class=\"txt\">判断数组类型</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"23\"><i class=\"hidden\"></i><span class=\"txt\">instanceof 不认为原始类型值的变量是对象</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"24\"><i class=\"hidden\"></i><span class=\"txt\">变量提升 函数提升</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"25\"><i class=\"\"></i><span class=\"txt\">坐标</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"26\"><i class=\"\"></i><span class=\"txt\">元素坐标</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"27\"><i class=\"hidden\"></i><span class=\"txt\">相对定位元素</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"28\"><i class=\"hidden\"></i><span class=\"txt\">打印机</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"29\"><i class=\"\"></i><span class=\"txt\">数组</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"30\"><i class=\"\"></i><span class=\"txt\">sort 排序</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"31\"><i class=\"hidden\"></i><span class=\"txt\">默认排序，将按字符排序</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"32\"><i class=\"hidden\"></i><span class=\"txt\">自定义排序</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"33\"><i class=\"hidden\"></i><span class=\"txt\">有返回值</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"34\"><i class=\"hidden\"></i><span class=\"txt\">数组类型判断</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"35\"><i class=\"\"></i><span class=\"txt\">类型判断</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"36\"><i class=\"hidden\"></i><span class=\"txt\">数组判断</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"37\"><i class=\"hidden\"></i><span class=\"txt\">编码规范控制</span></div><div class=\"list\"></div></div>"}
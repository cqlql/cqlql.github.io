{"article":"<section><h1 id=入门 data-index=0>入门</h1><section><h2 id=术语，专业词汇 data-index=1>术语，专业词汇</h2><p>索引签名</p><p>调用签名</p></section><section><h2 id=\"lint 使用 TSLint\" data-index=2>lint 使用 TSLint</h2></section><section><h2 id=尖括号 data-index=3>尖括号</h2><p>类型断言: 也就是类型转换</p><pre><code class=lang-ts><span class=hljs-keyword>let</span> strLength: number = (<span class=xml><span class=hljs-tag>&lt;<span class=hljs-name>string</span>&gt;</span>someValue).length;</span>\n</code></pre><p>泛型: 实现类型统一</p><p>function identity<t>(arg: T): T { return arg; }</t></p><p>let output = identity<string>(&quot;myString&quot;); let output = identity(&quot;myString&quot;); // type of output will be &#39;string&#39;</string></p></section><section><h2 id=接口 data-index=4>接口</h2><p>先创建一个函数，用于指明参数结构</p><pre><code class=lang-ts>interface SquareConfig {\n  color?: string;\n  width?: number;\n}\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>createSquare</span>(<span class=hljs-params>config: SquareConfig</span>): </span>{ color: string; area: number } {\n  <span class=hljs-keyword>return</span> {\n    <span class=hljs-attr>color</span>: <span class=hljs-string>'red'</span>,\n    <span class=hljs-attr>area</span>: <span class=hljs-number>1</span>\n  }\n}\n</code></pre><p>一般使用</p><pre><code><span class=hljs-comment>// error: 'colour' not expected in type 'SquareConfig'</span>\n<span class=hljs-keyword>let</span> mySquare = createSquare({ <span class=hljs-attr>colour</span>: <span class=hljs-string>\"red\"</span>, <span class=hljs-attr>width</span>: <span class=hljs-number>100</span> });\n</code></pre><section><h3 id=跳过属性检查 data-index=5>跳过属性检查</h3><p>实现任意数量的其它属性</p><p>字符串索引签名</p><pre><code>interface SquareConfig {\n    color?: string;\n    width?: number;\n    [propName: string]: any;\n}\n</code></pre><p>直接传入对象</p><pre><code class=lang-ts>interface SquareConfig {\n  color?: string;\n  width?: number;\n}\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>createSquare</span>(<span class=hljs-params>config: SquareConfig</span>): </span>{ color: string; area: number } {\n  <span class=hljs-keyword>return</span> {\n    <span class=hljs-attr>color</span>: <span class=hljs-string>'red'</span>,\n    <span class=hljs-attr>area</span>: <span class=hljs-number>1</span>\n  }\n}\n\n<span class=hljs-comment>// 直接传入对象</span>\n<span class=hljs-keyword>let</span> squareOptions = { <span class=hljs-attr>colour</span>: <span class=hljs-string>\"red\"</span>, <span class=hljs-attr>width</span>: <span class=hljs-number>100</span> };\n<span class=hljs-built_in>console</span>.log(createSquare(squareOptions))\n</code></pre></section><section><h3 id=可索引的类型 data-index=6>可索引的类型</h3><p>定义索引的类型</p></section><section><h3 id=\"2 ---\" data-index=7>2 ---</h3><p><strong>接口到底是干嘛的</strong>：指明对象结构，包括数组，也包括类。</p><p><strong>接口，所有类型的类</strong>：某种程度上相当于不能写实现的类，但也可以用来指定类的接口，所以，说接口是所有类型的类不为过</p><p>接口语法</p><pre><code class=lang-ts>interface NumberDictionary {\n  <span class=hljs-comment>// 索引签名</span>\n  <span class=hljs-comment>// 其他属性值类型必须与索引值类型相同</span>\n  [index: string]: number;\n  <span class=hljs-comment>// </span>\n  length: number;\n  name: number;\n}\n\n\n<span class=hljs-comment>// 函数类型</span>\ninterface SearchFunc {\n  <span class=hljs-comment>// 调用签名</span>\n  (source: string, <span class=hljs-attr>subString</span>: string): boolean; <span class=hljs-comment>// 有返回值</span>\n}\n\n<span class=hljs-comment>// 函数类型2</span>\ninterface ClockInterface {\n  setTime(d: <span class=hljs-built_in>Date</span>);<span class=hljs-comment>// 没有返回值</span>\n}\n\n<span class=hljs-comment>// 构造器签名。</span>\ninterface ClockConstructor {\n  <span class=hljs-keyword>new</span> (hour: number, <span class=hljs-attr>minute</span>: number): <span class=hljs-keyword>void</span>;\n}\n</code></pre><p>可用于函数参数，此参数是对象或者数组</p><p>接口还可以声明函数类型：</p><pre><code class=lang-ts>interface SearchFunc {\n  (source: string, <span class=hljs-attr>subString</span>: string): boolean;\n}\n\n<span class=hljs-keyword>let</span> mySearch: SearchFunc;\nmySearch = <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>source: string, subString: string</span>) </span>{\n  <span class=hljs-keyword>let</span> result = source.search(subString);\n  <span class=hljs-keyword>return</span> result &gt; <span class=hljs-number>-1</span>;\n}\n</code></pre><p>类类型，定契约，实现接口。指定类结构。需借助 implements 关键字</p><pre><code class=lang-ts>interface ClockInterface {\n    <span class=hljs-attr>currentTime</span>: <span class=hljs-built_in>Date</span>;\n    setTime(d: <span class=hljs-built_in>Date</span>);\n}\n\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Clock</span> <span class=hljs-title>implements</span> <span class=hljs-title>ClockInterface</span> </span>{\n    currentTime: <span class=hljs-built_in>Date</span>;\n    setTime(d: <span class=hljs-built_in>Date</span>) {\n        <span class=hljs-keyword>this</span>.currentTime = d;\n    }\n    <span class=hljs-keyword>constructor</span>(h: number, m: number) { }\n}\n</code></pre><p>构造器类型</p><pre><code class=lang-ts>interface ClockConstructor {\n  <span class=hljs-keyword>new</span>(hour: number, <span class=hljs-attr>minute</span>: number): ClockInterface;\n}\ninterface ClockInterface {\n  tick(): <span class=hljs-keyword>void</span>;\n}\n<span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>DigitalClock</span> </span>{\n  <span class=hljs-keyword>constructor</span>(h: string) { }\n  tick() { }\n}\n\n<span class=hljs-comment>// 只有这样才能检测构造器是否符合</span>\n<span class=hljs-keyword>let</span> analogClock: ClockConstructor = DigitalClock\n\n<span class=hljs-comment>// 这样无法检测，编译通过</span>\n<span class=hljs-keyword>new</span> DigitalClock(<span class=hljs-string>'1'</span>)\n</code></pre></section></section><section><h2 id=class data-index=8>class</h2><section><h3 id=\"typeof + class\" data-index=9>typeof + class</h3><p>typeof Greeter，取Greeter类的类型，而不是实例的类型</p><pre><code class=lang-ts><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Greeter</span> </span>{\n  greeting: string;\n  <span class=hljs-keyword>constructor</span> () {\n    <span class=hljs-keyword>this</span>.greeting = <span class=hljs-string>''</span>\n  }\n  greet() {\n  }\n}\n\n<span class=hljs-keyword>let</span> greeterMaker: <span class=hljs-keyword>typeof</span> Greeter = Greeter;\n</code></pre></section><section><h3 id=静态成员 data-index=10>静态成员</h3><p>用其他变量修改静态成员，修改的是否是同一个</p><pre><code class=lang-ts><span class=hljs-class><span class=hljs-keyword>class</span> <span class=hljs-title>Greeter</span> </span>{\n  <span class=hljs-keyword>static</span> standardGreeting = <span class=hljs-string>\"Hello, there\"</span>;\n  greeting: string;\n  <span class=hljs-keyword>constructor</span> () {\n    <span class=hljs-keyword>this</span>.greeting = <span class=hljs-string>''</span>\n  }\n  greet() {\n      <span class=hljs-keyword>if</span> (<span class=hljs-keyword>this</span>.greeting) {\n          <span class=hljs-keyword>return</span> <span class=hljs-string>\"Hello, \"</span> + <span class=hljs-keyword>this</span>.greeting;\n      }\n      <span class=hljs-keyword>else</span> {\n          <span class=hljs-keyword>return</span> Greeter.standardGreeting;\n      }\n  }\n}\n\n<span class=hljs-keyword>let</span> greeter1: Greeter;\ngreeter1 = <span class=hljs-keyword>new</span> Greeter();\n<span class=hljs-built_in>console</span>.log(greeter1.greet());\n\n<span class=hljs-comment>// 将类赋给另一个变量，并进行修改</span>\n<span class=hljs-keyword>let</span> greeterMaker: <span class=hljs-keyword>typeof</span> Greeter = Greeter;\ngreeterMaker.standardGreeting = <span class=hljs-string>\"Hey there!\"</span>;\n<span class=hljs-keyword>let</span> greeter2: Greeter = <span class=hljs-keyword>new</span> greeterMaker();\n<span class=hljs-built_in>console</span>.log(greeter2.greet()); <span class=hljs-comment>// \"Hey there!\"</span>\n<span class=hljs-built_in>console</span>.log(greeter1.greet()); <span class=hljs-comment>// \"Hey there!\"</span>\n<span class=hljs-comment>// 结论：同一个</span>\n</code></pre></section></section><section><h2 id=推断类型 data-index=11>推断类型</h2><p>按上下文归类</p><pre><code class=lang-ts><span class=hljs-comment>// myAdd has the full function type</span>\n<span class=hljs-keyword>let</span> myAdd = <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>x: number, y: number</span>): <span class=hljs-title>number</span> </span>{ <span class=hljs-keyword>return</span> x + y; };\n\n<span class=hljs-comment>// The parameters `x` and `y` have the type number</span>\n<span class=hljs-keyword>let</span> myAdd: <span class=hljs-function>(<span class=hljs-params>baseValue: number, increment: number</span>) =&gt;</span> number =\n    <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>x, y</span>) </span>{ <span class=hljs-keyword>return</span> x + y; };\n</code></pre></section><section><h2 id=函数 data-index=12>函数</h2><section><h3 id=\"this 参数 - this parameters\" data-index=13>this 参数 - this parameters</h3><p>提供显示指定 this 类型</p></section></section><section><h2 id=泛型 data-index=14>泛型</h2><pre><code class=lang-ts>function identity<span class=hljs-tag>&lt;<span class=hljs-name>T</span>&gt;</span>(arg: T): T {\n    return arg;\n}\n\n// 数组泛型，数组元素类型是T\n// 写法1\nfunction loggingIdentity<span class=hljs-tag>&lt;<span class=hljs-name>T</span>&gt;</span>(arg: T[]): T[] {\n    console.log(arg.length);  // Array has a .length, so no more error\n    return arg;\n}\n// 写法2\nfunction loggingIdentity<span class=hljs-tag>&lt;<span class=hljs-name>T</span>&gt;</span>(arg: Array<span class=hljs-tag>&lt;<span class=hljs-name>T</span>&gt;</span>): Array<span class=hljs-tag>&lt;<span class=hljs-name>T</span>&gt;</span> {\n    console.log(arg.length);  // Array has a .length, so no more error\n    return arg;\n}\n</code></pre></section></section><section><h1 id=环境 data-index=15>环境</h1><section><h2 id=\"简单环境 &amp;webpack\" data-index=16>简单环境 &amp;webpack</h2><p>cnpm i -D webpack webpack-cli webpack-dev-server ts-loader typescript</p><section><h3 id=tsconfig.json data-index=17>tsconfig.json</h3><pre><code class=lang-json>{\n  <span class=hljs-string>\"compilerOptions\"</span>: {\n    <span class=hljs-comment>// 与 Vue 的浏览器支持保持一致</span>\n    <span class=hljs-string>\"target\"</span>: <span class=hljs-string>\"es5\"</span>,\n    <span class=hljs-comment>// 这可以对 `this` 上的数据属性进行更严格的推断</span>\n    <span class=hljs-string>\"strict\"</span>: <span class=hljs-literal>true</span>,\n    <span class=hljs-string>\"sourceMap\"</span>: <span class=hljs-literal>true</span>,\n    <span class=hljs-comment>// 如果使用 webpack 2+ 或 rollup，可以利用 tree-shake:</span>\n    <span class=hljs-string>\"module\"</span>: <span class=hljs-string>\"es2015\"</span>,\n    <span class=hljs-string>\"moduleResolution\"</span>: <span class=hljs-string>\"node\"</span>\n  },\n  <span class=hljs-string>\"exclude\"</span>: [\n    <span class=hljs-string>\"node_modules\"</span>\n  ]\n}\n</code></pre></section><section><h3 id=webpack.config.js data-index=18>webpack.config.js</h3><pre><code class=lang-js>mo0dule.exports = {\n  <span class=hljs-attr>mode</span>: <span class=hljs-string>\"development\"</span>,\n  <span class=hljs-attr>devtool</span>: <span class=hljs-string>\"inline-source-map\"</span>,\n  <span class=hljs-attr>entry</span>: <span class=hljs-string>\"./src/app.ts\"</span>,\n  <span class=hljs-attr>output</span>: {\n    <span class=hljs-attr>filename</span>: <span class=hljs-string>\"bundle.js\"</span>\n  },\n  <span class=hljs-attr>resolve</span>: {\n    <span class=hljs-comment>// Add `.ts` and `.tsx` as a resolvable extension.</span>\n    extensions: [<span class=hljs-string>\".ts\"</span>, <span class=hljs-string>\".tsx\"</span>, <span class=hljs-string>\".js\"</span>]\n  },\n  <span class=hljs-attr>module</span>: {\n    <span class=hljs-attr>rules</span>: [\n      <span class=hljs-comment>// all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`</span>\n      { <span class=hljs-attr>test</span>: <span class=hljs-regexp>/\\.tsx?$/</span>, <span class=hljs-attr>loader</span>: <span class=hljs-string>\"ts-loader\"</span> }\n    ]\n  }\n};\n</code></pre></section></section></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">入门</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">术语，专业词汇</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">lint 使用 TSLint</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">尖括号</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"\"></i><span class=\"txt\">接口</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">跳过属性检查</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">可索引的类型</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"hidden\"></i><span class=\"txt\">2 ---</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"\"></i><span class=\"txt\">class</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">typeof + class</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">静态成员</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">推断类型</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"\"></i><span class=\"txt\">函数</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"hidden\"></i><span class=\"txt\">this 参数 - this parameters</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">泛型</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"\"></i><span class=\"txt\">环境</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"\"></i><span class=\"txt\">简单环境 &amp;webpack</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\">tsconfig.json</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"18\"><i class=\"hidden\"></i><span class=\"txt\">webpack.config.js</span></div><div class=\"list\"></div></div></div></div></div></div>"}
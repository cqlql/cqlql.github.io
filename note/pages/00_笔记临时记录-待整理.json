{"article":"<h1 data-index=0>00学习</h1><h2 data-index=1>英语</h2><h2 data-index=2>图像算法</h2><h1 data-index=3>01待完成效果</h1><h2 data-index=4>瀑布流式有移动端底部加载封装</h2><h1 data-index=5>cmd</h1><h2 data-index=6>多窗口，命令打开 cmd</h2><p>实现打开多个cmd，并附带命令执行</p><p>关于双引号可有可没有，但意义不一样：<br>双引号可让命令完全为新弹出的命令<br>不用双引号，&amp;后面的命令为当前窗口，非新弹出的窗口</p><pre><code class=lang-cmd>start cmd /k <span class=hljs-string>\"cd/d d:\\&amp;echo xx&amp;&amp;pause&amp;&amp;ping 172.30.218.1&amp;&amp;ping 172.30.218.111\"</span>\nstart cmd /k <span class=hljs-string>\"cd/d d:\\&amp;echo xxx&amp;&amp;pause&amp;&amp;ping 192.168.91.1\"</span>\n</code></pre><p>其中 /k 表示运行结束不关闭，可改成 /c 运行结束关闭<br>如果不加start 将只能执行第一个</p><h1 data-index=7>github 博客</h1><p>居然不能把css与html放在同级目录。文件夹名不定，只要不同级即可</p><h1 data-index=8>nodejs 模块</h1><h2 data-index=9>一个简单的零配置命令行 node.js http服务器</h2><p><a href=https://github.com/indexzero/http-server>https://github.com/indexzero/http-server</a></p><h1 data-index=10>npm</h1><h2 data-index=11>通过 package.json 可执行非全局命令</h2><p>项目有安装安装即可，待测</p><h1 data-index=12>rollup</h1><h2 data-index=13>rollup 不会生成 Promise 助手解决</h2><p>Promise 需单独使用 <code>es6-promise</code></p><p>rollup babel 使用官方配置即可。不用更改</p><p>其他解析没问题</p><h2 data-index=14>rollup 使用注意</h2><p>相对当前目录写法，必须使用 ./ ，否则视为外部模块</p><h1 data-index=15>svg</h1><h2 data-index=16>viewbox</h2><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>svg</span> <span class=hljs-attr>viewbox</span>=<span class=hljs-string>\"0,0,200,200\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>svg</span>&gt;</span>\n</code></pre><h2 data-index=17>svg path 画线，是否可以不闭合</h2><p>可以不闭合</p><h1 data-index=18>vue</h1><h2 data-index=19>v-if、v-for 同时存在，v-for 先运行</h2><p>也就是说，在if不成立情况，for依然会正常运行。</p><p>下例依然会运行5次</p><pre><code class=lang-html>&lt;tbody v-<span class=hljs-keyword>if</span>=<span class=hljs-string>\"false\"</span> v-<span class=hljs-keyword>for</span>=<span class=hljs-string>\"(item,index) of 5\"</span>&gt;\n</code></pre><h2 data-index=20>table 等不能包含 template 问题</h2><p>非组件的 html 文件，也就是入口 html 文件，先是由浏览器解析，所以会过滤不支持的 html 元素。</p><p>如果是组件，组件会先于浏览器解析，将模版字符串解析成浏览器可支持的 html 文本。</p><p>所以，组件中可以包含 template，问题解决</p><pre><code class=lang-js>component:{\n    props:['data','vdata','solutionDataKey'],\n    template:`<span class=hljs-tag>&lt;<span class=hljs-name>tbody</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>template</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>\"(item,index) of vdata\"</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>tr</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>th</span> <span class=hljs-attr>:colspan</span>=<span class=hljs-string>\"data.correct_mode==='1'?'5':'4'\"</span>&gt;</span>{{item.questionDry}}<span class=hljs-tag>&lt;/<span class=hljs-name>th</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>tr</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>tr</span> <span class=hljs-attr>v-for</span>=<span class=hljs-string>\"(q,i) of item.question\"</span> <span class=hljs-attr>:data-ques.prop</span>=<span class=hljs-string>\"q\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>td</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>td</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>td</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>tr</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>tbody</span>&gt;</span>`\n</code></pre><h2 data-index=21>vuejs 组件prop 传值</h2><p>传入对象引用，会影响父实例，但不知道能不能触发改变更新，按道理应该是可以的，待测</p><h2 data-index=22>vuejs is</h2><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>tr</span> <span class=hljs-attr>is</span>=<span class=hljs-string>\"my-component\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>tr</span>&gt;</span>\n</code></pre><h2 data-index=23>触发更新：完全数据替换-对象</h2><pre><code class=lang-js><span class=hljs-comment>// 将 vm.reportData 替换成 data.report</span>\nvm.reportData = <span class=hljs-built_in>Object</span>.assign({}, vm.reportData, data.report)\n</code></pre><h2 data-index=24>? postcss scoped 问题</h2><p>id居然会跟在每个后代选择器后面</p><pre><code class=lang-css><span class=hljs-selector-class>.question-box</span><span class=hljs-selector-attr>[data-v-58e5b6b9]</span> {\n    <span class=hljs-attribute>font-size</span>: <span class=hljs-number>16px</span>;\n}\n<span class=hljs-selector-class>.question-box</span> <span class=hljs-selector-class>.ques-main</span><span class=hljs-selector-attr>[data-v-58e5b6b9]</span> {\n    <span class=hljs-attribute>padding</span>: <span class=hljs-number>10px</span> <span class=hljs-number>10px</span> <span class=hljs-number>18px</span>;\n}\n<span class=hljs-selector-class>.question-box</span> <span class=hljs-selector-class>.ques-main</span> <span class=hljs-selector-class>.stem</span><span class=hljs-selector-attr>[data-v-58e5b6b9]</span> {\n    <span class=hljs-attribute>line-height</span>: <span class=hljs-number>1.5</span>;\n    <span class=hljs-attribute>padding-bottom</span>: <span class=hljs-number>8px</span>;\n}\n<span class=hljs-selector-class>.question-box</span> <span class=hljs-selector-class>.ques-main</span> <span class=hljs-selector-class>.option</span><span class=hljs-selector-attr>[data-v-58e5b6b9]</span> {\n    <span class=hljs-attribute>padding</span>: <span class=hljs-number>8px</span> <span class=hljs-number>6px</span>;\n}\n<span class=hljs-selector-class>.question-box</span> <span class=hljs-selector-class>.ques-main</span> <span class=hljs-selector-class>.option</span> <span class=hljs-selector-class>.btn</span><span class=hljs-selector-attr>[data-v-58e5b6b9]</span> {\n    <span class=hljs-attribute>margin-right</span>: <span class=hljs-number>3px</span>;\n}\n<span class=hljs-selector-class>.question-box</span> <span class=hljs-selector-class>.ques-main</span> <span class=hljs-selector-class>.user-answer</span><span class=hljs-selector-attr>[data-v-58e5b6b9]</span>{\n    <span class=hljs-attribute>padding</span>: <span class=hljs-number>12px</span> <span class=hljs-number>0</span>;\n}\n</code></pre><h2 data-index=25>使用webpack3.0 新特性，vue 组件报错</h2><p>使用 webpack.optimize.ModuleConcatenationPlugin</p><h2 data-index=26>vue-loader + webpack，vue单文件修改后编译报错</h2><p>第一次运行没问题，监听，修改文件后，编译成功，运行却报错，坑的一比 vue 坑，找个时间转 react</p><h1 data-index=27>webpack-插件</h1><h2 data-index=28>DllPlugin &amp; DllReferencePlugin</h2><p>使用 DllPlugin 打包</p><p>通过 DllReferencePlugin 使用</p><p>打包独立模块，且不会被打进调用包，但需要通过<code>&lt;script&gt;</code>引用</p><p>只能打包dll根目录模块(但根目录模块可以调用其他，所以这一限制影响不大)，否则无法调用(也就是说只能调用根目录模块)。</p><h3 data-index=29>问题：很多重复包</h3><p>DllPlugin 打出的包无法分离各模块公用模块，至少现在不行。使用 CommonsChunkPlugin 也无果。</p><p>也许公共的再重新打包，然后嵌套使用 DllPlugin (即 DllPlugin 中 使用 DllReferencePlugin)， 可以解决。未尝试，不知是否支持嵌套。而且感觉也太复杂，项目大了也许可以考虑。</p><h3 data-index=30>想法</h3><p>是否还有种方式，部分包可实现第一次打包，以后不用再重新打包</p><h2 data-index=31>html-webpack-inline-source-plugin</h2><p>实现 inline css，当然，也支持 inline js 需结合 extract-text-webpack-plugin 使用</p><h1 data-index=32>webpack-待整理</h1><h2 data-index=33>postcss 结合 scss？</h2><pre><code class=lang-js>{\n    <span class=hljs-attribute>syntax</span>:<span class=hljs-built_in>require</span>(<span class=hljs-string>'postcss-scss'</span>)    \n}\n</code></pre><h2 data-index=34>css-loader 别名弄明白</h2><p>实验1：是否是css中@import 的别名，实验证明又不是</p><p>实验1：是否是css中图片字体路径的别名，答案不是 以为是</p><h2 data-index=35>CommonsChunkPlugin</h2><h3 data-index=36>如何打出完全独立的公共包</h3><p>完全独立指的是：页面不引入也不影响运行</p><p>解决两头打包不干净问题</p><p>通过 <code>minChunks：Infinity</code>，保证不会包含非指定模块。 但居然还是会打入很多 babel helper 模块。。。</p><p>不需要转换的es5代码模块尽量排除</p><p>一些确定的包尽量先使用rollup先进行转换</p><pre><code class=lang-js>\n<span class=hljs-selector-tag>new</span> <span class=hljs-selector-tag>webpack</span><span class=hljs-selector-class>.optimize</span><span class=hljs-selector-class>.CommonsChunkPlugin</span>({\n    <span class=hljs-attribute>name</span>: <span class=hljs-string>'common'</span>,\n    minChunks: Infinity,\n}),\n\n<span class=hljs-selector-tag>new</span> <span class=hljs-selector-tag>webpack</span><span class=hljs-selector-class>.optimize</span><span class=hljs-selector-class>.CommonsChunkPlugin</span>({\n    <span class=hljs-attribute>name</span>: <span class=hljs-string>'katex'</span>,\n    minChunks: Infinity,\n}),\n\n<span class=hljs-selector-tag>new</span> <span class=hljs-selector-tag>webpack</span><span class=hljs-selector-class>.optimize</span><span class=hljs-selector-class>.CommonsChunkPlugin</span>({\n    <span class=hljs-attribute>names</span>: <span class=hljs-string>'manifest'</span>\n\n}),\n</code></pre><h3 data-index=37>问题：使用多个 CommonsChunkPlugin 实例并不能正真公共</h3><p>发现某些页面依然会重复生成公共中的包</p><pre><code class=lang-js><span class=hljs-selector-tag>new</span> <span class=hljs-selector-tag>webpack</span><span class=hljs-selector-class>.optimize</span><span class=hljs-selector-class>.CommonsChunkPlugin</span>({\n    <span class=hljs-attribute>name</span>: <span class=hljs-string>'common'</span>,\n    minChunks: Infinity,\n}),\n<span class=hljs-selector-tag>new</span> <span class=hljs-selector-tag>webpack</span><span class=hljs-selector-class>.optimize</span><span class=hljs-selector-class>.CommonsChunkPlugin</span>({\n    <span class=hljs-attribute>name</span>: <span class=hljs-string>'katex'</span>,\n    minChunks: Infinity,\n}),\n\n<span class=hljs-selector-tag>new</span> <span class=hljs-selector-tag>webpack</span><span class=hljs-selector-class>.optimize</span><span class=hljs-selector-class>.CommonsChunkPlugin</span>({\n    <span class=hljs-attribute>name</span>: <span class=hljs-string>'manifest'</span>\n}),\n</code></pre><h2 data-index=38>source map 不使用 <code>CLI</code>，通过<code>js</code>控制</h2><h3 data-index=39>CLI</h3><pre><code>webpack --devtool source-map\n</code></pre><h3 data-index=40>js</h3><pre><code class=lang-js>{\n    <span class=hljs-attribute>devtool</span>: dev?<span class=hljs-string>'source-map'</span>:undefined,\n}\n</code></pre><h1 data-index=41>人工智能，基于浏览器</h1><p>TensorFire：基于WebGL的浏览器端高性能神经网络框架</p><p>deeplearn.js：浏览器端机器智能框架</p><h1 data-index=42>数学</h1><h2 data-index=43>饼图</h2><p>发散原理：<br>扇形越小，往周围分离相同的距离，产生的边距就会越小</p><h1 data-index=44>时间格式获取封装</h1><p>传入 Date 对象，可指定年份分隔符</p><pre><code class=lang-js><span class=hljs-string>`<span class=hljs-subst>${currDate.getFullYear()}</span>/<span class=hljs-subst>${currDate.getMonth()}</span>/<span class=hljs-subst>${currDate.getDate()}</span> <span class=hljs-subst>${currDate.getHours()}</span>:<span class=hljs-subst>${currDate.getMinutes()}</span>`</span>\n</code></pre><h1 data-index=45>正则表达式</h1><h2 data-index=46>括号用法</h2><p>分离整体</p><pre><code class=lang-js>/\\.(css|pcss)$/\n</code></pre><h1 data-index=47>统计图表 echarts</h1><h2 data-index=48>legend 显示文本自定义</h2><p>通过 formatter，<a href=\"http://gallery.echartsjs.com/editor.html?c=xrJz8cky2\">参考demo</a></p><pre><code class=lang-js><span class=hljs-selector-tag>legend</span>: {\n    <span class=hljs-attribute>orient</span>: <span class=hljs-string>'vertical'</span>,\n    x: <span class=hljs-string>'left'</span>,\n    data:[<span class=hljs-string>'直接访问'</span>,<span class=hljs-string>'邮件营销'</span>,<span class=hljs-string>'联盟广告'</span>,<span class=hljs-string>'视频广告'</span>,<span class=hljs-string>'搜索引擎'</span>],\n    formatter: function (name) {\n        console.<span class=hljs-built_in>log</span>(arguments)\n        return <span class=hljs-string>'自定义'</span> + name;\n    }\n}\n</code></pre>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">00学习</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">英语</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">图像算法</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"\"></i><span class=\"txt\">01待完成效果</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"hidden\"></i><span class=\"txt\">瀑布流式有移动端底部加载封装</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"\"></i><span class=\"txt\">cmd</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">多窗口，命令打开 cmd</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"hidden\"></i><span class=\"txt\">github 博客</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"\"></i><span class=\"txt\">nodejs 模块</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">一个简单的零配置命令行 node.js http服务器</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"\"></i><span class=\"txt\">npm</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">通过 package.json 可执行非全局命令</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"\"></i><span class=\"txt\">rollup</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"hidden\"></i><span class=\"txt\">rollup 不会生成 Promise 助手解决</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">rollup 使用注意</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"\"></i><span class=\"txt\">svg</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"hidden\"></i><span class=\"txt\">viewbox</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\">svg path 画线，是否可以不闭合</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"18\"><i class=\"\"></i><span class=\"txt\">vue</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"19\"><i class=\"hidden\"></i><span class=\"txt\">v-if、v-for 同时存在，v-for 先运行</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"20\"><i class=\"hidden\"></i><span class=\"txt\">table 等不能包含 template 问题</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"21\"><i class=\"hidden\"></i><span class=\"txt\">vuejs 组件prop 传值</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"22\"><i class=\"hidden\"></i><span class=\"txt\">vuejs  is</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"23\"><i class=\"hidden\"></i><span class=\"txt\">触发更新：完全数据替换-对象</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"24\"><i class=\"hidden\"></i><span class=\"txt\">? postcss scoped 问题</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"25\"><i class=\"hidden\"></i><span class=\"txt\">使用webpack3.0 新特性，vue 组件报错</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"26\"><i class=\"hidden\"></i><span class=\"txt\">vue-loader + webpack，vue单文件修改后编译报错</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"27\"><i class=\"\"></i><span class=\"txt\">webpack-插件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"28\"><i class=\"\"></i><span class=\"txt\">DllPlugin &amp; DllReferencePlugin</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"29\"><i class=\"hidden\"></i><span class=\"txt\">问题：很多重复包</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"30\"><i class=\"hidden\"></i><span class=\"txt\">想法</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"31\"><i class=\"hidden\"></i><span class=\"txt\">html-webpack-inline-source-plugin</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"32\"><i class=\"\"></i><span class=\"txt\">webpack-待整理</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"33\"><i class=\"hidden\"></i><span class=\"txt\">postcss 结合 scss？</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"34\"><i class=\"hidden\"></i><span class=\"txt\">css-loader 别名弄明白</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"35\"><i class=\"\"></i><span class=\"txt\">CommonsChunkPlugin</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"36\"><i class=\"hidden\"></i><span class=\"txt\">如何打出完全独立的公共包</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"37\"><i class=\"hidden\"></i><span class=\"txt\">问题：使用多个 CommonsChunkPlugin 实例并不能正真公共</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"38\"><i class=\"\"></i><span class=\"txt\">source map 不使用 <code>CLI</code>，通过<code>js</code>控制</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"39\"><i class=\"hidden\"></i><span class=\"txt\">CLI</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"40\"><i class=\"hidden\"></i><span class=\"txt\">js</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"41\"><i class=\"hidden\"></i><span class=\"txt\">人工智能，基于浏览器</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"42\"><i class=\"\"></i><span class=\"txt\">数学</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"43\"><i class=\"hidden\"></i><span class=\"txt\">饼图</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"44\"><i class=\"hidden\"></i><span class=\"txt\">时间格式获取封装</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"45\"><i class=\"\"></i><span class=\"txt\">正则表达式</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"46\"><i class=\"hidden\"></i><span class=\"txt\">括号用法</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"47\"><i class=\"\"></i><span class=\"txt\">统计图表 echarts</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"48\"><i class=\"hidden\"></i><span class=\"txt\">legend 显示文本自定义</span></div><div class=\"list\"></div></div></div></div>"}
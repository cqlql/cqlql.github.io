{"article":"<section><h1 data-index=0>fs</h1><section><h2 data-index=1>文件列表(包括文件夹)</h2><section><h3 data-index=2>原生 readdir：只能当前目录，不寻找下级</h3><pre><code class=lang-js><span class=hljs-keyword>let</span> dirList = fs.readdirSync(<span class=hljs-string>'./dir'</span>) \n<span class=hljs-comment>// 返回值示例：</span>\n<span class=hljs-comment>// [\".DS_Store\",\"Update.exe\",\"version\",\"views_resources_200_percent.pak\",\"xinput1_3.dll\"]</span>\n</code></pre></section><section><h3 data-index=3>读取指定目录下的所有文件，支持过滤</h3><p>使用 <a href=https://github.com/jergason/recursive-readdir>recursive-readdir</a>，但不会列出文件夹</p><p>需列出文件夹使用：<a href=https://github.com/bigstickcarpet/readdir-enhanced>readdir-enhanced</a></p></section></section><section><h2 data-index=4>是不是目录</h2><p>fs.statSync(path).isDirectory()</p></section><section><h2 data-index=5>读取文件 fs.readFile</h2><p>读取不存在文件会报错</p></section><section><h2 data-index=6>判断路径是否存在 fs.exists(path)</h2><p>可以是目录，也可以是包含文件的路径</p><p>对应的同步方法<code>fs.existsSync(path)</code></p></section><section><h2 data-index=7>改名(文件名，目录名)</h2><pre><code class=lang-js><span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.rename</span>(<span class=hljs-selector-tag>oldPath</span>, <span class=hljs-selector-tag>newPath</span>, <span class=hljs-selector-tag>callback</span>)\n<span class=hljs-selector-tag>fs</span><span class=hljs-selector-class>.renameSync</span>(<span class=hljs-selector-tag>oldPath</span>, <span class=hljs-selector-tag>newPath</span>)\n</code></pre><p>oldPath, newPath必须相同级数，可以完全一样，只能修改末级</p></section><section><h2 data-index=8>删除</h2><section><h3 data-index=9>标准删</h3><p>fs.unlink(path, callback)<br>fs.unlinkSync(path)</p></section><section><h3 data-index=10>递归删：第三方扩展</h3><p>删除指定目录下的所有文件和目录</p><p>使用 <a href=https://github.com/jprichardson/node-fs-extra>fs-extra</a>，或者使用 <a href=https://github.com/isaacs/rimraf>rimraf</a></p></section></section></section><section><h1 data-index=11>nodejs 端口占用</h1><p><a href=https://segmentfault.com/a/1190000004915782>Nodejs检测端口是否被占用</a></p></section><section><h1 data-index=12>path</h1><section><h2 data-index=13>路径信息</h2><pre><code class=lang-js><span class=hljs-keyword>let</span> info = path.parse(<span class=hljs-string>'./dir/index.js'</span>)\n\ninfo.ext <span class=hljs-comment>// 扩展名，如果是目录，则为空字符串</span>\n</code></pre></section></section><section><h1 data-index=14>获取本机IP</h1><pre><code class=lang-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getIPAdress</span>(<span class=hljs-params></span>)</span>{  \n    <span class=hljs-keyword>var</span> interfaces = <span class=hljs-built_in>require</span>(<span class=hljs-string>'os'</span>).networkInterfaces();  \n    <span class=hljs-keyword>for</span>(<span class=hljs-keyword>var</span> devName <span class=hljs-keyword>in</span> interfaces){  \n          <span class=hljs-keyword>var</span> iface = interfaces[devName];  \n          <span class=hljs-keyword>for</span>(<span class=hljs-keyword>var</span> i=<span class=hljs-number>0</span>;i&lt;iface.length;i++){  \n               <span class=hljs-keyword>var</span> alias = iface[i];  \n               <span class=hljs-keyword>if</span>(alias.family === <span class=hljs-string>'IPv4'</span> &amp;&amp; alias.address !== <span class=hljs-string>'127.0.0.1'</span> &amp;&amp; !alias.internal){  \n                     <span class=hljs-keyword>return</span> alias.address;  \n               }  \n          }  \n    }  \n}\n</code></pre></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">fs</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"\"></i><span class=\"txt\">文件列表(包括文件夹)</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">原生 readdir：只能当前目录，不寻找下级</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">读取指定目录下的所有文件，支持过滤</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"hidden\"></i><span class=\"txt\">是不是目录</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">读取文件 fs.readFile</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">判断路径是否存在 fs.exists(path)</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"hidden\"></i><span class=\"txt\">改名(文件名，目录名)</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"\"></i><span class=\"txt\">删除</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">标准删</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">递归删：第三方扩展</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">nodejs 端口占用</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"\"></i><span class=\"txt\">path</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"hidden\"></i><span class=\"txt\">路径信息</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">获取本机IP</span></div><div class=\"list\"></div></div>"}
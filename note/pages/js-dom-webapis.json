{"article":"<section><h1 id=\"dataset 标签数据\" data-index=0>dataset 标签数据</h1><section><h2 id=\"js 设置\" data-index=1>js 设置</h2><p>js 设置操作将直接同步到标签上。可直接通过调试工具在标签上看到</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"item\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"1\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=\"undefined\">\n    item.dataset.index=2;\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h2 id=\"js 获取\" data-index=2>js 获取</h2><pre><code class=lang-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>item</span><span class=hljs-selector-class>.dataset</span><span class=hljs-selector-class>.index</span>)\n</code></pre></section><section><h2 id=关于大小写问题 data-index=3>关于大小写问题</h2><p>只能小写获取。也就是说，标签属性名尽量小写。</p><pre><code class=lang-js>document.body = `<span class=hljs-tag>&lt;<span class=hljs-name>a</span> <span class=hljs-attr>href</span>=<span class=hljs-string>\"javascript:;\"</span>  <span class=hljs-attr>data-qNo</span>=<span class=hljs-string>\"' + qNo + '\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"' + i + '\"</span>&gt;</span>' + qNo + '1<span class=hljs-tag>&lt;/<span class=hljs-name>a</span>&gt;</span>`\n\nconsole.log(btn.dataset.qno)\n</code></pre></section></section><section><h1 id=h5拖放 data-index=4>h5拖放</h1><p>此处为临时摘抄，未整理验证完善</p><p><a href=https://developer.mozilla.org/en-US/docs/Web/Events/drag>MDN文档参考</a></p><section><h2 id=元素可拖放设置 data-index=5>元素可拖放设置</h2><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>li</span> <span class=hljs-attr>draggable</span>=<span class=hljs-string>\"true\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>img</span> <span class=hljs-attr>src</span>=<span class=hljs-string>\"1.png\"</span> <span class=hljs-attr>alt</span>=<span class=hljs-string>\"\"</span> <span class=hljs-attr>draggable</span>=<span class=hljs-string>\"false\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>小5<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n</code></pre></section><section><h2 id=相关事件： data-index=6>相关事件：</h2><p>dragenter:拖进目标<br>dragleave:拖离目标<br>dragover:<br>目标上拖动<br>只要不离开目标都将反复触发，如果拖动，将触发更快<br>drop:目标上放下</p><p>dragstart：开始拖放 dragend：拖放结束</p><p><strong>event：</strong></p><pre><code class=lang-js><span class=hljs-comment>//设置当前拖放元素的数据参数</span>\ne.dataTransfer.setData(<span class=hljs-string>'text'</span>, <span class=hljs-keyword>this</span>.innerHTML);\n\n<span class=hljs-comment>//获取当前被拖放元素的存放数据参数</span>\n <span class=hljs-keyword>var</span> text = e.dataTransfer.getData(<span class=hljs-string>'text'</span>); \n<span class=hljs-comment>//设置鼠标样式</span>\n e.dataTransfer.dropEffect = <span class=hljs-string>'move'</span>;\n</code></pre></section></section><section><h1 id=事件 data-index=7>事件</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/Events>事件类型一览表</a></p><section><h2 id=\"dispatchEvent 手动触发事件\" data-index=8>dispatchEvent 手动触发事件</h2><p>至今才知道。。。再一次证明，书看的少多可怕</p></section><section><h2 id=阻止冒泡 data-index=9>阻止冒泡</h2><pre><code class=lang-js><span class=hljs-selector-tag>e</span><span class=hljs-selector-class>.stopPropagation</span>()\n</code></pre></section><section><h2 id=阻止默认动作 data-index=10>阻止默认动作</h2><pre><code class=lang-js><span class=hljs-keyword>if</span> (e.cancelable) e.preventDefault() <span class=hljs-comment>//cancelable、preventDefault结合使用</span>\n</code></pre></section><section><h2 id=事件类型 data-index=11>事件类型</h2><section><h3 id=移入事件 data-index=12>移入事件</h3><pre><code class=lang-js><span class=hljs-comment>//1、正常的 移入移出 事件：onmouseover移入、onmouseout移出】</span>\n<span class=hljs-comment>//兼容性：all浏览器</span>\n\n<span class=hljs-comment>/* ----------------------------------------------\n * 事件中特有属性——relatedTarget属性\n *\n *获取 触发事件 后 鼠标\n* 之前所处 元素对象——onmouseover移入事件\n *当前所处 元素对象——onmouseout移出事件\n *\n * event对象的属性，只对这两个事件有效：onmouseout移出事件、onmouseover移入事件  \n*\n * 兼容性： 所有ie中 只有ie9支持。非ie浏览器没问题\n */</span>\nalert(e.relatedTarget.className);\n\n<span class=hljs-comment>/***********************************************************/</span>\n<span class=hljs-comment>//2、特殊的 移入移出 事件</span>\n<span class=hljs-comment>//【onmouseenter移入、onmouseleave移出】 </span>\n<span class=hljs-comment>//事件 根元素 及其后代 看成一个整体 来触发此事件</span>\n<span class=hljs-comment>//兼容性：所有ie，Opera支持。fox、Chrome现在已经支持了</span>\n</code></pre></section><section><h3 id=键盘输入事件 data-index=13>键盘输入事件</h3><section><h4 id=\"keypress 字符键触发\" data-index=14>keypress 字符键触发</h4><ul><li>先触发后输入</li><li>可以阻止输入触发</li></ul><p>问题：</p><ul><li>删除键，这种能改变字符串的不触发</li><li>使用中文输入法输入时也不触发</li></ul><p>是否是先触发后输入？ 兼容性如何？</p><p>不建议当做input事件触发前的监听事件：</p></section><section><h4 id=\"input 有字符输入则触发\" data-index=15>input 有字符输入则触发</h4><p>实现输入字符 后触发 改变后触发，即输入发生后触发</p><p><strong>1.Firefox、Safari、Chrome</strong> 除了input、textarea，还适用于div文本框。所有符号键 （包括删除键）</p><p>div文本框 添加元素居然不触发，手动添加文本是否也不会触发呢</p><pre><code class=lang-js>Text1.oninput = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};\n</code></pre><p><strong>2.IE</strong> 只适用于固有的input、textarea 输入框</p><p>ie6 ie7 ie8 ie10 值变动就会触发</p><p>ie9字符键触发，删除键不会触发</p><pre><code class=lang-js>Text1.onpropertychange = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};\n</code></pre><p><strong>3.Opera</strong> 没有</p></section></section><section><h3 id=\"touch 触摸事件\" data-index=16>touch 触摸事件</h3><section><h4 id=特性 data-index=17>特性</h4><p><strong>多点 touch，元素外的点也会增加 TouchList：</strong><br>touch 事件元素外增加触摸点，不会触发touch事件，但是原事件的TouchList 会多一个。</p></section></section></section><section><h2 id=设备旋转事件 data-index=18>设备旋转事件</h2><p>chrome 模拟的是旋转前触发</p><p>android 机未测</p><p>ios 11 旋转后触发，可获取真实的浏览器宽度</p><pre><code class=lang-js><span class=hljs-built_in>window</span>.addEventListener(<span class=hljs-string>\"orientationchange\"</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-comment>// screen.orientation ios 11 不支持</span>\n  <span class=hljs-built_in>document</span>.body.innerHTML = (screen.orientation.angle + <span class=hljs-string>'--'</span> + <span class=hljs-built_in>window</span>.innerWidth);\n})\n</code></pre></section><section><h2 id=\"resize 窗口变化事件\" data-index=19>resize 窗口变化事件</h2><p>ios 旋转有动画，resize是否能获取真实浏览器宽？</p><p>ios 11 可以，也就是说旋转后触发。动画前触发。动画不影响宽度获取，估计动画是假象，动画前就已经渲染完成</p><p>印象中之前某次测试的是旋转前，难道是修复了？？</p></section><section><h2 id=问题 data-index=20>问题</h2><section><h3 id=\"移动端(android) touchend 中 focus() 获焦失败\" data-index=21>移动端(android) touchend 中 focus() 获焦失败</h3><pre><code class=lang-js>el.addEventListener(<span class=hljs-string>\"touchend\"</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n  e.stopPropagation() <span class=hljs-comment>// 要让获焦成功，android 必须加这个</span>\n  ipt.focus()\n})\n</code></pre><p>android 在 touchend 后有默认动作触发，如果在 touchend 中通过 focus 使某文本框获焦，会立马失焦。ios 没此问题</p></section></section></section><section><h1 id=元素增删改查 data-index=22>元素增删改查</h1><section><h2 id=元素替换 data-index=23>元素替换</h2><section><h3 id=子节点替换 data-index=24>子节点替换</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Node/replaceChild>replaceChild 文档</a></p><section><h4 id=语法 data-index=25>语法</h4><p>replacedNode = parentNode.replaceChild(newChild, oldChild);</p><p>replacedNode 和oldChild相等。</p></section><section><h4 id=例子 data-index=26>例子</h4><pre><code class=lang-js><span class=hljs-selector-tag>elemCont</span><span class=hljs-selector-class>.replaceChild</span>(<span class=hljs-selector-tag>elzBox</span>, <span class=hljs-selector-tag>elemCont</span><span class=hljs-selector-class>.firstElementChild</span>)\n</code></pre></section><section><h4 id=兼容性 data-index=27>兼容性</h4><p>ie6+</p></section></section></section><section><h2 id=元素获取 data-index=28>元素获取</h2><section><h3 id=简单汇总 data-index=29>简单汇总</h3><pre>\ngetElementById,\ngetElementsByName,\ngetElementsByTagName\ngetElementsByClassName\nquerySelector\nquerySelectorAll\n\n其中 \nquerySelector\nquerySelectorAll\n实现模拟 css选择器。ie8(含)以上 及其他高级\n可以document直接调用，也可元素调用，元素调用则在所有后代中赛选\n\n\nhttp://www.cnblogs.com/kissdodog/archive/2012/12/25/2833213.html\n\n1、firstElementChild        第一个子元素节点\n2、lastElementChild        最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点 ie9+\n4、previousElementSibling    前一个兄弟元素节点ie9+\n5、childElementCount        子元素节点个数量\n\n</pre></section><section><h3 id=\"根据 id 取\" data-index=30>根据 id 取</h3><p>取不到情况返回 null</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"test2\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-comment>// 兼容性：all浏览器</span>\n\n<span class=hljs-comment>// 直接取。即直接通过id名获取</span>\ntest2.innerHTML = <span class=hljs-string>'hello word'</span>;\n\n<span class=hljs-comment>// 通过 document.getElementById(idname)</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"test2\"</span>) === test2) <span class=hljs-comment>// true</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h3 id=\"子元素集合 children\" data-index=31>子元素集合 children</h3><p>兼容性：所有浏览器都支持。只是ie6注释节点也被获取到了</p><p><strong>返回 HTMLCollection 对象。拥有实时特性</strong><br>元素被移走后，children值会实时改变，并不区分是否在文档中。ie6也支持此特性</p><pre><code class=lang-js><span class=hljs-comment>// 1在页面文档中的例子:</span>\n<span class=hljs-keyword>var</span> chils = <span class=hljs-built_in>document</span>.body.children;\n<span class=hljs-built_in>document</span>.body.appendChild(<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'s'</span>));<span class=hljs-comment>// 先更改</span>\ninfo.innerHTML = chils.length;<span class=hljs-comment>// 后取。依然最新</span>\n\n<span class=hljs-comment>// 2不在页面文档中的例子:</span>\n<span class=hljs-keyword>var</span> el = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'div'</span>),\n    chils = el.children;\nchils = el.children;\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> i = <span class=hljs-number>0</span>; i &lt; <span class=hljs-number>5</span>; i++) {\n    el.appendChild(<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'div'</span>));\n}\n<span class=hljs-built_in>console</span>.log(chils.length) <span class=hljs-comment>// 依然最新</span>\n</code></pre></section><section><h3 id=紧邻元素获取 data-index=32>紧邻元素获取</h3><p>其他关键字：相邻元素</p><p>上一个</p><pre><code class=lang-js>elem.previousElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.previousSibling <span class=hljs-comment>// 节点 ie6+</span>\n</code></pre><p>下一个</p><pre><code class=lang-js>elem.nextElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.nextSibling <span class=hljs-comment>// 节点 ie6+</span>\n</code></pre><p>chrome、firefox 也是支持的</p></section><section><h3 id=第一个子元素 data-index=33>第一个子元素</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode/firstElementChild>firstElementChild 文档</a></p><p>语法<br>var element = node.firstElementChild;</p><p>例子</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"foo\"</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>First  (1)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>Second (2)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>Third  (3)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-keyword>var</span> foo = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'foo'</span>);\n<span class=hljs-comment>// yields: First  (1)</span>\n<span class=hljs-built_in>console</span>.log(foo.firstElementChild.textContent);\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre><p>兼容性：ie9+</p></section><section><h3 id=事件元素 data-index=34>事件元素</h3><section><h4 id=事件根元素 data-index=35>事件根元素</h4><p>即正真拥有此事件的 对象。通过 <strong>this</strong> 获取。<br>如果要讲的更贴切一点，this获取的是执行此事件的对象</p></section><section><h4 id=当前事件元素 data-index=36>当前事件元素</h4><p>1、event.target 属性<br>兼容性：ie中 只有ie9支持，其他浏览器没问题</p><p>2、event.srcElement 属性<br>兼容性：fox 不支持。其他没问题</p></section></section><section><h3 id=实时改变特性 data-index=37>实时改变特性</h3><p><strong>原生获取的 HTMLCollection 集合对象都具有实时改变特性</strong>。<br>即转移或者删除某元素，其存在的HTMLCollection集合对象会实时改变。children 属性获取的就是 HTMLCollection 。</p><p>兼容性：包括ie6的所有</p><pre><code class=lang-js><span class=hljs-keyword>var</span> eDiv = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'test'</span>).getElementsByTagName(<span class=hljs-string>'div'</span>);\n\n<span class=hljs-built_in>console</span>.log(eDiv.length); <span class=hljs-comment>// 2</span>\n\n<span class=hljs-built_in>document</span>.body.appendChild(eDiv[<span class=hljs-number>0</span>]);\n\n<span class=hljs-built_in>console</span>.log(eDiv.length); <span class=hljs-comment>// 1</span>\n</code></pre></section><section><h3 id=\"根据元素取 document 对象\" data-index=38>根据元素取 document 对象</h3><pre><code class=lang-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.body.ownerDocument === <span class=hljs-built_in>document</span>) <span class=hljs-comment>// true</span>\n</code></pre></section><section><h3 id=一些疑虑 data-index=39>一些疑虑</h3><p>display:none 元素的获取 纯属多虑，没区别，所有浏览器都是如此</p></section></section></section><section><h1 id=坐标 data-index=40>坐标</h1><section><h2 id=元素坐标 data-index=41>元素坐标</h2><section><h3 id=相对定位元素 data-index=42>相对定位元素</h3><p>offsetLeft offsetTop</p><p>取 相对于 定位父元素</p><p>td tr 等特殊元素 可能会是参照物</p></section></section></section><section><h1 id=打印机 data-index=43>打印机</h1><p>调用打印 window.print()</p></section><section><h1 id=浏览器 data-index=44>浏览器</h1><section><h2 id=手动刷新 data-index=45>手动刷新</h2><p>之前都是 <code>location.href=&quot;&quot;</code>，其实有直接的方法</p><pre><code class=lang-js><span class=hljs-selector-tag>location</span><span class=hljs-selector-class>.reload</span>()\n</code></pre></section></section><section><h1 id=\"设备像素比 window.devicePixelRatio\" data-index=46>设备像素比 window.devicePixelRatio</h1><p>如果是2，则是 1个像素点放了1/2像素的内容。 即 2个物理分辨率 = 1个逻辑分辨率</p><p>canvas 画图模糊情况使用</p></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">dataset 标签数据</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">js 设置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"hidden\"></i><span class=\"txt\">js 获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">关于大小写问题</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"\"></i><span class=\"txt\">h5拖放</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">元素可拖放设置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"hidden\"></i><span class=\"txt\">相关事件：</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"\"></i><span class=\"txt\">事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"hidden\"></i><span class=\"txt\">dispatchEvent 手动触发事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">阻止冒泡</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"hidden\"></i><span class=\"txt\">阻止默认动作</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"\"></i><span class=\"txt\">事件类型</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"hidden\"></i><span class=\"txt\">移入事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"\"></i><span class=\"txt\">键盘输入事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">keypress 字符键触发</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"hidden\"></i><span class=\"txt\">input 有字符输入则触发</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"\"></i><span class=\"txt\">touch 触摸事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\">特性</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"18\"><i class=\"hidden\"></i><span class=\"txt\">设备旋转事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"19\"><i class=\"hidden\"></i><span class=\"txt\">resize 窗口变化事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"20\"><i class=\"\"></i><span class=\"txt\">问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"21\"><i class=\"hidden\"></i><span class=\"txt\">移动端(android) touchend 中 focus() 获焦失败</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"22\"><i class=\"\"></i><span class=\"txt\">元素增删改查</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"23\"><i class=\"\"></i><span class=\"txt\">元素替换</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"24\"><i class=\"\"></i><span class=\"txt\">子节点替换</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"25\"><i class=\"hidden\"></i><span class=\"txt\">语法</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"26\"><i class=\"hidden\"></i><span class=\"txt\">例子</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"27\"><i class=\"hidden\"></i><span class=\"txt\">兼容性</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"28\"><i class=\"\"></i><span class=\"txt\">元素获取</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"29\"><i class=\"hidden\"></i><span class=\"txt\">简单汇总</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"30\"><i class=\"hidden\"></i><span class=\"txt\">根据 id 取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"31\"><i class=\"hidden\"></i><span class=\"txt\">子元素集合 children</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"32\"><i class=\"hidden\"></i><span class=\"txt\">紧邻元素获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"33\"><i class=\"hidden\"></i><span class=\"txt\">第一个子元素</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"34\"><i class=\"\"></i><span class=\"txt\">事件元素</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"35\"><i class=\"hidden\"></i><span class=\"txt\">事件根元素</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"36\"><i class=\"hidden\"></i><span class=\"txt\">当前事件元素</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"37\"><i class=\"hidden\"></i><span class=\"txt\">实时改变特性</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"38\"><i class=\"hidden\"></i><span class=\"txt\">根据元素取 document 对象</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"39\"><i class=\"hidden\"></i><span class=\"txt\">一些疑虑</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"40\"><i class=\"\"></i><span class=\"txt\">坐标</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"41\"><i class=\"\"></i><span class=\"txt\">元素坐标</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"42\"><i class=\"hidden\"></i><span class=\"txt\">相对定位元素</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"43\"><i class=\"hidden\"></i><span class=\"txt\">打印机</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"44\"><i class=\"\"></i><span class=\"txt\">浏览器</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"45\"><i class=\"hidden\"></i><span class=\"txt\">手动刷新</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"46\"><i class=\"hidden\"></i><span class=\"txt\">设备像素比 window.devicePixelRatio</span></div><div class=\"list\"></div></div>"}
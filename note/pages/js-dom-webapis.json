{"article":"<section><h1 id=ajax data-index=0>ajax</h1><section><h2 id=问题 data-index=1>问题</h2><p>### xhr.responseType</p></section></section><section><h1 id=\"dataset 标签数据\" data-index=2>dataset 标签数据</h1><section><h2 id=\"js 设置\" data-index=3>js 设置</h2><p>js 设置操作将直接同步到标签上。可直接通过调试工具在标签上看到</p><pre><code><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"item\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"1\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=\"undefined\">\n    item.dataset.index=2;\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h2 id=\"js 获取\" data-index=4>js 获取</h2><pre><code class=lang-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>item</span><span class=hljs-selector-class>.dataset</span><span class=hljs-selector-class>.index</span>)\n</code></pre></section><section><h2 id=关于大小写问题 data-index=5>关于大小写问题</h2><p>只能小写获取。也就是说，标签属性名尽量小写。</p><pre><code class=lang-js>document.body = `<span class=hljs-tag>&lt;<span class=hljs-name>a</span> <span class=hljs-attr>href</span>=<span class=hljs-string>\"javascript:;\"</span>  <span class=hljs-attr>data-qNo</span>=<span class=hljs-string>\"' + qNo + '\"</span> <span class=hljs-attr>data-index</span>=<span class=hljs-string>\"' + i + '\"</span>&gt;</span>' + qNo + '1<span class=hljs-tag>&lt;/<span class=hljs-name>a</span>&gt;</span>`\n\nconsole.log(btn.dataset.qno)\n</code></pre></section></section><section><h1 id=\"document 对象\" data-index=6>document 对象</h1><section><h2 id=\"直接操作 title 标签值\" data-index=7>直接操作 title 标签值</h2><pre><code class=lang-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.title) <span class=hljs-comment>// 读。String 类型</span>\n\n<span class=hljs-built_in>document</span>.title = <span class=hljs-string>\"*\"</span> + <span class=hljs-built_in>document</span>.title; <span class=hljs-comment>// 设置</span>\n</code></pre><p><strong>兼容性：</strong> ie9及以上。ie6~8估计得直接取到title标签进行操作了</p></section></section><section><h1 id=FormData data-index=8>FormData</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/FormData>https://developer.mozilla.org/zh-CN/docs/Web/API/FormData</a></p><p>创建与使用</p><pre><code class=lang-js>\n<span class=hljs-comment>// 创建方案1：创建一个空的FormData对象</span>\n<span class=hljs-keyword>var</span> formdata = <span class=hljs-keyword>new</span> FormData()\n<span class=hljs-comment>// 用 append 方法增加数据</span>\nformdata.append(<span class=hljs-string>\"name\"</span>, <span class=hljs-string>\"诸葛亮\"</span>)\nformdata.append(<span class=hljs-string>\"blog\"</span>, <span class=hljs-string>\"http://www.cnblogs.com\"</span>)\nformdata.append(<span class=hljs-string>\"file\"</span>, <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'fileToUpload'</span>).files[<span class=hljs-number>0</span>]) <span class=hljs-comment>// 文件</span>\n\n<span class=hljs-comment>// 创建方案2：通过 form 元素初始创建</span>\n<span class=hljs-keyword>var</span> formobj =  <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"form\"</span>)\n<span class=hljs-keyword>var</span> formdata = <span class=hljs-keyword>new</span> FormData(formobj)\n<span class=hljs-comment>// 同样可用 append 方法</span>\nformdata.append(<span class=hljs-string>\"name\"</span>, <span class=hljs-string>\"司马懿\"</span>)\n</code></pre><p>参数1 相同，多次 append 依然有效</p></section><section><h1 id=\"h5 文件上传\" data-index=9>h5 文件上传</h1><p>兼容性：ie10+</p><pre><code class=lang-js>\n<span class=hljs-comment>// 通过 input file 获取文件</span>\n<span class=hljs-comment>// input file 可以选多个，所以返回 files</span>\n<span class=hljs-keyword>var</span> file = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'file1'</span>).files[<span class=hljs-number>0</span>];\n\n<span class=hljs-comment>// FormData 模拟表单数据</span>\n<span class=hljs-comment>// https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects</span>\nfd = <span class=hljs-keyword>new</span> FormData();\nfd.append(<span class=hljs-string>\"file\"</span>, file);\n\n<span class=hljs-comment>// 文件大小</span>\n<span class=hljs-comment>// file.size</span>\n\n<span class=hljs-comment>// 文件名</span>\n<span class=hljs-comment>// oFile.name // \"Fiddler2.7z\"</span>\n\n<span class=hljs-comment>// 文件类型</span>\n<span class=hljs-comment>// file.type</span>\n<span class=hljs-comment>// 类型过滤</span>\n<span class=hljs-keyword>var</span> fileFilter = <span class=hljs-regexp>/^(image\\/bmp|image\\/gif|image\\/jpeg|image\\/png|image\\/tiff)$/i</span>\n<span class=hljs-keyword>if</span> (!fileFilter.test(file.type)) { }\n\n<span class=hljs-comment>// ajax</span>\n<span class=hljs-keyword>var</span> xhr = <span class=hljs-keyword>new</span> XMLHttpRequest();\n<span class=hljs-comment>// 进度条</span>\nxhr.upload.addEventListener(<span class=hljs-string>'progress'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    <span class=hljs-comment>// 是否可以取到 进度数据</span>\n    <span class=hljs-keyword>if</span> (e.lengthComputable) {\n        <span class=hljs-built_in>console</span>.log(e.loaded / e.total)\n    }\n})\n<span class=hljs-comment>// 完成后触发</span>\nxhr.addEventListener(<span class=hljs-string>'load'</span>, uploadFinish)\n<span class=hljs-comment>// 错误触发</span>\nxhr.addEventListener(<span class=hljs-string>'error'</span>, uploadError)\n<span class=hljs-comment>// 终止触发</span>\nxhr.addEventListener(<span class=hljs-string>'abort'</span>, uploadAbort)\n\n<span class=hljs-comment>// 上传</span>\nxhr.open(<span class=hljs-string>'post'</span>, <span class=hljs-string>'/file'</span>)\nxhr.send(fd)\n</code></pre></section><section><h1 id=\"h5 文件系统 FileSystem API\" data-index=10>h5 文件系统 FileSystem API</h1><p>window.webkitRequestFileSystem 这个方法目前只有chrome支持</p><section><h2 id=文件读取 data-index=11>文件读取</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader>https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader</a></p><p>图片预览示例</p><pre><code class=lang-js>\n<span class=hljs-keyword>var</span> fileReader = <span class=hljs-keyword>new</span> FileReader();\n<span class=hljs-comment>// 文件读取 完后触发</span>\nfileReader.onload = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    img.src = e.target.result;\n}\n<span class=hljs-comment>// 文件读取为 DataURL，base64</span>\nfileReader.readAsDataURL(<span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'file'</span>).files[<span class=hljs-number>0</span>]);\n</code></pre></section></section><section><h1 id=\"h5 无刷新改变 url\" data-index=12>h5 无刷新改变 url</h1><pre><code class=lang-js><span class=hljs-comment>// 历史记录情况触发</span>\n<span class=hljs-built_in>window</span>.addEventListener(<span class=hljs-string>'popstate'</span>, <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>e</span>)</span>{\n  <span class=hljs-keyword>var</span> state = e.state; <span class=hljs-comment>// 参数1</span>\n  <span class=hljs-built_in>document</span>.title = e.title; <span class=hljs-comment>// 参数2</span>\n}, <span class=hljs-literal>false</span>);\n\nhistory.pushState({<span class=hljs-attr>page</span>: <span class=hljs-number>1</span>}, <span class=hljs-string>\"title 1\"</span>, <span class=hljs-string>\"?page=1\"</span>);\nhistory.pushState({<span class=hljs-attr>page</span>: <span class=hljs-number>2</span>}, <span class=hljs-string>\"title 2\"</span>, <span class=hljs-string>\"?page=2\"</span>);\nhistory.replaceState({<span class=hljs-attr>page</span>: <span class=hljs-number>3</span>}, <span class=hljs-string>\"title 3\"</span>, <span class=hljs-string>\"?page=3\"</span>);\n\n<span class=hljs-comment>// 触发 popstate 事件</span>\nhistory.back();\nhistory.back();\nhistory.go(<span class=hljs-number>2</span>);\n</code></pre></section><section><h1 id=\"h5 本地存储\" data-index=13>h5 本地存储</h1><section><h2 id=localStorage、sessionStorage data-index=14>localStorage、sessionStorage</h2><ul><li>localStorage 为永久存储</li><li>sessionStorage 为临时存储，浏览器关闭则清除</li></ul><p>跟cookies类似，只针对某域名存储，只是容量变大了，每个域名有5M。<br>只能存储字符串。</p><p>两种方式操作相同，所以只举例 localStorage 用法：</p><pre><code class=lang-js><span class=hljs-comment>// 设置</span>\nlocalStorage.setItem(<span class=hljs-string>\"b\"</span>, <span class=hljs-string>\"isaac\"</span>);<span class=hljs-comment>// 设置b为\"isaac\"</span>\n\n<span class=hljs-comment>// 取</span>\n<span class=hljs-built_in>console</span>.log(localStorage.getItem(<span class=hljs-string>\"b\"</span>));<span class=hljs-comment>// 获取b的值</span>\n\n<span class=hljs-comment>// 键值对 总个数</span>\nlocalStorage.length\n\n<span class=hljs-comment>// 取key，根据索引，在不知道key情况使用</span>\nlocalStorage.key(i)\n</code></pre><p>兼容性： ie6不支持，ie8好像支持，待测</p></section></section><section><h1 id=\"h5 页面状态 Page Visibility\" data-index=15>h5 页面状态 Page Visibility</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Page_Visibility_API>MDN 文档</a></p><p>可针对<strong>网页是否可见</strong>做必要的优化处理。</p><p>比如，从视频播放页切换到其它选项卡，或者浏览器被最小化，或者被锁屏，停止播放。</p></section><section><h1 id=h5全屏 data-index=16>h5全屏</h1><p><a href=https://developer.mozilla.org/zh-TW/docs/Web/API/Fullscreen_API>MDN 文档 - Fullscreen API</a></p><section><h2 id=执行全屏 data-index=17>执行全屏</h2><pre><code class=lang-js><span class=hljs-keyword>var</span> div1 = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'div1'</span>);\ndiv1.webkitRequestFullScreen();\n</code></pre></section><section><h2 id=取消全屏 data-index=18>取消全屏</h2><pre><code class=lang-js><span class=hljs-selector-tag>document</span><span class=hljs-selector-class>.webkitCancelFullScreen</span>();\n</code></pre></section><section><h2 id=全屏改变事件 data-index=19>全屏改变事件</h2><pre><code class=lang-js>\ndiv1.addEventListener(<span class=hljs-string>'webkitfullscreenchange'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n    div2.innerHTML = <span class=hljs-built_in>document</span>.webkitIsFullScreen;\n}, <span class=hljs-literal>true</span>);\n</code></pre></section><section><h2 id=判断是否全屏 data-index=20>判断是否全屏</h2><pre><code class=lang-js><span class=hljs-selector-tag>console</span><span class=hljs-selector-class>.log</span>(<span class=hljs-selector-tag>document</span><span class=hljs-selector-class>.webkitIsFullScreen</span>)\n</code></pre><p>返回：布尔值</p></section></section><section><h1 id=h5拖放 data-index=21>h5拖放</h1><p>此处为临时摘抄，未整理验证完善</p><p><a href=https://developer.mozilla.org/en-US/docs/Web/Events/drag>MDN文档参考</a></p><section><h2 id=元素可拖放设置 data-index=22>元素可拖放设置</h2><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>li</span> <span class=hljs-attr>draggable</span>=<span class=hljs-string>\"true\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>img</span> <span class=hljs-attr>src</span>=<span class=hljs-string>\"1.png\"</span> <span class=hljs-attr>alt</span>=<span class=hljs-string>\"\"</span> <span class=hljs-attr>draggable</span>=<span class=hljs-string>\"false\"</span>&gt;</span><span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>小5<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n</code></pre></section><section><h2 id=相关事件： data-index=23>相关事件：</h2><p>dragenter:拖进目标<br>dragleave:拖离目标<br>dragover:<br>目标上拖动<br>只要不离开目标都将反复触发，如果拖动，将触发更快<br>drop:目标上放下</p><p>dragstart：开始拖放 dragend：拖放结束</p><p><strong>event：</strong></p><pre><code class=lang-js><span class=hljs-comment>//设置当前拖放元素的数据参数</span>\ne.dataTransfer.setData(<span class=hljs-string>'text'</span>, <span class=hljs-keyword>this</span>.innerHTML);\n\n<span class=hljs-comment>//获取当前被拖放元素的存放数据参数</span>\n <span class=hljs-keyword>var</span> text = e.dataTransfer.getData(<span class=hljs-string>'text'</span>); \n<span class=hljs-comment>//设置鼠标样式</span>\n e.dataTransfer.dropEffect = <span class=hljs-string>'move'</span>;\n</code></pre></section></section><section><h1 id=\"IE 专属\" data-index=24>IE 专属</h1><section><h2 id=\"WScript 实现全屏\" data-index=25>WScript 实现全屏</h2><p>通过js触发按键命令</p><pre><code class=lang-js><span class=hljs-comment>// 触发F11键，实现全屏</span>\n(<span class=hljs-keyword>new</span> activexobject(<span class=hljs-string>\"WScript.Shell\"</span>)).sendKeys(<span class=hljs-string>\"{F11}\"</span>);\n</code></pre></section><section><h2 id=执行[注释] data-index=26>执行[注释]</h2><pre><code class=lang-js><span class=hljs-comment>/*@cc_on alert(123)@*/</span>\n\n<span class=hljs-comment>/*@cc_on 此处写点什么@*/</span>\n</code></pre></section></section><section><h1 id=\"js 操作 css\" data-index=27>js 操作 css</h1><section><h2 id=\"元素对象的 style 属性\" data-index=28>元素对象的 style 属性</h2><section><h3 id=\"传统方式操作 style\" data-index=29>传统方式操作 style</h3><section><h4 id=兼容性 data-index=30>兼容性</h4><p>包括 ie6 的所有</p></section><section><h4 id=设置 data-index=31>设置</h4><pre><code class=lang-js><span class=hljs-comment>// 比较直接的方式</span>\n<span class=hljs-comment>// 需处理减号风格。使用驼峰</span>\n<span class=hljs-comment>// 1</span>\nelem.style.color = <span class=hljs-string>'red'</span>;\n<span class=hljs-comment>// 2</span>\n<span class=hljs-keyword>var</span> style = elem.style;\nstyle.backgroundColor = <span class=hljs-string>'red'</span>;\n\n<span class=hljs-comment>// 使用 cssText</span>\n<span class=hljs-comment>// 无需处理减号</span>\n<span class=hljs-comment>// 会覆盖之前的，可使用加等</span>\nelem.style.cssText += <span class=hljs-string>'font-size:16px;'</span>;\n</code></pre></section><section><h4 id=获取 data-index=32>获取</h4><p>直接css属性、cssText</p><p>如果没有设置返回 空字符串。 设置了获取，将直接返回设置时的字符串</p></section><section><h4 id=猜想：是否可以直接赋对象？ data-index=33>猜想：是否可以直接赋对象？</h4><p>答案是不行</p><pre><code class=lang-js><span class=hljs-comment>// 错误例子</span>\nelem.style = {\n    <span class=hljs-attr>color</span>: <span class=hljs-string>'red'</span>,\n    <span class=hljs-attr>backgroundColor</span>: <span class=hljs-string>'red'</span>\n}\n</code></pre></section><section><h4 id=前缀问题 data-index=34>前缀问题</h4><pre><code><span class=hljs-selector-tag>style</span><span class=hljs-selector-class>.webkitAnimation</span>\n<span class=hljs-selector-tag>style</span><span class=hljs-selector-class>.MozAnimation</span>\n<span class=hljs-selector-tag>style</span><span class=hljs-selector-class>.msAnimation</span>\n上例中\n<span class=hljs-selector-tag>Webkit</span> 首字母大小写均可\n<span class=hljs-selector-tag>Moz</span> 首字母必须大写\n<span class=hljs-selector-tag>ms</span> 首字母必须小写\n提醒：<span class=hljs-selector-tag>css</span>语法中的属性名称是不区分大小写的，如<span class=hljs-selector-tag>-MOz-columns</span>: 3 200<span class=hljs-selector-tag>px</span>;\n</code></pre></section></section><section><h3 id=\"新方式操作 style\" data-index=35>新方式操作 style</h3><section><h4 id=\"设置 - setProperty\" data-index=36>设置 - setProperty</h4><p>无需处理减号风格</p><p>示例</p><pre><code class=lang-js>elem.style.setProperty(<span class=hljs-string>\"color\"</span>, <span class=hljs-string>\"red\"</span>, <span class=hljs-string>\"important\"</span>);\nelem.style.setProperty(<span class=hljs-string>'background-color'</span>, <span class=hljs-string>'red'</span>);\n</code></pre></section><section><h4 id=\"获取 – getPropertyValue\" data-index=37>获取 – getPropertyValue</h4><p>只能获取内联css，即 style 标签属性内的 css</p><p>没有返回 空字符串</p><pre><code class=lang-js>elem.style.getPropertyValue(<span class=hljs-string>'background-color'</span>) <span class=hljs-comment>// 'rgb(51, 51, 51)'</span>\n</code></pre></section><section><h4 id=\"删除 - removeProperty\" data-index=38>删除 - removeProperty</h4><p>有返回值，返回删除的值</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>style</span>=<span class=hljs-string>\"width:10px\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"elem\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-built_in>console</span>.log(elem.style.removeProperty(<span class=hljs-string>'width'</span>)) <span class=hljs-comment>// '10px'</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h4 id=\"判断是否使用 important 优先级 - getPropertyPriority\" data-index=39>判断是否使用 important 优先级 - getPropertyPriority</h4><p>返回值：string<br>有，返回 <code>important</code> 字符串; 没有，返回空字符串</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>style</span>=<span class=hljs-string>\"width:10px!important;height:20px\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"elem\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-built_in>console</span>.log(elem.style.getPropertyPriority(<span class=hljs-string>'width'</span>)) <span class=hljs-comment>// 'important'</span>\n  <span class=hljs-built_in>console</span>.log(elem.style.getPropertyPriority(<span class=hljs-string>'height'</span>)) <span class=hljs-comment>// ''</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h4 id=\"内联css个数 – length\" data-index=40>内联css个数 – length</h4><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>style</span>=<span class=hljs-string>\"width:10px;height:20px\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"elem\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-built_in>console</span>.log(elem.style.length) <span class=hljs-comment>// 2</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h4 id=可操作索引 data-index=41>可操作索引</h4><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>style</span>=<span class=hljs-string>\"width:10px;height:20px\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"elem\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n  <span class=hljs-built_in>console</span>.log(elem.style[<span class=hljs-number>0</span>]) <span class=hljs-comment>// 'width'</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h4 id=兼容性 data-index=42>兼容性</h4><p>ie9+、chrome、firefox<br>ie9极不稳定。iphone ios8 似乎不支持，慎用</p></section></section><section><h3 id=\"ie专属，ie6 ~ ie11\" data-index=43>ie专属，ie6 ~ ie11</h3><p>需处理减号分隔符</p><pre><code class=lang-js>el.style.setAttribute(<span class=hljs-string>'backgroundColor'</span>, <span class=hljs-string>'red'</span>);\n</code></pre><p>兼容性： 所有ie。包括ie11</p></section></section><section><h2 id=\"style 元素\" data-index=44>style 元素</h2><section><h3 id=操作 data-index=45>操作</h3><section><h4 id=\"innerHTML 方式\" data-index=46>innerHTML 方式</h4><p>支持的浏览器：ie9+、Firefox、Safari、Chrome、Opera</p><p>设置读取操作都行。</p><p>直接操作style元素的innerHTML即可。且不需要设置type特性。 当然，动态创建情况，需把style元素增加到文档中才会生效。</p><p>ie678只支持读取，设置操作将报错</p></section><section><h4 id=textContent方式 data-index=47>textContent方式</h4><p>支持的浏览器：ie9+、Firefox、Safari、Chrome、Opera</p><p>跟innerHTML一样，设置读取都行</p><p>ie678压根没这个属性</p></section><section><h4 id=\"styleElem.styleSheet.cssText IE独有方式\" data-index=48>styleElem.styleSheet.cssText IE独有方式</h4><p>解决 ie6~8 兼容问题</p><p><strong>设置</strong></p><pre><code class=lang-js>eStyle.styleSheet.cssText = <span class=hljs-string>'div{color:red}'</span>;\n</code></pre><p><strong>可读取</strong></p><p>可获取任意style标签的值</p><pre><code class=lang-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'style'</span>)[<span class=hljs-number>0</span>].styleSheet.cssText);\n</code></pre><p><strong>必须设置 type属性，否则不生效</strong><br>而且 eStyle.styleSheet 将获取到 null 值</p><pre><code class=lang-js>eStyle.setAttribute(<span class=hljs-string>\"type\"</span>, <span class=hljs-string>\"text/css\"</span>);<span class=hljs-comment>//此属性不设也生效</span>\n</code></pre><p><strong>兼容性</strong>：<br>ie6~8专用，ie9~10也支持，ie11不支持</p><p><strong>例子：</strong></p><pre><code class=lang-js><span class=hljs-keyword>var</span> eStyle = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'style'</span>);\neStyle.setAttribute(<span class=hljs-string>\"type\"</span>, <span class=hljs-string>\"text/css\"</span>);<span class=hljs-comment>// 必须设置</span>\neStyle.styleSheet.cssText = <span class=hljs-string>'#test{color:red;}'</span>;\n<span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'head'</span>)[<span class=hljs-number>0</span>].appendChild(eStyle);\n</code></pre></section><section><h4 id=兼容所有示例 data-index=49>兼容所有示例</h4><pre><code class=lang-js><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>addCssText</span> (<span class=hljs-params>txt</span>) </span>{\n  <span class=hljs-keyword>let</span> eStyle = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'style'</span>)\n\n  <span class=hljs-keyword>if</span> (<span class=hljs-string>'textContent'</span> <span class=hljs-keyword>in</span> eStyle) {\n    eStyle.textContent = txt\n    <span class=hljs-built_in>document</span>.head.appendChild(eStyle)\n  } <span class=hljs-keyword>else</span> {\n    <span class=hljs-comment>// ie678</span>\n    eStyle.setAttribute(<span class=hljs-string>'type'</span>, <span class=hljs-string>'text/css'</span>)\n    eStyle.styleSheet.cssText = txt\n    <span class=hljs-built_in>document</span>.body.appendChild(eStyle)\n  }\n}\n</code></pre></section></section><section><h3 id=动态创建注意 data-index=50>动态创建注意</h3><section><h4 id=位置 data-index=51>位置</h4><p>js创建的style元素可增加到任意位置，body，head 等都将生效，建议增加到head标签</p><p>所有浏览器都如此</p></section><section><h4 id=生效 data-index=52>生效</h4><p>需增加到文档中 所有浏览器都如此</p></section></section><section><h3 id=\"关于 jq 的 html 方法\" data-index=53>关于 jq 的 html 方法</h3><p>并非简单的 innerHTML。对 style 有特别处理，使其生效。(会将style元素插入head中的)</p></section></section><section><h2 id=全能取css值 data-index=54>全能取css值</h2><section><h3 id=\"高级 - getComputedStyle\" data-index=55>高级 - getComputedStyle</h3><p>外部样式表、内部样式表、内联样式，设置的css都能被获取到</p><section><h4 id=取对象 data-index=56>取对象</h4><pre><code class=lang-js><span class=hljs-keyword>var</span> newStyle = <span class=hljs-built_in>window</span>.getComputedStyle(eTest1);\n<span class=hljs-keyword>var</span> newStyle2 = <span class=hljs-built_in>window</span>.getComputedStyle(eTest1, <span class=hljs-literal>null</span>); <span class=hljs-comment>// 等同1</span>\n<span class=hljs-keyword>var</span> newStyle3 = <span class=hljs-built_in>window</span>.getComputedStyle(eTest1,<span class=hljs-string>'::after'</span>);<span class=hljs-comment>// 还能取到伪类css</span>\n\n<span class=hljs-comment>// 同1：</span>\n<span class=hljs-comment>// document.defaultView就是获取当前文档的 windows 对象</span>\n<span class=hljs-keyword>var</span> newStyle4 = <span class=hljs-built_in>document</span>.defaultView.getComputedStyle(eTest1);\n</code></pre></section><section><h4 id=取css值 data-index=57>取css值</h4><pre><code class=lang-js><span class=hljs-built_in>console</span>.log(newStyle.getPropertyValue(<span class=hljs-string>'background-color'</span>));<span class=hljs-comment>// 此方式支持直接 css 属性写法</span>\n<span class=hljs-built_in>console</span>.log(newStyle.backgroundColor);\n<span class=hljs-built_in>console</span>.log(newStyle[<span class=hljs-string>'background-color'</span>]); <span class=hljs-comment>// 这样也行</span>\n</code></pre></section><section><h4 id=\"读操作 尝试\" data-index=58>读操作 尝试</h4><pre><code class=lang-js><span class=hljs-comment>// 虽然提供如下属性，但会明确报错 \"read-only\" 只读</span>\nnewStyle.setProperty(<span class=hljs-string>'background-color'</span>, <span class=hljs-string>'red'</span>);\nnewStyle[<span class=hljs-string>'backgroundColor'</span>]= <span class=hljs-string>'red'</span>;\n</code></pre></section><section><h4 id=兼容性：ie9+，chrome，firefox data-index=59>兼容性：ie9+，chrome，firefox</h4></section></section><section><h3 id=\"ie6 ~ 9\" data-index=60>ie6 ~ 9</h3><section><h4 id=取操作 data-index=61>取操作</h4><pre><code class=lang-js><span class=hljs-keyword>var</span> ieStyle = eTest1.currentStyle;\n<span class=hljs-built_in>console</span>.log(ieStyle.backgroundColor); <span class=hljs-comment>// ie6 ~ 8</span>\n<span class=hljs-built_in>console</span>.log(ieStyle.getPropertyValue(<span class=hljs-string>'background-color'</span>)); <span class=hljs-comment>// 只有ie9</span>\n</code></pre></section><section><h4 id=\"写操作 尝试\" data-index=62>写操作 尝试</h4><pre><code class=lang-js><span class=hljs-comment>// 同样也报不允许错误</span>\nieStyle.backgroundColor = <span class=hljs-string>'red'</span>;\nieStyle.setProperty(<span class=hljs-string>'background-color'</span>,<span class=hljs-string>'red'</span>);\n</code></pre></section></section></section><section><h2 id=\"className 操作\" data-index=63>className 操作</h2><section><h3 id=\"直接操作 className 属性\" data-index=64>直接操作 className 属性</h3><section><h4 id=增删改查 data-index=65>增删改查</h4><pre><code class=lang-js><span class=hljs-built_in>console</span>.log(eB.className); <span class=hljs-comment>// 直接通过元素操作</span>\n</code></pre></section></section><section><h3 id=\"关于className中包含多个空格 影响\" data-index=66>关于className中包含多个空格 影响</h3><section><h4 id=\"className 属性的影响\" data-index=67>className 属性的影响</h4><p>取值影响: 不管类名中包含多少空格，取值时也会如实取过来</p><pre><code class=lang-html>&lt;div <span class=hljs-class><span class=hljs-keyword>class</span></span>=<span class=hljs-string>\"   banner-show    test   \"</span> id=<span class=hljs-string>\"fadeDemo\"</span>&gt;\n\ninfo.innerHTML = fadeDemo.className.match(<span class=hljs-regexp>/ /g</span>).length; <span class=hljs-comment>// 10</span>\n</code></pre><p>兼容性：所有</p></section><section><h4 id=对getElementsByClassName的没有影响 data-index=68>对getElementsByClassName的没有影响</h4><p>不管是</p><pre><code class=lang-html>&lt;div <span class=hljs-class><span class=hljs-keyword>class</span></span>=<span class=hljs-string>\"   banner-show    test   \"</span>&gt;\n</code></pre><p>还是</p><pre><code class=lang-js><span class=hljs-built_in>document</span>.getElementsByClassName(<span class=hljs-string>'                    banner-show'</span>)\n</code></pre><p>getElementsByClassName 都会忽略掉多余的空格，视为正常的书写，也就是程序最终视为这样：</p><pre><code class=lang-html>&lt;div <span class=hljs-class><span class=hljs-keyword>class</span></span>=<span class=hljs-string>\"banner-show test\"</span>&gt;\n</code></pre><pre><code class=lang-js><span class=hljs-built_in>document</span>.getElementsByClassName(<span class=hljs-string>'banner-show'</span>)\n</code></pre><p>兼容性：支持getElementsByClassName的浏览器都是如此</p></section></section><section><h3 id=\"操作 className 新方式 - classList\" data-index=69>操作 className 新方式 - classList</h3><p>兼容性：ie10+</p><p>判断是否包含某类名<br>一次只能判断一个类名，貌似jq的hasClass也是如此</p><pre><code class=lang-js><span class=hljs-keyword>var</span> isActive = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"mySwitch\"</span>).classList.contains(<span class=hljs-string>\"mui-active\"</span>);\n</code></pre><p>增加class</p><pre><code class=lang-js><span class=hljs-comment>//添加mui-active类，打开开关</span>\nele.classList.add(<span class=hljs-string>'mui-active'</span>);\n</code></pre><p>删除class</p><pre><code class=lang-js><span class=hljs-comment>//删除mui-active类，关闭开关</span>\nele.classList.remove(<span class=hljs-string>'mui-active'</span>);\n</code></pre><p>自动增删class</p><pre><code class=lang-js><span class=hljs-comment>//也可以直接使用toggle方法自动处理打开或关闭</span>\nele.classList.toggle(<span class=hljs-string>'mui-active'</span>);\n</code></pre></section></section></section><section><h1 id=\"URL 解析\" data-index=70>URL 解析</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Window/URL>https://developer.mozilla.org/zh-CN/docs/Web/API/Window/URL</a></p><pre><code class=lang-js><span class=hljs-keyword>new</span> <span class=hljs-built_in>window</span>.URL(<span class=hljs-string>'http://baidu.com'</span>) <span class=hljs-comment>// 返回一个与 location 差不多对象</span>\n</code></pre></section><section><h1 id=事件 data-index=71>事件</h1><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/Events>事件类型一览表</a></p><section><h2 id=\"dispatchEvent 手动触发事件\" data-index=72>dispatchEvent 手动触发事件</h2><p>至今才知道。。。再一次证明，书看的少多可怕</p></section><section><h2 id=阻止冒泡 data-index=73>阻止冒泡</h2><pre><code class=lang-js><span class=hljs-selector-tag>e</span><span class=hljs-selector-class>.stopPropagation</span>()\n</code></pre></section><section><h2 id=阻止默认动作 data-index=74>阻止默认动作</h2><pre><code class=lang-js><span class=hljs-keyword>if</span> (e.cancelable) e.preventDefault() <span class=hljs-comment>//cancelable、preventDefault结合使用</span>\n</code></pre></section><section><h2 id=事件类型 data-index=75>事件类型</h2><section><h3 id=移入事件 data-index=76>移入事件</h3><pre><code class=lang-js><span class=hljs-comment>//1、正常的 移入移出 事件：onmouseover移入、onmouseout移出】</span>\n<span class=hljs-comment>//兼容性：all浏览器</span>\n\n<span class=hljs-comment>/* ----------------------------------------------\n * 事件中特有属性——relatedTarget属性\n *\n *获取 触发事件 后 鼠标\n* 之前所处 元素对象——onmouseover移入事件\n *当前所处 元素对象——onmouseout移出事件\n *\n * event对象的属性，只对这两个事件有效：onmouseout移出事件、onmouseover移入事件  \n*\n * 兼容性： 所有ie中 只有ie9支持。非ie浏览器没问题\n */</span>\nalert(e.relatedTarget.className);\n\n<span class=hljs-comment>/***********************************************************/</span>\n<span class=hljs-comment>//2、特殊的 移入移出 事件</span>\n<span class=hljs-comment>//【onmouseenter移入、onmouseleave移出】 </span>\n<span class=hljs-comment>//事件 根元素 及其后代 看成一个整体 来触发此事件</span>\n<span class=hljs-comment>//兼容性：所有ie，Opera支持。fox、Chrome现在已经支持了</span>\n</code></pre></section><section><h3 id=键盘输入事件 data-index=77>键盘输入事件</h3><section><h4 id=\"keypress 字符键触发\" data-index=78>keypress 字符键触发</h4><ul><li>先触发后输入</li><li>可以阻止输入触发</li></ul><p>问题：</p><ul><li>删除键，这种能改变字符串的不触发</li><li>使用中文输入法输入时也不触发</li></ul><p>是否是先触发后输入？ 兼容性如何？</p><p>不建议当做input事件触发前的监听事件：</p></section><section><h4 id=\"input 有字符输入则触发\" data-index=79>input 有字符输入则触发</h4><p>实现输入字符 后触发 改变后触发，即输入发生后触发</p><p><strong>1.Firefox、Safari、Chrome</strong> 除了input、textarea，还适用于div文本框。所有符号键 （包括删除键）</p><p>div文本框 添加元素居然不触发，手动添加文本是否也不会触发呢</p><pre><code class=lang-js>Text1.oninput = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};\n</code></pre><p><strong>2.IE</strong> 只适用于固有的input、textarea 输入框</p><p>ie6 ie7 ie8 ie10 值变动就会触发</p><p>ie9字符键触发，删除键不会触发</p><pre><code class=lang-js>Text1.onpropertychange = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    alert(<span class=hljs-string>''</span>);\n    <span class=hljs-built_in>console</span>.log(<span class=hljs-number>1</span>);\n};\n</code></pre><p><strong>3.Opera</strong> 没有</p></section></section><section><h3 id=\"touch 触摸事件\" data-index=80>touch 触摸事件</h3><section><h4 id=特性 data-index=81>特性</h4><p><strong>多点 touch，元素外的点也会增加 TouchList：</strong><br>touch 事件元素外增加触摸点，不会触发touch事件，但是原事件的TouchList 会多一个。</p></section></section></section><section><h2 id=设备旋转事件 data-index=82>设备旋转事件</h2><p>chrome 模拟的是旋转前触发</p><p>android 机未测</p><p>ios 11 旋转后触发，可获取真实的浏览器宽度</p><pre><code class=lang-js><span class=hljs-built_in>window</span>.addEventListener(<span class=hljs-string>\"orientationchange\"</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params></span>) </span>{\n  <span class=hljs-comment>// screen.orientation ios 11 不支持</span>\n  <span class=hljs-built_in>document</span>.body.innerHTML = (screen.orientation.angle + <span class=hljs-string>'--'</span> + <span class=hljs-built_in>window</span>.innerWidth);\n})\n</code></pre></section><section><h2 id=\"resize 窗口变化事件\" data-index=83>resize 窗口变化事件</h2><p>ios 旋转有动画，resize是否能获取真实浏览器宽？</p><p>ios 11 可以，也就是说旋转后触发。动画前触发。动画不影响宽度获取，估计动画是假象，动画前就已经渲染完成</p><p>印象中之前某次测试的是旋转前，难道是修复了？？</p></section><section><h2 id=问题 data-index=84>问题</h2><section><h3 id=\"移动端(android) touchend 中 focus() 获焦失败\" data-index=85>移动端(android) touchend 中 focus() 获焦失败</h3><pre><code class=lang-js>el.addEventListener(<span class=hljs-string>\"touchend\"</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n  e.stopPropagation() <span class=hljs-comment>// 要让获焦成功，android 必须加这个</span>\n  ipt.focus()\n})\n</code></pre><p>android 在 touchend 后有默认动作触发，如果在 touchend 中通过 focus 使某文本框获焦，会立马失焦。ios 没此问题</p></section></section></section><section><h1 id=元素、节点 data-index=86>元素、节点</h1><section><h2 id=节点替换(适用元素) data-index=87>节点替换(适用元素)</h2><section><h3 id=子节点替换 data-index=88>子节点替换</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Node/replaceChild>replaceChild 文档</a></p><section><h4 id=语法 data-index=89>语法</h4><p>replacedNode = parentNode.replaceChild(newChild, oldChild);</p><p>replacedNode 和oldChild相等。</p></section><section><h4 id=例子 data-index=90>例子</h4><pre><code class=lang-js><span class=hljs-selector-tag>elemCont</span><span class=hljs-selector-class>.replaceChild</span>(<span class=hljs-selector-tag>elzBox</span>, <span class=hljs-selector-tag>elemCont</span><span class=hljs-selector-class>.firstElementChild</span>)\n</code></pre></section><section><h4 id=兼容性 data-index=91>兼容性</h4><p>ie6+</p></section></section></section><section><h2 id=元素获取 data-index=92>元素获取</h2><section><h3 id=简单汇总 data-index=93>简单汇总</h3><pre>\ngetElementById,\ngetElementsByName,\ngetElementsByTagName\ngetElementsByClassName\nquerySelector\nquerySelectorAll\n\n其中 \nquerySelector\nquerySelectorAll\n实现模拟 css选择器。ie8(含)以上 及其他高级\n可以document直接调用，也可元素调用，元素调用则在所有后代中赛选\n\n\nhttp://www.cnblogs.com/kissdodog/archive/2012/12/25/2833213.html\n\n1、firstElementChild        第一个子元素节点\n2、lastElementChild        最后一个子元素节点\n3、nextElementSibling        下一个兄弟元素节点 ie9+\n4、previousElementSibling    前一个兄弟元素节点ie9+\n5、childElementCount        子元素节点个数量\n\n</pre></section><section><h3 id=\"根据 id 取\" data-index=94>根据 id 取</h3><p>取不到情况返回 null</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"test2\"</span>&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-comment>// 兼容性：all浏览器</span>\n\n<span class=hljs-comment>// 直接取。即直接通过id名获取</span>\ntest2.innerHTML = <span class=hljs-string>'hello word'</span>;\n\n<span class=hljs-comment>// 通过 document.getElementById(idname)</span>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>\"test2\"</span>) === test2) <span class=hljs-comment>// true</span>\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section><section><h3 id=\"子元素集合 children\" data-index=95>子元素集合 children</h3><p>兼容性：所有浏览器都支持。只是ie6注释节点也被获取到了</p><p><strong>返回 HTMLCollection 对象。拥有实时特性</strong><br>元素被移走后，children值会实时改变，并不区分是否在文档中。ie6也支持此特性</p><pre><code class=lang-js><span class=hljs-comment>// 1在页面文档中的例子:</span>\n<span class=hljs-keyword>var</span> chils = <span class=hljs-built_in>document</span>.body.children;\n<span class=hljs-built_in>document</span>.body.appendChild(<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'s'</span>));<span class=hljs-comment>// 先更改</span>\ninfo.innerHTML = chils.length;<span class=hljs-comment>// 后取。依然最新</span>\n\n<span class=hljs-comment>// 2不在页面文档中的例子:</span>\n<span class=hljs-keyword>var</span> el = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'div'</span>),\n    chils = el.children;\nchils = el.children;\n<span class=hljs-keyword>for</span> (<span class=hljs-keyword>var</span> i = <span class=hljs-number>0</span>; i &lt; <span class=hljs-number>5</span>; i++) {\n    el.appendChild(<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'div'</span>));\n}\n<span class=hljs-built_in>console</span>.log(chils.length) <span class=hljs-comment>// 依然最新</span>\n</code></pre></section><section><h3 id=紧邻元素获取 data-index=96>紧邻元素获取</h3><p>其他关键字：相邻元素</p><p>上一个</p><pre><code class=lang-js>elem.previousElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.previousSibling <span class=hljs-comment>// 节点 ie6+</span>\n</code></pre><p>下一个</p><pre><code class=lang-js>elem.nextElementSibling <span class=hljs-comment>// 元素 ie9+</span>\nelem.nextSibling <span class=hljs-comment>// 节点 ie6+</span>\n</code></pre><p>chrome、firefox 也是支持的</p></section><section><h3 id=第一个子元素 data-index=97>第一个子元素</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode/firstElementChild>firstElementChild 文档</a></p><p>语法<br>var element = node.firstElementChild;</p><p>例子</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"foo\"</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>First  (1)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>Second (2)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>Third  (3)<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-keyword>var</span> foo = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'foo'</span>);\n<span class=hljs-comment>// yields: First  (1)</span>\n<span class=hljs-built_in>console</span>.log(foo.firstElementChild.textContent);\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre><p>兼容性：ie9+</p></section><section><h3 id=事件元素 data-index=98>事件元素</h3><section><h4 id=事件根元素 data-index=99>事件根元素</h4><p>即正真拥有此事件的 对象。通过 <strong>this</strong> 获取。<br>如果要讲的更贴切一点，this获取的是执行此事件的对象</p></section><section><h4 id=当前事件元素 data-index=100>当前事件元素</h4><p>1、event.target 属性<br>兼容性：ie中 只有ie9支持，其他浏览器没问题</p><p>2、event.srcElement 属性<br>兼容性：fox 不支持。其他没问题</p></section></section><section><h3 id=后代元素获取 data-index=101>后代元素获取</h3><section><h4 id=指定标签名的后代元素 data-index=102>指定标签名的后代元素</h4><pre><code class=lang-js><span class=hljs-keyword>var</span> objs = div2.getElementsByTagName(<span class=hljs-string>\"div\"</span>);\n</code></pre><p>返回值：HTMLCollection 集合对象</p><p>没获取任何后代情况：返回的依然是 集合对象，只是length属性为0</p></section><section><h4 id=所有后代 data-index=103>所有后代</h4><pre><code class=lang-js><span class=hljs-comment>// 1 getElementsByTagName(\"*\")</span>\n<span class=hljs-comment>// 兼容性：IE6中[注释节点]也被获取到了。其他浏览器正常</span>\n<span class=hljs-keyword>var</span> objs = elem.getElementsByTagName(<span class=hljs-string>\"*\"</span>); <span class=hljs-comment>// elem 下的后代</span>\n<span class=hljs-keyword>var</span> objs = <span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>\"*\"</span>); <span class=hljs-comment>// 所有</span>\n\n<span class=hljs-comment>// 2 </span>\n<span class=hljs-comment>// 兼容性：~ie11。其他不支持，包括edge也不支持</span>\n<span class=hljs-keyword>var</span> elems = <span class=hljs-built_in>document</span>.all <span class=hljs-comment>//  等同 document.getElementsByTagName(\"*\")</span>\n</code></pre></section><section><h4 id=\"根据 name - getElementsByName\" data-index=104>根据 name - getElementsByName</h4><pre><code class=lang-js><span class=hljs-keyword>var</span> elems = elem.getElementsByName(<span class=hljs-string>\"name1\"</span>);\n<span class=hljs-keyword>var</span> elems2 = <span class=hljs-built_in>document</span>.getElementsByName(<span class=hljs-string>\"name2\"</span>); <span class=hljs-comment>// 全范围查找</span>\n</code></pre><p>兼容性：ie6 - ie9 只有表单元素 才有 name 属性？</p></section><section><h4 id=\"根据 class - getElementsByClassName\" data-index=105>根据 class - getElementsByClassName</h4><pre><code class=lang-js><span class=hljs-comment>// 兼容性：ie9+</span>\n<span class=hljs-keyword>var</span> elems = elem.getElementsByClassName(<span class=hljs-string>'box'</span>);  <span class=hljs-comment>// 全范围查找</span>\n<span class=hljs-keyword>var</span> elems2 = <span class=hljs-built_in>document</span>.getElementsByClassName(<span class=hljs-string>'box'</span>);  <span class=hljs-comment>// 全范围查找</span>\n</code></pre><p><strong>返回值：HTMLCollection</strong><br>没获取任何后代情况，返回的依然是集合对象，只是length属性为0</p><p>兼容性：IE6中[注释节点]也能获取到，标签名为!字符。其他浏览器正常</p></section></section><section><h3 id=\"根据元素取 document 对象\" data-index=106>根据元素取 document 对象</h3><p>兼容：包括ie6的 所有</p><pre><code class=lang-js><span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.body.ownerDocument === <span class=hljs-built_in>document</span>) <span class=hljs-comment>// true</span>\n\n<span class=hljs-comment>// document 自身也有ownerDocument，不过返回null</span>\n<span class=hljs-built_in>document</span>.ownerDocument <span class=hljs-comment>// null</span>\n</code></pre></section><section><h3 id=一些疑虑 data-index=107>一些疑虑</h3><section><h4 id=\"display:none 元素的获取\" data-index=108>display:none 元素的获取</h4><p>纯属多虑，没区别，所有浏览器都是如此</p></section><section><h4 id=取元素集合，元素顺序问题 data-index=109>取元素集合，元素顺序问题</h4><p>顺序根据文档从上到下，与元素层级关系无关</p><p>测试例子</p><pre><code class=lang-html><span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"u1\"</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>1<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>3<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>2<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>1<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>div</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>ul</span> <span class=hljs-attr>class</span>=<span class=hljs-string>\"u2\"</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>1<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>4<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>3<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n        <span class=hljs-tag>&lt;<span class=hljs-name>li</span>&gt;</span>1<span class=hljs-tag>&lt;/<span class=hljs-name>li</span>&gt;</span>\n    <span class=hljs-tag>&lt;/<span class=hljs-name>ul</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-built_in>console</span>.log(<span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'li'</span>));\n<span class=hljs-built_in>console</span>.log($(<span class=hljs-string>'.u1 li'</span>).add($(<span class=hljs-string>'.u2 li'</span>)));\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre></section></section></section><section><h2 id=节点增加 data-index=110>节点增加</h2><section><h3 id=末尾追加子节点(适用元素) data-index=111>末尾追加子节点(适用元素)</h3><pre><code class=lang-js><span class=hljs-selector-tag>elem</span><span class=hljs-selector-class>.appendChild</span>(<span class=hljs-selector-tag>elem2</span>);\n</code></pre><p>兼容性：包括ie6的所有</p></section></section><section><h2 id=元素增加 data-index=112>元素增加</h2><section><h3 id=\"增加 html 文本 - insertAdjacentHTML\" data-index=113>增加 html 文本 - insertAdjacentHTML</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentHTML>文档很详细</a></p><p>element.insertAdjacentHTML(position, text);</p><pre><code class=lang-html><span class=hljs-comment>&lt;!-- beforebegin --&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>\n<span class=hljs-comment>&lt;!-- afterbegin --&gt;</span>\nfoo\n<span class=hljs-comment>&lt;!-- beforeend --&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n<span class=hljs-comment>&lt;!-- afterend --&gt;</span>\n</code></pre></section><section><h3 id=\"增加元素 - insertAdjacentElement\" data-index=114>增加元素 - insertAdjacentElement</h3><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Element/insertAdjacentElement>文档很详细</a></p><p>element.insertAdjacentElement(position, element);</p><pre><code class=lang-html><span class=hljs-comment>&lt;!-- beforebegin --&gt;</span>\n<span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>\n<span class=hljs-comment>&lt;!-- afterbegin --&gt;</span>\nfoo\n<span class=hljs-comment>&lt;!-- beforeend --&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n<span class=hljs-comment>&lt;!-- afterend --&gt;</span>\n</code></pre></section></section><section><h2 id=节点克隆/复制(适用元素) data-index=115>节点克隆/复制(适用元素)</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode>MDN 文档，很详细</a></p><p><strong>语法</strong>： <code>var dupNode = node.cloneNode(deep);</code></p><p><strong>参数</strong>：</p><ul><li><strong>deep</strong><br>是否采用深度克隆,如果为true,则该节点的所有后代节点也都会被克隆,如果为false,则只克隆该节点本身.</li></ul><p><strong>兼容性</strong>：ie5+，其他高级</p><pre><code class=lang-js><span class=hljs-keyword>var</span> eUl = <span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>\"ul\"</span>)[<span class=hljs-number>0</span>]\n<span class=hljs-keyword>var</span> dupNode = eUl.cloneNode(<span class=hljs-literal>true</span>); <span class=hljs-comment>// 进行深度克隆</span>\n<span class=hljs-built_in>document</span>.body.insertBefore(dupNode, eUl);\n</code></pre></section><section><h2 id=节点替换(适用元素) data-index=116>节点替换(适用元素)</h2><p><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Node/replaceChild>MDN 文档，很详细</a></p><p><code>replacedNode = parentNode.replaceChild(newChild, oldChild);</code></p><p><strong>参数</strong></p><ul><li><strong>newChild</strong><br>替换oldChild的元素，可以是新建的，也可以是文档中现有的</li><li><strong>oldChild</strong></li></ul><p><strong>兼容性</strong>：ie5+，其他高级</p></section><section><h2 id=识别文档中不存在元素 data-index=117>识别文档中不存在元素</h2><p>即：通过innerHTML删除的元素。或者，createElement 创建后还未加入页面中的元素</p><pre><code class=lang-js><span class=hljs-comment>// baseURI 为当前页面url</span>\n<span class=hljs-comment>// offsetParent 为定位参照元素</span>\n\n<span class=hljs-comment>// 如果不存在</span>\n\n<span class=hljs-comment>// baseURI 为空字符串</span>\nelem.baseURI <span class=hljs-comment>// ''</span>\n\n<span class=hljs-comment>// offsetParent 为 null</span>\nelem.offsetParent <span class=hljs-comment>// null</span>\n</code></pre></section><section><h2 id=元素标签文本操作 data-index=118>元素标签文本操作</h2><section><h3 id=innerText data-index=119>innerText</h3><pre><code>描述：\n取解析后的文本格式，即最终被显示的文本格式\n\n兼容性：\nie(包括edge)，chrome：\n会转换元素，但不会保留文本换行，单个或连续的多个 换行、空格都将会转为单个空格。\n就如描述说的那样，页面实际显示成什么样子，取到的文本格式就是什么样子\n（关于转换元素：比如p元素会转为换行）\nfirefox：\n42版也不支持\n</code></pre></section><section><h3 id=textContent data-index=120>textContent</h3><p>不会转换元素，但会保留文本换行，多个连续换行\\空格都会被保留<br>相当于去标签版的innerHTML</p><p>兼容性：ie678不支持</p></section><section><h3 id=innerHTML data-index=121>innerHTML</h3><p>描述：<br>按当时书写原始格式原封不动的输出来</p><p>ie678 特殊性：<br>不保留原始格式，保留带标签的解析后的文本格式。也就是本质还是innerText，只是这次保留了标签</p></section><section><h3 id=outerHTML data-index=122>outerHTML</h3><p>包含当前元素本身的html文本，格式与innerHTML一样。也具有ie678 innerHTML属性的特殊性 兼容性：包括ie6的所有</p></section><section><h3 id=总结 data-index=123>总结</h3><p>不管是innerText或innerHTML， ie678 只会返回解析后的文本。所以，无法做到与textContent 等同， 甚至没法做到与高级浏览器innerHTML等同</p></section></section><section><h2 id=元素标签属性操作 data-index=124>元素标签属性操作</h2><pre><code class=lang-js><span class=hljs-comment>/*\n * 获取方式1\n * 此种方式只能获取\n * 根据 指定属性名 获取——getAttribute方法 \n * 这里讲的获取方式是：通过 [元素节点]对象的getAttribute方法 获取\n * 兼容性：ie6部分属性依然无法获取，像class属性，即使有设置，获取的竟然是null。其他浏览器正常\n */</span>\n<span class=hljs-comment>//没有此属性情况 返回null</span>\n<span class=hljs-keyword>var</span> str = div2.getAttribute(<span class=hljs-string>\"class\"</span>);\n\n<span class=hljs-comment>//获取方式2</span>\n<span class=hljs-comment>//此种方式还可进行设置操作</span>\n<span class=hljs-comment>//通过 [元素节点]中的 [属性节点]对象的nodeValue属性 </span>\n<span class=hljs-comment>//这种获取方式的兼容性：所有浏览器兼容</span>\n</code></pre></section><section><h2 id=多个节点增加效率写法-文档碎片 data-index=125>多个节点增加效率写法-文档碎片</h2><p>可以理解为一个临时顶级元素，被加入文档时只有其中的成员才会被加入</p><p>举例 非文档碎片的 <strong>低效率写法</strong></p><pre><code class=lang-js><span class=hljs-keyword>var</span> arrText=[<span class=hljs-string>\"1\"</span>,<span class=hljs-string>\"2\"</span>,<span class=hljs-string>\"3\"</span>,<span class=hljs-string>\"4\"</span>,<span class=hljs-string>\"5\"</span>,<span class=hljs-string>\"6\"</span>,<span class=hljs-string>\"7\"</span>,<span class=hljs-string>\"8\"</span>,<span class=hljs-string>\"9\"</span>,<span class=hljs-string>\"10\"</span>];\n <span class=hljs-keyword>for</span>(<span class=hljs-keyword>var</span> i=<span class=hljs-number>0</span>;i&lt;arrText.length;i++)\n {\n    <span class=hljs-keyword>var</span> op=<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>\"P\"</span>);\n    <span class=hljs-keyword>var</span> oText=<span class=hljs-built_in>document</span>.createTextNode(arrText[i]);\n    op.appendChild(oText);\n    <span class=hljs-built_in>document</span>.body.appendChild(op);\n }\n</code></pre><p>这段代码运行良好，但问题是它调用了十次document.body.appendChild(),每次要产生一次页面刷新</p><p><strong>文档碎片写法</strong></p><pre><code class=lang-js><span class=hljs-keyword>var</span> arrText=[<span class=hljs-string>\"1\"</span>,<span class=hljs-string>\"2\"</span>,<span class=hljs-string>\"3\"</span>,<span class=hljs-string>\"4\"</span>,<span class=hljs-string>\"5\"</span>,<span class=hljs-string>\"6\"</span>,<span class=hljs-string>\"7\"</span>,<span class=hljs-string>\"8\"</span>,<span class=hljs-string>\"9\"</span>,<span class=hljs-string>\"10\"</span>];\n<span class=hljs-keyword>var</span> oFrag=<span class=hljs-built_in>document</span>.createDocumentFragment();\n\n<span class=hljs-keyword>for</span>(<span class=hljs-keyword>var</span> i=<span class=hljs-number>0</span>;i&lt;arrText.length;i++)\n{\n    <span class=hljs-keyword>var</span> op=<span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>\"P\"</span>);\n    <span class=hljs-keyword>var</span> oText=<span class=hljs-built_in>document</span>.createTextNode(arrText[i]);\n    op.appendChild(oText);\n    oFrag.appendChild(op);\n\n}\n<span class=hljs-built_in>document</span>.body.appendChild(oFrag);\n</code></pre><p><code>document.body.appendChild()</code> 仅调用了一次，这意味首只需要进行一次屏幕的刷新。<br>这里指的刷新：页面的本质发生改变，显示并没任何改变，只有在执行完代码后，显示才会有改变</p></section><section><h2 id=文本节点相关 data-index=126>文本节点相关</h2><pre><code>inserData(offset,string) 指定位置插入\nappendData(string) 追加\ndeleteData(off,count,string)  删除指定字符\nsplitData(offset) 拆分成两个节点\nsubstring(offset,count)\n</code></pre></section><section><h2 id=\"节点类型 node.nodeType\" data-index=127>节点类型 node.nodeType</h2><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td>元素节点(HTMLElement)</td><td>1</td></tr><tr><td>文本节点(Text)</td><td>3</td></tr><tr><td>注释节点(Comment)</td><td>8</td></tr><tr><td>属性节点(Attr)</td><td>2</td></tr><tr><td>文档节点(document 对象)</td><td>9</td></tr><tr><td>碎片文档节点(DocumentFragment对象)</td><td>11</td></tr></tbody></table><p>兼容性：所有浏览器</p></section><section><h2 id=\"节点名称 node.nodeName\" data-index=128>节点名称 node.nodeName</h2><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td>元素节点(HTMLElement)</td><td>就是 标签名，但是大写</td></tr><tr><td>文本节点(Text)</td><td>#text</td></tr><tr><td>注释节点(Comment)</td><td>#comment</td></tr><tr><td>属性节点(Attr)</td><td>属性名</td></tr><tr><td>文档节点(document对象)</td><td>#document</td></tr><tr><td>碎片文档节点(DocumentFragment对象)</td><td>#document-fragment</td></tr></tbody></table></section><section><h2 id=\"节点值 node.nodeValue\" data-index=129>节点值 node.nodeValue</h2><p>兼容性：所有浏览器</p><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td>元素节点、文档节点</td><td>永远返回 null</td></tr><tr><td>文本节点、注释节点</td><td>节点之间的文本值，且将去掉两头的 空格符、换行符</td></tr><tr><td>属性节点</td><td>就是属性值。同样，也将去掉两头的 空格符、换行符。而且中间的连续空格符只会保留一个，且不保留换行符号</td></tr></tbody></table></section></section><section><h1 id=元素尺寸 data-index=130>元素尺寸</h1><section><h2 id=高宽 data-index=131>高宽</h2><section><h3 id=汇总 data-index=132>汇总</h3><pre><code>1、元素窗口高宽：一般能对应 css(非auto情况) height、width 值\n不包括边框 和 滚动条\nclientHeight\nclientWidth\n包括边框\noffsetHeight\noffsetWidth\n2、内容高宽：不包括边框 和 滚动条\nscrollHeight\nscrollWidth\n</code></pre><p><strong>都是只读属性</strong></p><p><strong>有几种情况将取不到值(即值为0)：</strong></p><ol><li>样式 display 属性值 为none</li><li>对象 被动态 创建后 并没有插入html中</li><li>操作的是内联元素</li></ol></section><section><h3 id=\"clientHeight、clientWidth属性——不包括边框 和 滚动条\" data-index=133>clientHeight、clientWidth属性——不包括边框 和 滚动条</h3><p>以下 clientWH 简写指 clientHeight、clientWidth</p><section><h4 id=描述 data-index=134>描述</h4><p>不包括边框、滚动条 包括padding ，也就是从padding开始</p></section><section><h4 id=返回值：Number类型 data-index=135>返回值：Number类型</h4></section><section><h4 id=兼容性： data-index=136>兼容性：</h4><p><strong>ie6\\7有问题：</strong>ie6\\7中，如果元素的css高宽为auto时，获取到的是0。html、body元素没问题</p><p><strong>ie6\\7问题解决办法：</strong><br>需要获取元素高宽时，都是为了获取 与css高宽等价的值。可以通过下面的offset属性获取。<br>如，offsetWidth(元素实质宽)-clientLeft*2(边框一般有左右宽，所以乘2) 即可获取 css宽度，且兼容所有浏览器</p><p><strong>与 css width 关系</strong><br>一般情况下等同css 的width，以下列出两种例外</p><ol><li>设置了 box-sizing: border-box 后，此种情况下，css width 包括了 边框，js clientWH 依然不包括边框</li><li>display: none 情况，js clientWH 将固定取都0</li></ol></section></section><section><h3 id=offsetHeight、offsetWidth属性——包括边框 data-index=137>offsetHeight、offsetWidth属性——包括边框</h3><p>不包括margin，也就是从边框外边起始</p><p>返回值：Number类型</p><p>兼容性：所有浏览器。强调，ie6\\7没有上述client属性的问题</p></section><section><h3 id=scrollHeight、scrollWidth属性——内容高宽，不包括边框 data-index=138>scrollHeight、scrollWidth属性——内容高宽，不包括边框</h3><p>包括padding，即从边框内边起始</p><p>元素内容高度：元素显示高度+元素最大滚动高度(即被隐藏的高度)</p><p>overflow: hidden/auto 情况下用来获取元素内容高宽 这种情况client、offset都只能取到显示高宽</p><p>ie6不建议使用：<br>ie6虽然支持，但是很怪异，似乎跟字体大小行高都有关系。 而且如果直接在body下面执行scrollHeight，即同步文档执行，取到的值几乎等同容器高度。异步延后执行又对了，估计同步情况页面都没渲染出来吧，所以取不到</p></section></section><section><h2 id=边框宽度 data-index=139>边框宽度</h2><p>或者说是从padding到margin的距离。。。<br><strong>只能获取 左上 两边边框宽度</strong><br>clientLeft左、clientTop上</p><p><strong>只读属性</strong></p><p>有几种情况将取不到值(即值为0)：</p><ol><li>样式 display 属性值 为none</li><li>对象 被动态 创建后 并没有插入html中</li><li>操作的是内联元素</li></ol><p><strong>兼容性：</strong> 包括ie6的所有</p><p><strong>ie6\\7特殊情况：</strong><br>目标元素css高宽造成 获取的clientLeft、clientTop值有误 当目标元素的css高宽值 都为auto时，获取到的是0。 解决办法，在ie6\\7中，最好给元素的高宽设置具体值</p></section></section><section><h1 id=\"元素集合 HTMLCollection\" data-index=140>元素集合 HTMLCollection</h1><section><h2 id=实时改变特性 data-index=141>实时改变特性</h2><p><strong>原生获取的 HTMLCollection 集合对象都具有实时改变特性</strong>。<br>即转移或者删除某元素，其存在的HTMLCollection集合对象会实时改变。children 属性获取的就是 HTMLCollection 。</p><p>兼容性：包括ie6的所有</p><pre><code class=lang-js><span class=hljs-keyword>var</span> eDiv = <span class=hljs-built_in>document</span>.getElementById(<span class=hljs-string>'test'</span>).getElementsByTagName(<span class=hljs-string>'div'</span>);\n\n<span class=hljs-built_in>console</span>.log(eDiv.length); <span class=hljs-comment>// 2</span>\n\n<span class=hljs-built_in>document</span>.body.appendChild(eDiv[<span class=hljs-number>0</span>]);\n\n<span class=hljs-built_in>console</span>.log(eDiv.length); <span class=hljs-comment>// 1</span>\n</code></pre></section><section><h2 id=判断某集合是否是HTMLCollection类派生 data-index=142>判断某集合是否是HTMLCollection类派生</h2><pre><code class=lang-js><span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'div'</span>) <span class=hljs-keyword>instanceof</span> HTMLCollection;<span class=hljs-comment>// true</span>\n</code></pre></section><section><h2 id=根据name标签属性检索元素 data-index=143>根据name标签属性检索元素</h2><p>从集合中检索</p><p>HTMLCollection.prototype.namedItem(name)</p><pre><code class=lang-js><span class=hljs-keyword>var</span> elem = <span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'div'</span>).namedItem(<span class=hljs-string>'name1'</span>)\n</code></pre><p>兼容性：<br>ie全系列，包括edge，只支持表单内元素。也许是因为name属性本身就是为表单元素而生 其他高级浏览器div都支持</p></section><section><h2 id=\"根据标签名检索 - ie独有\" data-index=144>根据标签名检索 - ie独有</h2><p>返回：HTMLCollection集合</p><p>HTMLCollection.prototype.tags(tagName)</p><pre><code class=lang-js><span class=hljs-built_in>document</span>.getElementsByTagName(<span class=hljs-string>'*'</span>).tags(<span class=hljs-string>'input'</span>);\n</code></pre><p>兼容性：全系列ie支持，包括edge。其他高级均不支持</p></section></section><section><h1 id=光标操作 data-index=145>光标操作</h1><section><h2 id=富文本光标操作 data-index=146>富文本光标操作</h2><section><h3 id=将光标设置到末尾 data-index=147>将光标设置到末尾</h3><pre><code class=lang-js><span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection()\n<span class=hljs-keyword>let</span> range = <span class=hljs-built_in>document</span>.createRange()\nrange.selectNodeContents(elem)\nrange.collapse()\nselection.removeAllRanges()\nselection.addRange(range)\n</code></pre><p><strong>Microsoft Edge <code>selection.addRange</code> 必须再最后</strong><br>如下代码所示将无发获焦，其他浏览器没问题</p><pre><code class=lang-js><span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection()\n<span class=hljs-keyword>let</span> range = <span class=hljs-built_in>document</span>.createRange()\nselection.removeAllRanges()\nselection.addRange(range)\nrange.selectNodeContents(elem)\nrange.collapse()\n</code></pre></section></section></section><section><h1 id=坐标 data-index=148>坐标</h1><section><h2 id=元素坐标 data-index=149>元素坐标</h2><section><h3 id=相对定位元素 data-index=150>相对定位元素</h3><p>offsetLeft offsetTop</p><p>取 相对于 定位父元素</p><p>td tr 等特殊元素 可能会是参照物</p></section></section></section><section><h1 id=复制剪切粘帖 data-index=151>复制剪切粘帖</h1><section><h2 id=\"复制事件 copy\" data-index=152>复制事件 copy</h2><section><h3 id=ie所有(包括edge)： data-index=153>ie所有(包括edge)：</h3><ol><li>只能给页面元素绑定，比如 <code>document.documentElement.oncopy(html)</code>、<code>document.body.oncopy(body)</code>，错误方式 <code>document.oncopy</code></li><li>假如不选中文本，不会发生复制，也不会一直触发事件，大概触发一次两次的样子</li></ol></section><section><h3 id=chrome、firefox: data-index=154>chrome、firefox:</h3><ol><li>包括document.oncopy的所有方式</li><li>假如不选中文本，不会发生复制，但会一直触发事件</li></ol></section></section><section><h2 id=\"粘帖事件 paste\" data-index=155>粘帖事件 paste</h2><p>粘贴操作时触发，粘贴效果前触发。可 <code>event.preventDefault()</code> 阻止默认粘贴发生</p><section><h3 id=ie所有(包括edge)： data-index=156>ie所有(包括edge)：</h3><p>剪切板为空情况，不会触发 paste 事件。也就是说，只有真正发生粘帖后才会触发。</p><p>除 document 外，其它任意元素都能绑定，可继承</p></section><section><h3 id=firefox： data-index=157>firefox：</h3><p>即使即使剪切板为空，只要在输入元素中，都会发生</p><p>包括 document 的所有元素，可继承</p></section><section><h3 id=chrome： data-index=158>chrome：</h3><p>任何元素，包括 document。剪切板为空都行，ctrl+v 都会触发</p></section><section><h3 id=jq如何绑定： data-index=159>jq如何绑定：</h3><p>不能直接点出 paste，但可通过on，如 <code>jIn.on(&#39;paste&#39;, function () {alert(&#39;&#39;);});</code></p></section></section><section><h2 id=\"剪切事件 cut\" data-index=160>剪切事件 cut</h2></section><section><h2 id=取剪切板内容 data-index=161>取剪切板内容</h2><section><h3 id=ie6~11： data-index=162>ie6~11：</h3><p><code>window.clipboardData.getData(&#39;text&#39;)</code> 任意事件，任意地方，任意取</p></section><section><h3 id=高级，包括edge： data-index=163>高级，包括edge：</h3><p>只能在粘帖事件中取</p><pre><code class=lang-js>event.clipboardData.getData(<span class=hljs-string>'text/plain'</span>)\n\n<span class=hljs-comment>// firefox、edge不支持复制过来的html，默认会清掉格式。。。所以只支持取直接通过setData('text/html')的</span>\n<span class=hljs-comment>// 只有chrome完美支持，只要是有格式的，哪里的文本都行</span>\nevent.clipboardData.getData(<span class=hljs-string>'text/html'</span>)\n</code></pre></section></section><section><h2 id=设置剪切板 data-index=164>设置剪切板</h2><section><h3 id=随时操作剪切板的方式，复制实现 data-index=165>随时操作剪切板的方式，复制实现</h3><p>通过 <code>document.execCommand(&#39;copy&#39;)</code> 命令</p><pre><code class=lang-js>aBtn.addEventListener(<span class=hljs-string>'click'</span>, <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    getSelection().selectAllChildren(<span class=hljs-keyword>this</span>.previousSibling);\n    <span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'copy'</span>);\n});\n</code></pre></section><section><h3 id=\"只能在 复制粘贴剪切事件 操作剪切板的方式\" data-index=166>只能在 复制粘贴剪切事件 操作剪切板的方式</h3><p>高级，包括edge：</p><p>需结合e.preventDefault()使用，否则剪切板不会被替换，依然是之前的内容。</p><p>只能在copy事件中设置，由于这点限制，一般使用flash实现</p><pre><code class=lang-js>event.clipboardData.setData(<span class=hljs-string>'text/plain'</span>,<span class=hljs-string>'剪切板内容'</span>);\nevent.clipboardData.setData(<span class=hljs-string>'text/html'</span>,<span class=hljs-string>'&lt;b style=\"color:red\"&gt;剪切板内容&lt;/b&gt;'</span>);\n\n<span class=hljs-built_in>document</span>.body.oncopy = <span class=hljs-function><span class=hljs-keyword>function</span> (<span class=hljs-params>e</span>) </span>{\n    <span class=hljs-comment>//e.clipboardData.setData('text/html', '&lt;b style=\"color:red\"&gt;xxx&lt;/b&gt;');</span>\n    <span class=hljs-comment>//e.clipboardData.setData('text/plain', '&lt;b style=\"color:red\"&gt;xxx&lt;/b&gt;');</span>\n    e.clipboardData.setData(<span class=hljs-string>'text/plain'</span>, <span class=hljs-string>''</span>);\n\n    e.preventDefault();<span class=hljs-comment>// 需禁用默认copy事件</span>\n};\n</code></pre></section></section><section><h2 id=关于事件绑定注意 data-index=167>关于事件绑定注意</h2><p>在给整个页面绑定事件时，由于所有ie浏览器不支持直接document方式，推荐document.body或document.documentElement</p></section><section><h2 id=ie可能需开启权限 data-index=168>ie可能需开启权限</h2><p>internet 选项 –&gt; 安全 -&gt; 自定义级别</p></section></section><section><h1 id=打印机 data-index=169>打印机</h1><p>调用打印 window.print()</p></section><section><h1 id=浏览器 data-index=170>浏览器</h1><section><h2 id=手动刷新 data-index=171>手动刷新</h2><p>之前都是 <code>location.href=&quot;&quot;</code>，其实有直接的方法</p><pre><code class=lang-js><span class=hljs-selector-tag>location</span><span class=hljs-selector-class>.reload</span>()\n</code></pre><p>其它方式</p><pre><code class=lang-js>history.go(<span class=hljs-number>0</span>)\nlocation=location\nlocation.assign(location)\n<span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'Refresh'</span>)\n<span class=hljs-built_in>window</span>.navigate(location)\nlocation.replace(location)\n<span class=hljs-built_in>document</span>.URL=location.href\n</code></pre></section><section><h2 id=浏览器判断 data-index=172>浏览器判断</h2><p>ie专属判断 兼容性：ie6 和其它浏览器不支持</p><pre><code>isie6789 = <span class=hljs-built_in>document</span>.documentMode &amp;&amp; <span class=hljs-built_in>document</span>.documentMode &lt; <span class=hljs-number>10</span>\n\nalert(!-[<span class=hljs-number>1</span>,]) <span class=hljs-comment>// 判断是不是 ie678</span>\nalert(<span class=hljs-comment>/*@cc_on !@*/</span><span class=hljs-literal>false</span>);<span class=hljs-comment>//判断是不是ie</span>\n</code></pre><p>所有浏览器支持方式</p><pre><code><span class=hljs-selector-tag>window</span><span class=hljs-selector-class>.navigator</span><span class=hljs-selector-class>.userAgent</span>\n<span class=hljs-selector-tag>window</span><span class=hljs-selector-class>.navigator</span><span class=hljs-selector-class>.appVersion</span>\n</code></pre></section></section><section><h1 id=\"设备像素比 window.devicePixelRatio\" data-index=173>设备像素比 window.devicePixelRatio</h1><p>如果是2，则是 1个像素点放了1/2像素的内容。 即 2个物理分辨率 = 1个逻辑分辨率</p><p>canvas 画图模糊情况使用</p></section>","menu":"<div class=\"menu-item fold\"><div class=\"item\" data-index=\"0\"><i class=\"\"></i><span class=\"txt\">ajax</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"1\"><i class=\"hidden\"></i><span class=\"txt\">问题</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"2\"><i class=\"\"></i><span class=\"txt\">dataset 标签数据</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"3\"><i class=\"hidden\"></i><span class=\"txt\">js 设置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"4\"><i class=\"hidden\"></i><span class=\"txt\">js 获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"5\"><i class=\"hidden\"></i><span class=\"txt\">关于大小写问题</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"6\"><i class=\"\"></i><span class=\"txt\">document 对象</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"7\"><i class=\"hidden\"></i><span class=\"txt\">直接操作 title 标签值</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"8\"><i class=\"hidden\"></i><span class=\"txt\">FormData</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"9\"><i class=\"hidden\"></i><span class=\"txt\">h5 文件上传</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"10\"><i class=\"\"></i><span class=\"txt\">h5 文件系统 FileSystem API</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"11\"><i class=\"hidden\"></i><span class=\"txt\">文件读取</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"12\"><i class=\"hidden\"></i><span class=\"txt\">h5 无刷新改变 url</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"13\"><i class=\"\"></i><span class=\"txt\">h5 本地存储</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"14\"><i class=\"hidden\"></i><span class=\"txt\">localStorage、sessionStorage</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"15\"><i class=\"hidden\"></i><span class=\"txt\">h5 页面状态 Page Visibility</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"16\"><i class=\"\"></i><span class=\"txt\">h5全屏</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"17\"><i class=\"hidden\"></i><span class=\"txt\">执行全屏</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"18\"><i class=\"hidden\"></i><span class=\"txt\">取消全屏</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"19\"><i class=\"hidden\"></i><span class=\"txt\">全屏改变事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"20\"><i class=\"hidden\"></i><span class=\"txt\">判断是否全屏</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"21\"><i class=\"\"></i><span class=\"txt\">h5拖放</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"22\"><i class=\"hidden\"></i><span class=\"txt\">元素可拖放设置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"23\"><i class=\"hidden\"></i><span class=\"txt\">相关事件：</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"24\"><i class=\"\"></i><span class=\"txt\">IE 专属</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"25\"><i class=\"hidden\"></i><span class=\"txt\">WScript 实现全屏</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"26\"><i class=\"hidden\"></i><span class=\"txt\">执行[注释]</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"27\"><i class=\"\"></i><span class=\"txt\">js 操作 css</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"28\"><i class=\"\"></i><span class=\"txt\">元素对象的 style 属性</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"29\"><i class=\"\"></i><span class=\"txt\">传统方式操作 style</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"30\"><i class=\"hidden\"></i><span class=\"txt\">兼容性</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"31\"><i class=\"hidden\"></i><span class=\"txt\">设置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"32\"><i class=\"hidden\"></i><span class=\"txt\">获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"33\"><i class=\"hidden\"></i><span class=\"txt\">猜想：是否可以直接赋对象？</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"34\"><i class=\"hidden\"></i><span class=\"txt\">前缀问题</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"35\"><i class=\"\"></i><span class=\"txt\">新方式操作 style</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"36\"><i class=\"hidden\"></i><span class=\"txt\">设置 - setProperty</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"37\"><i class=\"hidden\"></i><span class=\"txt\">获取 – getPropertyValue</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"38\"><i class=\"hidden\"></i><span class=\"txt\">删除 - removeProperty</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"39\"><i class=\"hidden\"></i><span class=\"txt\">判断是否使用 important 优先级 - getPropertyPriority</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"40\"><i class=\"hidden\"></i><span class=\"txt\">内联css个数 – length</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"41\"><i class=\"hidden\"></i><span class=\"txt\">可操作索引</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"42\"><i class=\"hidden\"></i><span class=\"txt\">兼容性</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"43\"><i class=\"hidden\"></i><span class=\"txt\">ie专属，ie6 ~ ie11</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"44\"><i class=\"\"></i><span class=\"txt\">style 元素</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"45\"><i class=\"\"></i><span class=\"txt\">操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"46\"><i class=\"hidden\"></i><span class=\"txt\">innerHTML 方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"47\"><i class=\"hidden\"></i><span class=\"txt\">textContent方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"48\"><i class=\"hidden\"></i><span class=\"txt\">styleElem.styleSheet.cssText IE独有方式</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"49\"><i class=\"hidden\"></i><span class=\"txt\">兼容所有示例</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"50\"><i class=\"\"></i><span class=\"txt\">动态创建注意</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"51\"><i class=\"hidden\"></i><span class=\"txt\">位置</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"52\"><i class=\"hidden\"></i><span class=\"txt\">生效</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"53\"><i class=\"hidden\"></i><span class=\"txt\">关于 jq 的 html 方法</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"54\"><i class=\"\"></i><span class=\"txt\">全能取css值</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"55\"><i class=\"\"></i><span class=\"txt\">高级 - getComputedStyle</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"56\"><i class=\"hidden\"></i><span class=\"txt\">取对象</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"57\"><i class=\"hidden\"></i><span class=\"txt\">取css值</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"58\"><i class=\"hidden\"></i><span class=\"txt\">读操作 尝试</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"59\"><i class=\"hidden\"></i><span class=\"txt\">兼容性：ie9+，chrome，firefox</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"60\"><i class=\"\"></i><span class=\"txt\">ie6 ~ 9</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"61\"><i class=\"hidden\"></i><span class=\"txt\">取操作</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"62\"><i class=\"hidden\"></i><span class=\"txt\">写操作 尝试</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"63\"><i class=\"\"></i><span class=\"txt\">className 操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"64\"><i class=\"\"></i><span class=\"txt\">直接操作 className 属性</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"65\"><i class=\"hidden\"></i><span class=\"txt\">增删改查</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"66\"><i class=\"\"></i><span class=\"txt\">关于className中包含多个空格 影响</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"67\"><i class=\"hidden\"></i><span class=\"txt\">className 属性的影响</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"68\"><i class=\"hidden\"></i><span class=\"txt\">对getElementsByClassName的没有影响</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"69\"><i class=\"hidden\"></i><span class=\"txt\">操作 className 新方式 - classList</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"70\"><i class=\"hidden\"></i><span class=\"txt\">URL 解析</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"71\"><i class=\"\"></i><span class=\"txt\">事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"72\"><i class=\"hidden\"></i><span class=\"txt\">dispatchEvent 手动触发事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"73\"><i class=\"hidden\"></i><span class=\"txt\">阻止冒泡</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"74\"><i class=\"hidden\"></i><span class=\"txt\">阻止默认动作</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"75\"><i class=\"\"></i><span class=\"txt\">事件类型</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"76\"><i class=\"hidden\"></i><span class=\"txt\">移入事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"77\"><i class=\"\"></i><span class=\"txt\">键盘输入事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"78\"><i class=\"hidden\"></i><span class=\"txt\">keypress 字符键触发</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"79\"><i class=\"hidden\"></i><span class=\"txt\">input 有字符输入则触发</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"80\"><i class=\"\"></i><span class=\"txt\">touch 触摸事件</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"81\"><i class=\"hidden\"></i><span class=\"txt\">特性</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"82\"><i class=\"hidden\"></i><span class=\"txt\">设备旋转事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"83\"><i class=\"hidden\"></i><span class=\"txt\">resize 窗口变化事件</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"84\"><i class=\"\"></i><span class=\"txt\">问题</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"85\"><i class=\"hidden\"></i><span class=\"txt\">移动端(android) touchend 中 focus() 获焦失败</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"86\"><i class=\"\"></i><span class=\"txt\">元素、节点</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"87\"><i class=\"\"></i><span class=\"txt\">节点替换(适用元素)</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"88\"><i class=\"\"></i><span class=\"txt\">子节点替换</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"89\"><i class=\"hidden\"></i><span class=\"txt\">语法</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"90\"><i class=\"hidden\"></i><span class=\"txt\">例子</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"91\"><i class=\"hidden\"></i><span class=\"txt\">兼容性</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"92\"><i class=\"\"></i><span class=\"txt\">元素获取</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"93\"><i class=\"hidden\"></i><span class=\"txt\">简单汇总</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"94\"><i class=\"hidden\"></i><span class=\"txt\">根据 id 取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"95\"><i class=\"hidden\"></i><span class=\"txt\">子元素集合 children</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"96\"><i class=\"hidden\"></i><span class=\"txt\">紧邻元素获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"97\"><i class=\"hidden\"></i><span class=\"txt\">第一个子元素</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"98\"><i class=\"\"></i><span class=\"txt\">事件元素</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"99\"><i class=\"hidden\"></i><span class=\"txt\">事件根元素</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"100\"><i class=\"hidden\"></i><span class=\"txt\">当前事件元素</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"101\"><i class=\"\"></i><span class=\"txt\">后代元素获取</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"102\"><i class=\"hidden\"></i><span class=\"txt\">指定标签名的后代元素</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"103\"><i class=\"hidden\"></i><span class=\"txt\">所有后代</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"104\"><i class=\"hidden\"></i><span class=\"txt\">根据 name - getElementsByName</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"105\"><i class=\"hidden\"></i><span class=\"txt\">根据 class - getElementsByClassName</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"106\"><i class=\"hidden\"></i><span class=\"txt\">根据元素取 document 对象</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"107\"><i class=\"\"></i><span class=\"txt\">一些疑虑</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"108\"><i class=\"hidden\"></i><span class=\"txt\">display:none 元素的获取</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"109\"><i class=\"hidden\"></i><span class=\"txt\">取元素集合，元素顺序问题</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"110\"><i class=\"\"></i><span class=\"txt\">节点增加</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"111\"><i class=\"hidden\"></i><span class=\"txt\">末尾追加子节点(适用元素)</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"112\"><i class=\"\"></i><span class=\"txt\">元素增加</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"113\"><i class=\"hidden\"></i><span class=\"txt\">增加 html 文本 - insertAdjacentHTML</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"114\"><i class=\"hidden\"></i><span class=\"txt\">增加元素 - insertAdjacentElement</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"115\"><i class=\"hidden\"></i><span class=\"txt\">节点克隆/复制(适用元素)</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"116\"><i class=\"hidden\"></i><span class=\"txt\">节点替换(适用元素)</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"117\"><i class=\"hidden\"></i><span class=\"txt\">识别文档中不存在元素</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"118\"><i class=\"\"></i><span class=\"txt\">元素标签文本操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"119\"><i class=\"hidden\"></i><span class=\"txt\">innerText</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"120\"><i class=\"hidden\"></i><span class=\"txt\">textContent</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"121\"><i class=\"hidden\"></i><span class=\"txt\">innerHTML</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"122\"><i class=\"hidden\"></i><span class=\"txt\">outerHTML</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"123\"><i class=\"hidden\"></i><span class=\"txt\">总结</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"124\"><i class=\"hidden\"></i><span class=\"txt\">元素标签属性操作</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"125\"><i class=\"hidden\"></i><span class=\"txt\">多个节点增加效率写法-文档碎片</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"126\"><i class=\"hidden\"></i><span class=\"txt\">文本节点相关</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"127\"><i class=\"hidden\"></i><span class=\"txt\">节点类型 node.nodeType</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"128\"><i class=\"hidden\"></i><span class=\"txt\">节点名称 node.nodeName</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"129\"><i class=\"hidden\"></i><span class=\"txt\">节点值 node.nodeValue</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"130\"><i class=\"\"></i><span class=\"txt\">元素尺寸</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"131\"><i class=\"\"></i><span class=\"txt\">高宽</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"132\"><i class=\"hidden\"></i><span class=\"txt\">汇总</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"133\"><i class=\"\"></i><span class=\"txt\">clientHeight、clientWidth属性——不包括边框 和 滚动条</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"134\"><i class=\"hidden\"></i><span class=\"txt\">描述</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"135\"><i class=\"hidden\"></i><span class=\"txt\">返回值：Number类型</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"136\"><i class=\"hidden\"></i><span class=\"txt\">兼容性：</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"137\"><i class=\"hidden\"></i><span class=\"txt\">offsetHeight、offsetWidth属性——包括边框</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"138\"><i class=\"hidden\"></i><span class=\"txt\">scrollHeight、scrollWidth属性——内容高宽，不包括边框</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"139\"><i class=\"hidden\"></i><span class=\"txt\">边框宽度</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"140\"><i class=\"\"></i><span class=\"txt\">元素集合 HTMLCollection</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"141\"><i class=\"hidden\"></i><span class=\"txt\">实时改变特性</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"142\"><i class=\"hidden\"></i><span class=\"txt\">判断某集合是否是HTMLCollection类派生</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"143\"><i class=\"hidden\"></i><span class=\"txt\">根据name标签属性检索元素</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"144\"><i class=\"hidden\"></i><span class=\"txt\">根据标签名检索 - ie独有</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"145\"><i class=\"\"></i><span class=\"txt\">光标操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"146\"><i class=\"\"></i><span class=\"txt\">富文本光标操作</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"147\"><i class=\"hidden\"></i><span class=\"txt\">将光标设置到末尾</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"148\"><i class=\"\"></i><span class=\"txt\">坐标</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"149\"><i class=\"\"></i><span class=\"txt\">元素坐标</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"150\"><i class=\"hidden\"></i><span class=\"txt\">相对定位元素</span></div><div class=\"list\"></div></div></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"151\"><i class=\"\"></i><span class=\"txt\">复制剪切粘帖</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"152\"><i class=\"\"></i><span class=\"txt\">复制事件 copy</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"153\"><i class=\"hidden\"></i><span class=\"txt\">ie所有(包括edge)：</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"154\"><i class=\"hidden\"></i><span class=\"txt\">chrome、firefox:</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"155\"><i class=\"\"></i><span class=\"txt\">粘帖事件 paste</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"156\"><i class=\"hidden\"></i><span class=\"txt\">ie所有(包括edge)：</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"157\"><i class=\"hidden\"></i><span class=\"txt\">firefox：</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"158\"><i class=\"hidden\"></i><span class=\"txt\">chrome：</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"159\"><i class=\"hidden\"></i><span class=\"txt\">jq如何绑定：</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"160\"><i class=\"hidden\"></i><span class=\"txt\">剪切事件 cut</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"161\"><i class=\"\"></i><span class=\"txt\">取剪切板内容</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"162\"><i class=\"hidden\"></i><span class=\"txt\">ie6~11：</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"163\"><i class=\"hidden\"></i><span class=\"txt\">高级，包括edge：</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"164\"><i class=\"\"></i><span class=\"txt\">设置剪切板</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"165\"><i class=\"hidden\"></i><span class=\"txt\">随时操作剪切板的方式，复制实现</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"166\"><i class=\"hidden\"></i><span class=\"txt\">只能在 复制粘贴剪切事件 操作剪切板的方式</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"167\"><i class=\"hidden\"></i><span class=\"txt\">关于事件绑定注意</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"168\"><i class=\"hidden\"></i><span class=\"txt\">ie可能需开启权限</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"169\"><i class=\"hidden\"></i><span class=\"txt\">打印机</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"170\"><i class=\"\"></i><span class=\"txt\">浏览器</span></div><div class=\"list\"><div class=\"menu-item fold\"><div class=\"item\" data-index=\"171\"><i class=\"hidden\"></i><span class=\"txt\">手动刷新</span></div><div class=\"list\"></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"172\"><i class=\"hidden\"></i><span class=\"txt\">浏览器判断</span></div><div class=\"list\"></div></div></div></div><div class=\"menu-item fold\"><div class=\"item\" data-index=\"173\"><i class=\"hidden\"></i><span class=\"txt\">设备像素比 window.devicePixelRatio</span></div><div class=\"list\"></div></div>"}